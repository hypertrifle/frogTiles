#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_phoenix_Matrix
#include <phoenix/Matrix.h>
#endif
#ifndef INCLUDED_phoenix_Quaternion
#include <phoenix/Quaternion.h>
#endif
#ifndef INCLUDED_phoenix_Vector
#include <phoenix/Vector.h>
#endif
namespace phoenix{

Void Quaternion_obj::__construct(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y,hx::Null< Float >  __o__z,hx::Null< Float >  __o__w)
{
HX_STACK_FRAME("phoenix.Quaternion","new",0x41d5772f,"phoenix.Quaternion.new","phoenix/Quaternion.hx",7,0x23671680)
HX_STACK_THIS(this)
HX_STACK_ARG(__o__x,"_x")
HX_STACK_ARG(__o__y,"_y")
HX_STACK_ARG(__o__z,"_z")
HX_STACK_ARG(__o__w,"_w")
Float _x = __o__x.Default(0);
Float _y = __o__y.Default(0);
Float _z = __o__z.Default(0);
Float _w = __o__w.Default(1);
{
	HX_STACK_LINE(448)
	this->ignore_euler = false;
	HX_STACK_LINE(23)
	this->_construct = false;
	HX_STACK_LINE(16)
	this->ignore_listeners = false;
	HX_STACK_LINE(12)
	this->w = ((Float)0.0);
	HX_STACK_LINE(11)
	this->z = ((Float)0.0);
	HX_STACK_LINE(10)
	this->y = ((Float)0.0);
	HX_STACK_LINE(9)
	this->x = ((Float)0.0);
	HX_STACK_LINE(27)
	this->_construct = true;
	HX_STACK_LINE(29)
	{
		HX_STACK_LINE(29)
		this->x = _x;
		HX_STACK_LINE(29)
		bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(29)
		if ((tmp)){
			HX_STACK_LINE(29)
			this->x;
		}
		else{
			HX_STACK_LINE(29)
			{
				HX_STACK_LINE(29)
				::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(29)
				bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(29)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(29)
				bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(29)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(29)
				if ((tmp4)){
					HX_STACK_LINE(29)
					tmp5 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(29)
					tmp5 = true;
				}
				HX_STACK_LINE(29)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(29)
				bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(29)
				if ((tmp6)){
					HX_STACK_LINE(29)
					tmp7 = this->_construct;
				}
				else{
					HX_STACK_LINE(29)
					tmp7 = true;
				}
				HX_STACK_LINE(29)
				if ((tmp7)){
					HX_STACK_LINE(29)
					Dynamic();
				}
				else{
					HX_STACK_LINE(29)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(29)
					::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(29)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(29)
					Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(29)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(29)
					Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(29)
					Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(29)
					Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(29)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(29)
					Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(29)
					Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(29)
					Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(29)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(29)
					Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(29)
					Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(29)
					Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(29)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(29)
					Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(29)
					Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(29)
					Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
					HX_STACK_LINE(29)
					Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
					HX_STACK_LINE(29)
					Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
					HX_STACK_LINE(29)
					bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(29)
					if ((tmp21)){
						HX_STACK_LINE(29)
						Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(29)
						Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(29)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(29)
						Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(29)
						Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(29)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(29)
						Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(29)
						Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(29)
						Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(29)
						Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(29)
						Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(29)
						Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(29)
						Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(29)
						Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(29)
						_x1 = tmp35;
						HX_STACK_LINE(29)
						Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(29)
						{
							HX_STACK_LINE(29)
							Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(29)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(29)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(29)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(29)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(29)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(29)
							Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(29)
							Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(29)
							Float value = tmp44;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(29)
							bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(29)
							if ((tmp45)){
								HX_STACK_LINE(29)
								tmp36 = (int)-1;
							}
							else{
								HX_STACK_LINE(29)
								bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(29)
								if ((tmp46)){
									HX_STACK_LINE(29)
									tmp36 = (int)1;
								}
								else{
									HX_STACK_LINE(29)
									tmp36 = value;
								}
							}
						}
						HX_STACK_LINE(29)
						Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(29)
						_y1 = tmp37;
						HX_STACK_LINE(29)
						Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(29)
						Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(29)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(29)
						Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(29)
						Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(29)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(29)
						Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(29)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(29)
						Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(29)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(29)
						Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(29)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(29)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(29)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(29)
						_z1 = tmp51;
					}
					else{
						HX_STACK_LINE(29)
						bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(29)
						if ((tmp22)){
							HX_STACK_LINE(29)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(29)
							{
								HX_STACK_LINE(29)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(29)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(29)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(29)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(29)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(29)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(29)
								Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(29)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(29)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(29)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(29)
								if ((tmp32)){
									HX_STACK_LINE(29)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(29)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(29)
									if ((tmp33)){
										HX_STACK_LINE(29)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(29)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(29)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(29)
							_x1 = tmp24;
							HX_STACK_LINE(29)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(29)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(29)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(29)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(29)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(29)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(29)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(29)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(29)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(29)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(29)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(29)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(29)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(29)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(29)
							_y1 = tmp38;
							HX_STACK_LINE(29)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(29)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(29)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(29)
							Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(29)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(29)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(29)
							Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(29)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(29)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(29)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(29)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(29)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(29)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(29)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(29)
							_z1 = tmp52;
						}
						else{
							HX_STACK_LINE(29)
							bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(29)
							if ((tmp23)){
								HX_STACK_LINE(29)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(29)
								{
									HX_STACK_LINE(29)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(29)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(29)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(29)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(29)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(29)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(29)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(29)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(29)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(29)
									if ((tmp33)){
										HX_STACK_LINE(29)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(29)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(29)
										if ((tmp34)){
											HX_STACK_LINE(29)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(29)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(29)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(29)
								_x1 = tmp25;
								HX_STACK_LINE(29)
								Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(29)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(29)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(29)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(29)
								Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(29)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(29)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(29)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(29)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(29)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(29)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(29)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(29)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(29)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(29)
								_y1 = tmp39;
								HX_STACK_LINE(29)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(29)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(29)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(29)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(29)
								Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(29)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(29)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(29)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(29)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(29)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(29)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(29)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(29)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(29)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(29)
								_z1 = tmp53;
							}
							else{
								HX_STACK_LINE(29)
								bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(29)
								if ((tmp24)){
									HX_STACK_LINE(29)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(29)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(29)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(29)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(29)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(29)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(29)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(29)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(29)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(29)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(29)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(29)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(29)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(29)
									_x1 = tmp38;
									HX_STACK_LINE(29)
									Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(29)
									{
										HX_STACK_LINE(29)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(29)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(29)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(29)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(29)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(29)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(29)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(29)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(29)
										Float value = tmp47;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(29)
										bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(29)
										if ((tmp48)){
											HX_STACK_LINE(29)
											tmp39 = (int)-1;
										}
										else{
											HX_STACK_LINE(29)
											bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(29)
											if ((tmp49)){
												HX_STACK_LINE(29)
												tmp39 = (int)1;
											}
											else{
												HX_STACK_LINE(29)
												tmp39 = value;
											}
										}
									}
									HX_STACK_LINE(29)
									Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(29)
									_y1 = tmp40;
									HX_STACK_LINE(29)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(29)
									Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(29)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(29)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(29)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(29)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(29)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(29)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(29)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(29)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(29)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(29)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(29)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(29)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(29)
									_z1 = tmp54;
								}
								else{
									HX_STACK_LINE(29)
									bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									if ((tmp25)){
										HX_STACK_LINE(29)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(29)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(29)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(29)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(29)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(29)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(29)
										Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(29)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(29)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(29)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(29)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(29)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(29)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(29)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(29)
										_x1 = tmp39;
										HX_STACK_LINE(29)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(29)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(29)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(29)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(29)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(29)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(29)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(29)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(29)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(29)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(29)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(29)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(29)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(29)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(29)
										_y1 = tmp53;
										HX_STACK_LINE(29)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(29)
										{
											HX_STACK_LINE(29)
											Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(29)
											Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(29)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(29)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(29)
											Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(29)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(29)
											Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(29)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(29)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(29)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(29)
											if ((tmp63)){
												HX_STACK_LINE(29)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(29)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(29)
												if ((tmp64)){
													HX_STACK_LINE(29)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(29)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(29)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(29)
										_z1 = tmp55;
									}
									else{
										HX_STACK_LINE(29)
										bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(29)
										if ((tmp26)){
											HX_STACK_LINE(29)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(29)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(29)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(29)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(29)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(29)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(29)
											Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(29)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(29)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(29)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(29)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(29)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(29)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(29)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(29)
											_x1 = tmp40;
											HX_STACK_LINE(29)
											Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(29)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(29)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(29)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(29)
											Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(29)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(29)
											Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(29)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(29)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(29)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(29)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(29)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(29)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(29)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(29)
											_y1 = tmp54;
											HX_STACK_LINE(29)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(29)
											{
												HX_STACK_LINE(29)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(29)
												Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(29)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(29)
												Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(29)
												Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(29)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(29)
												Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(29)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(29)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(29)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(29)
												if ((tmp64)){
													HX_STACK_LINE(29)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(29)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(29)
													if ((tmp65)){
														HX_STACK_LINE(29)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(29)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(29)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(29)
											_z1 = tmp56;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(29)
					{
						HX_STACK_LINE(29)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(29)
						_this->ignore_listeners = true;
						HX_STACK_LINE(29)
						{
							HX_STACK_LINE(29)
							_this->x = _x1;
							HX_STACK_LINE(29)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(29)
							if ((tmp22)){
								HX_STACK_LINE(29)
								_this->x;
							}
							else{
								HX_STACK_LINE(29)
								bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(29)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(29)
								if ((tmp23)){
									HX_STACK_LINE(29)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(29)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(29)
									tmp24 = false;
								}
								HX_STACK_LINE(29)
								if ((tmp24)){
									HX_STACK_LINE(29)
									Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									_this->listen_x(tmp25);
								}
								HX_STACK_LINE(29)
								_this->x;
							}
						}
						HX_STACK_LINE(29)
						{
							HX_STACK_LINE(29)
							_this->y = _y1;
							HX_STACK_LINE(29)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(29)
							if ((tmp22)){
								HX_STACK_LINE(29)
								_this->y;
							}
							else{
								HX_STACK_LINE(29)
								bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(29)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(29)
								if ((tmp23)){
									HX_STACK_LINE(29)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(29)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(29)
									tmp24 = false;
								}
								HX_STACK_LINE(29)
								if ((tmp24)){
									HX_STACK_LINE(29)
									Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									_this->listen_y(tmp25);
								}
								HX_STACK_LINE(29)
								_this->y;
							}
						}
						HX_STACK_LINE(29)
						{
							HX_STACK_LINE(29)
							_this->z = _z1;
							HX_STACK_LINE(29)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(29)
							if ((tmp22)){
								HX_STACK_LINE(29)
								_this->z;
							}
							else{
								HX_STACK_LINE(29)
								bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(29)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(29)
								if ((tmp23)){
									HX_STACK_LINE(29)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(29)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(29)
									tmp24 = false;
								}
								HX_STACK_LINE(29)
								if ((tmp24)){
									HX_STACK_LINE(29)
									Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(29)
									_this->listen_z(tmp25);
								}
								HX_STACK_LINE(29)
								_this->z;
							}
						}
						HX_STACK_LINE(29)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(29)
						bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(29)
						bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(29)
						if ((tmp22)){
							HX_STACK_LINE(29)
							bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(29)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(29)
							tmp23 = !(tmp25);
						}
						else{
							HX_STACK_LINE(29)
							tmp23 = false;
						}
						HX_STACK_LINE(29)
						if ((tmp23)){
							HX_STACK_LINE(29)
							Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(29)
							_this->listen_x(tmp24);
						}
						HX_STACK_LINE(29)
						bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(29)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(29)
						if ((tmp24)){
							HX_STACK_LINE(29)
							bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(29)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(29)
							tmp25 = !(tmp27);
						}
						else{
							HX_STACK_LINE(29)
							tmp25 = false;
						}
						HX_STACK_LINE(29)
						if ((tmp25)){
							HX_STACK_LINE(29)
							Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(29)
							_this->listen_y(tmp26);
						}
						HX_STACK_LINE(29)
						bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(29)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(29)
						if ((tmp26)){
							HX_STACK_LINE(29)
							bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(29)
							bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(29)
							tmp27 = !(tmp29);
						}
						else{
							HX_STACK_LINE(29)
							tmp27 = false;
						}
						HX_STACK_LINE(29)
						if ((tmp27)){
							HX_STACK_LINE(29)
							Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(29)
							_this->listen_z(tmp28);
						}
						HX_STACK_LINE(29)
						_this;
					}
					HX_STACK_LINE(29)
					_this;
				}
			}
			HX_STACK_LINE(29)
			Dynamic tmp1 = this->listen_x_dyn();		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(29)
			bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(29)
			bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(29)
			if ((tmp2)){
				HX_STACK_LINE(29)
				bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(29)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(29)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(29)
				tmp3 = !(tmp6);
			}
			else{
				HX_STACK_LINE(29)
				tmp3 = false;
			}
			HX_STACK_LINE(29)
			if ((tmp3)){
				HX_STACK_LINE(29)
				Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(29)
				this->listen_x(tmp4);
			}
			HX_STACK_LINE(29)
			this->x;
		}
	}
	HX_STACK_LINE(30)
	{
		HX_STACK_LINE(30)
		this->y = _y;
		HX_STACK_LINE(30)
		bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(30)
		if ((tmp)){
			HX_STACK_LINE(30)
			this->y;
		}
		else{
			HX_STACK_LINE(30)
			{
				HX_STACK_LINE(30)
				::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(30)
				bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(30)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(30)
				bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(30)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(30)
				if ((tmp4)){
					HX_STACK_LINE(30)
					tmp5 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(30)
					tmp5 = true;
				}
				HX_STACK_LINE(30)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(30)
				bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(30)
				if ((tmp6)){
					HX_STACK_LINE(30)
					tmp7 = this->_construct;
				}
				else{
					HX_STACK_LINE(30)
					tmp7 = true;
				}
				HX_STACK_LINE(30)
				if ((tmp7)){
					HX_STACK_LINE(30)
					Dynamic();
				}
				else{
					HX_STACK_LINE(30)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(30)
					::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(30)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(30)
					Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(30)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(30)
					Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(30)
					Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(30)
					Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(30)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(30)
					Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(30)
					Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(30)
					Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(30)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(30)
					Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(30)
					Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(30)
					Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(30)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(30)
					Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(30)
					Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(30)
					Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
					HX_STACK_LINE(30)
					Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
					HX_STACK_LINE(30)
					Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
					HX_STACK_LINE(30)
					bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(30)
					if ((tmp21)){
						HX_STACK_LINE(30)
						Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(30)
						Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(30)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(30)
						Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(30)
						Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(30)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(30)
						Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(30)
						Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(30)
						Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(30)
						Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(30)
						Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(30)
						Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(30)
						Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(30)
						Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(30)
						_x1 = tmp35;
						HX_STACK_LINE(30)
						Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(30)
						{
							HX_STACK_LINE(30)
							Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(30)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(30)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(30)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(30)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(30)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(30)
							Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(30)
							Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(30)
							Float value = tmp44;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(30)
							bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(30)
							if ((tmp45)){
								HX_STACK_LINE(30)
								tmp36 = (int)-1;
							}
							else{
								HX_STACK_LINE(30)
								bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(30)
								if ((tmp46)){
									HX_STACK_LINE(30)
									tmp36 = (int)1;
								}
								else{
									HX_STACK_LINE(30)
									tmp36 = value;
								}
							}
						}
						HX_STACK_LINE(30)
						Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(30)
						_y1 = tmp37;
						HX_STACK_LINE(30)
						Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(30)
						Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(30)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(30)
						Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(30)
						Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(30)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(30)
						Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(30)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(30)
						Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(30)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(30)
						Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(30)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(30)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(30)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(30)
						_z1 = tmp51;
					}
					else{
						HX_STACK_LINE(30)
						bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(30)
						if ((tmp22)){
							HX_STACK_LINE(30)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(30)
							{
								HX_STACK_LINE(30)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(30)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(30)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(30)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(30)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(30)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(30)
								Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(30)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(30)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(30)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(30)
								if ((tmp32)){
									HX_STACK_LINE(30)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(30)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(30)
									if ((tmp33)){
										HX_STACK_LINE(30)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(30)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(30)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(30)
							_x1 = tmp24;
							HX_STACK_LINE(30)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(30)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(30)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(30)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(30)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(30)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(30)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(30)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(30)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(30)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(30)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(30)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(30)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(30)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(30)
							_y1 = tmp38;
							HX_STACK_LINE(30)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(30)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(30)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(30)
							Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(30)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(30)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(30)
							Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(30)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(30)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(30)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(30)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(30)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(30)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(30)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(30)
							_z1 = tmp52;
						}
						else{
							HX_STACK_LINE(30)
							bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(30)
							if ((tmp23)){
								HX_STACK_LINE(30)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(30)
								{
									HX_STACK_LINE(30)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(30)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(30)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(30)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(30)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(30)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(30)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(30)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(30)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(30)
									if ((tmp33)){
										HX_STACK_LINE(30)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(30)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(30)
										if ((tmp34)){
											HX_STACK_LINE(30)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(30)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(30)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(30)
								_x1 = tmp25;
								HX_STACK_LINE(30)
								Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(30)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(30)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(30)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(30)
								Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(30)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(30)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(30)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(30)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(30)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(30)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(30)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(30)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(30)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(30)
								_y1 = tmp39;
								HX_STACK_LINE(30)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(30)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(30)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(30)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(30)
								Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(30)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(30)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(30)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(30)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(30)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(30)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(30)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(30)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(30)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(30)
								_z1 = tmp53;
							}
							else{
								HX_STACK_LINE(30)
								bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(30)
								if ((tmp24)){
									HX_STACK_LINE(30)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(30)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(30)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(30)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(30)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(30)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(30)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(30)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(30)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(30)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(30)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(30)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(30)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(30)
									_x1 = tmp38;
									HX_STACK_LINE(30)
									Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(30)
									{
										HX_STACK_LINE(30)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(30)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(30)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(30)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(30)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(30)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(30)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(30)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(30)
										Float value = tmp47;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(30)
										bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(30)
										if ((tmp48)){
											HX_STACK_LINE(30)
											tmp39 = (int)-1;
										}
										else{
											HX_STACK_LINE(30)
											bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(30)
											if ((tmp49)){
												HX_STACK_LINE(30)
												tmp39 = (int)1;
											}
											else{
												HX_STACK_LINE(30)
												tmp39 = value;
											}
										}
									}
									HX_STACK_LINE(30)
									Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(30)
									_y1 = tmp40;
									HX_STACK_LINE(30)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(30)
									Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(30)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(30)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(30)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(30)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(30)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(30)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(30)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(30)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(30)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(30)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(30)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(30)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(30)
									_z1 = tmp54;
								}
								else{
									HX_STACK_LINE(30)
									bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									if ((tmp25)){
										HX_STACK_LINE(30)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(30)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(30)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(30)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(30)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(30)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(30)
										Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(30)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(30)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(30)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(30)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(30)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(30)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(30)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(30)
										_x1 = tmp39;
										HX_STACK_LINE(30)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(30)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(30)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(30)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(30)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(30)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(30)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(30)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(30)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(30)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(30)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(30)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(30)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(30)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(30)
										_y1 = tmp53;
										HX_STACK_LINE(30)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(30)
										{
											HX_STACK_LINE(30)
											Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(30)
											Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(30)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(30)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(30)
											Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(30)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(30)
											Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(30)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(30)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(30)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(30)
											if ((tmp63)){
												HX_STACK_LINE(30)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(30)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(30)
												if ((tmp64)){
													HX_STACK_LINE(30)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(30)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(30)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(30)
										_z1 = tmp55;
									}
									else{
										HX_STACK_LINE(30)
										bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(30)
										if ((tmp26)){
											HX_STACK_LINE(30)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(30)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(30)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(30)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(30)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(30)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(30)
											Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(30)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(30)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(30)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(30)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(30)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(30)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(30)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(30)
											_x1 = tmp40;
											HX_STACK_LINE(30)
											Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(30)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(30)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(30)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(30)
											Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(30)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(30)
											Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(30)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(30)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(30)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(30)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(30)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(30)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(30)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(30)
											_y1 = tmp54;
											HX_STACK_LINE(30)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(30)
											{
												HX_STACK_LINE(30)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(30)
												Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(30)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(30)
												Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(30)
												Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(30)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(30)
												Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(30)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(30)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(30)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(30)
												if ((tmp64)){
													HX_STACK_LINE(30)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(30)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(30)
													if ((tmp65)){
														HX_STACK_LINE(30)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(30)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(30)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(30)
											_z1 = tmp56;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(30)
					{
						HX_STACK_LINE(30)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(30)
						_this->ignore_listeners = true;
						HX_STACK_LINE(30)
						{
							HX_STACK_LINE(30)
							_this->x = _x1;
							HX_STACK_LINE(30)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(30)
							if ((tmp22)){
								HX_STACK_LINE(30)
								_this->x;
							}
							else{
								HX_STACK_LINE(30)
								bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(30)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(30)
								if ((tmp23)){
									HX_STACK_LINE(30)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(30)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(30)
									tmp24 = false;
								}
								HX_STACK_LINE(30)
								if ((tmp24)){
									HX_STACK_LINE(30)
									Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									_this->listen_x(tmp25);
								}
								HX_STACK_LINE(30)
								_this->x;
							}
						}
						HX_STACK_LINE(30)
						{
							HX_STACK_LINE(30)
							_this->y = _y1;
							HX_STACK_LINE(30)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(30)
							if ((tmp22)){
								HX_STACK_LINE(30)
								_this->y;
							}
							else{
								HX_STACK_LINE(30)
								bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(30)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(30)
								if ((tmp23)){
									HX_STACK_LINE(30)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(30)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(30)
									tmp24 = false;
								}
								HX_STACK_LINE(30)
								if ((tmp24)){
									HX_STACK_LINE(30)
									Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									_this->listen_y(tmp25);
								}
								HX_STACK_LINE(30)
								_this->y;
							}
						}
						HX_STACK_LINE(30)
						{
							HX_STACK_LINE(30)
							_this->z = _z1;
							HX_STACK_LINE(30)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(30)
							if ((tmp22)){
								HX_STACK_LINE(30)
								_this->z;
							}
							else{
								HX_STACK_LINE(30)
								bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(30)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(30)
								if ((tmp23)){
									HX_STACK_LINE(30)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(30)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(30)
									tmp24 = false;
								}
								HX_STACK_LINE(30)
								if ((tmp24)){
									HX_STACK_LINE(30)
									Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(30)
									_this->listen_z(tmp25);
								}
								HX_STACK_LINE(30)
								_this->z;
							}
						}
						HX_STACK_LINE(30)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(30)
						bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(30)
						bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(30)
						if ((tmp22)){
							HX_STACK_LINE(30)
							bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(30)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(30)
							tmp23 = !(tmp25);
						}
						else{
							HX_STACK_LINE(30)
							tmp23 = false;
						}
						HX_STACK_LINE(30)
						if ((tmp23)){
							HX_STACK_LINE(30)
							Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(30)
							_this->listen_x(tmp24);
						}
						HX_STACK_LINE(30)
						bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(30)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(30)
						if ((tmp24)){
							HX_STACK_LINE(30)
							bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(30)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(30)
							tmp25 = !(tmp27);
						}
						else{
							HX_STACK_LINE(30)
							tmp25 = false;
						}
						HX_STACK_LINE(30)
						if ((tmp25)){
							HX_STACK_LINE(30)
							Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(30)
							_this->listen_y(tmp26);
						}
						HX_STACK_LINE(30)
						bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(30)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(30)
						if ((tmp26)){
							HX_STACK_LINE(30)
							bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(30)
							bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(30)
							tmp27 = !(tmp29);
						}
						else{
							HX_STACK_LINE(30)
							tmp27 = false;
						}
						HX_STACK_LINE(30)
						if ((tmp27)){
							HX_STACK_LINE(30)
							Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(30)
							_this->listen_z(tmp28);
						}
						HX_STACK_LINE(30)
						_this;
					}
					HX_STACK_LINE(30)
					_this;
				}
			}
			HX_STACK_LINE(30)
			Dynamic tmp1 = this->listen_y_dyn();		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(30)
			bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(30)
			bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(30)
			if ((tmp2)){
				HX_STACK_LINE(30)
				bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(30)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(30)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(30)
				tmp3 = !(tmp6);
			}
			else{
				HX_STACK_LINE(30)
				tmp3 = false;
			}
			HX_STACK_LINE(30)
			if ((tmp3)){
				HX_STACK_LINE(30)
				Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(30)
				this->listen_y(tmp4);
			}
			HX_STACK_LINE(30)
			this->y;
		}
	}
	HX_STACK_LINE(31)
	{
		HX_STACK_LINE(31)
		this->z = _z;
		HX_STACK_LINE(31)
		bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(31)
		if ((tmp)){
			HX_STACK_LINE(31)
			this->z;
		}
		else{
			HX_STACK_LINE(31)
			{
				HX_STACK_LINE(31)
				::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(31)
				bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(31)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(31)
				bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(31)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(31)
				if ((tmp4)){
					HX_STACK_LINE(31)
					tmp5 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(31)
					tmp5 = true;
				}
				HX_STACK_LINE(31)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(31)
				bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(31)
				if ((tmp6)){
					HX_STACK_LINE(31)
					tmp7 = this->_construct;
				}
				else{
					HX_STACK_LINE(31)
					tmp7 = true;
				}
				HX_STACK_LINE(31)
				if ((tmp7)){
					HX_STACK_LINE(31)
					Dynamic();
				}
				else{
					HX_STACK_LINE(31)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(31)
					::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(31)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(31)
					Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(31)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(31)
					Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(31)
					Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(31)
					Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(31)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(31)
					Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(31)
					Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(31)
					Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(31)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(31)
					Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(31)
					Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(31)
					Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(31)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(31)
					Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(31)
					Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(31)
					Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
					HX_STACK_LINE(31)
					Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
					HX_STACK_LINE(31)
					Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
					HX_STACK_LINE(31)
					bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(31)
					if ((tmp21)){
						HX_STACK_LINE(31)
						Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(31)
						Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(31)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(31)
						Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(31)
						Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(31)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(31)
						Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(31)
						Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(31)
						Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(31)
						Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(31)
						Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(31)
						Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(31)
						Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(31)
						Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(31)
						_x1 = tmp35;
						HX_STACK_LINE(31)
						Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(31)
						{
							HX_STACK_LINE(31)
							Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(31)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(31)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(31)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(31)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(31)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(31)
							Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(31)
							Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(31)
							Float value = tmp44;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(31)
							bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(31)
							if ((tmp45)){
								HX_STACK_LINE(31)
								tmp36 = (int)-1;
							}
							else{
								HX_STACK_LINE(31)
								bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(31)
								if ((tmp46)){
									HX_STACK_LINE(31)
									tmp36 = (int)1;
								}
								else{
									HX_STACK_LINE(31)
									tmp36 = value;
								}
							}
						}
						HX_STACK_LINE(31)
						Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(31)
						_y1 = tmp37;
						HX_STACK_LINE(31)
						Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(31)
						Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(31)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(31)
						Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(31)
						Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(31)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(31)
						Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(31)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(31)
						Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(31)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(31)
						Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(31)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(31)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(31)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(31)
						_z1 = tmp51;
					}
					else{
						HX_STACK_LINE(31)
						bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(31)
						if ((tmp22)){
							HX_STACK_LINE(31)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(31)
							{
								HX_STACK_LINE(31)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(31)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(31)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(31)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(31)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(31)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(31)
								Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(31)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(31)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(31)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(31)
								if ((tmp32)){
									HX_STACK_LINE(31)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(31)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(31)
									if ((tmp33)){
										HX_STACK_LINE(31)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(31)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(31)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(31)
							_x1 = tmp24;
							HX_STACK_LINE(31)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(31)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(31)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(31)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(31)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(31)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(31)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(31)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(31)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(31)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(31)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(31)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(31)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(31)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(31)
							_y1 = tmp38;
							HX_STACK_LINE(31)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(31)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(31)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(31)
							Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(31)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(31)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(31)
							Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(31)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(31)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(31)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(31)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(31)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(31)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(31)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(31)
							_z1 = tmp52;
						}
						else{
							HX_STACK_LINE(31)
							bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(31)
							if ((tmp23)){
								HX_STACK_LINE(31)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(31)
								{
									HX_STACK_LINE(31)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(31)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(31)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(31)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(31)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(31)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(31)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(31)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(31)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(31)
									if ((tmp33)){
										HX_STACK_LINE(31)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(31)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(31)
										if ((tmp34)){
											HX_STACK_LINE(31)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(31)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(31)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(31)
								_x1 = tmp25;
								HX_STACK_LINE(31)
								Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(31)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(31)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(31)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(31)
								Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(31)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(31)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(31)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(31)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(31)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(31)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(31)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(31)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(31)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(31)
								_y1 = tmp39;
								HX_STACK_LINE(31)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(31)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(31)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(31)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(31)
								Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(31)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(31)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(31)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(31)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(31)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(31)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(31)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(31)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(31)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(31)
								_z1 = tmp53;
							}
							else{
								HX_STACK_LINE(31)
								bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(31)
								if ((tmp24)){
									HX_STACK_LINE(31)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(31)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(31)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(31)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(31)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(31)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(31)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(31)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(31)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(31)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(31)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(31)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(31)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(31)
									_x1 = tmp38;
									HX_STACK_LINE(31)
									Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(31)
									{
										HX_STACK_LINE(31)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(31)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(31)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(31)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(31)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(31)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(31)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(31)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(31)
										Float value = tmp47;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(31)
										bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(31)
										if ((tmp48)){
											HX_STACK_LINE(31)
											tmp39 = (int)-1;
										}
										else{
											HX_STACK_LINE(31)
											bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(31)
											if ((tmp49)){
												HX_STACK_LINE(31)
												tmp39 = (int)1;
											}
											else{
												HX_STACK_LINE(31)
												tmp39 = value;
											}
										}
									}
									HX_STACK_LINE(31)
									Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(31)
									_y1 = tmp40;
									HX_STACK_LINE(31)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(31)
									Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(31)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(31)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(31)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(31)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(31)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(31)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(31)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(31)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(31)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(31)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(31)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(31)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(31)
									_z1 = tmp54;
								}
								else{
									HX_STACK_LINE(31)
									bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									if ((tmp25)){
										HX_STACK_LINE(31)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(31)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(31)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(31)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(31)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(31)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(31)
										Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(31)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(31)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(31)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(31)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(31)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(31)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(31)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(31)
										_x1 = tmp39;
										HX_STACK_LINE(31)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(31)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(31)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(31)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(31)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(31)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(31)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(31)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(31)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(31)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(31)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(31)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(31)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(31)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(31)
										_y1 = tmp53;
										HX_STACK_LINE(31)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(31)
										{
											HX_STACK_LINE(31)
											Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(31)
											Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(31)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(31)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(31)
											Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(31)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(31)
											Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(31)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(31)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(31)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(31)
											if ((tmp63)){
												HX_STACK_LINE(31)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(31)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(31)
												if ((tmp64)){
													HX_STACK_LINE(31)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(31)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(31)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(31)
										_z1 = tmp55;
									}
									else{
										HX_STACK_LINE(31)
										bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(31)
										if ((tmp26)){
											HX_STACK_LINE(31)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(31)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(31)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(31)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(31)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(31)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(31)
											Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(31)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(31)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(31)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(31)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(31)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(31)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(31)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(31)
											_x1 = tmp40;
											HX_STACK_LINE(31)
											Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(31)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(31)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(31)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(31)
											Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(31)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(31)
											Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(31)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(31)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(31)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(31)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(31)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(31)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(31)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(31)
											_y1 = tmp54;
											HX_STACK_LINE(31)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(31)
											{
												HX_STACK_LINE(31)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(31)
												Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(31)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(31)
												Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(31)
												Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(31)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(31)
												Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(31)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(31)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(31)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(31)
												if ((tmp64)){
													HX_STACK_LINE(31)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(31)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(31)
													if ((tmp65)){
														HX_STACK_LINE(31)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(31)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(31)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(31)
											_z1 = tmp56;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(31)
					{
						HX_STACK_LINE(31)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(31)
						_this->ignore_listeners = true;
						HX_STACK_LINE(31)
						{
							HX_STACK_LINE(31)
							_this->x = _x1;
							HX_STACK_LINE(31)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(31)
							if ((tmp22)){
								HX_STACK_LINE(31)
								_this->x;
							}
							else{
								HX_STACK_LINE(31)
								bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(31)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(31)
								if ((tmp23)){
									HX_STACK_LINE(31)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(31)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(31)
									tmp24 = false;
								}
								HX_STACK_LINE(31)
								if ((tmp24)){
									HX_STACK_LINE(31)
									Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									_this->listen_x(tmp25);
								}
								HX_STACK_LINE(31)
								_this->x;
							}
						}
						HX_STACK_LINE(31)
						{
							HX_STACK_LINE(31)
							_this->y = _y1;
							HX_STACK_LINE(31)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(31)
							if ((tmp22)){
								HX_STACK_LINE(31)
								_this->y;
							}
							else{
								HX_STACK_LINE(31)
								bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(31)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(31)
								if ((tmp23)){
									HX_STACK_LINE(31)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(31)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(31)
									tmp24 = false;
								}
								HX_STACK_LINE(31)
								if ((tmp24)){
									HX_STACK_LINE(31)
									Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									_this->listen_y(tmp25);
								}
								HX_STACK_LINE(31)
								_this->y;
							}
						}
						HX_STACK_LINE(31)
						{
							HX_STACK_LINE(31)
							_this->z = _z1;
							HX_STACK_LINE(31)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(31)
							if ((tmp22)){
								HX_STACK_LINE(31)
								_this->z;
							}
							else{
								HX_STACK_LINE(31)
								bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(31)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(31)
								if ((tmp23)){
									HX_STACK_LINE(31)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(31)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(31)
									tmp24 = false;
								}
								HX_STACK_LINE(31)
								if ((tmp24)){
									HX_STACK_LINE(31)
									Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(31)
									_this->listen_z(tmp25);
								}
								HX_STACK_LINE(31)
								_this->z;
							}
						}
						HX_STACK_LINE(31)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(31)
						bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(31)
						bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(31)
						if ((tmp22)){
							HX_STACK_LINE(31)
							bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(31)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(31)
							tmp23 = !(tmp25);
						}
						else{
							HX_STACK_LINE(31)
							tmp23 = false;
						}
						HX_STACK_LINE(31)
						if ((tmp23)){
							HX_STACK_LINE(31)
							Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(31)
							_this->listen_x(tmp24);
						}
						HX_STACK_LINE(31)
						bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(31)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(31)
						if ((tmp24)){
							HX_STACK_LINE(31)
							bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(31)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(31)
							tmp25 = !(tmp27);
						}
						else{
							HX_STACK_LINE(31)
							tmp25 = false;
						}
						HX_STACK_LINE(31)
						if ((tmp25)){
							HX_STACK_LINE(31)
							Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(31)
							_this->listen_y(tmp26);
						}
						HX_STACK_LINE(31)
						bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(31)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(31)
						if ((tmp26)){
							HX_STACK_LINE(31)
							bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(31)
							bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(31)
							tmp27 = !(tmp29);
						}
						else{
							HX_STACK_LINE(31)
							tmp27 = false;
						}
						HX_STACK_LINE(31)
						if ((tmp27)){
							HX_STACK_LINE(31)
							Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(31)
							_this->listen_z(tmp28);
						}
						HX_STACK_LINE(31)
						_this;
					}
					HX_STACK_LINE(31)
					_this;
				}
			}
			HX_STACK_LINE(31)
			Dynamic tmp1 = this->listen_z_dyn();		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(31)
			bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(31)
			bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(31)
			if ((tmp2)){
				HX_STACK_LINE(31)
				bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(31)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(31)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(31)
				tmp3 = !(tmp6);
			}
			else{
				HX_STACK_LINE(31)
				tmp3 = false;
			}
			HX_STACK_LINE(31)
			if ((tmp3)){
				HX_STACK_LINE(31)
				Float tmp4 = this->z;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(31)
				this->listen_z(tmp4);
			}
			HX_STACK_LINE(31)
			this->z;
		}
	}
	HX_STACK_LINE(32)
	{
		HX_STACK_LINE(32)
		this->w = _w;
		HX_STACK_LINE(32)
		bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(32)
		if ((tmp)){
			HX_STACK_LINE(32)
			this->w;
		}
		else{
			HX_STACK_LINE(32)
			{
				HX_STACK_LINE(32)
				::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(32)
				bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(32)
				bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(32)
				bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(32)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(32)
				if ((tmp4)){
					HX_STACK_LINE(32)
					tmp5 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(32)
					tmp5 = true;
				}
				HX_STACK_LINE(32)
				bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(32)
				bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(32)
				if ((tmp6)){
					HX_STACK_LINE(32)
					tmp7 = this->_construct;
				}
				else{
					HX_STACK_LINE(32)
					tmp7 = true;
				}
				HX_STACK_LINE(32)
				if ((tmp7)){
					HX_STACK_LINE(32)
					Dynamic();
				}
				else{
					HX_STACK_LINE(32)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(32)
					::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(32)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(32)
					Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(32)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(32)
					Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(32)
					Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(32)
					Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(32)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(32)
					Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(32)
					Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(32)
					Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(32)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(32)
					Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(32)
					Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(32)
					Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(32)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(32)
					Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(32)
					Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(32)
					Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
					HX_STACK_LINE(32)
					Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
					HX_STACK_LINE(32)
					Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
					HX_STACK_LINE(32)
					bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(32)
					if ((tmp21)){
						HX_STACK_LINE(32)
						Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(32)
						Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(32)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(32)
						Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(32)
						Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(32)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(32)
						Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(32)
						Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(32)
						Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(32)
						Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(32)
						Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(32)
						Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(32)
						Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(32)
						Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(32)
						_x1 = tmp35;
						HX_STACK_LINE(32)
						Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(32)
						{
							HX_STACK_LINE(32)
							Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(32)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(32)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(32)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(32)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(32)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(32)
							Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(32)
							Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(32)
							Float value = tmp44;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(32)
							bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(32)
							if ((tmp45)){
								HX_STACK_LINE(32)
								tmp36 = (int)-1;
							}
							else{
								HX_STACK_LINE(32)
								bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(32)
								if ((tmp46)){
									HX_STACK_LINE(32)
									tmp36 = (int)1;
								}
								else{
									HX_STACK_LINE(32)
									tmp36 = value;
								}
							}
						}
						HX_STACK_LINE(32)
						Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(32)
						_y1 = tmp37;
						HX_STACK_LINE(32)
						Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(32)
						Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(32)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(32)
						Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(32)
						Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(32)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(32)
						Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(32)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(32)
						Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(32)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(32)
						Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(32)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(32)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(32)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(32)
						_z1 = tmp51;
					}
					else{
						HX_STACK_LINE(32)
						bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(32)
						if ((tmp22)){
							HX_STACK_LINE(32)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(32)
							{
								HX_STACK_LINE(32)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(32)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(32)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(32)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(32)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(32)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(32)
								Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(32)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(32)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(32)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(32)
								if ((tmp32)){
									HX_STACK_LINE(32)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(32)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(32)
									if ((tmp33)){
										HX_STACK_LINE(32)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(32)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(32)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(32)
							_x1 = tmp24;
							HX_STACK_LINE(32)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(32)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(32)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(32)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(32)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(32)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(32)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(32)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(32)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(32)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(32)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(32)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(32)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(32)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(32)
							_y1 = tmp38;
							HX_STACK_LINE(32)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(32)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(32)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(32)
							Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(32)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(32)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(32)
							Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(32)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(32)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(32)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(32)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(32)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(32)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(32)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(32)
							_z1 = tmp52;
						}
						else{
							HX_STACK_LINE(32)
							bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(32)
							if ((tmp23)){
								HX_STACK_LINE(32)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(32)
								{
									HX_STACK_LINE(32)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(32)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(32)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(32)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(32)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(32)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(32)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(32)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(32)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(32)
									if ((tmp33)){
										HX_STACK_LINE(32)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(32)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(32)
										if ((tmp34)){
											HX_STACK_LINE(32)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(32)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(32)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(32)
								_x1 = tmp25;
								HX_STACK_LINE(32)
								Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(32)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(32)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(32)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(32)
								Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(32)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(32)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(32)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(32)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(32)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(32)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(32)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(32)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(32)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(32)
								_y1 = tmp39;
								HX_STACK_LINE(32)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(32)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(32)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(32)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(32)
								Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(32)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(32)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(32)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(32)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(32)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(32)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(32)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(32)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(32)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(32)
								_z1 = tmp53;
							}
							else{
								HX_STACK_LINE(32)
								bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(32)
								if ((tmp24)){
									HX_STACK_LINE(32)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(32)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(32)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(32)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(32)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(32)
									Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(32)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(32)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(32)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(32)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(32)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(32)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(32)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(32)
									_x1 = tmp38;
									HX_STACK_LINE(32)
									Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(32)
									{
										HX_STACK_LINE(32)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(32)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(32)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(32)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(32)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(32)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(32)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(32)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(32)
										Float value = tmp47;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(32)
										bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(32)
										if ((tmp48)){
											HX_STACK_LINE(32)
											tmp39 = (int)-1;
										}
										else{
											HX_STACK_LINE(32)
											bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(32)
											if ((tmp49)){
												HX_STACK_LINE(32)
												tmp39 = (int)1;
											}
											else{
												HX_STACK_LINE(32)
												tmp39 = value;
											}
										}
									}
									HX_STACK_LINE(32)
									Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(32)
									_y1 = tmp40;
									HX_STACK_LINE(32)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(32)
									Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(32)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(32)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(32)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(32)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(32)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(32)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(32)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(32)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(32)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(32)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(32)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(32)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(32)
									_z1 = tmp54;
								}
								else{
									HX_STACK_LINE(32)
									bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									if ((tmp25)){
										HX_STACK_LINE(32)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(32)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(32)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(32)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(32)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(32)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(32)
										Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(32)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(32)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(32)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(32)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(32)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(32)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(32)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(32)
										_x1 = tmp39;
										HX_STACK_LINE(32)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(32)
										Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(32)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(32)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(32)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(32)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(32)
										Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(32)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(32)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(32)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(32)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(32)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(32)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(32)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(32)
										_y1 = tmp53;
										HX_STACK_LINE(32)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(32)
										{
											HX_STACK_LINE(32)
											Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(32)
											Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(32)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(32)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(32)
											Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(32)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(32)
											Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(32)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(32)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(32)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(32)
											if ((tmp63)){
												HX_STACK_LINE(32)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(32)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(32)
												if ((tmp64)){
													HX_STACK_LINE(32)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(32)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(32)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(32)
										_z1 = tmp55;
									}
									else{
										HX_STACK_LINE(32)
										bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(32)
										if ((tmp26)){
											HX_STACK_LINE(32)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(32)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(32)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(32)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(32)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(32)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(32)
											Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(32)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(32)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(32)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(32)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(32)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(32)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(32)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(32)
											_x1 = tmp40;
											HX_STACK_LINE(32)
											Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(32)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(32)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(32)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(32)
											Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(32)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(32)
											Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(32)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(32)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(32)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(32)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(32)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(32)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(32)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(32)
											_y1 = tmp54;
											HX_STACK_LINE(32)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(32)
											{
												HX_STACK_LINE(32)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(32)
												Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(32)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(32)
												Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(32)
												Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(32)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(32)
												Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(32)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(32)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(32)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(32)
												if ((tmp64)){
													HX_STACK_LINE(32)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(32)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(32)
													if ((tmp65)){
														HX_STACK_LINE(32)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(32)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(32)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(32)
											_z1 = tmp56;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(32)
					{
						HX_STACK_LINE(32)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(32)
						_this->ignore_listeners = true;
						HX_STACK_LINE(32)
						{
							HX_STACK_LINE(32)
							_this->x = _x1;
							HX_STACK_LINE(32)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(32)
							if ((tmp22)){
								HX_STACK_LINE(32)
								_this->x;
							}
							else{
								HX_STACK_LINE(32)
								bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(32)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(32)
								if ((tmp23)){
									HX_STACK_LINE(32)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(32)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(32)
									tmp24 = false;
								}
								HX_STACK_LINE(32)
								if ((tmp24)){
									HX_STACK_LINE(32)
									Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									_this->listen_x(tmp25);
								}
								HX_STACK_LINE(32)
								_this->x;
							}
						}
						HX_STACK_LINE(32)
						{
							HX_STACK_LINE(32)
							_this->y = _y1;
							HX_STACK_LINE(32)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(32)
							if ((tmp22)){
								HX_STACK_LINE(32)
								_this->y;
							}
							else{
								HX_STACK_LINE(32)
								bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(32)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(32)
								if ((tmp23)){
									HX_STACK_LINE(32)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(32)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(32)
									tmp24 = false;
								}
								HX_STACK_LINE(32)
								if ((tmp24)){
									HX_STACK_LINE(32)
									Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									_this->listen_y(tmp25);
								}
								HX_STACK_LINE(32)
								_this->y;
							}
						}
						HX_STACK_LINE(32)
						{
							HX_STACK_LINE(32)
							_this->z = _z1;
							HX_STACK_LINE(32)
							bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(32)
							if ((tmp22)){
								HX_STACK_LINE(32)
								_this->z;
							}
							else{
								HX_STACK_LINE(32)
								bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(32)
								bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(32)
								if ((tmp23)){
									HX_STACK_LINE(32)
									bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(32)
									tmp24 = !(tmp26);
								}
								else{
									HX_STACK_LINE(32)
									tmp24 = false;
								}
								HX_STACK_LINE(32)
								if ((tmp24)){
									HX_STACK_LINE(32)
									Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(32)
									_this->listen_z(tmp25);
								}
								HX_STACK_LINE(32)
								_this->z;
							}
						}
						HX_STACK_LINE(32)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(32)
						bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(32)
						bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(32)
						if ((tmp22)){
							HX_STACK_LINE(32)
							bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(32)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(32)
							tmp23 = !(tmp25);
						}
						else{
							HX_STACK_LINE(32)
							tmp23 = false;
						}
						HX_STACK_LINE(32)
						if ((tmp23)){
							HX_STACK_LINE(32)
							Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(32)
							_this->listen_x(tmp24);
						}
						HX_STACK_LINE(32)
						bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(32)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(32)
						if ((tmp24)){
							HX_STACK_LINE(32)
							bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(32)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(32)
							tmp25 = !(tmp27);
						}
						else{
							HX_STACK_LINE(32)
							tmp25 = false;
						}
						HX_STACK_LINE(32)
						if ((tmp25)){
							HX_STACK_LINE(32)
							Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(32)
							_this->listen_y(tmp26);
						}
						HX_STACK_LINE(32)
						bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(32)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(32)
						if ((tmp26)){
							HX_STACK_LINE(32)
							bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(32)
							bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(32)
							tmp27 = !(tmp29);
						}
						else{
							HX_STACK_LINE(32)
							tmp27 = false;
						}
						HX_STACK_LINE(32)
						if ((tmp27)){
							HX_STACK_LINE(32)
							Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(32)
							_this->listen_z(tmp28);
						}
						HX_STACK_LINE(32)
						_this;
					}
					HX_STACK_LINE(32)
					_this;
				}
			}
			HX_STACK_LINE(32)
			Dynamic tmp1 = this->listen_w_dyn();		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(32)
			bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(32)
			bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(32)
			if ((tmp2)){
				HX_STACK_LINE(32)
				bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(32)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(32)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(32)
				tmp3 = !(tmp6);
			}
			else{
				HX_STACK_LINE(32)
				tmp3 = false;
			}
			HX_STACK_LINE(32)
			if ((tmp3)){
				HX_STACK_LINE(32)
				Float tmp4 = this->w;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(32)
				this->listen_w(tmp4);
			}
			HX_STACK_LINE(32)
			this->w;
		}
	}
	HX_STACK_LINE(34)
	::phoenix::Vector tmp = ::phoenix::Vector_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(34)
	this->euler = tmp;
	HX_STACK_LINE(36)
	this->_construct = false;
}
;
	return null();
}

//Quaternion_obj::~Quaternion_obj() { }

Dynamic Quaternion_obj::__CreateEmpty() { return  new Quaternion_obj; }
hx::ObjectPtr< Quaternion_obj > Quaternion_obj::__new(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y,hx::Null< Float >  __o__z,hx::Null< Float >  __o__w)
{  hx::ObjectPtr< Quaternion_obj > _result_ = new Quaternion_obj();
	_result_->__construct(__o__x,__o__y,__o__z,__o__w);
	return _result_;}

Dynamic Quaternion_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< Quaternion_obj > _result_ = new Quaternion_obj();
	_result_->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _result_;}

::String Quaternion_obj::toString( ){
	HX_STACK_FRAME("phoenix.Quaternion","toString",0xe5131b7d,"phoenix.Quaternion.toString","phoenix/Quaternion.hx",40,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(42)
	Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(42)
	::String tmp1 = (HX_HCSTRING("{ x:","\x47","\xef","\x65","\x51") + tmp);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(42)
	::String tmp2 = (tmp1 + HX_HCSTRING(", y:","\x15","\x15","\x2e","\x1d"));		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(42)
	Float tmp3 = this->y;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(42)
	::String tmp4 = (tmp2 + tmp3);		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(42)
	::String tmp5 = (tmp4 + HX_HCSTRING(", z:","\xf4","\x15","\x2e","\x1d"));		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(42)
	Float tmp6 = this->z;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(42)
	::String tmp7 = (tmp5 + tmp6);		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(42)
	::String tmp8 = (tmp7 + HX_HCSTRING(", w:","\x57","\x13","\x2e","\x1d"));		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(42)
	Float tmp9 = this->w;		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(42)
	::String tmp10 = (tmp8 + tmp9);		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(42)
	::String tmp11 = (tmp10 + HX_HCSTRING(" }","\x5d","\x1c","\x00","\x00"));		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(42)
	return tmp11;
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,toString,return )

::phoenix::Quaternion Quaternion_obj::set( Float _x,Float _y,Float _z,Float _w){
	HX_STACK_FRAME("phoenix.Quaternion","set",0x41d94271,"phoenix.Quaternion.set","phoenix/Quaternion.hx",46,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_x,"_x")
	HX_STACK_ARG(_y,"_y")
	HX_STACK_ARG(_z,"_z")
	HX_STACK_ARG(_w,"_w")
	HX_STACK_LINE(48)
	{
		HX_STACK_LINE(48)
		this->ignore_euler = true;
		HX_STACK_LINE(48)
		{
			HX_STACK_LINE(48)
			this->x = _x;
			HX_STACK_LINE(48)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(48)
			if ((tmp)){
				HX_STACK_LINE(48)
				this->x;
			}
			else{
				HX_STACK_LINE(48)
				{
					HX_STACK_LINE(48)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(48)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(48)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(48)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					if ((tmp4)){
						HX_STACK_LINE(48)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(48)
						tmp5 = true;
					}
					HX_STACK_LINE(48)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(48)
					if ((tmp6)){
						HX_STACK_LINE(48)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(48)
						tmp7 = true;
					}
					HX_STACK_LINE(48)
					if ((tmp7)){
						HX_STACK_LINE(48)
						Dynamic();
					}
					else{
						HX_STACK_LINE(48)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(48)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(48)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(48)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(48)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(48)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(48)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(48)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(48)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(48)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(48)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(48)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(48)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(48)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(48)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(48)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(48)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(48)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(48)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(48)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(48)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(48)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(48)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(48)
						if ((tmp21)){
							HX_STACK_LINE(48)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(48)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(48)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(48)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(48)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(48)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(48)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(48)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(48)
							_x1 = tmp35;
							HX_STACK_LINE(48)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(48)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								if ((tmp45)){
									HX_STACK_LINE(48)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									if ((tmp46)){
										HX_STACK_LINE(48)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(48)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(48)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(48)
							_y1 = tmp37;
							HX_STACK_LINE(48)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(48)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(48)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(48)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(48)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(48)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(48)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(48)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(48)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(48)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(48)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(48)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(48)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(48)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(48)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								{
									HX_STACK_LINE(48)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(48)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									if ((tmp32)){
										HX_STACK_LINE(48)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(48)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(48)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_x1 = tmp24;
								HX_STACK_LINE(48)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(48)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(48)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(48)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(48)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(48)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(48)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(48)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								_y1 = tmp38;
								HX_STACK_LINE(48)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(48)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(48)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(48)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(48)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(48)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(48)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(48)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(48)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								if ((tmp23)){
									HX_STACK_LINE(48)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									{
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(48)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											if ((tmp34)){
												HX_STACK_LINE(48)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(48)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(48)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									_x1 = tmp25;
									HX_STACK_LINE(48)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(48)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(48)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(48)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(48)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(48)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(48)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(48)
									_y1 = tmp39;
									HX_STACK_LINE(48)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(48)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(48)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(48)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(48)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(48)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(48)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(48)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(48)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(48)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(48)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(48)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(48)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(48)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(48)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(48)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(48)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(48)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(48)
										_x1 = tmp38;
										HX_STACK_LINE(48)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(48)
										{
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(48)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											if ((tmp48)){
												HX_STACK_LINE(48)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(48)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												if ((tmp49)){
													HX_STACK_LINE(48)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(48)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(48)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(48)
										_y1 = tmp40;
										HX_STACK_LINE(48)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(48)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(48)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(48)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(48)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(48)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(48)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(48)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(48)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(48)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(48)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(48)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(48)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(48)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(48)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										if ((tmp25)){
											HX_STACK_LINE(48)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(48)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(48)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(48)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(48)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(48)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(48)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(48)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(48)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(48)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(48)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(48)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(48)
											_x1 = tmp39;
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(48)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(48)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(48)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(48)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(48)
											_y1 = tmp53;
											HX_STACK_LINE(48)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(48)
											{
												HX_STACK_LINE(48)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(48)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(48)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(48)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(48)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(48)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(48)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(48)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(48)
												if ((tmp63)){
													HX_STACK_LINE(48)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(48)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(48)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(48)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(48)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											if ((tmp26)){
												HX_STACK_LINE(48)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(48)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(48)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(48)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(48)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(48)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(48)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(48)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(48)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(48)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(48)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(48)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(48)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(48)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(48)
												_x1 = tmp40;
												HX_STACK_LINE(48)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(48)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(48)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(48)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(48)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(48)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(48)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(48)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(48)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(48)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(48)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(48)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(48)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(48)
												_y1 = tmp54;
												HX_STACK_LINE(48)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												{
													HX_STACK_LINE(48)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(48)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(48)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(48)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(48)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(48)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(48)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(48)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(48)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(48)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(48)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(48)
														if ((tmp65)){
															HX_STACK_LINE(48)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(48)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(48)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(48)
						{
							HX_STACK_LINE(48)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(48)
							_this->ignore_listeners = true;
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->x = _x1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->x;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(48)
									_this->x;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->y = _y1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->y;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(48)
									_this->y;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->z = _z1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->z;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(48)
									_this->z;
								}
							}
							HX_STACK_LINE(48)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(48)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(48)
								tmp23 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(48)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							if ((tmp24)){
								HX_STACK_LINE(48)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(48)
								tmp25 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp25)){
								HX_STACK_LINE(48)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(48)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							if ((tmp26)){
								HX_STACK_LINE(48)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(48)
								tmp27 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp27)){
								HX_STACK_LINE(48)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(48)
							_this;
						}
						HX_STACK_LINE(48)
						_this;
					}
				}
				HX_STACK_LINE(48)
				Dynamic tmp1 = this->listen_x_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(48)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(48)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(48)
				if ((tmp2)){
					HX_STACK_LINE(48)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(48)
					tmp3 = false;
				}
				HX_STACK_LINE(48)
				if ((tmp3)){
					HX_STACK_LINE(48)
					Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					this->listen_x(tmp4);
				}
				HX_STACK_LINE(48)
				this->x;
			}
		}
		HX_STACK_LINE(48)
		{
			HX_STACK_LINE(48)
			this->y = _y;
			HX_STACK_LINE(48)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(48)
			if ((tmp)){
				HX_STACK_LINE(48)
				this->y;
			}
			else{
				HX_STACK_LINE(48)
				{
					HX_STACK_LINE(48)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(48)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(48)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(48)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					if ((tmp4)){
						HX_STACK_LINE(48)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(48)
						tmp5 = true;
					}
					HX_STACK_LINE(48)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(48)
					if ((tmp6)){
						HX_STACK_LINE(48)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(48)
						tmp7 = true;
					}
					HX_STACK_LINE(48)
					if ((tmp7)){
						HX_STACK_LINE(48)
						Dynamic();
					}
					else{
						HX_STACK_LINE(48)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(48)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(48)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(48)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(48)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(48)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(48)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(48)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(48)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(48)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(48)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(48)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(48)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(48)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(48)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(48)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(48)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(48)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(48)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(48)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(48)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(48)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(48)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(48)
						if ((tmp21)){
							HX_STACK_LINE(48)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(48)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(48)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(48)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(48)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(48)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(48)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(48)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(48)
							_x1 = tmp35;
							HX_STACK_LINE(48)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(48)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								if ((tmp45)){
									HX_STACK_LINE(48)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									if ((tmp46)){
										HX_STACK_LINE(48)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(48)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(48)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(48)
							_y1 = tmp37;
							HX_STACK_LINE(48)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(48)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(48)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(48)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(48)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(48)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(48)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(48)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(48)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(48)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(48)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(48)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(48)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(48)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(48)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								{
									HX_STACK_LINE(48)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(48)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									if ((tmp32)){
										HX_STACK_LINE(48)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(48)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(48)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_x1 = tmp24;
								HX_STACK_LINE(48)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(48)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(48)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(48)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(48)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(48)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(48)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(48)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								_y1 = tmp38;
								HX_STACK_LINE(48)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(48)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(48)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(48)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(48)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(48)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(48)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(48)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(48)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								if ((tmp23)){
									HX_STACK_LINE(48)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									{
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(48)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											if ((tmp34)){
												HX_STACK_LINE(48)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(48)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(48)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									_x1 = tmp25;
									HX_STACK_LINE(48)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(48)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(48)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(48)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(48)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(48)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(48)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(48)
									_y1 = tmp39;
									HX_STACK_LINE(48)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(48)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(48)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(48)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(48)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(48)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(48)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(48)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(48)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(48)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(48)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(48)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(48)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(48)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(48)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(48)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(48)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(48)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(48)
										_x1 = tmp38;
										HX_STACK_LINE(48)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(48)
										{
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(48)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											if ((tmp48)){
												HX_STACK_LINE(48)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(48)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												if ((tmp49)){
													HX_STACK_LINE(48)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(48)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(48)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(48)
										_y1 = tmp40;
										HX_STACK_LINE(48)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(48)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(48)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(48)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(48)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(48)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(48)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(48)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(48)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(48)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(48)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(48)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(48)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(48)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(48)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										if ((tmp25)){
											HX_STACK_LINE(48)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(48)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(48)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(48)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(48)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(48)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(48)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(48)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(48)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(48)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(48)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(48)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(48)
											_x1 = tmp39;
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(48)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(48)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(48)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(48)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(48)
											_y1 = tmp53;
											HX_STACK_LINE(48)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(48)
											{
												HX_STACK_LINE(48)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(48)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(48)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(48)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(48)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(48)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(48)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(48)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(48)
												if ((tmp63)){
													HX_STACK_LINE(48)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(48)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(48)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(48)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(48)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											if ((tmp26)){
												HX_STACK_LINE(48)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(48)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(48)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(48)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(48)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(48)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(48)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(48)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(48)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(48)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(48)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(48)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(48)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(48)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(48)
												_x1 = tmp40;
												HX_STACK_LINE(48)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(48)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(48)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(48)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(48)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(48)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(48)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(48)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(48)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(48)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(48)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(48)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(48)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(48)
												_y1 = tmp54;
												HX_STACK_LINE(48)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												{
													HX_STACK_LINE(48)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(48)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(48)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(48)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(48)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(48)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(48)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(48)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(48)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(48)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(48)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(48)
														if ((tmp65)){
															HX_STACK_LINE(48)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(48)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(48)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(48)
						{
							HX_STACK_LINE(48)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(48)
							_this->ignore_listeners = true;
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->x = _x1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->x;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(48)
									_this->x;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->y = _y1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->y;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(48)
									_this->y;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->z = _z1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->z;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(48)
									_this->z;
								}
							}
							HX_STACK_LINE(48)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(48)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(48)
								tmp23 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(48)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							if ((tmp24)){
								HX_STACK_LINE(48)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(48)
								tmp25 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp25)){
								HX_STACK_LINE(48)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(48)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							if ((tmp26)){
								HX_STACK_LINE(48)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(48)
								tmp27 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp27)){
								HX_STACK_LINE(48)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(48)
							_this;
						}
						HX_STACK_LINE(48)
						_this;
					}
				}
				HX_STACK_LINE(48)
				Dynamic tmp1 = this->listen_y_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(48)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(48)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(48)
				if ((tmp2)){
					HX_STACK_LINE(48)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(48)
					tmp3 = false;
				}
				HX_STACK_LINE(48)
				if ((tmp3)){
					HX_STACK_LINE(48)
					Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					this->listen_y(tmp4);
				}
				HX_STACK_LINE(48)
				this->y;
			}
		}
		HX_STACK_LINE(48)
		{
			HX_STACK_LINE(48)
			this->z = _z;
			HX_STACK_LINE(48)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(48)
			if ((tmp)){
				HX_STACK_LINE(48)
				this->z;
			}
			else{
				HX_STACK_LINE(48)
				{
					HX_STACK_LINE(48)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(48)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(48)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(48)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					if ((tmp4)){
						HX_STACK_LINE(48)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(48)
						tmp5 = true;
					}
					HX_STACK_LINE(48)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(48)
					if ((tmp6)){
						HX_STACK_LINE(48)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(48)
						tmp7 = true;
					}
					HX_STACK_LINE(48)
					if ((tmp7)){
						HX_STACK_LINE(48)
						Dynamic();
					}
					else{
						HX_STACK_LINE(48)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(48)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(48)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(48)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(48)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(48)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(48)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(48)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(48)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(48)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(48)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(48)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(48)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(48)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(48)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(48)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(48)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(48)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(48)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(48)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(48)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(48)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(48)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(48)
						if ((tmp21)){
							HX_STACK_LINE(48)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(48)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(48)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(48)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(48)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(48)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(48)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(48)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(48)
							_x1 = tmp35;
							HX_STACK_LINE(48)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(48)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								if ((tmp45)){
									HX_STACK_LINE(48)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									if ((tmp46)){
										HX_STACK_LINE(48)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(48)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(48)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(48)
							_y1 = tmp37;
							HX_STACK_LINE(48)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(48)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(48)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(48)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(48)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(48)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(48)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(48)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(48)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(48)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(48)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(48)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(48)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(48)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(48)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								{
									HX_STACK_LINE(48)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(48)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									if ((tmp32)){
										HX_STACK_LINE(48)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(48)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(48)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_x1 = tmp24;
								HX_STACK_LINE(48)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(48)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(48)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(48)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(48)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(48)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(48)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(48)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								_y1 = tmp38;
								HX_STACK_LINE(48)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(48)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(48)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(48)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(48)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(48)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(48)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(48)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(48)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								if ((tmp23)){
									HX_STACK_LINE(48)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									{
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(48)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											if ((tmp34)){
												HX_STACK_LINE(48)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(48)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(48)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									_x1 = tmp25;
									HX_STACK_LINE(48)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(48)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(48)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(48)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(48)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(48)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(48)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(48)
									_y1 = tmp39;
									HX_STACK_LINE(48)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(48)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(48)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(48)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(48)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(48)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(48)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(48)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(48)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(48)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(48)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(48)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(48)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(48)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(48)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(48)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(48)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(48)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(48)
										_x1 = tmp38;
										HX_STACK_LINE(48)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(48)
										{
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(48)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											if ((tmp48)){
												HX_STACK_LINE(48)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(48)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												if ((tmp49)){
													HX_STACK_LINE(48)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(48)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(48)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(48)
										_y1 = tmp40;
										HX_STACK_LINE(48)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(48)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(48)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(48)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(48)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(48)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(48)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(48)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(48)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(48)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(48)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(48)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(48)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(48)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(48)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										if ((tmp25)){
											HX_STACK_LINE(48)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(48)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(48)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(48)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(48)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(48)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(48)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(48)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(48)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(48)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(48)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(48)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(48)
											_x1 = tmp39;
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(48)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(48)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(48)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(48)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(48)
											_y1 = tmp53;
											HX_STACK_LINE(48)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(48)
											{
												HX_STACK_LINE(48)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(48)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(48)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(48)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(48)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(48)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(48)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(48)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(48)
												if ((tmp63)){
													HX_STACK_LINE(48)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(48)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(48)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(48)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(48)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											if ((tmp26)){
												HX_STACK_LINE(48)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(48)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(48)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(48)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(48)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(48)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(48)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(48)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(48)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(48)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(48)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(48)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(48)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(48)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(48)
												_x1 = tmp40;
												HX_STACK_LINE(48)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(48)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(48)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(48)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(48)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(48)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(48)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(48)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(48)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(48)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(48)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(48)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(48)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(48)
												_y1 = tmp54;
												HX_STACK_LINE(48)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												{
													HX_STACK_LINE(48)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(48)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(48)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(48)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(48)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(48)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(48)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(48)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(48)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(48)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(48)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(48)
														if ((tmp65)){
															HX_STACK_LINE(48)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(48)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(48)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(48)
						{
							HX_STACK_LINE(48)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(48)
							_this->ignore_listeners = true;
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->x = _x1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->x;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(48)
									_this->x;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->y = _y1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->y;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(48)
									_this->y;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->z = _z1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->z;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(48)
									_this->z;
								}
							}
							HX_STACK_LINE(48)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(48)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(48)
								tmp23 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(48)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							if ((tmp24)){
								HX_STACK_LINE(48)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(48)
								tmp25 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp25)){
								HX_STACK_LINE(48)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(48)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							if ((tmp26)){
								HX_STACK_LINE(48)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(48)
								tmp27 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp27)){
								HX_STACK_LINE(48)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(48)
							_this;
						}
						HX_STACK_LINE(48)
						_this;
					}
				}
				HX_STACK_LINE(48)
				Dynamic tmp1 = this->listen_z_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(48)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(48)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(48)
				if ((tmp2)){
					HX_STACK_LINE(48)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(48)
					tmp3 = false;
				}
				HX_STACK_LINE(48)
				if ((tmp3)){
					HX_STACK_LINE(48)
					Float tmp4 = this->z;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					this->listen_z(tmp4);
				}
				HX_STACK_LINE(48)
				this->z;
			}
		}
		HX_STACK_LINE(48)
		{
			HX_STACK_LINE(48)
			this->w = _w;
			HX_STACK_LINE(48)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(48)
			if ((tmp)){
				HX_STACK_LINE(48)
				this->w;
			}
			else{
				HX_STACK_LINE(48)
				{
					HX_STACK_LINE(48)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(48)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(48)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(48)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					if ((tmp4)){
						HX_STACK_LINE(48)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(48)
						tmp5 = true;
					}
					HX_STACK_LINE(48)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(48)
					if ((tmp6)){
						HX_STACK_LINE(48)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(48)
						tmp7 = true;
					}
					HX_STACK_LINE(48)
					if ((tmp7)){
						HX_STACK_LINE(48)
						Dynamic();
					}
					else{
						HX_STACK_LINE(48)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(48)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(48)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(48)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(48)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(48)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(48)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(48)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(48)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(48)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(48)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(48)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(48)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(48)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(48)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(48)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(48)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(48)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(48)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(48)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(48)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(48)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(48)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(48)
						if ((tmp21)){
							HX_STACK_LINE(48)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(48)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(48)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(48)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(48)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(48)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(48)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(48)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(48)
							_x1 = tmp35;
							HX_STACK_LINE(48)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(48)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								if ((tmp45)){
									HX_STACK_LINE(48)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									if ((tmp46)){
										HX_STACK_LINE(48)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(48)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(48)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(48)
							_y1 = tmp37;
							HX_STACK_LINE(48)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(48)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(48)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(48)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(48)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(48)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(48)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(48)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(48)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(48)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(48)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(48)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(48)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(48)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(48)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								{
									HX_STACK_LINE(48)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(48)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									if ((tmp32)){
										HX_STACK_LINE(48)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(48)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(48)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_x1 = tmp24;
								HX_STACK_LINE(48)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(48)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(48)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(48)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(48)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(48)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(48)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(48)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								_y1 = tmp38;
								HX_STACK_LINE(48)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(48)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(48)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(48)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(48)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(48)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(48)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(48)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(48)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(48)
								if ((tmp23)){
									HX_STACK_LINE(48)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									{
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(48)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										if ((tmp33)){
											HX_STACK_LINE(48)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											if ((tmp34)){
												HX_STACK_LINE(48)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(48)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(48)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									_x1 = tmp25;
									HX_STACK_LINE(48)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(48)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(48)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(48)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(48)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(48)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(48)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(48)
									_y1 = tmp39;
									HX_STACK_LINE(48)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(48)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(48)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(48)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(48)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(48)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(48)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(48)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(48)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(48)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(48)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(48)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(48)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(48)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(48)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(48)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(48)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(48)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(48)
										_x1 = tmp38;
										HX_STACK_LINE(48)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(48)
										{
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(48)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											if ((tmp48)){
												HX_STACK_LINE(48)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(48)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												if ((tmp49)){
													HX_STACK_LINE(48)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(48)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(48)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(48)
										_y1 = tmp40;
										HX_STACK_LINE(48)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(48)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(48)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(48)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(48)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(48)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(48)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(48)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(48)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(48)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(48)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(48)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(48)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(48)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(48)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										if ((tmp25)){
											HX_STACK_LINE(48)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(48)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(48)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(48)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(48)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(48)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(48)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(48)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(48)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(48)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(48)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(48)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(48)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(48)
											_x1 = tmp39;
											HX_STACK_LINE(48)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(48)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(48)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(48)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(48)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(48)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(48)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(48)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(48)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(48)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(48)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(48)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(48)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(48)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(48)
											_y1 = tmp53;
											HX_STACK_LINE(48)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(48)
											{
												HX_STACK_LINE(48)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(48)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(48)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(48)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(48)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(48)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(48)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(48)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(48)
												if ((tmp63)){
													HX_STACK_LINE(48)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(48)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(48)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(48)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(48)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(48)
											if ((tmp26)){
												HX_STACK_LINE(48)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(48)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(48)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(48)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(48)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(48)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(48)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(48)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(48)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(48)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(48)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(48)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(48)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(48)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(48)
												_x1 = tmp40;
												HX_STACK_LINE(48)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(48)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(48)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(48)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(48)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(48)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(48)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(48)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(48)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(48)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(48)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(48)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(48)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(48)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(48)
												_y1 = tmp54;
												HX_STACK_LINE(48)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(48)
												{
													HX_STACK_LINE(48)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(48)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(48)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(48)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(48)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(48)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(48)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(48)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(48)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(48)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(48)
													if ((tmp64)){
														HX_STACK_LINE(48)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(48)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(48)
														if ((tmp65)){
															HX_STACK_LINE(48)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(48)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(48)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(48)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(48)
						{
							HX_STACK_LINE(48)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(48)
							_this->ignore_listeners = true;
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->x = _x1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->x;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(48)
									_this->x;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->y = _y1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->y;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(48)
									_this->y;
								}
							}
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								_this->z = _z1;
								HX_STACK_LINE(48)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(48)
								if ((tmp22)){
									HX_STACK_LINE(48)
									_this->z;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(48)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(48)
									if ((tmp23)){
										HX_STACK_LINE(48)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(48)
										tmp24 = false;
									}
									HX_STACK_LINE(48)
									if ((tmp24)){
										HX_STACK_LINE(48)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(48)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(48)
									_this->z;
								}
							}
							HX_STACK_LINE(48)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(48)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(48)
								tmp23 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(48)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							if ((tmp24)){
								HX_STACK_LINE(48)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(48)
								tmp25 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp25)){
								HX_STACK_LINE(48)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(48)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							if ((tmp26)){
								HX_STACK_LINE(48)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(48)
								tmp27 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp27)){
								HX_STACK_LINE(48)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(48)
							_this;
						}
						HX_STACK_LINE(48)
						_this;
					}
				}
				HX_STACK_LINE(48)
				Dynamic tmp1 = this->listen_w_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(48)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(48)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(48)
				if ((tmp2)){
					HX_STACK_LINE(48)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(48)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(48)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(48)
					tmp3 = false;
				}
				HX_STACK_LINE(48)
				if ((tmp3)){
					HX_STACK_LINE(48)
					Float tmp4 = this->w;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(48)
					this->listen_w(tmp4);
				}
				HX_STACK_LINE(48)
				this->w;
			}
		}
		HX_STACK_LINE(48)
		this->ignore_euler = false;
		HX_STACK_LINE(48)
		{
			HX_STACK_LINE(48)
			::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(48)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(48)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(48)
			bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(48)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(48)
			if ((tmp3)){
				HX_STACK_LINE(48)
				tmp4 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(48)
				tmp4 = true;
			}
			HX_STACK_LINE(48)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(48)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(48)
			if ((tmp5)){
				HX_STACK_LINE(48)
				tmp6 = this->_construct;
			}
			else{
				HX_STACK_LINE(48)
				tmp6 = true;
			}
			HX_STACK_LINE(48)
			if ((tmp6)){
				HX_STACK_LINE(48)
				Dynamic();
			}
			else{
				HX_STACK_LINE(48)
				::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(48)
				::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(48)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(48)
				Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(48)
				Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(48)
				Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(48)
				Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(48)
				Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(48)
				Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(48)
				Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(48)
				Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(48)
				Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(48)
				Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(48)
				Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(48)
				Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(48)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(48)
				Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(48)
				Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(48)
				Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(48)
				Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
				HX_STACK_LINE(48)
				Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
				HX_STACK_LINE(48)
				Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
				HX_STACK_LINE(48)
				bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(48)
				if ((tmp20)){
					HX_STACK_LINE(48)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(48)
					Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(48)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(48)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(48)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(48)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(48)
					Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(48)
					Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(48)
					Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(48)
					Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(48)
					Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(48)
					Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(48)
					Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(48)
					Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(48)
					_x1 = tmp34;
					HX_STACK_LINE(48)
					Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(48)
					{
						HX_STACK_LINE(48)
						Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(48)
						Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(48)
						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(48)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(48)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(48)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(48)
						Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(48)
						Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(48)
						Float value = tmp43;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(48)
						bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(48)
						if ((tmp44)){
							HX_STACK_LINE(48)
							tmp35 = (int)-1;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(48)
							if ((tmp45)){
								HX_STACK_LINE(48)
								tmp35 = (int)1;
							}
							else{
								HX_STACK_LINE(48)
								tmp35 = value;
							}
						}
					}
					HX_STACK_LINE(48)
					Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(48)
					_y1 = tmp36;
					HX_STACK_LINE(48)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(48)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(48)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(48)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(48)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(48)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(48)
					Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(48)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(48)
					Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(48)
					Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(48)
					Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(48)
					Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(48)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(48)
					Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(48)
					_z1 = tmp50;
				}
				else{
					HX_STACK_LINE(48)
					bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(48)
					if ((tmp21)){
						HX_STACK_LINE(48)
						Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(48)
						{
							HX_STACK_LINE(48)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(48)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(48)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(48)
							Float value = tmp30;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(48)
							bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(48)
							if ((tmp31)){
								HX_STACK_LINE(48)
								tmp22 = (int)-1;
							}
							else{
								HX_STACK_LINE(48)
								bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(48)
								if ((tmp32)){
									HX_STACK_LINE(48)
									tmp22 = (int)1;
								}
								else{
									HX_STACK_LINE(48)
									tmp22 = value;
								}
							}
						}
						HX_STACK_LINE(48)
						Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(48)
						_x1 = tmp23;
						HX_STACK_LINE(48)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(48)
						Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(48)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(48)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(48)
						Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(48)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(48)
						Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(48)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(48)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(48)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(48)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(48)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(48)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(48)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(48)
						_y1 = tmp37;
						HX_STACK_LINE(48)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(48)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(48)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(48)
						Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(48)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(48)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(48)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(48)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(48)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(48)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(48)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(48)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(48)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(48)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(48)
						_z1 = tmp51;
					}
					else{
						HX_STACK_LINE(48)
						bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(48)
						if ((tmp22)){
							HX_STACK_LINE(48)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							{
								HX_STACK_LINE(48)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(48)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(48)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(48)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(48)
								if ((tmp32)){
									HX_STACK_LINE(48)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(48)
									if ((tmp33)){
										HX_STACK_LINE(48)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(48)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(48)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(48)
							_x1 = tmp24;
							HX_STACK_LINE(48)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(48)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(48)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(48)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(48)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(48)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(48)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(48)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(48)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(48)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(48)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(48)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(48)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(48)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(48)
							_y1 = tmp38;
							HX_STACK_LINE(48)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(48)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(48)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(48)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(48)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(48)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(48)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(48)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(48)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(48)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(48)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(48)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(48)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(48)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(48)
							_z1 = tmp52;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(48)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(48)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(48)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(48)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(48)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(48)
								Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(48)
								Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(48)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(48)
								Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(48)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(48)
								Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(48)
								_x1 = tmp37;
								HX_STACK_LINE(48)
								Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(48)
								{
									HX_STACK_LINE(48)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(48)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(48)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(48)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(48)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(48)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(48)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(48)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									Float value = tmp46;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(48)
									bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(48)
									if ((tmp47)){
										HX_STACK_LINE(48)
										tmp38 = (int)-1;
									}
									else{
										HX_STACK_LINE(48)
										bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(48)
										if ((tmp48)){
											HX_STACK_LINE(48)
											tmp38 = (int)1;
										}
										else{
											HX_STACK_LINE(48)
											tmp38 = value;
										}
									}
								}
								HX_STACK_LINE(48)
								Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(48)
								_y1 = tmp39;
								HX_STACK_LINE(48)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(48)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(48)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(48)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(48)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(48)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(48)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(48)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(48)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(48)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(48)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(48)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(48)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(48)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(48)
								_z1 = tmp53;
							}
							else{
								HX_STACK_LINE(48)
								bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								if ((tmp24)){
									HX_STACK_LINE(48)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(48)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(48)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(48)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(48)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(48)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(48)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(48)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(48)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(48)
									Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(48)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(48)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(48)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(48)
									_x1 = tmp38;
									HX_STACK_LINE(48)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(48)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(48)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(48)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(48)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(48)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(48)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(48)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(48)
									Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(48)
									Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(48)
									Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(48)
									Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(48)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(48)
									Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(48)
									_y1 = tmp52;
									HX_STACK_LINE(48)
									Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(48)
									{
										HX_STACK_LINE(48)
										Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(48)
										Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(48)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(48)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(48)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(48)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(48)
										Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(48)
										Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(48)
										Float value = tmp61;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(48)
										bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(48)
										if ((tmp62)){
											HX_STACK_LINE(48)
											tmp53 = (int)-1;
										}
										else{
											HX_STACK_LINE(48)
											bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(48)
											if ((tmp63)){
												HX_STACK_LINE(48)
												tmp53 = (int)1;
											}
											else{
												HX_STACK_LINE(48)
												tmp53 = value;
											}
										}
									}
									HX_STACK_LINE(48)
									Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(48)
									_z1 = tmp54;
								}
								else{
									HX_STACK_LINE(48)
									bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(48)
									if ((tmp25)){
										HX_STACK_LINE(48)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(48)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(48)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(48)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(48)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(48)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(48)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(48)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(48)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(48)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(48)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(48)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(48)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(48)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(48)
										_x1 = tmp39;
										HX_STACK_LINE(48)
										Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(48)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(48)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(48)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(48)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(48)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(48)
										Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(48)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(48)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(48)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(48)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(48)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(48)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(48)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(48)
										_y1 = tmp53;
										HX_STACK_LINE(48)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(48)
										{
											HX_STACK_LINE(48)
											Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(48)
											Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(48)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(48)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(48)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(48)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(48)
											Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(48)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(48)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(48)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(48)
											if ((tmp63)){
												HX_STACK_LINE(48)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(48)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(48)
												if ((tmp64)){
													HX_STACK_LINE(48)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(48)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(48)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(48)
										_z1 = tmp55;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(48)
				{
					HX_STACK_LINE(48)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(48)
					_this->ignore_listeners = true;
					HX_STACK_LINE(48)
					{
						HX_STACK_LINE(48)
						_this->x = _x1;
						HX_STACK_LINE(48)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(48)
						if ((tmp21)){
							HX_STACK_LINE(48)
							_this->x;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(48)
								tmp23 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = _x1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(48)
							_this->x;
						}
					}
					HX_STACK_LINE(48)
					{
						HX_STACK_LINE(48)
						_this->y = _y1;
						HX_STACK_LINE(48)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(48)
						if ((tmp21)){
							HX_STACK_LINE(48)
							_this->y;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(48)
								tmp23 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = _y1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_this->listen_y(tmp24);
							}
							HX_STACK_LINE(48)
							_this->y;
						}
					}
					HX_STACK_LINE(48)
					{
						HX_STACK_LINE(48)
						_this->z = _z1;
						HX_STACK_LINE(48)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(48)
						if ((tmp21)){
							HX_STACK_LINE(48)
							_this->z;
						}
						else{
							HX_STACK_LINE(48)
							bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(48)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(48)
							if ((tmp22)){
								HX_STACK_LINE(48)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(48)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(48)
								tmp23 = false;
							}
							HX_STACK_LINE(48)
							if ((tmp23)){
								HX_STACK_LINE(48)
								Float tmp24 = _z1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(48)
								_this->listen_z(tmp24);
							}
							HX_STACK_LINE(48)
							_this->z;
						}
					}
					HX_STACK_LINE(48)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(48)
					bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(48)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(48)
					if ((tmp21)){
						HX_STACK_LINE(48)
						bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(48)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(48)
						tmp22 = !(tmp24);
					}
					else{
						HX_STACK_LINE(48)
						tmp22 = false;
					}
					HX_STACK_LINE(48)
					if ((tmp22)){
						HX_STACK_LINE(48)
						Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(48)
						_this->listen_x(tmp23);
					}
					HX_STACK_LINE(48)
					bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(48)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(48)
					if ((tmp23)){
						HX_STACK_LINE(48)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(48)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(48)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(48)
						tmp24 = false;
					}
					HX_STACK_LINE(48)
					if ((tmp24)){
						HX_STACK_LINE(48)
						Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(48)
						_this->listen_y(tmp25);
					}
					HX_STACK_LINE(48)
					bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(48)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(48)
					if ((tmp25)){
						HX_STACK_LINE(48)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(48)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(48)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(48)
						tmp26 = false;
					}
					HX_STACK_LINE(48)
					if ((tmp26)){
						HX_STACK_LINE(48)
						Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(48)
						_this->listen_z(tmp27);
					}
					HX_STACK_LINE(48)
					_this;
				}
				HX_STACK_LINE(48)
				_this;
			}
		}
		HX_STACK_LINE(48)
		Dynamic tmp = this->listen_x_dyn();		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(48)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(48)
		bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(48)
		if ((tmp1)){
			HX_STACK_LINE(48)
			bool tmp3 = this->ignore_listeners;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(48)
			bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(48)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(48)
			tmp2 = !(tmp5);
		}
		else{
			HX_STACK_LINE(48)
			tmp2 = false;
		}
		HX_STACK_LINE(48)
		if ((tmp2)){
			HX_STACK_LINE(48)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(48)
			this->listen_x(tmp3);
		}
		HX_STACK_LINE(48)
		Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(48)
		bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(48)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(48)
		if ((tmp4)){
			HX_STACK_LINE(48)
			bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(48)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(48)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(48)
			tmp5 = !(tmp8);
		}
		else{
			HX_STACK_LINE(48)
			tmp5 = false;
		}
		HX_STACK_LINE(48)
		if ((tmp5)){
			HX_STACK_LINE(48)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(48)
			this->listen_y(tmp6);
		}
		HX_STACK_LINE(48)
		Dynamic tmp6 = this->listen_z_dyn();		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(48)
		bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(48)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(48)
		if ((tmp7)){
			HX_STACK_LINE(48)
			bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(48)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(48)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(48)
			tmp8 = !(tmp11);
		}
		else{
			HX_STACK_LINE(48)
			tmp8 = false;
		}
		HX_STACK_LINE(48)
		if ((tmp8)){
			HX_STACK_LINE(48)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(48)
			this->listen_z(tmp9);
		}
		HX_STACK_LINE(48)
		Dynamic tmp9 = this->listen_w_dyn();		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(48)
		bool tmp10 = (tmp9 != null());		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(48)
		bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(48)
		if ((tmp10)){
			HX_STACK_LINE(48)
			bool tmp12 = this->ignore_listeners;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(48)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(48)
			bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(48)
			tmp11 = !(tmp14);
		}
		else{
			HX_STACK_LINE(48)
			tmp11 = false;
		}
		HX_STACK_LINE(48)
		if ((tmp11)){
			HX_STACK_LINE(48)
			Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(48)
			this->listen_w(tmp12);
		}
	}
	HX_STACK_LINE(50)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC4(Quaternion_obj,set,return )

::phoenix::Quaternion Quaternion_obj::copy( ::phoenix::Quaternion _quaternion){
	HX_STACK_FRAME("phoenix.Quaternion","copy",0x51b50a06,"phoenix.Quaternion.copy","phoenix/Quaternion.hx",55,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_quaternion,"_quaternion")
	HX_STACK_LINE(57)
	{
		HX_STACK_LINE(57)
		this->ignore_euler = true;
		HX_STACK_LINE(57)
		{
			HX_STACK_LINE(57)
			this->x = _quaternion->x;
			HX_STACK_LINE(57)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(57)
			if ((tmp)){
				HX_STACK_LINE(57)
				this->x;
			}
			else{
				HX_STACK_LINE(57)
				{
					HX_STACK_LINE(57)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(57)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(57)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(57)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					if ((tmp4)){
						HX_STACK_LINE(57)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(57)
						tmp5 = true;
					}
					HX_STACK_LINE(57)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(57)
					if ((tmp6)){
						HX_STACK_LINE(57)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(57)
						tmp7 = true;
					}
					HX_STACK_LINE(57)
					if ((tmp7)){
						HX_STACK_LINE(57)
						Dynamic();
					}
					else{
						HX_STACK_LINE(57)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(57)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(57)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(57)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(57)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(57)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(57)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(57)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(57)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(57)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(57)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(57)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(57)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(57)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(57)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(57)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(57)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(57)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(57)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(57)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(57)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(57)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(57)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(57)
						if ((tmp21)){
							HX_STACK_LINE(57)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(57)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(57)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(57)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(57)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(57)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(57)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(57)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(57)
							_x = tmp35;
							HX_STACK_LINE(57)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(57)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								if ((tmp45)){
									HX_STACK_LINE(57)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									if ((tmp46)){
										HX_STACK_LINE(57)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(57)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(57)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(57)
							_y = tmp37;
							HX_STACK_LINE(57)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(57)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(57)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(57)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(57)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(57)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(57)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(57)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(57)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(57)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(57)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(57)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(57)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(57)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(57)
							_z = tmp51;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								{
									HX_STACK_LINE(57)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(57)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									if ((tmp32)){
										HX_STACK_LINE(57)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(57)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(57)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_x = tmp24;
								HX_STACK_LINE(57)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(57)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(57)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(57)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(57)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(57)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(57)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(57)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								_y = tmp38;
								HX_STACK_LINE(57)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(57)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(57)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(57)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(57)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(57)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(57)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(57)
								_z = tmp52;
							}
							else{
								HX_STACK_LINE(57)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								if ((tmp23)){
									HX_STACK_LINE(57)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									{
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(57)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											if ((tmp34)){
												HX_STACK_LINE(57)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(57)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(57)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									_x = tmp25;
									HX_STACK_LINE(57)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(57)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(57)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(57)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(57)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(57)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(57)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(57)
									_y = tmp39;
									HX_STACK_LINE(57)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(57)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(57)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(57)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(57)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(57)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(57)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(57)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(57)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(57)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(57)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(57)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(57)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(57)
									_z = tmp53;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(57)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(57)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(57)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(57)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(57)
										_x = tmp38;
										HX_STACK_LINE(57)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(57)
										{
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(57)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											if ((tmp48)){
												HX_STACK_LINE(57)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(57)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												if ((tmp49)){
													HX_STACK_LINE(57)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(57)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(57)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(57)
										_y = tmp40;
										HX_STACK_LINE(57)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(57)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(57)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(57)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(57)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(57)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(57)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(57)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(57)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(57)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(57)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(57)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(57)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(57)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(57)
										_z = tmp54;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										if ((tmp25)){
											HX_STACK_LINE(57)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(57)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(57)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(57)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(57)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(57)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(57)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(57)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(57)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(57)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(57)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(57)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(57)
											_x = tmp39;
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(57)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(57)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(57)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(57)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(57)
											_y = tmp53;
											HX_STACK_LINE(57)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(57)
											{
												HX_STACK_LINE(57)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(57)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(57)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(57)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(57)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(57)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(57)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(57)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(57)
												if ((tmp63)){
													HX_STACK_LINE(57)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(57)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(57)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(57)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(57)
											_z = tmp55;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											if ((tmp26)){
												HX_STACK_LINE(57)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(57)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(57)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(57)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(57)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(57)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(57)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(57)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(57)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(57)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(57)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(57)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(57)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(57)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(57)
												_x = tmp40;
												HX_STACK_LINE(57)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(57)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(57)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(57)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(57)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(57)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(57)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(57)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(57)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(57)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(57)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(57)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(57)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(57)
												_y = tmp54;
												HX_STACK_LINE(57)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												{
													HX_STACK_LINE(57)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(57)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(57)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(57)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(57)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(57)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(57)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(57)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(57)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(57)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(57)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(57)
														if ((tmp65)){
															HX_STACK_LINE(57)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(57)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(57)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												_z = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(57)
						{
							HX_STACK_LINE(57)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(57)
							_this->ignore_listeners = true;
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->x = _x;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->x;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(57)
									_this->x;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->y = _y;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->y;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(57)
									_this->y;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->z = _z;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->z;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(57)
									_this->z;
								}
							}
							HX_STACK_LINE(57)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(57)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(57)
								tmp23 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(57)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							if ((tmp24)){
								HX_STACK_LINE(57)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(57)
								tmp25 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp25)){
								HX_STACK_LINE(57)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(57)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							if ((tmp26)){
								HX_STACK_LINE(57)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(57)
								tmp27 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp27)){
								HX_STACK_LINE(57)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(57)
							_this;
						}
						HX_STACK_LINE(57)
						_this;
					}
				}
				HX_STACK_LINE(57)
				Dynamic tmp1 = this->listen_x_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(57)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(57)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(57)
				if ((tmp2)){
					HX_STACK_LINE(57)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(57)
					tmp3 = false;
				}
				HX_STACK_LINE(57)
				if ((tmp3)){
					HX_STACK_LINE(57)
					Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					this->listen_x(tmp4);
				}
				HX_STACK_LINE(57)
				this->x;
			}
		}
		HX_STACK_LINE(57)
		{
			HX_STACK_LINE(57)
			this->y = _quaternion->y;
			HX_STACK_LINE(57)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(57)
			if ((tmp)){
				HX_STACK_LINE(57)
				this->y;
			}
			else{
				HX_STACK_LINE(57)
				{
					HX_STACK_LINE(57)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(57)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(57)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(57)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					if ((tmp4)){
						HX_STACK_LINE(57)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(57)
						tmp5 = true;
					}
					HX_STACK_LINE(57)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(57)
					if ((tmp6)){
						HX_STACK_LINE(57)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(57)
						tmp7 = true;
					}
					HX_STACK_LINE(57)
					if ((tmp7)){
						HX_STACK_LINE(57)
						Dynamic();
					}
					else{
						HX_STACK_LINE(57)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(57)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(57)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(57)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(57)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(57)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(57)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(57)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(57)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(57)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(57)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(57)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(57)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(57)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(57)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(57)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(57)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(57)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(57)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(57)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(57)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(57)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(57)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(57)
						if ((tmp21)){
							HX_STACK_LINE(57)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(57)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(57)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(57)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(57)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(57)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(57)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(57)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(57)
							_x = tmp35;
							HX_STACK_LINE(57)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(57)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								if ((tmp45)){
									HX_STACK_LINE(57)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									if ((tmp46)){
										HX_STACK_LINE(57)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(57)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(57)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(57)
							_y = tmp37;
							HX_STACK_LINE(57)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(57)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(57)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(57)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(57)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(57)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(57)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(57)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(57)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(57)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(57)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(57)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(57)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(57)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(57)
							_z = tmp51;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								{
									HX_STACK_LINE(57)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(57)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									if ((tmp32)){
										HX_STACK_LINE(57)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(57)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(57)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_x = tmp24;
								HX_STACK_LINE(57)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(57)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(57)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(57)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(57)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(57)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(57)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(57)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								_y = tmp38;
								HX_STACK_LINE(57)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(57)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(57)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(57)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(57)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(57)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(57)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(57)
								_z = tmp52;
							}
							else{
								HX_STACK_LINE(57)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								if ((tmp23)){
									HX_STACK_LINE(57)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									{
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(57)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											if ((tmp34)){
												HX_STACK_LINE(57)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(57)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(57)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									_x = tmp25;
									HX_STACK_LINE(57)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(57)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(57)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(57)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(57)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(57)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(57)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(57)
									_y = tmp39;
									HX_STACK_LINE(57)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(57)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(57)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(57)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(57)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(57)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(57)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(57)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(57)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(57)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(57)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(57)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(57)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(57)
									_z = tmp53;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(57)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(57)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(57)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(57)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(57)
										_x = tmp38;
										HX_STACK_LINE(57)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(57)
										{
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(57)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											if ((tmp48)){
												HX_STACK_LINE(57)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(57)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												if ((tmp49)){
													HX_STACK_LINE(57)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(57)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(57)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(57)
										_y = tmp40;
										HX_STACK_LINE(57)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(57)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(57)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(57)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(57)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(57)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(57)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(57)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(57)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(57)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(57)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(57)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(57)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(57)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(57)
										_z = tmp54;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										if ((tmp25)){
											HX_STACK_LINE(57)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(57)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(57)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(57)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(57)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(57)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(57)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(57)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(57)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(57)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(57)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(57)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(57)
											_x = tmp39;
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(57)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(57)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(57)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(57)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(57)
											_y = tmp53;
											HX_STACK_LINE(57)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(57)
											{
												HX_STACK_LINE(57)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(57)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(57)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(57)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(57)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(57)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(57)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(57)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(57)
												if ((tmp63)){
													HX_STACK_LINE(57)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(57)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(57)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(57)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(57)
											_z = tmp55;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											if ((tmp26)){
												HX_STACK_LINE(57)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(57)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(57)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(57)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(57)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(57)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(57)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(57)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(57)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(57)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(57)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(57)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(57)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(57)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(57)
												_x = tmp40;
												HX_STACK_LINE(57)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(57)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(57)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(57)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(57)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(57)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(57)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(57)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(57)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(57)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(57)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(57)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(57)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(57)
												_y = tmp54;
												HX_STACK_LINE(57)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												{
													HX_STACK_LINE(57)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(57)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(57)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(57)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(57)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(57)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(57)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(57)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(57)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(57)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(57)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(57)
														if ((tmp65)){
															HX_STACK_LINE(57)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(57)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(57)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												_z = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(57)
						{
							HX_STACK_LINE(57)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(57)
							_this->ignore_listeners = true;
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->x = _x;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->x;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(57)
									_this->x;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->y = _y;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->y;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(57)
									_this->y;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->z = _z;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->z;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(57)
									_this->z;
								}
							}
							HX_STACK_LINE(57)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(57)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(57)
								tmp23 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(57)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							if ((tmp24)){
								HX_STACK_LINE(57)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(57)
								tmp25 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp25)){
								HX_STACK_LINE(57)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(57)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							if ((tmp26)){
								HX_STACK_LINE(57)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(57)
								tmp27 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp27)){
								HX_STACK_LINE(57)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(57)
							_this;
						}
						HX_STACK_LINE(57)
						_this;
					}
				}
				HX_STACK_LINE(57)
				Dynamic tmp1 = this->listen_y_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(57)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(57)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(57)
				if ((tmp2)){
					HX_STACK_LINE(57)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(57)
					tmp3 = false;
				}
				HX_STACK_LINE(57)
				if ((tmp3)){
					HX_STACK_LINE(57)
					Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					this->listen_y(tmp4);
				}
				HX_STACK_LINE(57)
				this->y;
			}
		}
		HX_STACK_LINE(57)
		{
			HX_STACK_LINE(57)
			this->z = _quaternion->z;
			HX_STACK_LINE(57)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(57)
			if ((tmp)){
				HX_STACK_LINE(57)
				this->z;
			}
			else{
				HX_STACK_LINE(57)
				{
					HX_STACK_LINE(57)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(57)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(57)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(57)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					if ((tmp4)){
						HX_STACK_LINE(57)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(57)
						tmp5 = true;
					}
					HX_STACK_LINE(57)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(57)
					if ((tmp6)){
						HX_STACK_LINE(57)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(57)
						tmp7 = true;
					}
					HX_STACK_LINE(57)
					if ((tmp7)){
						HX_STACK_LINE(57)
						Dynamic();
					}
					else{
						HX_STACK_LINE(57)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(57)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(57)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(57)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(57)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(57)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(57)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(57)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(57)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(57)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(57)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(57)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(57)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(57)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(57)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(57)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(57)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(57)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(57)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(57)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(57)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(57)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(57)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(57)
						if ((tmp21)){
							HX_STACK_LINE(57)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(57)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(57)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(57)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(57)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(57)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(57)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(57)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(57)
							_x = tmp35;
							HX_STACK_LINE(57)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(57)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								if ((tmp45)){
									HX_STACK_LINE(57)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									if ((tmp46)){
										HX_STACK_LINE(57)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(57)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(57)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(57)
							_y = tmp37;
							HX_STACK_LINE(57)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(57)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(57)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(57)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(57)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(57)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(57)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(57)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(57)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(57)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(57)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(57)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(57)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(57)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(57)
							_z = tmp51;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								{
									HX_STACK_LINE(57)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(57)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									if ((tmp32)){
										HX_STACK_LINE(57)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(57)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(57)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_x = tmp24;
								HX_STACK_LINE(57)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(57)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(57)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(57)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(57)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(57)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(57)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(57)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								_y = tmp38;
								HX_STACK_LINE(57)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(57)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(57)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(57)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(57)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(57)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(57)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(57)
								_z = tmp52;
							}
							else{
								HX_STACK_LINE(57)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								if ((tmp23)){
									HX_STACK_LINE(57)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									{
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(57)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											if ((tmp34)){
												HX_STACK_LINE(57)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(57)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(57)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									_x = tmp25;
									HX_STACK_LINE(57)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(57)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(57)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(57)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(57)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(57)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(57)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(57)
									_y = tmp39;
									HX_STACK_LINE(57)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(57)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(57)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(57)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(57)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(57)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(57)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(57)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(57)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(57)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(57)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(57)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(57)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(57)
									_z = tmp53;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(57)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(57)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(57)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(57)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(57)
										_x = tmp38;
										HX_STACK_LINE(57)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(57)
										{
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(57)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											if ((tmp48)){
												HX_STACK_LINE(57)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(57)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												if ((tmp49)){
													HX_STACK_LINE(57)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(57)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(57)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(57)
										_y = tmp40;
										HX_STACK_LINE(57)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(57)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(57)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(57)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(57)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(57)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(57)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(57)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(57)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(57)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(57)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(57)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(57)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(57)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(57)
										_z = tmp54;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										if ((tmp25)){
											HX_STACK_LINE(57)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(57)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(57)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(57)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(57)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(57)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(57)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(57)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(57)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(57)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(57)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(57)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(57)
											_x = tmp39;
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(57)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(57)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(57)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(57)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(57)
											_y = tmp53;
											HX_STACK_LINE(57)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(57)
											{
												HX_STACK_LINE(57)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(57)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(57)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(57)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(57)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(57)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(57)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(57)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(57)
												if ((tmp63)){
													HX_STACK_LINE(57)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(57)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(57)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(57)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(57)
											_z = tmp55;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											if ((tmp26)){
												HX_STACK_LINE(57)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(57)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(57)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(57)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(57)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(57)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(57)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(57)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(57)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(57)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(57)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(57)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(57)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(57)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(57)
												_x = tmp40;
												HX_STACK_LINE(57)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(57)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(57)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(57)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(57)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(57)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(57)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(57)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(57)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(57)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(57)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(57)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(57)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(57)
												_y = tmp54;
												HX_STACK_LINE(57)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												{
													HX_STACK_LINE(57)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(57)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(57)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(57)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(57)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(57)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(57)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(57)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(57)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(57)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(57)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(57)
														if ((tmp65)){
															HX_STACK_LINE(57)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(57)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(57)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												_z = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(57)
						{
							HX_STACK_LINE(57)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(57)
							_this->ignore_listeners = true;
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->x = _x;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->x;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(57)
									_this->x;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->y = _y;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->y;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(57)
									_this->y;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->z = _z;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->z;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(57)
									_this->z;
								}
							}
							HX_STACK_LINE(57)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(57)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(57)
								tmp23 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(57)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							if ((tmp24)){
								HX_STACK_LINE(57)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(57)
								tmp25 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp25)){
								HX_STACK_LINE(57)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(57)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							if ((tmp26)){
								HX_STACK_LINE(57)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(57)
								tmp27 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp27)){
								HX_STACK_LINE(57)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(57)
							_this;
						}
						HX_STACK_LINE(57)
						_this;
					}
				}
				HX_STACK_LINE(57)
				Dynamic tmp1 = this->listen_z_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(57)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(57)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(57)
				if ((tmp2)){
					HX_STACK_LINE(57)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(57)
					tmp3 = false;
				}
				HX_STACK_LINE(57)
				if ((tmp3)){
					HX_STACK_LINE(57)
					Float tmp4 = this->z;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					this->listen_z(tmp4);
				}
				HX_STACK_LINE(57)
				this->z;
			}
		}
		HX_STACK_LINE(57)
		{
			HX_STACK_LINE(57)
			this->w = _quaternion->w;
			HX_STACK_LINE(57)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(57)
			if ((tmp)){
				HX_STACK_LINE(57)
				this->w;
			}
			else{
				HX_STACK_LINE(57)
				{
					HX_STACK_LINE(57)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(57)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(57)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(57)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					if ((tmp4)){
						HX_STACK_LINE(57)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(57)
						tmp5 = true;
					}
					HX_STACK_LINE(57)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(57)
					if ((tmp6)){
						HX_STACK_LINE(57)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(57)
						tmp7 = true;
					}
					HX_STACK_LINE(57)
					if ((tmp7)){
						HX_STACK_LINE(57)
						Dynamic();
					}
					else{
						HX_STACK_LINE(57)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(57)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(57)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(57)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(57)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(57)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(57)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(57)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(57)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(57)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(57)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(57)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(57)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(57)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(57)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(57)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(57)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(57)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(57)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(57)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(57)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(57)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(57)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(57)
						if ((tmp21)){
							HX_STACK_LINE(57)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(57)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(57)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(57)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(57)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(57)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(57)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(57)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(57)
							_x = tmp35;
							HX_STACK_LINE(57)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(57)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								if ((tmp45)){
									HX_STACK_LINE(57)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									if ((tmp46)){
										HX_STACK_LINE(57)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(57)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(57)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(57)
							_y = tmp37;
							HX_STACK_LINE(57)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(57)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(57)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(57)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(57)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(57)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(57)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(57)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(57)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(57)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(57)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(57)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(57)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(57)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(57)
							_z = tmp51;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								{
									HX_STACK_LINE(57)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(57)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									if ((tmp32)){
										HX_STACK_LINE(57)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(57)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(57)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_x = tmp24;
								HX_STACK_LINE(57)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(57)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(57)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(57)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(57)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(57)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(57)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(57)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								_y = tmp38;
								HX_STACK_LINE(57)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(57)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(57)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(57)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(57)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(57)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(57)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(57)
								_z = tmp52;
							}
							else{
								HX_STACK_LINE(57)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(57)
								if ((tmp23)){
									HX_STACK_LINE(57)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									{
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(57)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										if ((tmp33)){
											HX_STACK_LINE(57)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											if ((tmp34)){
												HX_STACK_LINE(57)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(57)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(57)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									_x = tmp25;
									HX_STACK_LINE(57)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(57)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(57)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(57)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(57)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(57)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(57)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(57)
									_y = tmp39;
									HX_STACK_LINE(57)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(57)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(57)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(57)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(57)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(57)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(57)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(57)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(57)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(57)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(57)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(57)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(57)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(57)
									_z = tmp53;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(57)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(57)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(57)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(57)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(57)
										_x = tmp38;
										HX_STACK_LINE(57)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(57)
										{
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(57)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											if ((tmp48)){
												HX_STACK_LINE(57)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(57)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												if ((tmp49)){
													HX_STACK_LINE(57)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(57)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(57)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(57)
										_y = tmp40;
										HX_STACK_LINE(57)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(57)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(57)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(57)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(57)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(57)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(57)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(57)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(57)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(57)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(57)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(57)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(57)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(57)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(57)
										_z = tmp54;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										if ((tmp25)){
											HX_STACK_LINE(57)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(57)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(57)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(57)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(57)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(57)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(57)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(57)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(57)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(57)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(57)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(57)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(57)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(57)
											_x = tmp39;
											HX_STACK_LINE(57)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(57)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(57)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(57)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(57)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(57)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(57)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(57)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(57)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(57)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(57)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(57)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(57)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(57)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(57)
											_y = tmp53;
											HX_STACK_LINE(57)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(57)
											{
												HX_STACK_LINE(57)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(57)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(57)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(57)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(57)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(57)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(57)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(57)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(57)
												if ((tmp63)){
													HX_STACK_LINE(57)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(57)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(57)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(57)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(57)
											_z = tmp55;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(57)
											if ((tmp26)){
												HX_STACK_LINE(57)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(57)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(57)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(57)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(57)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(57)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(57)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(57)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(57)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(57)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(57)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(57)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(57)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(57)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(57)
												_x = tmp40;
												HX_STACK_LINE(57)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(57)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(57)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(57)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(57)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(57)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(57)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(57)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(57)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(57)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(57)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(57)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(57)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(57)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(57)
												_y = tmp54;
												HX_STACK_LINE(57)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(57)
												{
													HX_STACK_LINE(57)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(57)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(57)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(57)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(57)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(57)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(57)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(57)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(57)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(57)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(57)
													if ((tmp64)){
														HX_STACK_LINE(57)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(57)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(57)
														if ((tmp65)){
															HX_STACK_LINE(57)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(57)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(57)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(57)
												_z = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(57)
						{
							HX_STACK_LINE(57)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(57)
							_this->ignore_listeners = true;
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->x = _x;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->x;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(57)
									_this->x;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->y = _y;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->y;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(57)
									_this->y;
								}
							}
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								_this->z = _z;
								HX_STACK_LINE(57)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(57)
								if ((tmp22)){
									HX_STACK_LINE(57)
									_this->z;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(57)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(57)
									if ((tmp23)){
										HX_STACK_LINE(57)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(57)
										tmp24 = false;
									}
									HX_STACK_LINE(57)
									if ((tmp24)){
										HX_STACK_LINE(57)
										Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(57)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(57)
									_this->z;
								}
							}
							HX_STACK_LINE(57)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(57)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(57)
								tmp23 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(57)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							if ((tmp24)){
								HX_STACK_LINE(57)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(57)
								tmp25 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp25)){
								HX_STACK_LINE(57)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(57)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							if ((tmp26)){
								HX_STACK_LINE(57)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(57)
								tmp27 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp27)){
								HX_STACK_LINE(57)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(57)
							_this;
						}
						HX_STACK_LINE(57)
						_this;
					}
				}
				HX_STACK_LINE(57)
				Dynamic tmp1 = this->listen_w_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(57)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(57)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(57)
				if ((tmp2)){
					HX_STACK_LINE(57)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(57)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(57)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(57)
					tmp3 = false;
				}
				HX_STACK_LINE(57)
				if ((tmp3)){
					HX_STACK_LINE(57)
					Float tmp4 = this->w;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(57)
					this->listen_w(tmp4);
				}
				HX_STACK_LINE(57)
				this->w;
			}
		}
		HX_STACK_LINE(57)
		this->ignore_euler = false;
		HX_STACK_LINE(57)
		{
			HX_STACK_LINE(57)
			::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(57)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(57)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(57)
			bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(57)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(57)
			if ((tmp3)){
				HX_STACK_LINE(57)
				tmp4 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(57)
				tmp4 = true;
			}
			HX_STACK_LINE(57)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(57)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(57)
			if ((tmp5)){
				HX_STACK_LINE(57)
				tmp6 = this->_construct;
			}
			else{
				HX_STACK_LINE(57)
				tmp6 = true;
			}
			HX_STACK_LINE(57)
			if ((tmp6)){
				HX_STACK_LINE(57)
				Dynamic();
			}
			else{
				HX_STACK_LINE(57)
				::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(57)
				::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(57)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(57)
				Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(57)
				Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(57)
				Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(57)
				Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(57)
				Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(57)
				Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(57)
				Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(57)
				Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(57)
				Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(57)
				Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(57)
				Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(57)
				Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(57)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(57)
				Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(57)
				Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(57)
				Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(57)
				Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
				HX_STACK_LINE(57)
				Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
				HX_STACK_LINE(57)
				Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
				HX_STACK_LINE(57)
				bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(57)
				if ((tmp20)){
					HX_STACK_LINE(57)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(57)
					Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(57)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(57)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(57)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(57)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(57)
					Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(57)
					Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(57)
					Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(57)
					Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(57)
					Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(57)
					Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(57)
					Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(57)
					Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(57)
					_x = tmp34;
					HX_STACK_LINE(57)
					Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(57)
					{
						HX_STACK_LINE(57)
						Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(57)
						Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(57)
						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(57)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(57)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(57)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(57)
						Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(57)
						Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(57)
						Float value = tmp43;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(57)
						bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(57)
						if ((tmp44)){
							HX_STACK_LINE(57)
							tmp35 = (int)-1;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(57)
							if ((tmp45)){
								HX_STACK_LINE(57)
								tmp35 = (int)1;
							}
							else{
								HX_STACK_LINE(57)
								tmp35 = value;
							}
						}
					}
					HX_STACK_LINE(57)
					Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(57)
					_y = tmp36;
					HX_STACK_LINE(57)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(57)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(57)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(57)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(57)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(57)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(57)
					Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(57)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(57)
					Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(57)
					Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(57)
					Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(57)
					Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(57)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(57)
					Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(57)
					_z = tmp50;
				}
				else{
					HX_STACK_LINE(57)
					bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(57)
					if ((tmp21)){
						HX_STACK_LINE(57)
						Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(57)
						{
							HX_STACK_LINE(57)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(57)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(57)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(57)
							Float value = tmp30;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(57)
							bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(57)
							if ((tmp31)){
								HX_STACK_LINE(57)
								tmp22 = (int)-1;
							}
							else{
								HX_STACK_LINE(57)
								bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(57)
								if ((tmp32)){
									HX_STACK_LINE(57)
									tmp22 = (int)1;
								}
								else{
									HX_STACK_LINE(57)
									tmp22 = value;
								}
							}
						}
						HX_STACK_LINE(57)
						Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(57)
						_x = tmp23;
						HX_STACK_LINE(57)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(57)
						Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(57)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(57)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(57)
						Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(57)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(57)
						Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(57)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(57)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(57)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(57)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(57)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(57)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(57)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(57)
						_y = tmp37;
						HX_STACK_LINE(57)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(57)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(57)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(57)
						Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(57)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(57)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(57)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(57)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(57)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(57)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(57)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(57)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(57)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(57)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(57)
						_z = tmp51;
					}
					else{
						HX_STACK_LINE(57)
						bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(57)
						if ((tmp22)){
							HX_STACK_LINE(57)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							{
								HX_STACK_LINE(57)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(57)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(57)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(57)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(57)
								if ((tmp32)){
									HX_STACK_LINE(57)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(57)
									if ((tmp33)){
										HX_STACK_LINE(57)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(57)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(57)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(57)
							_x = tmp24;
							HX_STACK_LINE(57)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(57)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(57)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(57)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(57)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(57)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(57)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(57)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(57)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(57)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(57)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(57)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(57)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(57)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(57)
							_y = tmp38;
							HX_STACK_LINE(57)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(57)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(57)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(57)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(57)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(57)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(57)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(57)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(57)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(57)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(57)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(57)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(57)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(57)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(57)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(57)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(57)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(57)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(57)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(57)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(57)
								Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(57)
								Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(57)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(57)
								Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(57)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(57)
								Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(57)
								_x = tmp37;
								HX_STACK_LINE(57)
								Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(57)
								{
									HX_STACK_LINE(57)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(57)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(57)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(57)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(57)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(57)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(57)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(57)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									Float value = tmp46;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(57)
									bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(57)
									if ((tmp47)){
										HX_STACK_LINE(57)
										tmp38 = (int)-1;
									}
									else{
										HX_STACK_LINE(57)
										bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(57)
										if ((tmp48)){
											HX_STACK_LINE(57)
											tmp38 = (int)1;
										}
										else{
											HX_STACK_LINE(57)
											tmp38 = value;
										}
									}
								}
								HX_STACK_LINE(57)
								Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(57)
								_y = tmp39;
								HX_STACK_LINE(57)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(57)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(57)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(57)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(57)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(57)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(57)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(57)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(57)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(57)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(57)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(57)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(57)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(57)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(57)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(57)
								bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								if ((tmp24)){
									HX_STACK_LINE(57)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(57)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(57)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(57)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(57)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(57)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(57)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(57)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(57)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(57)
									Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(57)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(57)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(57)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(57)
									_x = tmp38;
									HX_STACK_LINE(57)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(57)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(57)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(57)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(57)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(57)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(57)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(57)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(57)
									Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(57)
									Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(57)
									Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(57)
									Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(57)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(57)
									Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(57)
									_y = tmp52;
									HX_STACK_LINE(57)
									Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(57)
									{
										HX_STACK_LINE(57)
										Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(57)
										Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(57)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(57)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(57)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(57)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(57)
										Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(57)
										Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(57)
										Float value = tmp61;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(57)
										bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(57)
										if ((tmp62)){
											HX_STACK_LINE(57)
											tmp53 = (int)-1;
										}
										else{
											HX_STACK_LINE(57)
											bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(57)
											if ((tmp63)){
												HX_STACK_LINE(57)
												tmp53 = (int)1;
											}
											else{
												HX_STACK_LINE(57)
												tmp53 = value;
											}
										}
									}
									HX_STACK_LINE(57)
									Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(57)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(57)
									bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(57)
									if ((tmp25)){
										HX_STACK_LINE(57)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(57)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(57)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(57)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(57)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(57)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(57)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(57)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(57)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(57)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(57)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(57)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(57)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(57)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(57)
										_x = tmp39;
										HX_STACK_LINE(57)
										Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(57)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(57)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(57)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(57)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(57)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(57)
										Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(57)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(57)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(57)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(57)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(57)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(57)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(57)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(57)
										_y = tmp53;
										HX_STACK_LINE(57)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(57)
										{
											HX_STACK_LINE(57)
											Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(57)
											Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(57)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(57)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(57)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(57)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(57)
											Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(57)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(57)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(57)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(57)
											if ((tmp63)){
												HX_STACK_LINE(57)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(57)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(57)
												if ((tmp64)){
													HX_STACK_LINE(57)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(57)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(57)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(57)
										_z = tmp55;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(57)
				{
					HX_STACK_LINE(57)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(57)
					_this->ignore_listeners = true;
					HX_STACK_LINE(57)
					{
						HX_STACK_LINE(57)
						_this->x = _x;
						HX_STACK_LINE(57)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(57)
						if ((tmp21)){
							HX_STACK_LINE(57)
							_this->x;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(57)
								tmp23 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = _x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(57)
							_this->x;
						}
					}
					HX_STACK_LINE(57)
					{
						HX_STACK_LINE(57)
						_this->y = _y;
						HX_STACK_LINE(57)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(57)
						if ((tmp21)){
							HX_STACK_LINE(57)
							_this->y;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(57)
								tmp23 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = _y;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_this->listen_y(tmp24);
							}
							HX_STACK_LINE(57)
							_this->y;
						}
					}
					HX_STACK_LINE(57)
					{
						HX_STACK_LINE(57)
						_this->z = _z;
						HX_STACK_LINE(57)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(57)
						if ((tmp21)){
							HX_STACK_LINE(57)
							_this->z;
						}
						else{
							HX_STACK_LINE(57)
							bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(57)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(57)
							if ((tmp22)){
								HX_STACK_LINE(57)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(57)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(57)
								tmp23 = false;
							}
							HX_STACK_LINE(57)
							if ((tmp23)){
								HX_STACK_LINE(57)
								Float tmp24 = _z;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(57)
								_this->listen_z(tmp24);
							}
							HX_STACK_LINE(57)
							_this->z;
						}
					}
					HX_STACK_LINE(57)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(57)
					bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(57)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(57)
					if ((tmp21)){
						HX_STACK_LINE(57)
						bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(57)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(57)
						tmp22 = !(tmp24);
					}
					else{
						HX_STACK_LINE(57)
						tmp22 = false;
					}
					HX_STACK_LINE(57)
					if ((tmp22)){
						HX_STACK_LINE(57)
						Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(57)
						_this->listen_x(tmp23);
					}
					HX_STACK_LINE(57)
					bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(57)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(57)
					if ((tmp23)){
						HX_STACK_LINE(57)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(57)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(57)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(57)
						tmp24 = false;
					}
					HX_STACK_LINE(57)
					if ((tmp24)){
						HX_STACK_LINE(57)
						Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(57)
						_this->listen_y(tmp25);
					}
					HX_STACK_LINE(57)
					bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(57)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(57)
					if ((tmp25)){
						HX_STACK_LINE(57)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(57)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(57)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(57)
						tmp26 = false;
					}
					HX_STACK_LINE(57)
					if ((tmp26)){
						HX_STACK_LINE(57)
						Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(57)
						_this->listen_z(tmp27);
					}
					HX_STACK_LINE(57)
					_this;
				}
				HX_STACK_LINE(57)
				_this;
			}
		}
		HX_STACK_LINE(57)
		Dynamic tmp = this->listen_x_dyn();		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(57)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(57)
		bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(57)
		if ((tmp1)){
			HX_STACK_LINE(57)
			bool tmp3 = this->ignore_listeners;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(57)
			bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(57)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(57)
			tmp2 = !(tmp5);
		}
		else{
			HX_STACK_LINE(57)
			tmp2 = false;
		}
		HX_STACK_LINE(57)
		if ((tmp2)){
			HX_STACK_LINE(57)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(57)
			this->listen_x(tmp3);
		}
		HX_STACK_LINE(57)
		Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(57)
		bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(57)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(57)
		if ((tmp4)){
			HX_STACK_LINE(57)
			bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(57)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(57)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(57)
			tmp5 = !(tmp8);
		}
		else{
			HX_STACK_LINE(57)
			tmp5 = false;
		}
		HX_STACK_LINE(57)
		if ((tmp5)){
			HX_STACK_LINE(57)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(57)
			this->listen_y(tmp6);
		}
		HX_STACK_LINE(57)
		Dynamic tmp6 = this->listen_z_dyn();		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(57)
		bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(57)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(57)
		if ((tmp7)){
			HX_STACK_LINE(57)
			bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(57)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(57)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(57)
			tmp8 = !(tmp11);
		}
		else{
			HX_STACK_LINE(57)
			tmp8 = false;
		}
		HX_STACK_LINE(57)
		if ((tmp8)){
			HX_STACK_LINE(57)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(57)
			this->listen_z(tmp9);
		}
		HX_STACK_LINE(57)
		Dynamic tmp9 = this->listen_w_dyn();		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(57)
		bool tmp10 = (tmp9 != null());		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(57)
		bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(57)
		if ((tmp10)){
			HX_STACK_LINE(57)
			bool tmp12 = this->ignore_listeners;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(57)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(57)
			bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(57)
			tmp11 = !(tmp14);
		}
		else{
			HX_STACK_LINE(57)
			tmp11 = false;
		}
		HX_STACK_LINE(57)
		if ((tmp11)){
			HX_STACK_LINE(57)
			Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(57)
			this->listen_w(tmp12);
		}
	}
	HX_STACK_LINE(62)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,copy,return )

Float Quaternion_obj::dot( ::phoenix::Quaternion _other){
	HX_STACK_FRAME("phoenix.Quaternion","dot",0x41cde958,"phoenix.Quaternion.dot","phoenix/Quaternion.hx",66,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_other,"_other")
	HX_STACK_LINE(67)
	Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(67)
	Float tmp1 = _other->x;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(67)
	Float tmp2 = (tmp * tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(67)
	Float tmp3 = this->y;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(67)
	Float tmp4 = _other->y;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(67)
	Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(67)
	Float tmp6 = (tmp2 + tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(67)
	Float tmp7 = this->z;		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(67)
	Float tmp8 = _other->z;		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(67)
	Float tmp9 = (tmp7 * tmp8);		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(67)
	Float tmp10 = (tmp6 + tmp9);		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(67)
	Float tmp11 = this->w;		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(67)
	Float tmp12 = _other->w;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(67)
	Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(67)
	Float tmp14 = (tmp10 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(67)
	return tmp14;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,dot,return )

::phoenix::Quaternion Quaternion_obj::setFromEuler( ::phoenix::Vector _euler,hx::Null< int >  __o__order){
int _order = __o__order.Default(0);
	HX_STACK_FRAME("phoenix.Quaternion","setFromEuler",0x1a4a0aee,"phoenix.Quaternion.setFromEuler","phoenix/Quaternion.hx",71,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_euler,"_euler")
	HX_STACK_ARG(_order,"_order")
{
		HX_STACK_LINE(77)
		Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(77)
		Float _x = tmp;		HX_STACK_VAR(_x,"_x");
		HX_STACK_LINE(78)
		Float tmp1 = this->y;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(78)
		Float _y = tmp1;		HX_STACK_VAR(_y,"_y");
		HX_STACK_LINE(79)
		Float tmp2 = this->z;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(79)
		Float _z = tmp2;		HX_STACK_VAR(_z,"_z");
		HX_STACK_LINE(80)
		Float tmp3 = this->w;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(80)
		Float _w = tmp3;		HX_STACK_VAR(_w,"_w");
		HX_STACK_LINE(82)
		Float tmp4 = (Float(_euler->x) / Float((int)2));		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(82)
		Float tmp5 = ::Math_obj::cos(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(82)
		Float c1 = tmp5;		HX_STACK_VAR(c1,"c1");
		HX_STACK_LINE(83)
		Float tmp6 = (Float(_euler->y) / Float((int)2));		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(83)
		Float tmp7 = ::Math_obj::cos(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(83)
		Float c2 = tmp7;		HX_STACK_VAR(c2,"c2");
		HX_STACK_LINE(84)
		Float tmp8 = (Float(_euler->z) / Float((int)2));		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(84)
		Float tmp9 = ::Math_obj::cos(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(84)
		Float c3 = tmp9;		HX_STACK_VAR(c3,"c3");
		HX_STACK_LINE(86)
		Float tmp10 = (Float(_euler->x) / Float((int)2));		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(86)
		Float tmp11 = ::Math_obj::sin(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(86)
		Float s1 = tmp11;		HX_STACK_VAR(s1,"s1");
		HX_STACK_LINE(87)
		Float tmp12 = (Float(_euler->y) / Float((int)2));		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(87)
		Float tmp13 = ::Math_obj::sin(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(87)
		Float s2 = tmp13;		HX_STACK_VAR(s2,"s2");
		HX_STACK_LINE(88)
		Float tmp14 = (Float(_euler->z) / Float((int)2));		HX_STACK_VAR(tmp14,"tmp14");
		HX_STACK_LINE(88)
		Float tmp15 = ::Math_obj::sin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
		HX_STACK_LINE(88)
		Float s3 = tmp15;		HX_STACK_VAR(s3,"s3");
		HX_STACK_LINE(90)
		bool tmp16 = (_order == (int)0);		HX_STACK_VAR(tmp16,"tmp16");
		HX_STACK_LINE(90)
		if ((tmp16)){
			HX_STACK_LINE(92)
			Float tmp17 = (s1 * c2);		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(92)
			Float tmp18 = c3;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(92)
			Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(92)
			Float tmp20 = (c1 * s2);		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(92)
			Float tmp21 = s3;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(92)
			Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(92)
			Float tmp23 = (tmp19 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(92)
			_x = tmp23;
			HX_STACK_LINE(93)
			Float tmp24 = (c1 * s2);		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(93)
			Float tmp25 = c3;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(93)
			Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(93)
			Float tmp27 = (s1 * c2);		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(93)
			Float tmp28 = s3;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(93)
			Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(93)
			Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(93)
			_y = tmp30;
			HX_STACK_LINE(94)
			Float tmp31 = (c1 * c2);		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(94)
			Float tmp32 = s3;		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(94)
			Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(94)
			Float tmp34 = (s1 * s2);		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(94)
			Float tmp35 = c3;		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(94)
			Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(94)
			Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
			HX_STACK_LINE(94)
			_z = tmp37;
			HX_STACK_LINE(95)
			Float tmp38 = (c1 * c2);		HX_STACK_VAR(tmp38,"tmp38");
			HX_STACK_LINE(95)
			Float tmp39 = c3;		HX_STACK_VAR(tmp39,"tmp39");
			HX_STACK_LINE(95)
			Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
			HX_STACK_LINE(95)
			Float tmp41 = (s1 * s2);		HX_STACK_VAR(tmp41,"tmp41");
			HX_STACK_LINE(95)
			Float tmp42 = s3;		HX_STACK_VAR(tmp42,"tmp42");
			HX_STACK_LINE(95)
			Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
			HX_STACK_LINE(95)
			Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
			HX_STACK_LINE(95)
			_w = tmp44;
		}
		else{
			HX_STACK_LINE(97)
			bool tmp17 = (_order == (int)1);		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(97)
			if ((tmp17)){
				HX_STACK_LINE(99)
				Float tmp18 = (s1 * c2);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(99)
				Float tmp19 = c3;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(99)
				Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(99)
				Float tmp21 = (c1 * s2);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(99)
				Float tmp22 = s3;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(99)
				Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(99)
				Float tmp24 = (tmp20 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(99)
				_x = tmp24;
				HX_STACK_LINE(100)
				Float tmp25 = (c1 * s2);		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(100)
				Float tmp26 = c3;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(100)
				Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(100)
				Float tmp28 = (s1 * c2);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(100)
				Float tmp29 = s3;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(100)
				Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(100)
				Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(100)
				_y = tmp31;
				HX_STACK_LINE(101)
				Float tmp32 = (c1 * c2);		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(101)
				Float tmp33 = s3;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(101)
				Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(101)
				Float tmp35 = (s1 * s2);		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(101)
				Float tmp36 = c3;		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(101)
				Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(101)
				Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(101)
				_z = tmp38;
				HX_STACK_LINE(102)
				Float tmp39 = (c1 * c2);		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(102)
				Float tmp40 = c3;		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(102)
				Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(102)
				Float tmp42 = (s1 * s2);		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(102)
				Float tmp43 = s3;		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(102)
				Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(102)
				Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(102)
				_w = tmp45;
			}
			else{
				HX_STACK_LINE(104)
				bool tmp18 = (_order == (int)2);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(104)
				if ((tmp18)){
					HX_STACK_LINE(106)
					Float tmp19 = (s1 * c2);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(106)
					Float tmp20 = c3;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(106)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(106)
					Float tmp22 = (c1 * s2);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(106)
					Float tmp23 = s3;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(106)
					Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(106)
					Float tmp25 = (tmp21 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(106)
					_x = tmp25;
					HX_STACK_LINE(107)
					Float tmp26 = (c1 * s2);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(107)
					Float tmp27 = c3;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(107)
					Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(107)
					Float tmp29 = (s1 * c2);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(107)
					Float tmp30 = s3;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(107)
					Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(107)
					Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(107)
					_y = tmp32;
					HX_STACK_LINE(108)
					Float tmp33 = (c1 * c2);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(108)
					Float tmp34 = s3;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(108)
					Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(108)
					Float tmp36 = (s1 * s2);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(108)
					Float tmp37 = c3;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(108)
					Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(108)
					Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(108)
					_z = tmp39;
					HX_STACK_LINE(109)
					Float tmp40 = (c1 * c2);		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(109)
					Float tmp41 = c3;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(109)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(109)
					Float tmp43 = (s1 * s2);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(109)
					Float tmp44 = s3;		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(109)
					Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(109)
					Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(109)
					_w = tmp46;
				}
				else{
					HX_STACK_LINE(111)
					bool tmp19 = (_order == (int)3);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(111)
					if ((tmp19)){
						HX_STACK_LINE(113)
						Float tmp20 = (s1 * c2);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(113)
						Float tmp21 = c3;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(113)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(113)
						Float tmp23 = (c1 * s2);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(113)
						Float tmp24 = s3;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(113)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(113)
						Float tmp26 = (tmp22 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(113)
						_x = tmp26;
						HX_STACK_LINE(114)
						Float tmp27 = (c1 * s2);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(114)
						Float tmp28 = c3;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(114)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(114)
						Float tmp30 = (s1 * c2);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(114)
						Float tmp31 = s3;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(114)
						Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(114)
						Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(114)
						_y = tmp33;
						HX_STACK_LINE(115)
						Float tmp34 = (c1 * c2);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(115)
						Float tmp35 = s3;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(115)
						Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(115)
						Float tmp37 = (s1 * s2);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(115)
						Float tmp38 = c3;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(115)
						Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(115)
						Float tmp40 = (tmp36 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(115)
						_z = tmp40;
						HX_STACK_LINE(116)
						Float tmp41 = (c1 * c2);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(116)
						Float tmp42 = c3;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(116)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(116)
						Float tmp44 = (s1 * s2);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(116)
						Float tmp45 = s3;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(116)
						Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(116)
						Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(116)
						_w = tmp47;
					}
					else{
						HX_STACK_LINE(118)
						bool tmp20 = (_order == (int)4);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(118)
						if ((tmp20)){
							HX_STACK_LINE(120)
							Float tmp21 = (s1 * c2);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(120)
							Float tmp22 = c3;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(120)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(120)
							Float tmp24 = (c1 * s2);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(120)
							Float tmp25 = s3;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(120)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(120)
							Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(120)
							_x = tmp27;
							HX_STACK_LINE(121)
							Float tmp28 = (c1 * s2);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(121)
							Float tmp29 = c3;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(121)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(121)
							Float tmp31 = (s1 * c2);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(121)
							Float tmp32 = s3;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(121)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(121)
							Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(121)
							_y = tmp34;
							HX_STACK_LINE(122)
							Float tmp35 = (c1 * c2);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(122)
							Float tmp36 = s3;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(122)
							Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(122)
							Float tmp38 = (s1 * s2);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(122)
							Float tmp39 = c3;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(122)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(122)
							Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(122)
							_z = tmp41;
							HX_STACK_LINE(123)
							Float tmp42 = (c1 * c2);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(123)
							Float tmp43 = c3;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(123)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(123)
							Float tmp45 = (s1 * s2);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(123)
							Float tmp46 = s3;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(123)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(123)
							Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(123)
							_w = tmp48;
						}
						else{
							HX_STACK_LINE(125)
							bool tmp21 = (_order == (int)5);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(125)
							if ((tmp21)){
								HX_STACK_LINE(127)
								Float tmp22 = (s1 * c2);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(127)
								Float tmp23 = c3;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(127)
								Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(127)
								Float tmp25 = (c1 * s2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(127)
								Float tmp26 = s3;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(127)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(127)
								Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(127)
								_x = tmp28;
								HX_STACK_LINE(128)
								Float tmp29 = (c1 * s2);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(128)
								Float tmp30 = c3;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(128)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(128)
								Float tmp32 = (s1 * c2);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(128)
								Float tmp33 = s3;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(128)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(128)
								Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(128)
								_y = tmp35;
								HX_STACK_LINE(129)
								Float tmp36 = (c1 * c2);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(129)
								Float tmp37 = s3;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(129)
								Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(129)
								Float tmp39 = (s1 * s2);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(129)
								Float tmp40 = c3;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(129)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(129)
								Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(129)
								_z = tmp42;
								HX_STACK_LINE(130)
								Float tmp43 = (c1 * c2);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(130)
								Float tmp44 = c3;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(130)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(130)
								Float tmp46 = (s1 * s2);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(130)
								Float tmp47 = s3;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(130)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(130)
								Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(130)
								_w = tmp49;
							}
						}
					}
				}
			}
		}
		HX_STACK_LINE(134)
		{
			HX_STACK_LINE(134)
			this->ignore_euler = true;
			HX_STACK_LINE(134)
			{
				HX_STACK_LINE(134)
				this->x = _x;
				HX_STACK_LINE(134)
				bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(134)
				if ((tmp17)){
					HX_STACK_LINE(134)
					this->x;
				}
				else{
					HX_STACK_LINE(134)
					{
						HX_STACK_LINE(134)
						::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(134)
						bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(134)
						bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(134)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						if ((tmp21)){
							HX_STACK_LINE(134)
							tmp22 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(134)
							tmp22 = true;
						}
						HX_STACK_LINE(134)
						bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(134)
						if ((tmp23)){
							HX_STACK_LINE(134)
							tmp24 = this->_construct;
						}
						else{
							HX_STACK_LINE(134)
							tmp24 = true;
						}
						HX_STACK_LINE(134)
						if ((tmp24)){
							HX_STACK_LINE(134)
							Dynamic();
						}
						else{
							HX_STACK_LINE(134)
							::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(134)
							::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(134)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(134)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(134)
							Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(134)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(134)
							Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(134)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(134)
							Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(134)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(134)
							Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(134)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(134)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(134)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(134)
							Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(134)
							Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(134)
							Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(134)
							Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(134)
							Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(134)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(134)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(134)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(134)
							bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(134)
							if ((tmp38)){
								HX_STACK_LINE(134)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(134)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(134)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(134)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(134)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(134)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(134)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(134)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(134)
								_x1 = tmp52;
								HX_STACK_LINE(134)
								Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float value = tmp61;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(134)
									bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									if ((tmp62)){
										HX_STACK_LINE(134)
										tmp53 = (int)-1;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										if ((tmp63)){
											HX_STACK_LINE(134)
											tmp53 = (int)1;
										}
										else{
											HX_STACK_LINE(134)
											tmp53 = value;
										}
									}
								}
								HX_STACK_LINE(134)
								Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(134)
								_y1 = tmp54;
								HX_STACK_LINE(134)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(134)
								Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(134)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(134)
								Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(134)
								Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(134)
								Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(134)
								Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(134)
								Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(134)
								Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(134)
								Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(134)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(134)
								Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(134)
								Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(134)
								Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(134)
								_z1 = tmp68;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									{
										HX_STACK_LINE(134)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(134)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										if ((tmp49)){
											HX_STACK_LINE(134)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(134)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(134)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_x1 = tmp41;
									HX_STACK_LINE(134)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(134)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(134)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(134)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(134)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(134)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(134)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(134)
									Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									_y1 = tmp55;
									HX_STACK_LINE(134)
									Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(134)
									Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(134)
									Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(134)
									Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(134)
									Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(134)
									Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(134)
									Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(134)
									_z1 = tmp69;
								}
								else{
									HX_STACK_LINE(134)
									bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									if ((tmp40)){
										HX_STACK_LINE(134)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										{
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(134)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												if ((tmp51)){
													HX_STACK_LINE(134)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(134)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(134)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										_x1 = tmp42;
										HX_STACK_LINE(134)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(134)
										Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(134)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(134)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(134)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(134)
										Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(134)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(134)
										_y1 = tmp56;
										HX_STACK_LINE(134)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(134)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(134)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(134)
										Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(134)
										Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(134)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(134)
										Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(134)
										Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(134)
										Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(134)
										Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(134)
										Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(134)
										Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(134)
										Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(134)
										_z1 = tmp70;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(134)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(134)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(134)
											Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(134)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(134)
											_x1 = tmp55;
											HX_STACK_LINE(134)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(134)
											{
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(134)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												if ((tmp65)){
													HX_STACK_LINE(134)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(134)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													if ((tmp66)){
														HX_STACK_LINE(134)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(134)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(134)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(134)
											_y1 = tmp57;
											HX_STACK_LINE(134)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(134)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(134)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(134)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(134)
											Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(134)
											Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(134)
											Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(134)
											Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(134)
											Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(134)
											Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(134)
											Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(134)
											Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(134)
											Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(134)
											Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(134)
											_z1 = tmp71;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											if ((tmp42)){
												HX_STACK_LINE(134)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(134)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(134)
												Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(134)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(134)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(134)
												Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(134)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(134)
												Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(134)
												Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(134)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(134)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(134)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(134)
												_x1 = tmp56;
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(134)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(134)
												Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(134)
												Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(134)
												Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(134)
												_y1 = tmp70;
												HX_STACK_LINE(134)
												Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(134)
												{
													HX_STACK_LINE(134)
													Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(134)
													Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(134)
													Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(134)
													Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(134)
													Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(134)
													Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(134)
													Float value = tmp79;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(134)
													bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(134)
													if ((tmp80)){
														HX_STACK_LINE(134)
														tmp71 = (int)-1;
													}
													else{
														HX_STACK_LINE(134)
														bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp71 = (int)1;
														}
														else{
															HX_STACK_LINE(134)
															tmp71 = value;
														}
													}
												}
												HX_STACK_LINE(134)
												Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(134)
												_z1 = tmp72;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												if ((tmp43)){
													HX_STACK_LINE(134)
													Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(134)
													Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(134)
													Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(134)
													Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(134)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(134)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(134)
													Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(134)
													Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(134)
													Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(134)
													Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(134)
													Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(134)
													Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(134)
													Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(134)
													Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(134)
													_x1 = tmp57;
													HX_STACK_LINE(134)
													Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(134)
													Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(134)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(134)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(134)
													Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(134)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(134)
													Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(134)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(134)
													Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(134)
													Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(134)
													Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(134)
													Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(134)
													Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(134)
													_y1 = tmp71;
													HX_STACK_LINE(134)
													Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													{
														HX_STACK_LINE(134)
														Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(134)
														Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(134)
														Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(134)
														Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(134)
														Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(134)
														Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
														HX_STACK_LINE(134)
														Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(134)
														Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
														HX_STACK_LINE(134)
														Float value = tmp80;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(134)
														bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp72 = (int)-1;
														}
														else{
															HX_STACK_LINE(134)
															bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
															HX_STACK_LINE(134)
															if ((tmp82)){
																HX_STACK_LINE(134)
																tmp72 = (int)1;
															}
															else{
																HX_STACK_LINE(134)
																tmp72 = value;
															}
														}
													}
													HX_STACK_LINE(134)
													Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													_z1 = tmp73;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(134)
							{
								HX_STACK_LINE(134)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(134)
								_this->ignore_listeners = true;
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->x = _x1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->x;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_x(tmp42);
										}
										HX_STACK_LINE(134)
										_this->x;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->y = _y1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->y;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_y(tmp42);
										}
										HX_STACK_LINE(134)
										_this->y;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->z = _z1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->z;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_z(tmp42);
										}
										HX_STACK_LINE(134)
										_this->z;
									}
								}
								HX_STACK_LINE(134)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(134)
								bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(134)
									tmp40 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_this->listen_x(tmp41);
								}
								HX_STACK_LINE(134)
								bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								if ((tmp41)){
									HX_STACK_LINE(134)
									bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									tmp42 = !(tmp44);
								}
								else{
									HX_STACK_LINE(134)
									tmp42 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp42)){
									HX_STACK_LINE(134)
									Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									_this->listen_y(tmp43);
								}
								HX_STACK_LINE(134)
								bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								if ((tmp43)){
									HX_STACK_LINE(134)
									bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									tmp44 = !(tmp46);
								}
								else{
									HX_STACK_LINE(134)
									tmp44 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp44)){
									HX_STACK_LINE(134)
									Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									_this->listen_z(tmp45);
								}
								HX_STACK_LINE(134)
								_this;
							}
							HX_STACK_LINE(134)
							_this;
						}
					}
					HX_STACK_LINE(134)
					Dynamic tmp18 = this->listen_x_dyn();		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(134)
					bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(134)
					bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(134)
					if ((tmp19)){
						HX_STACK_LINE(134)
						bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						tmp20 = !(tmp23);
					}
					else{
						HX_STACK_LINE(134)
						tmp20 = false;
					}
					HX_STACK_LINE(134)
					if ((tmp20)){
						HX_STACK_LINE(134)
						Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						this->listen_x(tmp21);
					}
					HX_STACK_LINE(134)
					this->x;
				}
			}
			HX_STACK_LINE(134)
			{
				HX_STACK_LINE(134)
				this->y = _y;
				HX_STACK_LINE(134)
				bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(134)
				if ((tmp17)){
					HX_STACK_LINE(134)
					this->y;
				}
				else{
					HX_STACK_LINE(134)
					{
						HX_STACK_LINE(134)
						::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(134)
						bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(134)
						bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(134)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						if ((tmp21)){
							HX_STACK_LINE(134)
							tmp22 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(134)
							tmp22 = true;
						}
						HX_STACK_LINE(134)
						bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(134)
						if ((tmp23)){
							HX_STACK_LINE(134)
							tmp24 = this->_construct;
						}
						else{
							HX_STACK_LINE(134)
							tmp24 = true;
						}
						HX_STACK_LINE(134)
						if ((tmp24)){
							HX_STACK_LINE(134)
							Dynamic();
						}
						else{
							HX_STACK_LINE(134)
							::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(134)
							::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(134)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(134)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(134)
							Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(134)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(134)
							Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(134)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(134)
							Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(134)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(134)
							Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(134)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(134)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(134)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(134)
							Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(134)
							Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(134)
							Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(134)
							Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(134)
							Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(134)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(134)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(134)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(134)
							bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(134)
							if ((tmp38)){
								HX_STACK_LINE(134)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(134)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(134)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(134)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(134)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(134)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(134)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(134)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(134)
								_x1 = tmp52;
								HX_STACK_LINE(134)
								Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float value = tmp61;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(134)
									bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									if ((tmp62)){
										HX_STACK_LINE(134)
										tmp53 = (int)-1;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										if ((tmp63)){
											HX_STACK_LINE(134)
											tmp53 = (int)1;
										}
										else{
											HX_STACK_LINE(134)
											tmp53 = value;
										}
									}
								}
								HX_STACK_LINE(134)
								Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(134)
								_y1 = tmp54;
								HX_STACK_LINE(134)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(134)
								Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(134)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(134)
								Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(134)
								Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(134)
								Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(134)
								Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(134)
								Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(134)
								Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(134)
								Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(134)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(134)
								Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(134)
								Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(134)
								Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(134)
								_z1 = tmp68;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									{
										HX_STACK_LINE(134)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(134)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										if ((tmp49)){
											HX_STACK_LINE(134)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(134)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(134)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_x1 = tmp41;
									HX_STACK_LINE(134)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(134)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(134)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(134)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(134)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(134)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(134)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(134)
									Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									_y1 = tmp55;
									HX_STACK_LINE(134)
									Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(134)
									Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(134)
									Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(134)
									Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(134)
									Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(134)
									Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(134)
									Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(134)
									_z1 = tmp69;
								}
								else{
									HX_STACK_LINE(134)
									bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									if ((tmp40)){
										HX_STACK_LINE(134)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										{
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(134)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												if ((tmp51)){
													HX_STACK_LINE(134)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(134)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(134)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										_x1 = tmp42;
										HX_STACK_LINE(134)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(134)
										Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(134)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(134)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(134)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(134)
										Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(134)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(134)
										_y1 = tmp56;
										HX_STACK_LINE(134)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(134)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(134)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(134)
										Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(134)
										Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(134)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(134)
										Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(134)
										Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(134)
										Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(134)
										Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(134)
										Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(134)
										Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(134)
										Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(134)
										_z1 = tmp70;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(134)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(134)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(134)
											Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(134)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(134)
											_x1 = tmp55;
											HX_STACK_LINE(134)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(134)
											{
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(134)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												if ((tmp65)){
													HX_STACK_LINE(134)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(134)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													if ((tmp66)){
														HX_STACK_LINE(134)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(134)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(134)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(134)
											_y1 = tmp57;
											HX_STACK_LINE(134)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(134)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(134)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(134)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(134)
											Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(134)
											Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(134)
											Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(134)
											Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(134)
											Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(134)
											Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(134)
											Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(134)
											Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(134)
											Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(134)
											Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(134)
											_z1 = tmp71;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											if ((tmp42)){
												HX_STACK_LINE(134)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(134)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(134)
												Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(134)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(134)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(134)
												Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(134)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(134)
												Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(134)
												Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(134)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(134)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(134)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(134)
												_x1 = tmp56;
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(134)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(134)
												Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(134)
												Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(134)
												Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(134)
												_y1 = tmp70;
												HX_STACK_LINE(134)
												Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(134)
												{
													HX_STACK_LINE(134)
													Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(134)
													Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(134)
													Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(134)
													Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(134)
													Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(134)
													Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(134)
													Float value = tmp79;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(134)
													bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(134)
													if ((tmp80)){
														HX_STACK_LINE(134)
														tmp71 = (int)-1;
													}
													else{
														HX_STACK_LINE(134)
														bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp71 = (int)1;
														}
														else{
															HX_STACK_LINE(134)
															tmp71 = value;
														}
													}
												}
												HX_STACK_LINE(134)
												Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(134)
												_z1 = tmp72;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												if ((tmp43)){
													HX_STACK_LINE(134)
													Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(134)
													Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(134)
													Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(134)
													Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(134)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(134)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(134)
													Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(134)
													Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(134)
													Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(134)
													Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(134)
													Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(134)
													Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(134)
													Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(134)
													Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(134)
													_x1 = tmp57;
													HX_STACK_LINE(134)
													Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(134)
													Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(134)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(134)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(134)
													Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(134)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(134)
													Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(134)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(134)
													Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(134)
													Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(134)
													Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(134)
													Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(134)
													Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(134)
													_y1 = tmp71;
													HX_STACK_LINE(134)
													Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													{
														HX_STACK_LINE(134)
														Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(134)
														Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(134)
														Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(134)
														Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(134)
														Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(134)
														Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
														HX_STACK_LINE(134)
														Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(134)
														Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
														HX_STACK_LINE(134)
														Float value = tmp80;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(134)
														bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp72 = (int)-1;
														}
														else{
															HX_STACK_LINE(134)
															bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
															HX_STACK_LINE(134)
															if ((tmp82)){
																HX_STACK_LINE(134)
																tmp72 = (int)1;
															}
															else{
																HX_STACK_LINE(134)
																tmp72 = value;
															}
														}
													}
													HX_STACK_LINE(134)
													Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													_z1 = tmp73;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(134)
							{
								HX_STACK_LINE(134)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(134)
								_this->ignore_listeners = true;
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->x = _x1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->x;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_x(tmp42);
										}
										HX_STACK_LINE(134)
										_this->x;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->y = _y1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->y;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_y(tmp42);
										}
										HX_STACK_LINE(134)
										_this->y;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->z = _z1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->z;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_z(tmp42);
										}
										HX_STACK_LINE(134)
										_this->z;
									}
								}
								HX_STACK_LINE(134)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(134)
								bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(134)
									tmp40 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_this->listen_x(tmp41);
								}
								HX_STACK_LINE(134)
								bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								if ((tmp41)){
									HX_STACK_LINE(134)
									bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									tmp42 = !(tmp44);
								}
								else{
									HX_STACK_LINE(134)
									tmp42 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp42)){
									HX_STACK_LINE(134)
									Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									_this->listen_y(tmp43);
								}
								HX_STACK_LINE(134)
								bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								if ((tmp43)){
									HX_STACK_LINE(134)
									bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									tmp44 = !(tmp46);
								}
								else{
									HX_STACK_LINE(134)
									tmp44 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp44)){
									HX_STACK_LINE(134)
									Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									_this->listen_z(tmp45);
								}
								HX_STACK_LINE(134)
								_this;
							}
							HX_STACK_LINE(134)
							_this;
						}
					}
					HX_STACK_LINE(134)
					Dynamic tmp18 = this->listen_y_dyn();		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(134)
					bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(134)
					bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(134)
					if ((tmp19)){
						HX_STACK_LINE(134)
						bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						tmp20 = !(tmp23);
					}
					else{
						HX_STACK_LINE(134)
						tmp20 = false;
					}
					HX_STACK_LINE(134)
					if ((tmp20)){
						HX_STACK_LINE(134)
						Float tmp21 = this->y;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						this->listen_y(tmp21);
					}
					HX_STACK_LINE(134)
					this->y;
				}
			}
			HX_STACK_LINE(134)
			{
				HX_STACK_LINE(134)
				this->z = _z;
				HX_STACK_LINE(134)
				bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(134)
				if ((tmp17)){
					HX_STACK_LINE(134)
					this->z;
				}
				else{
					HX_STACK_LINE(134)
					{
						HX_STACK_LINE(134)
						::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(134)
						bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(134)
						bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(134)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						if ((tmp21)){
							HX_STACK_LINE(134)
							tmp22 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(134)
							tmp22 = true;
						}
						HX_STACK_LINE(134)
						bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(134)
						if ((tmp23)){
							HX_STACK_LINE(134)
							tmp24 = this->_construct;
						}
						else{
							HX_STACK_LINE(134)
							tmp24 = true;
						}
						HX_STACK_LINE(134)
						if ((tmp24)){
							HX_STACK_LINE(134)
							Dynamic();
						}
						else{
							HX_STACK_LINE(134)
							::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(134)
							::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(134)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(134)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(134)
							Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(134)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(134)
							Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(134)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(134)
							Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(134)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(134)
							Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(134)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(134)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(134)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(134)
							Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(134)
							Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(134)
							Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(134)
							Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(134)
							Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(134)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(134)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(134)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(134)
							bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(134)
							if ((tmp38)){
								HX_STACK_LINE(134)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(134)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(134)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(134)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(134)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(134)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(134)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(134)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(134)
								_x1 = tmp52;
								HX_STACK_LINE(134)
								Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float value = tmp61;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(134)
									bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									if ((tmp62)){
										HX_STACK_LINE(134)
										tmp53 = (int)-1;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										if ((tmp63)){
											HX_STACK_LINE(134)
											tmp53 = (int)1;
										}
										else{
											HX_STACK_LINE(134)
											tmp53 = value;
										}
									}
								}
								HX_STACK_LINE(134)
								Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(134)
								_y1 = tmp54;
								HX_STACK_LINE(134)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(134)
								Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(134)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(134)
								Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(134)
								Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(134)
								Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(134)
								Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(134)
								Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(134)
								Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(134)
								Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(134)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(134)
								Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(134)
								Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(134)
								Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(134)
								_z1 = tmp68;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									{
										HX_STACK_LINE(134)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(134)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										if ((tmp49)){
											HX_STACK_LINE(134)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(134)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(134)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_x1 = tmp41;
									HX_STACK_LINE(134)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(134)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(134)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(134)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(134)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(134)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(134)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(134)
									Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									_y1 = tmp55;
									HX_STACK_LINE(134)
									Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(134)
									Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(134)
									Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(134)
									Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(134)
									Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(134)
									Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(134)
									Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(134)
									_z1 = tmp69;
								}
								else{
									HX_STACK_LINE(134)
									bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									if ((tmp40)){
										HX_STACK_LINE(134)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										{
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(134)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												if ((tmp51)){
													HX_STACK_LINE(134)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(134)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(134)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										_x1 = tmp42;
										HX_STACK_LINE(134)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(134)
										Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(134)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(134)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(134)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(134)
										Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(134)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(134)
										_y1 = tmp56;
										HX_STACK_LINE(134)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(134)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(134)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(134)
										Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(134)
										Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(134)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(134)
										Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(134)
										Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(134)
										Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(134)
										Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(134)
										Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(134)
										Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(134)
										Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(134)
										_z1 = tmp70;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(134)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(134)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(134)
											Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(134)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(134)
											_x1 = tmp55;
											HX_STACK_LINE(134)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(134)
											{
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(134)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												if ((tmp65)){
													HX_STACK_LINE(134)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(134)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													if ((tmp66)){
														HX_STACK_LINE(134)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(134)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(134)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(134)
											_y1 = tmp57;
											HX_STACK_LINE(134)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(134)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(134)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(134)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(134)
											Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(134)
											Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(134)
											Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(134)
											Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(134)
											Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(134)
											Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(134)
											Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(134)
											Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(134)
											Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(134)
											Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(134)
											_z1 = tmp71;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											if ((tmp42)){
												HX_STACK_LINE(134)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(134)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(134)
												Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(134)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(134)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(134)
												Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(134)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(134)
												Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(134)
												Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(134)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(134)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(134)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(134)
												_x1 = tmp56;
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(134)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(134)
												Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(134)
												Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(134)
												Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(134)
												_y1 = tmp70;
												HX_STACK_LINE(134)
												Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(134)
												{
													HX_STACK_LINE(134)
													Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(134)
													Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(134)
													Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(134)
													Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(134)
													Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(134)
													Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(134)
													Float value = tmp79;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(134)
													bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(134)
													if ((tmp80)){
														HX_STACK_LINE(134)
														tmp71 = (int)-1;
													}
													else{
														HX_STACK_LINE(134)
														bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp71 = (int)1;
														}
														else{
															HX_STACK_LINE(134)
															tmp71 = value;
														}
													}
												}
												HX_STACK_LINE(134)
												Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(134)
												_z1 = tmp72;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												if ((tmp43)){
													HX_STACK_LINE(134)
													Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(134)
													Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(134)
													Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(134)
													Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(134)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(134)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(134)
													Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(134)
													Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(134)
													Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(134)
													Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(134)
													Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(134)
													Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(134)
													Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(134)
													Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(134)
													_x1 = tmp57;
													HX_STACK_LINE(134)
													Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(134)
													Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(134)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(134)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(134)
													Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(134)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(134)
													Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(134)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(134)
													Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(134)
													Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(134)
													Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(134)
													Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(134)
													Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(134)
													_y1 = tmp71;
													HX_STACK_LINE(134)
													Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													{
														HX_STACK_LINE(134)
														Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(134)
														Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(134)
														Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(134)
														Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(134)
														Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(134)
														Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
														HX_STACK_LINE(134)
														Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(134)
														Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
														HX_STACK_LINE(134)
														Float value = tmp80;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(134)
														bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp72 = (int)-1;
														}
														else{
															HX_STACK_LINE(134)
															bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
															HX_STACK_LINE(134)
															if ((tmp82)){
																HX_STACK_LINE(134)
																tmp72 = (int)1;
															}
															else{
																HX_STACK_LINE(134)
																tmp72 = value;
															}
														}
													}
													HX_STACK_LINE(134)
													Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													_z1 = tmp73;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(134)
							{
								HX_STACK_LINE(134)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(134)
								_this->ignore_listeners = true;
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->x = _x1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->x;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_x(tmp42);
										}
										HX_STACK_LINE(134)
										_this->x;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->y = _y1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->y;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_y(tmp42);
										}
										HX_STACK_LINE(134)
										_this->y;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->z = _z1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->z;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_z(tmp42);
										}
										HX_STACK_LINE(134)
										_this->z;
									}
								}
								HX_STACK_LINE(134)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(134)
								bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(134)
									tmp40 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_this->listen_x(tmp41);
								}
								HX_STACK_LINE(134)
								bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								if ((tmp41)){
									HX_STACK_LINE(134)
									bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									tmp42 = !(tmp44);
								}
								else{
									HX_STACK_LINE(134)
									tmp42 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp42)){
									HX_STACK_LINE(134)
									Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									_this->listen_y(tmp43);
								}
								HX_STACK_LINE(134)
								bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								if ((tmp43)){
									HX_STACK_LINE(134)
									bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									tmp44 = !(tmp46);
								}
								else{
									HX_STACK_LINE(134)
									tmp44 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp44)){
									HX_STACK_LINE(134)
									Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									_this->listen_z(tmp45);
								}
								HX_STACK_LINE(134)
								_this;
							}
							HX_STACK_LINE(134)
							_this;
						}
					}
					HX_STACK_LINE(134)
					Dynamic tmp18 = this->listen_z_dyn();		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(134)
					bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(134)
					bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(134)
					if ((tmp19)){
						HX_STACK_LINE(134)
						bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						tmp20 = !(tmp23);
					}
					else{
						HX_STACK_LINE(134)
						tmp20 = false;
					}
					HX_STACK_LINE(134)
					if ((tmp20)){
						HX_STACK_LINE(134)
						Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						this->listen_z(tmp21);
					}
					HX_STACK_LINE(134)
					this->z;
				}
			}
			HX_STACK_LINE(134)
			{
				HX_STACK_LINE(134)
				this->w = _w;
				HX_STACK_LINE(134)
				bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(134)
				if ((tmp17)){
					HX_STACK_LINE(134)
					this->w;
				}
				else{
					HX_STACK_LINE(134)
					{
						HX_STACK_LINE(134)
						::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(134)
						bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(134)
						bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(134)
						bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						if ((tmp21)){
							HX_STACK_LINE(134)
							tmp22 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(134)
							tmp22 = true;
						}
						HX_STACK_LINE(134)
						bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(134)
						if ((tmp23)){
							HX_STACK_LINE(134)
							tmp24 = this->_construct;
						}
						else{
							HX_STACK_LINE(134)
							tmp24 = true;
						}
						HX_STACK_LINE(134)
						if ((tmp24)){
							HX_STACK_LINE(134)
							Dynamic();
						}
						else{
							HX_STACK_LINE(134)
							::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(134)
							::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(134)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(134)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(134)
							Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(134)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(134)
							Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(134)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(134)
							Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(134)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(134)
							Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(134)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(134)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(134)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(134)
							Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(134)
							Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(134)
							Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(134)
							Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(134)
							Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(134)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(134)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(134)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(134)
							bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(134)
							if ((tmp38)){
								HX_STACK_LINE(134)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(134)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(134)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(134)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(134)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(134)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(134)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(134)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(134)
								_x1 = tmp52;
								HX_STACK_LINE(134)
								Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float value = tmp61;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(134)
									bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									if ((tmp62)){
										HX_STACK_LINE(134)
										tmp53 = (int)-1;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										if ((tmp63)){
											HX_STACK_LINE(134)
											tmp53 = (int)1;
										}
										else{
											HX_STACK_LINE(134)
											tmp53 = value;
										}
									}
								}
								HX_STACK_LINE(134)
								Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(134)
								_y1 = tmp54;
								HX_STACK_LINE(134)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(134)
								Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(134)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(134)
								Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(134)
								Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(134)
								Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(134)
								Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(134)
								Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(134)
								Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(134)
								Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(134)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(134)
								Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(134)
								Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(134)
								Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(134)
								_z1 = tmp68;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									{
										HX_STACK_LINE(134)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(134)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										if ((tmp49)){
											HX_STACK_LINE(134)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(134)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(134)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_x1 = tmp41;
									HX_STACK_LINE(134)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(134)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(134)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(134)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(134)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(134)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(134)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(134)
									Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									_y1 = tmp55;
									HX_STACK_LINE(134)
									Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(134)
									Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(134)
									Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(134)
									Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(134)
									Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(134)
									Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(134)
									Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(134)
									_z1 = tmp69;
								}
								else{
									HX_STACK_LINE(134)
									bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(134)
									if ((tmp40)){
										HX_STACK_LINE(134)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										{
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(134)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											if ((tmp50)){
												HX_STACK_LINE(134)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												if ((tmp51)){
													HX_STACK_LINE(134)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(134)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(134)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										_x1 = tmp42;
										HX_STACK_LINE(134)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(134)
										Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(134)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(134)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(134)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(134)
										Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(134)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(134)
										_y1 = tmp56;
										HX_STACK_LINE(134)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(134)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(134)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(134)
										Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(134)
										Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(134)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(134)
										Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(134)
										Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(134)
										Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(134)
										Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(134)
										Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(134)
										Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(134)
										Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(134)
										_z1 = tmp70;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(134)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(134)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(134)
											Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(134)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(134)
											_x1 = tmp55;
											HX_STACK_LINE(134)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(134)
											{
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(134)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												if ((tmp65)){
													HX_STACK_LINE(134)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(134)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													if ((tmp66)){
														HX_STACK_LINE(134)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(134)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(134)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(134)
											_y1 = tmp57;
											HX_STACK_LINE(134)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(134)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(134)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(134)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(134)
											Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(134)
											Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(134)
											Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(134)
											Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(134)
											Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(134)
											Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(134)
											Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(134)
											Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(134)
											Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(134)
											Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(134)
											_z1 = tmp71;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											if ((tmp42)){
												HX_STACK_LINE(134)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(134)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(134)
												Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(134)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(134)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(134)
												Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(134)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(134)
												Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(134)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(134)
												Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(134)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(134)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(134)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(134)
												_x1 = tmp56;
												HX_STACK_LINE(134)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(134)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(134)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(134)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(134)
												Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(134)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(134)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(134)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(134)
												Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(134)
												Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(134)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(134)
												Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(134)
												Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(134)
												Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(134)
												_y1 = tmp70;
												HX_STACK_LINE(134)
												Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(134)
												{
													HX_STACK_LINE(134)
													Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(134)
													Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(134)
													Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(134)
													Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(134)
													Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(134)
													Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(134)
													Float value = tmp79;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(134)
													bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(134)
													if ((tmp80)){
														HX_STACK_LINE(134)
														tmp71 = (int)-1;
													}
													else{
														HX_STACK_LINE(134)
														bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp71 = (int)1;
														}
														else{
															HX_STACK_LINE(134)
															tmp71 = value;
														}
													}
												}
												HX_STACK_LINE(134)
												Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(134)
												_z1 = tmp72;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(134)
												if ((tmp43)){
													HX_STACK_LINE(134)
													Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(134)
													Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(134)
													Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(134)
													Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(134)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(134)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(134)
													Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(134)
													Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(134)
													Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(134)
													Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(134)
													Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(134)
													Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(134)
													Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(134)
													Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(134)
													_x1 = tmp57;
													HX_STACK_LINE(134)
													Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(134)
													Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(134)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(134)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(134)
													Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(134)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(134)
													Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(134)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(134)
													Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(134)
													Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(134)
													Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(134)
													Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(134)
													Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(134)
													Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(134)
													_y1 = tmp71;
													HX_STACK_LINE(134)
													Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(134)
													{
														HX_STACK_LINE(134)
														Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(134)
														Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(134)
														Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(134)
														Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(134)
														Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(134)
														Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
														HX_STACK_LINE(134)
														Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(134)
														Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
														HX_STACK_LINE(134)
														Float value = tmp80;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(134)
														bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(134)
														if ((tmp81)){
															HX_STACK_LINE(134)
															tmp72 = (int)-1;
														}
														else{
															HX_STACK_LINE(134)
															bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
															HX_STACK_LINE(134)
															if ((tmp82)){
																HX_STACK_LINE(134)
																tmp72 = (int)1;
															}
															else{
																HX_STACK_LINE(134)
																tmp72 = value;
															}
														}
													}
													HX_STACK_LINE(134)
													Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(134)
													_z1 = tmp73;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(134)
							{
								HX_STACK_LINE(134)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(134)
								_this->ignore_listeners = true;
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->x = _x1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->x;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_x(tmp42);
										}
										HX_STACK_LINE(134)
										_this->x;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->y = _y1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->y;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_y(tmp42);
										}
										HX_STACK_LINE(134)
										_this->y;
									}
								}
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									_this->z = _z1;
									HX_STACK_LINE(134)
									bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(134)
									if ((tmp39)){
										HX_STACK_LINE(134)
										_this->z;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(134)
										bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(134)
										if ((tmp40)){
											HX_STACK_LINE(134)
											bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											tmp41 = !(tmp43);
										}
										else{
											HX_STACK_LINE(134)
											tmp41 = false;
										}
										HX_STACK_LINE(134)
										if ((tmp41)){
											HX_STACK_LINE(134)
											Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(134)
											_this->listen_z(tmp42);
										}
										HX_STACK_LINE(134)
										_this->z;
									}
								}
								HX_STACK_LINE(134)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(134)
								bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(134)
									tmp40 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_this->listen_x(tmp41);
								}
								HX_STACK_LINE(134)
								bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								if ((tmp41)){
									HX_STACK_LINE(134)
									bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									tmp42 = !(tmp44);
								}
								else{
									HX_STACK_LINE(134)
									tmp42 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp42)){
									HX_STACK_LINE(134)
									Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									_this->listen_y(tmp43);
								}
								HX_STACK_LINE(134)
								bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								if ((tmp43)){
									HX_STACK_LINE(134)
									bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									tmp44 = !(tmp46);
								}
								else{
									HX_STACK_LINE(134)
									tmp44 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp44)){
									HX_STACK_LINE(134)
									Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									_this->listen_z(tmp45);
								}
								HX_STACK_LINE(134)
								_this;
							}
							HX_STACK_LINE(134)
							_this;
						}
					}
					HX_STACK_LINE(134)
					Dynamic tmp18 = this->listen_w_dyn();		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(134)
					bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(134)
					bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(134)
					if ((tmp19)){
						HX_STACK_LINE(134)
						bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(134)
						bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(134)
						tmp20 = !(tmp23);
					}
					else{
						HX_STACK_LINE(134)
						tmp20 = false;
					}
					HX_STACK_LINE(134)
					if ((tmp20)){
						HX_STACK_LINE(134)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(134)
						this->listen_w(tmp21);
					}
					HX_STACK_LINE(134)
					this->w;
				}
			}
			HX_STACK_LINE(134)
			this->ignore_euler = false;
			HX_STACK_LINE(134)
			{
				HX_STACK_LINE(134)
				::phoenix::Vector tmp17 = this->euler;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(134)
				bool tmp18 = (tmp17 == null());		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(134)
				bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(134)
				bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(134)
				bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(134)
				if ((tmp20)){
					HX_STACK_LINE(134)
					tmp21 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(134)
					tmp21 = true;
				}
				HX_STACK_LINE(134)
				bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(134)
				bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(134)
				if ((tmp22)){
					HX_STACK_LINE(134)
					tmp23 = this->_construct;
				}
				else{
					HX_STACK_LINE(134)
					tmp23 = true;
				}
				HX_STACK_LINE(134)
				if ((tmp23)){
					HX_STACK_LINE(134)
					Dynamic();
				}
				else{
					HX_STACK_LINE(134)
					::phoenix::Vector tmp24 = this->euler;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(134)
					::phoenix::Vector _this = tmp24;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(134)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(134)
					Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(134)
					Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(134)
					Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(134)
					Float sqx = tmp27;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(134)
					Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(134)
					Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(134)
					Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(134)
					Float sqy = tmp30;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(134)
					Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(134)
					Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(134)
					Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(134)
					Float sqz = tmp33;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(134)
					Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(134)
					Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(134)
					Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(134)
					Float sqw = tmp36;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(134)
					Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
					HX_STACK_LINE(134)
					Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
					HX_STACK_LINE(134)
					Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
					HX_STACK_LINE(134)
					bool tmp37 = (order == (int)0);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(134)
					if ((tmp37)){
						HX_STACK_LINE(134)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(134)
						Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(134)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(134)
						Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(134)
						Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(134)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(134)
						Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(134)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(134)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(134)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(134)
						Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(134)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(134)
						Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(134)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(134)
						_x1 = tmp51;
						HX_STACK_LINE(134)
						Float tmp52;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(134)
						{
							HX_STACK_LINE(134)
							Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(134)
							Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(134)
							Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(134)
							Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(134)
							Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(134)
							Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(134)
							Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(134)
							Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(134)
							Float value = tmp60;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(134)
							bool tmp61 = (value < (int)-1);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(134)
							if ((tmp61)){
								HX_STACK_LINE(134)
								tmp52 = (int)-1;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp62 = (value > (int)1);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(134)
								if ((tmp62)){
									HX_STACK_LINE(134)
									tmp52 = (int)1;
								}
								else{
									HX_STACK_LINE(134)
									tmp52 = value;
								}
							}
						}
						HX_STACK_LINE(134)
						Float tmp53 = ::Math_obj::asin(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(134)
						_y1 = tmp53;
						HX_STACK_LINE(134)
						Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(134)
						Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(134)
						Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(134)
						Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(134)
						Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(134)
						Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(134)
						Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(134)
						Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
						HX_STACK_LINE(134)
						Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
						HX_STACK_LINE(134)
						Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
						HX_STACK_LINE(134)
						Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
						HX_STACK_LINE(134)
						Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
						HX_STACK_LINE(134)
						Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
						HX_STACK_LINE(134)
						Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
						HX_STACK_LINE(134)
						_z1 = tmp67;
					}
					else{
						HX_STACK_LINE(134)
						bool tmp38 = (order == (int)1);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(134)
						if ((tmp38)){
							HX_STACK_LINE(134)
							Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(134)
							{
								HX_STACK_LINE(134)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(134)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(134)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(134)
								Float value = tmp47;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(134)
								bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(134)
								if ((tmp48)){
									HX_STACK_LINE(134)
									tmp39 = (int)-1;
								}
								else{
									HX_STACK_LINE(134)
									bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(134)
									if ((tmp49)){
										HX_STACK_LINE(134)
										tmp39 = (int)1;
									}
									else{
										HX_STACK_LINE(134)
										tmp39 = value;
									}
								}
							}
							HX_STACK_LINE(134)
							Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(134)
							_x1 = tmp40;
							HX_STACK_LINE(134)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(134)
							Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(134)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(134)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(134)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(134)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(134)
							Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(134)
							Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(134)
							Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(134)
							Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(134)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(134)
							Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(134)
							Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(134)
							Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(134)
							_y1 = tmp54;
							HX_STACK_LINE(134)
							Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(134)
							Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(134)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(134)
							Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(134)
							Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(134)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(134)
							Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(134)
							Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(134)
							Float tmp63 = (sqw - sqx);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(134)
							Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(134)
							Float tmp65 = (tmp63 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(134)
							Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(134)
							Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(134)
							Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(134)
							_z1 = tmp68;
						}
						else{
							HX_STACK_LINE(134)
							bool tmp39 = (order == (int)2);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(134)
							if ((tmp39)){
								HX_STACK_LINE(134)
								Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								{
									HX_STACK_LINE(134)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(134)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(134)
									Float value = tmp48;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(134)
									bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(134)
									if ((tmp49)){
										HX_STACK_LINE(134)
										tmp40 = (int)-1;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(134)
										if ((tmp50)){
											HX_STACK_LINE(134)
											tmp40 = (int)1;
										}
										else{
											HX_STACK_LINE(134)
											tmp40 = value;
										}
									}
								}
								HX_STACK_LINE(134)
								Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(134)
								_x1 = tmp41;
								HX_STACK_LINE(134)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(134)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(134)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(134)
								Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(134)
								Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(134)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(134)
								Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(134)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(134)
								Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(134)
								Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(134)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(134)
								Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(134)
								Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(134)
								Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(134)
								_y1 = tmp55;
								HX_STACK_LINE(134)
								Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(134)
								Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(134)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(134)
								Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(134)
								Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(134)
								Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(134)
								Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(134)
								Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(134)
								Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(134)
								Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(134)
								Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(134)
								Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(134)
								Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(134)
								Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(134)
								_z1 = tmp69;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp40 = (order == (int)3);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(134)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(134)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(134)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(134)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(134)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(134)
									Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(134)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(134)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(134)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(134)
									Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(134)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(134)
									_x1 = tmp54;
									HX_STACK_LINE(134)
									Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(134)
									{
										HX_STACK_LINE(134)
										Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(134)
										Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(134)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(134)
										Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(134)
										Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(134)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(134)
										Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(134)
										Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										Float value = tmp63;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(134)
										bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(134)
										if ((tmp64)){
											HX_STACK_LINE(134)
											tmp55 = (int)-1;
										}
										else{
											HX_STACK_LINE(134)
											bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(134)
											if ((tmp65)){
												HX_STACK_LINE(134)
												tmp55 = (int)1;
											}
											else{
												HX_STACK_LINE(134)
												tmp55 = value;
											}
										}
									}
									HX_STACK_LINE(134)
									Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(134)
									_y1 = tmp56;
									HX_STACK_LINE(134)
									Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(134)
									Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(134)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(134)
									Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(134)
									Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(134)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(134)
									Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(134)
									Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(134)
									Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(134)
									Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(134)
									Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(134)
									Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(134)
									Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(134)
									Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(134)
									_z1 = tmp70;
								}
								else{
									HX_STACK_LINE(134)
									bool tmp41 = (order == (int)4);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									if ((tmp41)){
										HX_STACK_LINE(134)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(134)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(134)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(134)
										Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(134)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(134)
										Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(134)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(134)
										Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(134)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(134)
										Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(134)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(134)
										Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(134)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(134)
										_x1 = tmp55;
										HX_STACK_LINE(134)
										Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(134)
										Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(134)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(134)
										Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(134)
										Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(134)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(134)
										Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(134)
										Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(134)
										Float tmp64 = (sqw + sqx);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(134)
										Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(134)
										Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(134)
										Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(134)
										Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(134)
										Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(134)
										_y1 = tmp69;
										HX_STACK_LINE(134)
										Float tmp70;		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(134)
										{
											HX_STACK_LINE(134)
											Float tmp71 = this->x;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(134)
											Float tmp72 = this->y;		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(134)
											Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(134)
											Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(134)
											Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(134)
											Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(134)
											Float tmp77 = (tmp73 + tmp76);		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(134)
											Float tmp78 = ((int)2 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(134)
											Float value = tmp78;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(134)
											bool tmp79 = (value < (int)-1);		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(134)
											if ((tmp79)){
												HX_STACK_LINE(134)
												tmp70 = (int)-1;
											}
											else{
												HX_STACK_LINE(134)
												bool tmp80 = (value > (int)1);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(134)
												if ((tmp80)){
													HX_STACK_LINE(134)
													tmp70 = (int)1;
												}
												else{
													HX_STACK_LINE(134)
													tmp70 = value;
												}
											}
										}
										HX_STACK_LINE(134)
										Float tmp71 = ::Math_obj::asin(tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(134)
										_z1 = tmp71;
									}
									else{
										HX_STACK_LINE(134)
										bool tmp42 = (order == (int)5);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(134)
										if ((tmp42)){
											HX_STACK_LINE(134)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(134)
											Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(134)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(134)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(134)
											Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(134)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(134)
											Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(134)
											Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(134)
											Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(134)
											Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(134)
											Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(134)
											Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(134)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(134)
											Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(134)
											_x1 = tmp56;
											HX_STACK_LINE(134)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(134)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(134)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(134)
											Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(134)
											Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(134)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(134)
											Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(134)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(134)
											Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(134)
											Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(134)
											Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(134)
											Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(134)
											Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(134)
											Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(134)
											_y1 = tmp70;
											HX_STACK_LINE(134)
											Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(134)
											{
												HX_STACK_LINE(134)
												Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(134)
												Float tmp73 = this->w;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(134)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(134)
												Float tmp75 = this->x;		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(134)
												Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(134)
												Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(134)
												Float tmp78 = (tmp74 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(134)
												Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(134)
												Float value = tmp79;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(134)
												bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(134)
												if ((tmp80)){
													HX_STACK_LINE(134)
													tmp71 = (int)-1;
												}
												else{
													HX_STACK_LINE(134)
													bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(134)
													if ((tmp81)){
														HX_STACK_LINE(134)
														tmp71 = (int)1;
													}
													else{
														HX_STACK_LINE(134)
														tmp71 = value;
													}
												}
											}
											HX_STACK_LINE(134)
											Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(134)
											_z1 = tmp72;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(134)
					{
						HX_STACK_LINE(134)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(134)
						_this->ignore_listeners = true;
						HX_STACK_LINE(134)
						{
							HX_STACK_LINE(134)
							_this->x = _x1;
							HX_STACK_LINE(134)
							bool tmp38 = _this->_construct;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(134)
							if ((tmp38)){
								HX_STACK_LINE(134)
								_this->x;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(134)
									tmp40 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = _x1;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_this->listen_x(tmp41);
								}
								HX_STACK_LINE(134)
								_this->x;
							}
						}
						HX_STACK_LINE(134)
						{
							HX_STACK_LINE(134)
							_this->y = _y1;
							HX_STACK_LINE(134)
							bool tmp38 = _this->_construct;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(134)
							if ((tmp38)){
								HX_STACK_LINE(134)
								_this->y;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp39 = (_this->listen_y != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(134)
									tmp40 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = _y1;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_this->listen_y(tmp41);
								}
								HX_STACK_LINE(134)
								_this->y;
							}
						}
						HX_STACK_LINE(134)
						{
							HX_STACK_LINE(134)
							_this->z = _z1;
							HX_STACK_LINE(134)
							bool tmp38 = _this->_construct;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(134)
							if ((tmp38)){
								HX_STACK_LINE(134)
								_this->z;
							}
							else{
								HX_STACK_LINE(134)
								bool tmp39 = (_this->listen_z != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(134)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(134)
								if ((tmp39)){
									HX_STACK_LINE(134)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(134)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(134)
									tmp40 = false;
								}
								HX_STACK_LINE(134)
								if ((tmp40)){
									HX_STACK_LINE(134)
									Float tmp41 = _z1;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(134)
									_this->listen_z(tmp41);
								}
								HX_STACK_LINE(134)
								_this->z;
							}
						}
						HX_STACK_LINE(134)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(134)
						bool tmp38 = (_this->listen_x != null());		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(134)
						bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(134)
						if ((tmp38)){
							HX_STACK_LINE(134)
							bool tmp40 = _this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(134)
							bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(134)
							tmp39 = !(tmp41);
						}
						else{
							HX_STACK_LINE(134)
							tmp39 = false;
						}
						HX_STACK_LINE(134)
						if ((tmp39)){
							HX_STACK_LINE(134)
							Float tmp40 = _this->x;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(134)
							_this->listen_x(tmp40);
						}
						HX_STACK_LINE(134)
						bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(134)
						bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(134)
						if ((tmp40)){
							HX_STACK_LINE(134)
							bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(134)
							bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(134)
							tmp41 = !(tmp43);
						}
						else{
							HX_STACK_LINE(134)
							tmp41 = false;
						}
						HX_STACK_LINE(134)
						if ((tmp41)){
							HX_STACK_LINE(134)
							Float tmp42 = _this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(134)
							_this->listen_y(tmp42);
						}
						HX_STACK_LINE(134)
						bool tmp42 = (_this->listen_z != null());		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(134)
						bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(134)
						if ((tmp42)){
							HX_STACK_LINE(134)
							bool tmp44 = _this->ignore_listeners;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(134)
							bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(134)
							tmp43 = !(tmp45);
						}
						else{
							HX_STACK_LINE(134)
							tmp43 = false;
						}
						HX_STACK_LINE(134)
						if ((tmp43)){
							HX_STACK_LINE(134)
							Float tmp44 = _this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(134)
							_this->listen_z(tmp44);
						}
						HX_STACK_LINE(134)
						_this;
					}
					HX_STACK_LINE(134)
					_this;
				}
			}
			HX_STACK_LINE(134)
			Dynamic tmp17 = this->listen_x_dyn();		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(134)
			bool tmp18 = (tmp17 != null());		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(134)
			bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(134)
			if ((tmp18)){
				HX_STACK_LINE(134)
				bool tmp20 = this->ignore_listeners;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(134)
				bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(134)
				bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(134)
				tmp19 = !(tmp22);
			}
			else{
				HX_STACK_LINE(134)
				tmp19 = false;
			}
			HX_STACK_LINE(134)
			if ((tmp19)){
				HX_STACK_LINE(134)
				Float tmp20 = this->x;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(134)
				this->listen_x(tmp20);
			}
			HX_STACK_LINE(134)
			Dynamic tmp20 = this->listen_y_dyn();		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(134)
			bool tmp21 = (tmp20 != null());		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(134)
			bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(134)
			if ((tmp21)){
				HX_STACK_LINE(134)
				bool tmp23 = this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(134)
				bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(134)
				bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(134)
				tmp22 = !(tmp25);
			}
			else{
				HX_STACK_LINE(134)
				tmp22 = false;
			}
			HX_STACK_LINE(134)
			if ((tmp22)){
				HX_STACK_LINE(134)
				Float tmp23 = this->y;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(134)
				this->listen_y(tmp23);
			}
			HX_STACK_LINE(134)
			Dynamic tmp23 = this->listen_z_dyn();		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(134)
			bool tmp24 = (tmp23 != null());		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(134)
			bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(134)
			if ((tmp24)){
				HX_STACK_LINE(134)
				bool tmp26 = this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(134)
				bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(134)
				bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(134)
				tmp25 = !(tmp28);
			}
			else{
				HX_STACK_LINE(134)
				tmp25 = false;
			}
			HX_STACK_LINE(134)
			if ((tmp25)){
				HX_STACK_LINE(134)
				Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(134)
				this->listen_z(tmp26);
			}
			HX_STACK_LINE(134)
			Dynamic tmp26 = this->listen_w_dyn();		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(134)
			bool tmp27 = (tmp26 != null());		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(134)
			bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(134)
			if ((tmp27)){
				HX_STACK_LINE(134)
				bool tmp29 = this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(134)
				bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(134)
				bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(134)
				tmp28 = !(tmp31);
			}
			else{
				HX_STACK_LINE(134)
				tmp28 = false;
			}
			HX_STACK_LINE(134)
			if ((tmp28)){
				HX_STACK_LINE(134)
				Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(134)
				this->listen_w(tmp29);
			}
		}
		HX_STACK_LINE(136)
		return hx::ObjectPtr<OBJ_>(this);
	}
}


HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,setFromEuler,return )

::phoenix::Quaternion Quaternion_obj::setFromAxisAngle( ::phoenix::Vector _axis,Float _angle){
	HX_STACK_FRAME("phoenix.Quaternion","setFromAxisAngle",0xa0e70777,"phoenix.Quaternion.setFromAxisAngle","phoenix/Quaternion.hx",141,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_axis,"_axis")
	HX_STACK_ARG(_angle,"_angle")
	HX_STACK_LINE(146)
	Float tmp = (Float(_angle) / Float((int)2));		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(146)
	Float _halfAngle = tmp;		HX_STACK_VAR(_halfAngle,"_halfAngle");
	HX_STACK_LINE(147)
	Float tmp1 = _halfAngle;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(147)
	Float tmp2 = ::Math_obj::sin(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(147)
	Float _s = tmp2;		HX_STACK_VAR(_s,"_s");
	HX_STACK_LINE(149)
	{
		HX_STACK_LINE(152)
		Float tmp3 = _halfAngle;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(152)
		Float tmp4 = ::Math_obj::cos(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(152)
		Float _w = tmp4;		HX_STACK_VAR(_w,"_w");
		HX_STACK_LINE(149)
		this->ignore_euler = true;
		HX_STACK_LINE(149)
		{
			HX_STACK_LINE(149)
			Float tmp5 = (_axis->x * _s);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(149)
			this->x = tmp5;
			HX_STACK_LINE(149)
			bool tmp6 = this->_construct;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(149)
			if ((tmp6)){
				HX_STACK_LINE(149)
				this->x;
			}
			else{
				HX_STACK_LINE(149)
				{
					HX_STACK_LINE(149)
					::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(149)
					bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(149)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(149)
					bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					if ((tmp10)){
						HX_STACK_LINE(149)
						tmp11 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(149)
						tmp11 = true;
					}
					HX_STACK_LINE(149)
					bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(149)
					bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(149)
					if ((tmp12)){
						HX_STACK_LINE(149)
						tmp13 = this->_construct;
					}
					else{
						HX_STACK_LINE(149)
						tmp13 = true;
					}
					HX_STACK_LINE(149)
					if ((tmp13)){
						HX_STACK_LINE(149)
						Dynamic();
					}
					else{
						HX_STACK_LINE(149)
						::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(149)
						::phoenix::Vector _this = tmp14;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(149)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(149)
						Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(149)
						Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(149)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(149)
						Float sqx = tmp17;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(149)
						Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(149)
						Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(149)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(149)
						Float sqy = tmp20;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(149)
						Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(149)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(149)
						Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(149)
						Float sqz = tmp23;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(149)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(149)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(149)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(149)
						Float sqw = tmp26;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(149)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(149)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(149)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(149)
						bool tmp27 = (order == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(149)
						if ((tmp27)){
							HX_STACK_LINE(149)
							Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(149)
							Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(149)
							Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(149)
							Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(149)
							Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(149)
							Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(149)
							Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(149)
							Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(149)
							_x = tmp41;
							HX_STACK_LINE(149)
							Float tmp42;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float value = tmp50;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(149)
								bool tmp51 = (value < (int)-1);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								if ((tmp51)){
									HX_STACK_LINE(149)
									tmp42 = (int)-1;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp52 = (value > (int)1);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									if ((tmp52)){
										HX_STACK_LINE(149)
										tmp42 = (int)1;
									}
									else{
										HX_STACK_LINE(149)
										tmp42 = value;
									}
								}
							}
							HX_STACK_LINE(149)
							Float tmp43 = ::Math_obj::asin(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(149)
							_y = tmp43;
							HX_STACK_LINE(149)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(149)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(149)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(149)
							Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(149)
							Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(149)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(149)
							Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(149)
							Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(149)
							Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(149)
							Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(149)
							Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(149)
							Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(149)
							Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(149)
							Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(149)
							_z = tmp57;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp28 = (order == (int)1);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								{
									HX_STACK_LINE(149)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float value = tmp37;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(149)
									bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									if ((tmp38)){
										HX_STACK_LINE(149)
										tmp29 = (int)-1;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										if ((tmp39)){
											HX_STACK_LINE(149)
											tmp29 = (int)1;
										}
										else{
											HX_STACK_LINE(149)
											tmp29 = value;
										}
									}
								}
								HX_STACK_LINE(149)
								Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								_x = tmp30;
								HX_STACK_LINE(149)
								Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(149)
								Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(149)
								Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(149)
								Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(149)
								Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(149)
								Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(149)
								Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(149)
								Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								_y = tmp44;
								HX_STACK_LINE(149)
								Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(149)
								Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(149)
								Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(149)
								Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(149)
								Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(149)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(149)
								Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(149)
								_z = tmp58;
							}
							else{
								HX_STACK_LINE(149)
								bool tmp29 = (order == (int)2);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								if ((tmp29)){
									HX_STACK_LINE(149)
									Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									{
										HX_STACK_LINE(149)
										Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float value = tmp38;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(149)
										bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										if ((tmp39)){
											HX_STACK_LINE(149)
											tmp30 = (int)-1;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(149)
											if ((tmp40)){
												HX_STACK_LINE(149)
												tmp30 = (int)1;
											}
											else{
												HX_STACK_LINE(149)
												tmp30 = value;
											}
										}
									}
									HX_STACK_LINE(149)
									Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									_x = tmp31;
									HX_STACK_LINE(149)
									Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(149)
									Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(149)
									Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(149)
									Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(149)
									Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(149)
									Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(149)
									Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(149)
									_y = tmp45;
									HX_STACK_LINE(149)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(149)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(149)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(149)
									Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(149)
									Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(149)
									Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(149)
									Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(149)
									Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(149)
									Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(149)
									Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(149)
									Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(149)
									Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(149)
									Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(149)
									_z = tmp59;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp30 = (order == (int)3);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(149)
										Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(149)
										Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(149)
										Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(149)
										Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(149)
										_x = tmp44;
										HX_STACK_LINE(149)
										Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(149)
										{
											HX_STACK_LINE(149)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											Float value = tmp53;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(149)
											bool tmp54 = (value < (int)-1);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(149)
											if ((tmp54)){
												HX_STACK_LINE(149)
												tmp45 = (int)-1;
											}
											else{
												HX_STACK_LINE(149)
												bool tmp55 = (value > (int)1);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(149)
												if ((tmp55)){
													HX_STACK_LINE(149)
													tmp45 = (int)1;
												}
												else{
													HX_STACK_LINE(149)
													tmp45 = value;
												}
											}
										}
										HX_STACK_LINE(149)
										Float tmp46 = ::Math_obj::asin(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(149)
										_y = tmp46;
										HX_STACK_LINE(149)
										Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(149)
										Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(149)
										Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(149)
										Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(149)
										Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(149)
										Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(149)
										Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(149)
										Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(149)
										Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(149)
										Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(149)
										Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(149)
										Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(149)
										Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(149)
										Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(149)
										_z = tmp60;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp31 = (order == (int)4);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										if ((tmp31)){
											HX_STACK_LINE(149)
											Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(149)
											Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(149)
											Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(149)
											Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(149)
											Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(149)
											Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(149)
											Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(149)
											Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(149)
											Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(149)
											Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(149)
											Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(149)
											Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(149)
											Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(149)
											Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(149)
											_x = tmp45;
											HX_STACK_LINE(149)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(149)
											Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(149)
											Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(149)
											Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(149)
											Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(149)
											Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(149)
											_y = tmp59;
											HX_STACK_LINE(149)
											Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(149)
											{
												HX_STACK_LINE(149)
												Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(149)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(149)
												Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(149)
												Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(149)
												Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(149)
												Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(149)
												Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(149)
												Float value = tmp68;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(149)
												bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(149)
												if ((tmp69)){
													HX_STACK_LINE(149)
													tmp60 = (int)-1;
												}
												else{
													HX_STACK_LINE(149)
													bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(149)
													if ((tmp70)){
														HX_STACK_LINE(149)
														tmp60 = (int)1;
													}
													else{
														HX_STACK_LINE(149)
														tmp60 = value;
													}
												}
											}
											HX_STACK_LINE(149)
											Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(149)
											_z = tmp61;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp32 = (order == (int)5);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(149)
											if ((tmp32)){
												HX_STACK_LINE(149)
												Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(149)
												Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(149)
												Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(149)
												Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(149)
												Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(149)
												Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(149)
												Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(149)
												Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(149)
												Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(149)
												Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(149)
												Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(149)
												Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(149)
												Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(149)
												Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(149)
												_x = tmp46;
												HX_STACK_LINE(149)
												Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(149)
												Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(149)
												Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(149)
												Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(149)
												Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(149)
												Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(149)
												Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(149)
												Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(149)
												Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(149)
												Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(149)
												Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(149)
												Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(149)
												Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(149)
												Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(149)
												_y = tmp60;
												HX_STACK_LINE(149)
												Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												{
													HX_STACK_LINE(149)
													Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(149)
													Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(149)
													Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(149)
													Float tmp65 = this->x;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(149)
													Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(149)
													Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(149)
													Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(149)
													Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(149)
													Float value = tmp69;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(149)
													bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(149)
													if ((tmp70)){
														HX_STACK_LINE(149)
														tmp61 = (int)-1;
													}
													else{
														HX_STACK_LINE(149)
														bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(149)
														if ((tmp71)){
															HX_STACK_LINE(149)
															tmp61 = (int)1;
														}
														else{
															HX_STACK_LINE(149)
															tmp61 = value;
														}
													}
												}
												HX_STACK_LINE(149)
												Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(149)
												_z = tmp62;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(149)
						{
							HX_STACK_LINE(149)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(149)
							_this->ignore_listeners = true;
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->x = _x;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->x;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_x(tmp31);
									}
									HX_STACK_LINE(149)
									_this->x;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->y = _y;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->y;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_y(tmp31);
									}
									HX_STACK_LINE(149)
									_this->y;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->z = _z;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->z;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_z != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_z(tmp31);
									}
									HX_STACK_LINE(149)
									_this->z;
								}
							}
							HX_STACK_LINE(149)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(149)
							bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(149)
								tmp29 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp29)){
								HX_STACK_LINE(149)
								Float tmp30 = _this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								_this->listen_x(tmp30);
							}
							HX_STACK_LINE(149)
							bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							if ((tmp30)){
								HX_STACK_LINE(149)
								bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								tmp31 = !(tmp33);
							}
							else{
								HX_STACK_LINE(149)
								tmp31 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp31)){
								HX_STACK_LINE(149)
								Float tmp32 = _this->y;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								_this->listen_y(tmp32);
							}
							HX_STACK_LINE(149)
							bool tmp32 = (_this->listen_z != null());		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							if ((tmp32)){
								HX_STACK_LINE(149)
								bool tmp34 = _this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								tmp33 = !(tmp35);
							}
							else{
								HX_STACK_LINE(149)
								tmp33 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp33)){
								HX_STACK_LINE(149)
								Float tmp34 = _this->z;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								_this->listen_z(tmp34);
							}
							HX_STACK_LINE(149)
							_this;
						}
						HX_STACK_LINE(149)
						_this;
					}
				}
				HX_STACK_LINE(149)
				Dynamic tmp7 = this->listen_x_dyn();		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(149)
				bool tmp8 = (tmp7 != null());		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(149)
				bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(149)
				if ((tmp8)){
					HX_STACK_LINE(149)
					bool tmp10 = this->ignore_listeners;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(149)
					tmp9 = !(tmp12);
				}
				else{
					HX_STACK_LINE(149)
					tmp9 = false;
				}
				HX_STACK_LINE(149)
				if ((tmp9)){
					HX_STACK_LINE(149)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					this->listen_x(tmp10);
				}
				HX_STACK_LINE(149)
				this->x;
			}
		}
		HX_STACK_LINE(149)
		{
			HX_STACK_LINE(150)
			Float tmp5 = (_axis->y * _s);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(149)
			this->y = tmp5;
			HX_STACK_LINE(149)
			bool tmp6 = this->_construct;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(149)
			if ((tmp6)){
				HX_STACK_LINE(149)
				this->y;
			}
			else{
				HX_STACK_LINE(149)
				{
					HX_STACK_LINE(149)
					::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(149)
					bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(149)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(149)
					bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					if ((tmp10)){
						HX_STACK_LINE(149)
						tmp11 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(149)
						tmp11 = true;
					}
					HX_STACK_LINE(149)
					bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(149)
					bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(149)
					if ((tmp12)){
						HX_STACK_LINE(149)
						tmp13 = this->_construct;
					}
					else{
						HX_STACK_LINE(149)
						tmp13 = true;
					}
					HX_STACK_LINE(149)
					if ((tmp13)){
						HX_STACK_LINE(149)
						Dynamic();
					}
					else{
						HX_STACK_LINE(149)
						::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(149)
						::phoenix::Vector _this = tmp14;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(149)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(149)
						Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(149)
						Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(149)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(149)
						Float sqx = tmp17;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(149)
						Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(149)
						Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(149)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(149)
						Float sqy = tmp20;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(149)
						Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(149)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(149)
						Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(149)
						Float sqz = tmp23;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(149)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(149)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(149)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(149)
						Float sqw = tmp26;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(149)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(149)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(149)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(149)
						bool tmp27 = (order == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(149)
						if ((tmp27)){
							HX_STACK_LINE(149)
							Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(149)
							Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(149)
							Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(149)
							Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(149)
							Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(149)
							Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(149)
							Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(149)
							Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(149)
							_x = tmp41;
							HX_STACK_LINE(149)
							Float tmp42;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float value = tmp50;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(149)
								bool tmp51 = (value < (int)-1);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								if ((tmp51)){
									HX_STACK_LINE(149)
									tmp42 = (int)-1;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp52 = (value > (int)1);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									if ((tmp52)){
										HX_STACK_LINE(149)
										tmp42 = (int)1;
									}
									else{
										HX_STACK_LINE(149)
										tmp42 = value;
									}
								}
							}
							HX_STACK_LINE(149)
							Float tmp43 = ::Math_obj::asin(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(149)
							_y = tmp43;
							HX_STACK_LINE(149)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(149)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(149)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(149)
							Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(149)
							Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(149)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(149)
							Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(149)
							Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(149)
							Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(149)
							Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(149)
							Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(149)
							Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(149)
							Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(149)
							Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(149)
							_z = tmp57;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp28 = (order == (int)1);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								{
									HX_STACK_LINE(149)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float value = tmp37;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(149)
									bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									if ((tmp38)){
										HX_STACK_LINE(149)
										tmp29 = (int)-1;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										if ((tmp39)){
											HX_STACK_LINE(149)
											tmp29 = (int)1;
										}
										else{
											HX_STACK_LINE(149)
											tmp29 = value;
										}
									}
								}
								HX_STACK_LINE(149)
								Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								_x = tmp30;
								HX_STACK_LINE(149)
								Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(149)
								Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(149)
								Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(149)
								Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(149)
								Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(149)
								Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(149)
								Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(149)
								Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								_y = tmp44;
								HX_STACK_LINE(149)
								Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(149)
								Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(149)
								Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(149)
								Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(149)
								Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(149)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(149)
								Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(149)
								_z = tmp58;
							}
							else{
								HX_STACK_LINE(149)
								bool tmp29 = (order == (int)2);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								if ((tmp29)){
									HX_STACK_LINE(149)
									Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									{
										HX_STACK_LINE(149)
										Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float value = tmp38;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(149)
										bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										if ((tmp39)){
											HX_STACK_LINE(149)
											tmp30 = (int)-1;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(149)
											if ((tmp40)){
												HX_STACK_LINE(149)
												tmp30 = (int)1;
											}
											else{
												HX_STACK_LINE(149)
												tmp30 = value;
											}
										}
									}
									HX_STACK_LINE(149)
									Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									_x = tmp31;
									HX_STACK_LINE(149)
									Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(149)
									Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(149)
									Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(149)
									Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(149)
									Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(149)
									Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(149)
									Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(149)
									_y = tmp45;
									HX_STACK_LINE(149)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(149)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(149)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(149)
									Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(149)
									Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(149)
									Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(149)
									Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(149)
									Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(149)
									Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(149)
									Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(149)
									Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(149)
									Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(149)
									Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(149)
									_z = tmp59;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp30 = (order == (int)3);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(149)
										Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(149)
										Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(149)
										Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(149)
										Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(149)
										_x = tmp44;
										HX_STACK_LINE(149)
										Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(149)
										{
											HX_STACK_LINE(149)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											Float value = tmp53;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(149)
											bool tmp54 = (value < (int)-1);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(149)
											if ((tmp54)){
												HX_STACK_LINE(149)
												tmp45 = (int)-1;
											}
											else{
												HX_STACK_LINE(149)
												bool tmp55 = (value > (int)1);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(149)
												if ((tmp55)){
													HX_STACK_LINE(149)
													tmp45 = (int)1;
												}
												else{
													HX_STACK_LINE(149)
													tmp45 = value;
												}
											}
										}
										HX_STACK_LINE(149)
										Float tmp46 = ::Math_obj::asin(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(149)
										_y = tmp46;
										HX_STACK_LINE(149)
										Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(149)
										Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(149)
										Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(149)
										Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(149)
										Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(149)
										Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(149)
										Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(149)
										Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(149)
										Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(149)
										Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(149)
										Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(149)
										Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(149)
										Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(149)
										Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(149)
										_z = tmp60;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp31 = (order == (int)4);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										if ((tmp31)){
											HX_STACK_LINE(149)
											Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(149)
											Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(149)
											Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(149)
											Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(149)
											Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(149)
											Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(149)
											Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(149)
											Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(149)
											Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(149)
											Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(149)
											Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(149)
											Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(149)
											Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(149)
											Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(149)
											_x = tmp45;
											HX_STACK_LINE(149)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(149)
											Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(149)
											Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(149)
											Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(149)
											Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(149)
											Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(149)
											_y = tmp59;
											HX_STACK_LINE(149)
											Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(149)
											{
												HX_STACK_LINE(149)
												Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(149)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(149)
												Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(149)
												Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(149)
												Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(149)
												Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(149)
												Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(149)
												Float value = tmp68;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(149)
												bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(149)
												if ((tmp69)){
													HX_STACK_LINE(149)
													tmp60 = (int)-1;
												}
												else{
													HX_STACK_LINE(149)
													bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(149)
													if ((tmp70)){
														HX_STACK_LINE(149)
														tmp60 = (int)1;
													}
													else{
														HX_STACK_LINE(149)
														tmp60 = value;
													}
												}
											}
											HX_STACK_LINE(149)
											Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(149)
											_z = tmp61;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp32 = (order == (int)5);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(149)
											if ((tmp32)){
												HX_STACK_LINE(149)
												Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(149)
												Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(149)
												Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(149)
												Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(149)
												Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(149)
												Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(149)
												Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(149)
												Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(149)
												Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(149)
												Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(149)
												Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(149)
												Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(149)
												Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(149)
												Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(149)
												_x = tmp46;
												HX_STACK_LINE(149)
												Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(149)
												Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(149)
												Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(149)
												Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(149)
												Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(149)
												Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(149)
												Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(149)
												Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(149)
												Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(149)
												Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(149)
												Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(149)
												Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(149)
												Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(149)
												Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(149)
												_y = tmp60;
												HX_STACK_LINE(149)
												Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												{
													HX_STACK_LINE(149)
													Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(149)
													Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(149)
													Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(149)
													Float tmp65 = this->x;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(149)
													Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(149)
													Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(149)
													Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(149)
													Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(149)
													Float value = tmp69;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(149)
													bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(149)
													if ((tmp70)){
														HX_STACK_LINE(149)
														tmp61 = (int)-1;
													}
													else{
														HX_STACK_LINE(149)
														bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(149)
														if ((tmp71)){
															HX_STACK_LINE(149)
															tmp61 = (int)1;
														}
														else{
															HX_STACK_LINE(149)
															tmp61 = value;
														}
													}
												}
												HX_STACK_LINE(149)
												Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(149)
												_z = tmp62;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(149)
						{
							HX_STACK_LINE(149)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(149)
							_this->ignore_listeners = true;
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->x = _x;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->x;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_x(tmp31);
									}
									HX_STACK_LINE(149)
									_this->x;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->y = _y;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->y;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_y(tmp31);
									}
									HX_STACK_LINE(149)
									_this->y;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->z = _z;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->z;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_z != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_z(tmp31);
									}
									HX_STACK_LINE(149)
									_this->z;
								}
							}
							HX_STACK_LINE(149)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(149)
							bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(149)
								tmp29 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp29)){
								HX_STACK_LINE(149)
								Float tmp30 = _this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								_this->listen_x(tmp30);
							}
							HX_STACK_LINE(149)
							bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							if ((tmp30)){
								HX_STACK_LINE(149)
								bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								tmp31 = !(tmp33);
							}
							else{
								HX_STACK_LINE(149)
								tmp31 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp31)){
								HX_STACK_LINE(149)
								Float tmp32 = _this->y;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								_this->listen_y(tmp32);
							}
							HX_STACK_LINE(149)
							bool tmp32 = (_this->listen_z != null());		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							if ((tmp32)){
								HX_STACK_LINE(149)
								bool tmp34 = _this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								tmp33 = !(tmp35);
							}
							else{
								HX_STACK_LINE(149)
								tmp33 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp33)){
								HX_STACK_LINE(149)
								Float tmp34 = _this->z;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								_this->listen_z(tmp34);
							}
							HX_STACK_LINE(149)
							_this;
						}
						HX_STACK_LINE(149)
						_this;
					}
				}
				HX_STACK_LINE(149)
				Dynamic tmp7 = this->listen_y_dyn();		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(149)
				bool tmp8 = (tmp7 != null());		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(149)
				bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(149)
				if ((tmp8)){
					HX_STACK_LINE(149)
					bool tmp10 = this->ignore_listeners;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(149)
					tmp9 = !(tmp12);
				}
				else{
					HX_STACK_LINE(149)
					tmp9 = false;
				}
				HX_STACK_LINE(149)
				if ((tmp9)){
					HX_STACK_LINE(149)
					Float tmp10 = this->y;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					this->listen_y(tmp10);
				}
				HX_STACK_LINE(149)
				this->y;
			}
		}
		HX_STACK_LINE(149)
		{
			HX_STACK_LINE(151)
			Float tmp5 = (_axis->z * _s);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(149)
			this->z = tmp5;
			HX_STACK_LINE(149)
			bool tmp6 = this->_construct;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(149)
			if ((tmp6)){
				HX_STACK_LINE(149)
				this->z;
			}
			else{
				HX_STACK_LINE(149)
				{
					HX_STACK_LINE(149)
					::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(149)
					bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(149)
					bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(149)
					bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					if ((tmp10)){
						HX_STACK_LINE(149)
						tmp11 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(149)
						tmp11 = true;
					}
					HX_STACK_LINE(149)
					bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(149)
					bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(149)
					if ((tmp12)){
						HX_STACK_LINE(149)
						tmp13 = this->_construct;
					}
					else{
						HX_STACK_LINE(149)
						tmp13 = true;
					}
					HX_STACK_LINE(149)
					if ((tmp13)){
						HX_STACK_LINE(149)
						Dynamic();
					}
					else{
						HX_STACK_LINE(149)
						::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(149)
						::phoenix::Vector _this = tmp14;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(149)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(149)
						Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(149)
						Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(149)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(149)
						Float sqx = tmp17;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(149)
						Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(149)
						Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(149)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(149)
						Float sqy = tmp20;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(149)
						Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(149)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(149)
						Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(149)
						Float sqz = tmp23;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(149)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(149)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(149)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(149)
						Float sqw = tmp26;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(149)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(149)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(149)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(149)
						bool tmp27 = (order == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(149)
						if ((tmp27)){
							HX_STACK_LINE(149)
							Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(149)
							Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(149)
							Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(149)
							Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(149)
							Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(149)
							Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(149)
							Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(149)
							Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(149)
							_x = tmp41;
							HX_STACK_LINE(149)
							Float tmp42;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float value = tmp50;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(149)
								bool tmp51 = (value < (int)-1);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								if ((tmp51)){
									HX_STACK_LINE(149)
									tmp42 = (int)-1;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp52 = (value > (int)1);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									if ((tmp52)){
										HX_STACK_LINE(149)
										tmp42 = (int)1;
									}
									else{
										HX_STACK_LINE(149)
										tmp42 = value;
									}
								}
							}
							HX_STACK_LINE(149)
							Float tmp43 = ::Math_obj::asin(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(149)
							_y = tmp43;
							HX_STACK_LINE(149)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(149)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(149)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(149)
							Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(149)
							Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(149)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(149)
							Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(149)
							Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(149)
							Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(149)
							Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(149)
							Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(149)
							Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(149)
							Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(149)
							Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(149)
							_z = tmp57;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp28 = (order == (int)1);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								{
									HX_STACK_LINE(149)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float value = tmp37;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(149)
									bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									if ((tmp38)){
										HX_STACK_LINE(149)
										tmp29 = (int)-1;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										if ((tmp39)){
											HX_STACK_LINE(149)
											tmp29 = (int)1;
										}
										else{
											HX_STACK_LINE(149)
											tmp29 = value;
										}
									}
								}
								HX_STACK_LINE(149)
								Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								_x = tmp30;
								HX_STACK_LINE(149)
								Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(149)
								Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(149)
								Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(149)
								Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(149)
								Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(149)
								Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(149)
								Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(149)
								Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								_y = tmp44;
								HX_STACK_LINE(149)
								Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(149)
								Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(149)
								Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(149)
								Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(149)
								Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(149)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(149)
								Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(149)
								_z = tmp58;
							}
							else{
								HX_STACK_LINE(149)
								bool tmp29 = (order == (int)2);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								if ((tmp29)){
									HX_STACK_LINE(149)
									Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									{
										HX_STACK_LINE(149)
										Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float value = tmp38;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(149)
										bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										if ((tmp39)){
											HX_STACK_LINE(149)
											tmp30 = (int)-1;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(149)
											if ((tmp40)){
												HX_STACK_LINE(149)
												tmp30 = (int)1;
											}
											else{
												HX_STACK_LINE(149)
												tmp30 = value;
											}
										}
									}
									HX_STACK_LINE(149)
									Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									_x = tmp31;
									HX_STACK_LINE(149)
									Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(149)
									Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(149)
									Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(149)
									Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(149)
									Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(149)
									Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(149)
									Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(149)
									_y = tmp45;
									HX_STACK_LINE(149)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(149)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(149)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(149)
									Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(149)
									Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(149)
									Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(149)
									Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(149)
									Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(149)
									Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(149)
									Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(149)
									Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(149)
									Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(149)
									Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(149)
									_z = tmp59;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp30 = (order == (int)3);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(149)
										Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(149)
										Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(149)
										Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(149)
										Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(149)
										_x = tmp44;
										HX_STACK_LINE(149)
										Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(149)
										{
											HX_STACK_LINE(149)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											Float value = tmp53;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(149)
											bool tmp54 = (value < (int)-1);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(149)
											if ((tmp54)){
												HX_STACK_LINE(149)
												tmp45 = (int)-1;
											}
											else{
												HX_STACK_LINE(149)
												bool tmp55 = (value > (int)1);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(149)
												if ((tmp55)){
													HX_STACK_LINE(149)
													tmp45 = (int)1;
												}
												else{
													HX_STACK_LINE(149)
													tmp45 = value;
												}
											}
										}
										HX_STACK_LINE(149)
										Float tmp46 = ::Math_obj::asin(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(149)
										_y = tmp46;
										HX_STACK_LINE(149)
										Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(149)
										Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(149)
										Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(149)
										Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(149)
										Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(149)
										Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(149)
										Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(149)
										Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(149)
										Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(149)
										Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(149)
										Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(149)
										Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(149)
										Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(149)
										Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(149)
										_z = tmp60;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp31 = (order == (int)4);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										if ((tmp31)){
											HX_STACK_LINE(149)
											Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(149)
											Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(149)
											Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(149)
											Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(149)
											Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(149)
											Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(149)
											Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(149)
											Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(149)
											Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(149)
											Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(149)
											Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(149)
											Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(149)
											Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(149)
											Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(149)
											_x = tmp45;
											HX_STACK_LINE(149)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(149)
											Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(149)
											Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(149)
											Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(149)
											Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(149)
											Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(149)
											_y = tmp59;
											HX_STACK_LINE(149)
											Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(149)
											{
												HX_STACK_LINE(149)
												Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(149)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(149)
												Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(149)
												Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(149)
												Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(149)
												Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(149)
												Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(149)
												Float value = tmp68;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(149)
												bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(149)
												if ((tmp69)){
													HX_STACK_LINE(149)
													tmp60 = (int)-1;
												}
												else{
													HX_STACK_LINE(149)
													bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(149)
													if ((tmp70)){
														HX_STACK_LINE(149)
														tmp60 = (int)1;
													}
													else{
														HX_STACK_LINE(149)
														tmp60 = value;
													}
												}
											}
											HX_STACK_LINE(149)
											Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(149)
											_z = tmp61;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp32 = (order == (int)5);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(149)
											if ((tmp32)){
												HX_STACK_LINE(149)
												Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(149)
												Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(149)
												Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(149)
												Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(149)
												Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(149)
												Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(149)
												Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(149)
												Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(149)
												Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(149)
												Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(149)
												Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(149)
												Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(149)
												Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(149)
												Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(149)
												_x = tmp46;
												HX_STACK_LINE(149)
												Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(149)
												Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(149)
												Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(149)
												Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(149)
												Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(149)
												Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(149)
												Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(149)
												Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(149)
												Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(149)
												Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(149)
												Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(149)
												Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(149)
												Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(149)
												Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(149)
												_y = tmp60;
												HX_STACK_LINE(149)
												Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												{
													HX_STACK_LINE(149)
													Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(149)
													Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(149)
													Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(149)
													Float tmp65 = this->x;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(149)
													Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(149)
													Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(149)
													Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(149)
													Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(149)
													Float value = tmp69;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(149)
													bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(149)
													if ((tmp70)){
														HX_STACK_LINE(149)
														tmp61 = (int)-1;
													}
													else{
														HX_STACK_LINE(149)
														bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(149)
														if ((tmp71)){
															HX_STACK_LINE(149)
															tmp61 = (int)1;
														}
														else{
															HX_STACK_LINE(149)
															tmp61 = value;
														}
													}
												}
												HX_STACK_LINE(149)
												Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(149)
												_z = tmp62;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(149)
						{
							HX_STACK_LINE(149)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(149)
							_this->ignore_listeners = true;
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->x = _x;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->x;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_x(tmp31);
									}
									HX_STACK_LINE(149)
									_this->x;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->y = _y;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->y;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_y(tmp31);
									}
									HX_STACK_LINE(149)
									_this->y;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->z = _z;
								HX_STACK_LINE(149)
								bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									_this->z;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (_this->listen_z != null());		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										tmp30 = !(tmp32);
									}
									else{
										HX_STACK_LINE(149)
										tmp30 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = _z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										_this->listen_z(tmp31);
									}
									HX_STACK_LINE(149)
									_this->z;
								}
							}
							HX_STACK_LINE(149)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(149)
							bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(149)
								tmp29 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp29)){
								HX_STACK_LINE(149)
								Float tmp30 = _this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								_this->listen_x(tmp30);
							}
							HX_STACK_LINE(149)
							bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							if ((tmp30)){
								HX_STACK_LINE(149)
								bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								tmp31 = !(tmp33);
							}
							else{
								HX_STACK_LINE(149)
								tmp31 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp31)){
								HX_STACK_LINE(149)
								Float tmp32 = _this->y;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								_this->listen_y(tmp32);
							}
							HX_STACK_LINE(149)
							bool tmp32 = (_this->listen_z != null());		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							if ((tmp32)){
								HX_STACK_LINE(149)
								bool tmp34 = _this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								tmp33 = !(tmp35);
							}
							else{
								HX_STACK_LINE(149)
								tmp33 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp33)){
								HX_STACK_LINE(149)
								Float tmp34 = _this->z;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								_this->listen_z(tmp34);
							}
							HX_STACK_LINE(149)
							_this;
						}
						HX_STACK_LINE(149)
						_this;
					}
				}
				HX_STACK_LINE(149)
				Dynamic tmp7 = this->listen_z_dyn();		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(149)
				bool tmp8 = (tmp7 != null());		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(149)
				bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(149)
				if ((tmp8)){
					HX_STACK_LINE(149)
					bool tmp10 = this->ignore_listeners;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(149)
					tmp9 = !(tmp12);
				}
				else{
					HX_STACK_LINE(149)
					tmp9 = false;
				}
				HX_STACK_LINE(149)
				if ((tmp9)){
					HX_STACK_LINE(149)
					Float tmp10 = this->z;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					this->listen_z(tmp10);
				}
				HX_STACK_LINE(149)
				this->z;
			}
		}
		HX_STACK_LINE(149)
		{
			HX_STACK_LINE(149)
			this->w = _w;
			HX_STACK_LINE(149)
			bool tmp5 = this->_construct;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(149)
			if ((tmp5)){
				HX_STACK_LINE(149)
				this->w;
			}
			else{
				HX_STACK_LINE(149)
				{
					HX_STACK_LINE(149)
					::phoenix::Vector tmp6 = this->euler;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(149)
					bool tmp7 = (tmp6 == null());		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(149)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(149)
					bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(149)
					bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					if ((tmp9)){
						HX_STACK_LINE(149)
						tmp10 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(149)
						tmp10 = true;
					}
					HX_STACK_LINE(149)
					bool tmp11 = !(tmp10);		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(149)
					if ((tmp11)){
						HX_STACK_LINE(149)
						tmp12 = this->_construct;
					}
					else{
						HX_STACK_LINE(149)
						tmp12 = true;
					}
					HX_STACK_LINE(149)
					if ((tmp12)){
						HX_STACK_LINE(149)
						Dynamic();
					}
					else{
						HX_STACK_LINE(149)
						::phoenix::Vector tmp13 = this->euler;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(149)
						::phoenix::Vector _this = tmp13;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(149)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(149)
						Float tmp14 = this->x;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(149)
						Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(149)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(149)
						Float sqx = tmp16;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(149)
						Float tmp17 = this->y;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(149)
						Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(149)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(149)
						Float sqy = tmp19;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(149)
						Float tmp20 = this->z;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(149)
						Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(149)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(149)
						Float sqz = tmp22;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(149)
						Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(149)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(149)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(149)
						Float sqw = tmp25;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(149)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(149)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(149)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(149)
						bool tmp26 = (order == (int)0);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(149)
						if ((tmp26)){
							HX_STACK_LINE(149)
							Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(149)
							Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(149)
							Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(149)
							Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(149)
							Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(149)
							Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(149)
							Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(149)
							Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(149)
							_x = tmp40;
							HX_STACK_LINE(149)
							Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(149)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float value = tmp49;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(149)
								bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								if ((tmp50)){
									HX_STACK_LINE(149)
									tmp41 = (int)-1;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(149)
									if ((tmp51)){
										HX_STACK_LINE(149)
										tmp41 = (int)1;
									}
									else{
										HX_STACK_LINE(149)
										tmp41 = value;
									}
								}
							}
							HX_STACK_LINE(149)
							Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(149)
							_y = tmp42;
							HX_STACK_LINE(149)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(149)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(149)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(149)
							Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(149)
							Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(149)
							Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(149)
							Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(149)
							Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(149)
							Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(149)
							Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(149)
							Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(149)
							Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(149)
							Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(149)
							Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(149)
							_z = tmp56;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp27 = (order == (int)1);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(149)
							if ((tmp27)){
								HX_STACK_LINE(149)
								Float tmp28;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								{
									HX_STACK_LINE(149)
									Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float value = tmp36;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(149)
									bool tmp37 = (value < (int)-1);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									if ((tmp37)){
										HX_STACK_LINE(149)
										tmp28 = (int)-1;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp38 = (value > (int)1);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										if ((tmp38)){
											HX_STACK_LINE(149)
											tmp28 = (int)1;
										}
										else{
											HX_STACK_LINE(149)
											tmp28 = value;
										}
									}
								}
								HX_STACK_LINE(149)
								Float tmp29 = ::Math_obj::asin(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								_x = tmp29;
								HX_STACK_LINE(149)
								Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								Float tmp36 = (tmp32 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(149)
								Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(149)
								Float tmp38 = (sqw - sqx);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(149)
								Float tmp39 = sqy;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(149)
								Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(149)
								Float tmp41 = sqz;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(149)
								Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(149)
								Float tmp43 = ::Math_obj::atan2(tmp37,tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								_y = tmp43;
								HX_STACK_LINE(149)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(149)
								Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(149)
								Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(149)
								Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(149)
								Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(149)
								Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(149)
								_z = tmp57;
							}
							else{
								HX_STACK_LINE(149)
								bool tmp28 = (order == (int)2);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(149)
								if ((tmp28)){
									HX_STACK_LINE(149)
									Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									{
										HX_STACK_LINE(149)
										Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp32 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float value = tmp37;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(149)
										bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										if ((tmp38)){
											HX_STACK_LINE(149)
											tmp29 = (int)-1;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(149)
											if ((tmp39)){
												HX_STACK_LINE(149)
												tmp29 = (int)1;
											}
											else{
												HX_STACK_LINE(149)
												tmp29 = value;
											}
										}
									}
									HX_STACK_LINE(149)
									Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									_x = tmp30;
									HX_STACK_LINE(149)
									Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(149)
									Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(149)
									Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(149)
									Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(149)
									Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(149)
									Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(149)
									_y = tmp44;
									HX_STACK_LINE(149)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(149)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(149)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(149)
									Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(149)
									Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(149)
									Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(149)
									Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(149)
									Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(149)
									Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(149)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(149)
									Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(149)
									Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(149)
									Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(149)
									_z = tmp58;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp29 = (order == (int)3);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp32 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = (sqw - sqx);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float tmp39 = sqy;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(149)
										Float tmp41 = sqz;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(149)
										Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(149)
										Float tmp43 = ::Math_obj::atan2(tmp37,tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(149)
										_x = tmp43;
										HX_STACK_LINE(149)
										Float tmp44;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(149)
										{
											HX_STACK_LINE(149)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(149)
											Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float value = tmp52;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(149)
											bool tmp53 = (value < (int)-1);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											if ((tmp53)){
												HX_STACK_LINE(149)
												tmp44 = (int)-1;
											}
											else{
												HX_STACK_LINE(149)
												bool tmp54 = (value > (int)1);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(149)
												if ((tmp54)){
													HX_STACK_LINE(149)
													tmp44 = (int)1;
												}
												else{
													HX_STACK_LINE(149)
													tmp44 = value;
												}
											}
										}
										HX_STACK_LINE(149)
										Float tmp45 = ::Math_obj::asin(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(149)
										_y = tmp45;
										HX_STACK_LINE(149)
										Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(149)
										Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(149)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(149)
										Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(149)
										Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(149)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(149)
										Float tmp52 = (tmp48 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(149)
										Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(149)
										Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(149)
										Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(149)
										Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(149)
										Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(149)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(149)
										Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(149)
										_z = tmp59;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp30 = (order == (int)4);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										if ((tmp30)){
											HX_STACK_LINE(149)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(149)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(149)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(149)
											Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(149)
											Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(149)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(149)
											Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(149)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(149)
											Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(149)
											Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(149)
											Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(149)
											Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(149)
											Float tmp43 = (tmp41 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(149)
											Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(149)
											_x = tmp44;
											HX_STACK_LINE(149)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(149)
											Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(149)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(149)
											Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(149)
											Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(149)
											Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(149)
											Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(149)
											Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(149)
											Float tmp53 = (sqw + sqx);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(149)
											Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(149)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(149)
											Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(149)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(149)
											Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(149)
											_y = tmp58;
											HX_STACK_LINE(149)
											Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(149)
											{
												HX_STACK_LINE(149)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(149)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(149)
												Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(149)
												Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(149)
												Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(149)
												Float tmp66 = (tmp62 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(149)
												Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(149)
												Float value = tmp67;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(149)
												bool tmp68 = (value < (int)-1);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(149)
												if ((tmp68)){
													HX_STACK_LINE(149)
													tmp59 = (int)-1;
												}
												else{
													HX_STACK_LINE(149)
													bool tmp69 = (value > (int)1);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(149)
													if ((tmp69)){
														HX_STACK_LINE(149)
														tmp59 = (int)1;
													}
													else{
														HX_STACK_LINE(149)
														tmp59 = value;
													}
												}
											}
											HX_STACK_LINE(149)
											Float tmp60 = ::Math_obj::asin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(149)
											_z = tmp60;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp31 = (order == (int)5);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(149)
											if ((tmp31)){
												HX_STACK_LINE(149)
												Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(149)
												Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(149)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(149)
												Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(149)
												Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(149)
												Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(149)
												Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(149)
												Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(149)
												Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(149)
												Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(149)
												Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(149)
												Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(149)
												Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(149)
												Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(149)
												_x = tmp45;
												HX_STACK_LINE(149)
												Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(149)
												Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(149)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(149)
												Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(149)
												Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(149)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(149)
												Float tmp52 = (tmp48 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(149)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(149)
												Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(149)
												Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(149)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(149)
												Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(149)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(149)
												Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(149)
												_y = tmp59;
												HX_STACK_LINE(149)
												Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(149)
												{
													HX_STACK_LINE(149)
													Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(149)
													Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(149)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(149)
													Float tmp64 = this->x;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(149)
													Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(149)
													Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(149)
													Float tmp67 = (tmp63 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(149)
													Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(149)
													Float value = tmp68;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(149)
													bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(149)
													if ((tmp69)){
														HX_STACK_LINE(149)
														tmp60 = (int)-1;
													}
													else{
														HX_STACK_LINE(149)
														bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(149)
														if ((tmp70)){
															HX_STACK_LINE(149)
															tmp60 = (int)1;
														}
														else{
															HX_STACK_LINE(149)
															tmp60 = value;
														}
													}
												}
												HX_STACK_LINE(149)
												Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(149)
												_z = tmp61;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(149)
						{
							HX_STACK_LINE(149)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(149)
							_this->ignore_listeners = true;
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->x = _x;
								HX_STACK_LINE(149)
								bool tmp27 = _this->_construct;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(149)
								if ((tmp27)){
									HX_STACK_LINE(149)
									_this->x;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(149)
									bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									if ((tmp28)){
										HX_STACK_LINE(149)
										bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										tmp29 = !(tmp31);
									}
									else{
										HX_STACK_LINE(149)
										tmp29 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										Float tmp30 = _x;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										_this->listen_x(tmp30);
									}
									HX_STACK_LINE(149)
									_this->x;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->y = _y;
								HX_STACK_LINE(149)
								bool tmp27 = _this->_construct;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(149)
								if ((tmp27)){
									HX_STACK_LINE(149)
									_this->y;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp28 = (_this->listen_y != null());		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(149)
									bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									if ((tmp28)){
										HX_STACK_LINE(149)
										bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										tmp29 = !(tmp31);
									}
									else{
										HX_STACK_LINE(149)
										tmp29 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										Float tmp30 = _y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										_this->listen_y(tmp30);
									}
									HX_STACK_LINE(149)
									_this->y;
								}
							}
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								_this->z = _z;
								HX_STACK_LINE(149)
								bool tmp27 = _this->_construct;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(149)
								if ((tmp27)){
									HX_STACK_LINE(149)
									_this->z;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(149)
									bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(149)
									if ((tmp28)){
										HX_STACK_LINE(149)
										bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										tmp29 = !(tmp31);
									}
									else{
										HX_STACK_LINE(149)
										tmp29 = false;
									}
									HX_STACK_LINE(149)
									if ((tmp29)){
										HX_STACK_LINE(149)
										Float tmp30 = _z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(149)
										_this->listen_z(tmp30);
									}
									HX_STACK_LINE(149)
									_this->z;
								}
							}
							HX_STACK_LINE(149)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(149)
							bool tmp27 = (_this->listen_x != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(149)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp27)){
								HX_STACK_LINE(149)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(149)
								tmp28 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29 = _this->x;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								_this->listen_x(tmp29);
							}
							HX_STACK_LINE(149)
							bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							if ((tmp29)){
								HX_STACK_LINE(149)
								bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								tmp30 = !(tmp32);
							}
							else{
								HX_STACK_LINE(149)
								tmp30 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp30)){
								HX_STACK_LINE(149)
								Float tmp31 = _this->y;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								_this->listen_y(tmp31);
							}
							HX_STACK_LINE(149)
							bool tmp31 = (_this->listen_z != null());		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							if ((tmp31)){
								HX_STACK_LINE(149)
								bool tmp33 = _this->ignore_listeners;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								tmp32 = !(tmp34);
							}
							else{
								HX_STACK_LINE(149)
								tmp32 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp32)){
								HX_STACK_LINE(149)
								Float tmp33 = _this->z;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								_this->listen_z(tmp33);
							}
							HX_STACK_LINE(149)
							_this;
						}
						HX_STACK_LINE(149)
						_this;
					}
				}
				HX_STACK_LINE(149)
				Dynamic tmp6 = this->listen_w_dyn();		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(149)
				bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(149)
				bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(149)
				if ((tmp7)){
					HX_STACK_LINE(149)
					bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(149)
					bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(149)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(149)
					tmp8 = !(tmp11);
				}
				else{
					HX_STACK_LINE(149)
					tmp8 = false;
				}
				HX_STACK_LINE(149)
				if ((tmp8)){
					HX_STACK_LINE(149)
					Float tmp9 = this->w;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(149)
					this->listen_w(tmp9);
				}
				HX_STACK_LINE(149)
				this->w;
			}
		}
		HX_STACK_LINE(149)
		this->ignore_euler = false;
		HX_STACK_LINE(149)
		{
			HX_STACK_LINE(149)
			::phoenix::Vector tmp5 = this->euler;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(149)
			bool tmp6 = (tmp5 == null());		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(149)
			bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(149)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(149)
			bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(149)
			if ((tmp8)){
				HX_STACK_LINE(149)
				tmp9 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(149)
				tmp9 = true;
			}
			HX_STACK_LINE(149)
			bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(149)
			bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(149)
			if ((tmp10)){
				HX_STACK_LINE(149)
				tmp11 = this->_construct;
			}
			else{
				HX_STACK_LINE(149)
				tmp11 = true;
			}
			HX_STACK_LINE(149)
			if ((tmp11)){
				HX_STACK_LINE(149)
				Dynamic();
			}
			else{
				HX_STACK_LINE(149)
				::phoenix::Vector tmp12 = this->euler;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(149)
				::phoenix::Vector _this = tmp12;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(149)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(149)
				Float tmp13 = this->x;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(149)
				Float tmp14 = this->x;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(149)
				Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(149)
				Float sqx = tmp15;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(149)
				Float tmp16 = this->y;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(149)
				Float tmp17 = this->y;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(149)
				Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(149)
				Float sqy = tmp18;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(149)
				Float tmp19 = this->z;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(149)
				Float tmp20 = this->z;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(149)
				Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(149)
				Float sqz = tmp21;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(149)
				Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(149)
				Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(149)
				Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(149)
				Float sqw = tmp24;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(149)
				Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
				HX_STACK_LINE(149)
				Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
				HX_STACK_LINE(149)
				Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
				HX_STACK_LINE(149)
				bool tmp25 = (order == (int)0);		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(149)
				if ((tmp25)){
					HX_STACK_LINE(149)
					Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(149)
					Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(149)
					Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(149)
					Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(149)
					Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(149)
					Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(149)
					Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(149)
					Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(149)
					Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(149)
					Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(149)
					Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(149)
					Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(149)
					Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(149)
					Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(149)
					_x = tmp39;
					HX_STACK_LINE(149)
					Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(149)
					{
						HX_STACK_LINE(149)
						Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(149)
						Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(149)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(149)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(149)
						Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(149)
						Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(149)
						Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(149)
						Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(149)
						Float value = tmp48;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(149)
						bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(149)
						if ((tmp49)){
							HX_STACK_LINE(149)
							tmp40 = (int)-1;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(149)
							if ((tmp50)){
								HX_STACK_LINE(149)
								tmp40 = (int)1;
							}
							else{
								HX_STACK_LINE(149)
								tmp40 = value;
							}
						}
					}
					HX_STACK_LINE(149)
					Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(149)
					_y = tmp41;
					HX_STACK_LINE(149)
					Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(149)
					Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(149)
					Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(149)
					Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(149)
					Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(149)
					Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(149)
					Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(149)
					Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(149)
					Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(149)
					Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(149)
					Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(149)
					Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
					HX_STACK_LINE(149)
					Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
					HX_STACK_LINE(149)
					Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
					HX_STACK_LINE(149)
					_z = tmp55;
				}
				else{
					HX_STACK_LINE(149)
					bool tmp26 = (order == (int)1);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(149)
					if ((tmp26)){
						HX_STACK_LINE(149)
						Float tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(149)
						{
							HX_STACK_LINE(149)
							Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(149)
							Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(149)
							Float value = tmp35;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(149)
							bool tmp36 = (value < (int)-1);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(149)
							if ((tmp36)){
								HX_STACK_LINE(149)
								tmp27 = (int)-1;
							}
							else{
								HX_STACK_LINE(149)
								bool tmp37 = (value > (int)1);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(149)
								if ((tmp37)){
									HX_STACK_LINE(149)
									tmp27 = (int)1;
								}
								else{
									HX_STACK_LINE(149)
									tmp27 = value;
								}
							}
						}
						HX_STACK_LINE(149)
						Float tmp28 = ::Math_obj::asin(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(149)
						_x = tmp28;
						HX_STACK_LINE(149)
						Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(149)
						Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(149)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(149)
						Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(149)
						Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(149)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(149)
						Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(149)
						Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(149)
						Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(149)
						Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(149)
						Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(149)
						Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(149)
						Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(149)
						Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(149)
						_y = tmp42;
						HX_STACK_LINE(149)
						Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(149)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(149)
						Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(149)
						Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(149)
						Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(149)
						Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(149)
						Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(149)
						Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(149)
						Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(149)
						Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(149)
						Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(149)
						Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(149)
						Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(149)
						Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(149)
						_z = tmp56;
					}
					else{
						HX_STACK_LINE(149)
						bool tmp27 = (order == (int)2);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(149)
						if ((tmp27)){
							HX_STACK_LINE(149)
							Float tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							{
								HX_STACK_LINE(149)
								Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(149)
								Float value = tmp36;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(149)
								bool tmp37 = (value < (int)-1);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(149)
								if ((tmp37)){
									HX_STACK_LINE(149)
									tmp28 = (int)-1;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp38 = (value > (int)1);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									if ((tmp38)){
										HX_STACK_LINE(149)
										tmp28 = (int)1;
									}
									else{
										HX_STACK_LINE(149)
										tmp28 = value;
									}
								}
							}
							HX_STACK_LINE(149)
							Float tmp29 = ::Math_obj::asin(tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(149)
							_x = tmp29;
							HX_STACK_LINE(149)
							Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(149)
							Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(149)
							Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(149)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(149)
							Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(149)
							Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(149)
							Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(149)
							Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(149)
							Float tmp38 = (sqw - sqx);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(149)
							Float tmp39 = sqy;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(149)
							Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(149)
							Float tmp41 = sqz;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(149)
							Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(149)
							Float tmp43 = ::Math_obj::atan2(tmp37,tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(149)
							_y = tmp43;
							HX_STACK_LINE(149)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(149)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(149)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(149)
							Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(149)
							Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(149)
							Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(149)
							Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(149)
							Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(149)
							Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(149)
							Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(149)
							Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(149)
							Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(149)
							Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(149)
							Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(149)
							_z = tmp57;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp28 = (order == (int)3);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(149)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(149)
								Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(149)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(149)
								Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(149)
								Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(149)
								Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(149)
								Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(149)
								Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(149)
								Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(149)
								Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(149)
								Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(149)
								_x = tmp42;
								HX_STACK_LINE(149)
								Float tmp43;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(149)
								{
									HX_STACK_LINE(149)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(149)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(149)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(149)
									Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(149)
									Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(149)
									Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(149)
									Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(149)
									Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(149)
									Float value = tmp51;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(149)
									bool tmp52 = (value < (int)-1);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									if ((tmp52)){
										HX_STACK_LINE(149)
										tmp43 = (int)-1;
									}
									else{
										HX_STACK_LINE(149)
										bool tmp53 = (value > (int)1);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(149)
										if ((tmp53)){
											HX_STACK_LINE(149)
											tmp43 = (int)1;
										}
										else{
											HX_STACK_LINE(149)
											tmp43 = value;
										}
									}
								}
								HX_STACK_LINE(149)
								Float tmp44 = ::Math_obj::asin(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(149)
								_y = tmp44;
								HX_STACK_LINE(149)
								Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(149)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(149)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(149)
								Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(149)
								Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(149)
								Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(149)
								Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(149)
								Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(149)
								Float tmp53 = (sqw + sqx);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(149)
								Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(149)
								Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(149)
								Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(149)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(149)
								Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(149)
								_z = tmp58;
							}
							else{
								HX_STACK_LINE(149)
								bool tmp29 = (order == (int)4);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								if ((tmp29)){
									HX_STACK_LINE(149)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(149)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(149)
									Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(149)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(149)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(149)
									Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(149)
									Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(149)
									Float tmp38 = (sqw - sqx);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(149)
									Float tmp39 = sqy;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(149)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(149)
									Float tmp41 = sqz;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(149)
									Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(149)
									Float tmp43 = ::Math_obj::atan2(tmp37,tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(149)
									_x = tmp43;
									HX_STACK_LINE(149)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(149)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(149)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(149)
									Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(149)
									Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(149)
									Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(149)
									Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(149)
									Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(149)
									Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(149)
									Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(149)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(149)
									Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(149)
									Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(149)
									Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(149)
									_y = tmp57;
									HX_STACK_LINE(149)
									Float tmp58;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(149)
									{
										HX_STACK_LINE(149)
										Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(149)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(149)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(149)
										Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(149)
										Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(149)
										Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(149)
										Float tmp65 = (tmp61 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(149)
										Float tmp66 = ((int)2 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(149)
										Float value = tmp66;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(149)
										bool tmp67 = (value < (int)-1);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(149)
										if ((tmp67)){
											HX_STACK_LINE(149)
											tmp58 = (int)-1;
										}
										else{
											HX_STACK_LINE(149)
											bool tmp68 = (value > (int)1);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(149)
											if ((tmp68)){
												HX_STACK_LINE(149)
												tmp58 = (int)1;
											}
											else{
												HX_STACK_LINE(149)
												tmp58 = value;
											}
										}
									}
									HX_STACK_LINE(149)
									Float tmp59 = ::Math_obj::asin(tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(149)
									_z = tmp59;
								}
								else{
									HX_STACK_LINE(149)
									bool tmp30 = (order == (int)5);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(149)
									if ((tmp30)){
										HX_STACK_LINE(149)
										Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(149)
										Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(149)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(149)
										Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(149)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(149)
										Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(149)
										Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(149)
										Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(149)
										Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(149)
										Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(149)
										Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(149)
										Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(149)
										Float tmp43 = (tmp41 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(149)
										Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(149)
										_x = tmp44;
										HX_STACK_LINE(149)
										Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(149)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(149)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(149)
										Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(149)
										Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(149)
										Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(149)
										Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(149)
										Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(149)
										Float tmp53 = (sqw + sqx);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(149)
										Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(149)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(149)
										Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(149)
										Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(149)
										Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(149)
										_y = tmp58;
										HX_STACK_LINE(149)
										Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(149)
										{
											HX_STACK_LINE(149)
											Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(149)
											Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(149)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(149)
											Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(149)
											Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(149)
											Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(149)
											Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(149)
											Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(149)
											Float value = tmp67;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(149)
											bool tmp68 = (value < (int)-1);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(149)
											if ((tmp68)){
												HX_STACK_LINE(149)
												tmp59 = (int)-1;
											}
											else{
												HX_STACK_LINE(149)
												bool tmp69 = (value > (int)1);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(149)
												if ((tmp69)){
													HX_STACK_LINE(149)
													tmp59 = (int)1;
												}
												else{
													HX_STACK_LINE(149)
													tmp59 = value;
												}
											}
										}
										HX_STACK_LINE(149)
										Float tmp60 = ::Math_obj::asin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(149)
										_z = tmp60;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(149)
				{
					HX_STACK_LINE(149)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(149)
					_this->ignore_listeners = true;
					HX_STACK_LINE(149)
					{
						HX_STACK_LINE(149)
						_this->x = _x;
						HX_STACK_LINE(149)
						bool tmp26 = _this->_construct;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(149)
						if ((tmp26)){
							HX_STACK_LINE(149)
							_this->x;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp27 = (_this->listen_x != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(149)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp27)){
								HX_STACK_LINE(149)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(149)
								tmp28 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29 = _x;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								_this->listen_x(tmp29);
							}
							HX_STACK_LINE(149)
							_this->x;
						}
					}
					HX_STACK_LINE(149)
					{
						HX_STACK_LINE(149)
						_this->y = _y;
						HX_STACK_LINE(149)
						bool tmp26 = _this->_construct;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(149)
						if ((tmp26)){
							HX_STACK_LINE(149)
							_this->y;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp27 = (_this->listen_y != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(149)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp27)){
								HX_STACK_LINE(149)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(149)
								tmp28 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29 = _y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								_this->listen_y(tmp29);
							}
							HX_STACK_LINE(149)
							_this->y;
						}
					}
					HX_STACK_LINE(149)
					{
						HX_STACK_LINE(149)
						_this->z = _z;
						HX_STACK_LINE(149)
						bool tmp26 = _this->_construct;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(149)
						if ((tmp26)){
							HX_STACK_LINE(149)
							_this->z;
						}
						else{
							HX_STACK_LINE(149)
							bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(149)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(149)
							if ((tmp27)){
								HX_STACK_LINE(149)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(149)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(149)
								tmp28 = false;
							}
							HX_STACK_LINE(149)
							if ((tmp28)){
								HX_STACK_LINE(149)
								Float tmp29 = _z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(149)
								_this->listen_z(tmp29);
							}
							HX_STACK_LINE(149)
							_this->z;
						}
					}
					HX_STACK_LINE(149)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(149)
					bool tmp26 = (_this->listen_x != null());		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(149)
					bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(149)
					if ((tmp26)){
						HX_STACK_LINE(149)
						bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(149)
						bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(149)
						tmp27 = !(tmp29);
					}
					else{
						HX_STACK_LINE(149)
						tmp27 = false;
					}
					HX_STACK_LINE(149)
					if ((tmp27)){
						HX_STACK_LINE(149)
						Float tmp28 = _this->x;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(149)
						_this->listen_x(tmp28);
					}
					HX_STACK_LINE(149)
					bool tmp28 = (_this->listen_y != null());		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(149)
					bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(149)
					if ((tmp28)){
						HX_STACK_LINE(149)
						bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(149)
						bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(149)
						tmp29 = !(tmp31);
					}
					else{
						HX_STACK_LINE(149)
						tmp29 = false;
					}
					HX_STACK_LINE(149)
					if ((tmp29)){
						HX_STACK_LINE(149)
						Float tmp30 = _this->y;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(149)
						_this->listen_y(tmp30);
					}
					HX_STACK_LINE(149)
					bool tmp30 = (_this->listen_z != null());		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(149)
					bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(149)
					if ((tmp30)){
						HX_STACK_LINE(149)
						bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(149)
						bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(149)
						tmp31 = !(tmp33);
					}
					else{
						HX_STACK_LINE(149)
						tmp31 = false;
					}
					HX_STACK_LINE(149)
					if ((tmp31)){
						HX_STACK_LINE(149)
						Float tmp32 = _this->z;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(149)
						_this->listen_z(tmp32);
					}
					HX_STACK_LINE(149)
					_this;
				}
				HX_STACK_LINE(149)
				_this;
			}
		}
		HX_STACK_LINE(149)
		Dynamic tmp5 = this->listen_x_dyn();		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(149)
		bool tmp6 = (tmp5 != null());		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(149)
		bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(149)
		if ((tmp6)){
			HX_STACK_LINE(149)
			bool tmp8 = this->ignore_listeners;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(149)
			bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(149)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(149)
			tmp7 = !(tmp10);
		}
		else{
			HX_STACK_LINE(149)
			tmp7 = false;
		}
		HX_STACK_LINE(149)
		if ((tmp7)){
			HX_STACK_LINE(149)
			Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(149)
			this->listen_x(tmp8);
		}
		HX_STACK_LINE(149)
		Dynamic tmp8 = this->listen_y_dyn();		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(149)
		bool tmp9 = (tmp8 != null());		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(149)
		bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(149)
		if ((tmp9)){
			HX_STACK_LINE(149)
			bool tmp11 = this->ignore_listeners;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(149)
			bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(149)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(149)
			tmp10 = !(tmp13);
		}
		else{
			HX_STACK_LINE(149)
			tmp10 = false;
		}
		HX_STACK_LINE(149)
		if ((tmp10)){
			HX_STACK_LINE(149)
			Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(149)
			this->listen_y(tmp11);
		}
		HX_STACK_LINE(149)
		Dynamic tmp11 = this->listen_z_dyn();		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(149)
		bool tmp12 = (tmp11 != null());		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(149)
		bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(149)
		if ((tmp12)){
			HX_STACK_LINE(149)
			bool tmp14 = this->ignore_listeners;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(149)
			bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(149)
			bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(149)
			tmp13 = !(tmp16);
		}
		else{
			HX_STACK_LINE(149)
			tmp13 = false;
		}
		HX_STACK_LINE(149)
		if ((tmp13)){
			HX_STACK_LINE(149)
			Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(149)
			this->listen_z(tmp14);
		}
		HX_STACK_LINE(149)
		Dynamic tmp14 = this->listen_w_dyn();		HX_STACK_VAR(tmp14,"tmp14");
		HX_STACK_LINE(149)
		bool tmp15 = (tmp14 != null());		HX_STACK_VAR(tmp15,"tmp15");
		HX_STACK_LINE(149)
		bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
		HX_STACK_LINE(149)
		if ((tmp15)){
			HX_STACK_LINE(149)
			bool tmp17 = this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(149)
			bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(149)
			bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(149)
			tmp16 = !(tmp19);
		}
		else{
			HX_STACK_LINE(149)
			tmp16 = false;
		}
		HX_STACK_LINE(149)
		if ((tmp16)){
			HX_STACK_LINE(149)
			Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(149)
			this->listen_w(tmp17);
		}
	}
	HX_STACK_LINE(154)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,setFromAxisAngle,return )

::phoenix::Quaternion Quaternion_obj::setFromRotationMatrix( ::phoenix::Matrix _m){
	HX_STACK_FRAME("phoenix.Quaternion","setFromRotationMatrix",0xe63a5ffa,"phoenix.Quaternion.setFromRotationMatrix","phoenix/Quaternion.hx",159,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_m,"_m")
	HX_STACK_LINE(164)
	Array< Float > te = _m->elements;		HX_STACK_VAR(te,"te");
	HX_STACK_LINE(166)
	Float tmp = te->__get((int)0);		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(166)
	Float m11 = tmp;		HX_STACK_VAR(m11,"m11");
	HX_STACK_LINE(166)
	Float tmp1 = te->__get((int)4);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(166)
	Float m12 = tmp1;		HX_STACK_VAR(m12,"m12");
	HX_STACK_LINE(166)
	Float tmp2 = te->__get((int)8);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(166)
	Float m13 = tmp2;		HX_STACK_VAR(m13,"m13");
	HX_STACK_LINE(167)
	Float tmp3 = te->__get((int)1);		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(167)
	Float m21 = tmp3;		HX_STACK_VAR(m21,"m21");
	HX_STACK_LINE(167)
	Float tmp4 = te->__get((int)5);		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(167)
	Float m22 = tmp4;		HX_STACK_VAR(m22,"m22");
	HX_STACK_LINE(167)
	Float tmp5 = te->__get((int)9);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(167)
	Float m23 = tmp5;		HX_STACK_VAR(m23,"m23");
	HX_STACK_LINE(168)
	Float tmp6 = te->__get((int)2);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(168)
	Float m31 = tmp6;		HX_STACK_VAR(m31,"m31");
	HX_STACK_LINE(168)
	Float tmp7 = te->__get((int)6);		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(168)
	Float m32 = tmp7;		HX_STACK_VAR(m32,"m32");
	HX_STACK_LINE(168)
	Float tmp8 = te->__get((int)10);		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(168)
	Float m33 = tmp8;		HX_STACK_VAR(m33,"m33");
	HX_STACK_LINE(170)
	Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(170)
	Float _x = tmp9;		HX_STACK_VAR(_x,"_x");
	HX_STACK_LINE(171)
	Float tmp10 = this->y;		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(171)
	Float _y = tmp10;		HX_STACK_VAR(_y,"_y");
	HX_STACK_LINE(172)
	Float tmp11 = this->z;		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(172)
	Float _z = tmp11;		HX_STACK_VAR(_z,"_z");
	HX_STACK_LINE(173)
	Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(173)
	Float _w = tmp12;		HX_STACK_VAR(_w,"_w");
	HX_STACK_LINE(175)
	Float tmp13 = (m11 + m22);		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(175)
	Float tmp14 = m33;		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(175)
	Float tmp15 = (tmp13 + tmp14);		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(175)
	Float tr = tmp15;		HX_STACK_VAR(tr,"tr");
	HX_STACK_LINE(177)
	Float s;		HX_STACK_VAR(s,"s");
	HX_STACK_LINE(179)
	bool tmp16 = (tr > (int)0);		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(179)
	if ((tmp16)){
		HX_STACK_LINE(181)
		Float tmp17 = (tr + ((Float)1.0));		HX_STACK_VAR(tmp17,"tmp17");
		HX_STACK_LINE(181)
		Float tmp18 = ::Math_obj::sqrt(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
		HX_STACK_LINE(181)
		Float tmp19 = (Float(((Float)0.5)) / Float(tmp18));		HX_STACK_VAR(tmp19,"tmp19");
		HX_STACK_LINE(181)
		s = tmp19;
		HX_STACK_LINE(183)
		Float tmp20 = (Float(((Float)0.25)) / Float(s));		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(183)
		_w = tmp20;
		HX_STACK_LINE(184)
		Float tmp21 = (m32 - m23);		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(184)
		Float tmp22 = s;		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(184)
		Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
		HX_STACK_LINE(184)
		_x = tmp23;
		HX_STACK_LINE(185)
		Float tmp24 = (m13 - m31);		HX_STACK_VAR(tmp24,"tmp24");
		HX_STACK_LINE(185)
		Float tmp25 = s;		HX_STACK_VAR(tmp25,"tmp25");
		HX_STACK_LINE(185)
		Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
		HX_STACK_LINE(185)
		_y = tmp26;
		HX_STACK_LINE(186)
		Float tmp27 = (m21 - m12);		HX_STACK_VAR(tmp27,"tmp27");
		HX_STACK_LINE(186)
		Float tmp28 = s;		HX_STACK_VAR(tmp28,"tmp28");
		HX_STACK_LINE(186)
		Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
		HX_STACK_LINE(186)
		_z = tmp29;
	}
	else{
		HX_STACK_LINE(188)
		bool tmp17 = (m11 > m22);		HX_STACK_VAR(tmp17,"tmp17");
		HX_STACK_LINE(188)
		bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
		HX_STACK_LINE(188)
		if ((tmp17)){
			HX_STACK_LINE(188)
			tmp18 = (m11 > m33);
		}
		else{
			HX_STACK_LINE(188)
			tmp18 = false;
		}
		HX_STACK_LINE(188)
		if ((tmp18)){
			HX_STACK_LINE(190)
			Float tmp19 = (((Float)1.0) + m11);		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(190)
			Float tmp20 = m22;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(190)
			Float tmp21 = (tmp19 - tmp20);		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(190)
			Float tmp22 = m33;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(190)
			Float tmp23 = (tmp21 - tmp22);		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(190)
			Float tmp24 = ::Math_obj::sqrt(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(190)
			Float tmp25 = (((Float)2.0) * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(190)
			s = tmp25;
			HX_STACK_LINE(192)
			Float tmp26 = (m32 - m23);		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(192)
			Float tmp27 = s;		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(192)
			Float tmp28 = (Float(tmp26) / Float(tmp27));		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(192)
			_w = tmp28;
			HX_STACK_LINE(193)
			Float tmp29 = (((Float)0.25) * s);		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(193)
			_x = tmp29;
			HX_STACK_LINE(194)
			Float tmp30 = (m12 + m21);		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(194)
			Float tmp31 = s;		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(194)
			Float tmp32 = (Float(tmp30) / Float(tmp31));		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(194)
			_y = tmp32;
			HX_STACK_LINE(195)
			Float tmp33 = (m13 + m31);		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(195)
			Float tmp34 = s;		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(195)
			Float tmp35 = (Float(tmp33) / Float(tmp34));		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(195)
			_z = tmp35;
		}
		else{
			HX_STACK_LINE(197)
			bool tmp19 = (m22 > m33);		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(197)
			if ((tmp19)){
				HX_STACK_LINE(199)
				Float tmp20 = (((Float)1.0) + m22);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(199)
				Float tmp21 = m11;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(199)
				Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(199)
				Float tmp23 = m33;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(199)
				Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(199)
				Float tmp25 = ::Math_obj::sqrt(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(199)
				Float tmp26 = (((Float)2.0) * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(199)
				s = tmp26;
				HX_STACK_LINE(201)
				Float tmp27 = (m13 - m31);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(201)
				Float tmp28 = s;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(201)
				Float tmp29 = (Float(tmp27) / Float(tmp28));		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(201)
				_w = tmp29;
				HX_STACK_LINE(202)
				Float tmp30 = (m12 + m21);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(202)
				Float tmp31 = s;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(202)
				Float tmp32 = (Float(tmp30) / Float(tmp31));		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(202)
				_x = tmp32;
				HX_STACK_LINE(203)
				Float tmp33 = (((Float)0.25) * s);		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(203)
				_y = tmp33;
				HX_STACK_LINE(204)
				Float tmp34 = (m23 + m32);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(204)
				Float tmp35 = s;		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(204)
				Float tmp36 = (Float(tmp34) / Float(tmp35));		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(204)
				_z = tmp36;
			}
			else{
				HX_STACK_LINE(208)
				Float tmp20 = (((Float)1.0) + m33);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(208)
				Float tmp21 = m11;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(208)
				Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(208)
				Float tmp23 = m22;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(208)
				Float tmp24 = (tmp22 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(208)
				Float tmp25 = ::Math_obj::sqrt(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(208)
				Float tmp26 = (((Float)2.0) * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(208)
				s = tmp26;
				HX_STACK_LINE(210)
				Float tmp27 = (m21 - m12);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(210)
				Float tmp28 = s;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(210)
				Float tmp29 = (Float(tmp27) / Float(tmp28));		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(210)
				_w = tmp29;
				HX_STACK_LINE(211)
				Float tmp30 = (m13 + m31);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(211)
				Float tmp31 = s;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(211)
				Float tmp32 = (Float(tmp30) / Float(tmp31));		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(211)
				_x = tmp32;
				HX_STACK_LINE(212)
				Float tmp33 = (m23 + m32);		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(212)
				Float tmp34 = s;		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(212)
				Float tmp35 = (Float(tmp33) / Float(tmp34));		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(212)
				_y = tmp35;
				HX_STACK_LINE(213)
				Float tmp36 = (((Float)0.25) * s);		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(213)
				_z = tmp36;
			}
		}
	}
	HX_STACK_LINE(217)
	{
		HX_STACK_LINE(217)
		this->ignore_euler = true;
		HX_STACK_LINE(217)
		{
			HX_STACK_LINE(217)
			this->x = _x;
			HX_STACK_LINE(217)
			bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(217)
			if ((tmp17)){
				HX_STACK_LINE(217)
				this->x;
			}
			else{
				HX_STACK_LINE(217)
				{
					HX_STACK_LINE(217)
					::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(217)
					bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(217)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(217)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					if ((tmp21)){
						HX_STACK_LINE(217)
						tmp22 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(217)
						tmp22 = true;
					}
					HX_STACK_LINE(217)
					bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(217)
					if ((tmp23)){
						HX_STACK_LINE(217)
						tmp24 = this->_construct;
					}
					else{
						HX_STACK_LINE(217)
						tmp24 = true;
					}
					HX_STACK_LINE(217)
					if ((tmp24)){
						HX_STACK_LINE(217)
						Dynamic();
					}
					else{
						HX_STACK_LINE(217)
						::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(217)
						::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(217)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(217)
						Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(217)
						Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(217)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(217)
						Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(217)
						Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(217)
						Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(217)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(217)
						Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(217)
						Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(217)
						Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(217)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(217)
						Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(217)
						Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(217)
						Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(217)
						Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(217)
						Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(217)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(217)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(217)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(217)
						bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(217)
						if ((tmp38)){
							HX_STACK_LINE(217)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(217)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(217)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(217)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(217)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(217)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(217)
							Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(217)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(217)
							_x1 = tmp52;
							HX_STACK_LINE(217)
							Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float value = tmp61;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(217)
								bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								if ((tmp62)){
									HX_STACK_LINE(217)
									tmp53 = (int)-1;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									if ((tmp63)){
										HX_STACK_LINE(217)
										tmp53 = (int)1;
									}
									else{
										HX_STACK_LINE(217)
										tmp53 = value;
									}
								}
							}
							HX_STACK_LINE(217)
							Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(217)
							_y1 = tmp54;
							HX_STACK_LINE(217)
							Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(217)
							Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(217)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(217)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(217)
							Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(217)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(217)
							Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(217)
							Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(217)
							Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(217)
							Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(217)
							Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(217)
							Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(217)
							Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(217)
							Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(217)
							_z1 = tmp68;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								{
									HX_STACK_LINE(217)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float value = tmp48;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(217)
									bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									if ((tmp49)){
										HX_STACK_LINE(217)
										tmp40 = (int)-1;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp40 = (int)1;
										}
										else{
											HX_STACK_LINE(217)
											tmp40 = value;
										}
									}
								}
								HX_STACK_LINE(217)
								Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_x1 = tmp41;
								HX_STACK_LINE(217)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(217)
								Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(217)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(217)
								Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(217)
								Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(217)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(217)
								Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(217)
								Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								_y1 = tmp55;
								HX_STACK_LINE(217)
								Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(217)
								Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(217)
								Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(217)
								Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(217)
								Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(217)
								Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(217)
								Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(217)
								_z1 = tmp69;
							}
							else{
								HX_STACK_LINE(217)
								bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								if ((tmp40)){
									HX_STACK_LINE(217)
									Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									{
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float value = tmp49;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(217)
										bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp41 = (int)-1;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											if ((tmp51)){
												HX_STACK_LINE(217)
												tmp41 = (int)1;
											}
											else{
												HX_STACK_LINE(217)
												tmp41 = value;
											}
										}
									}
									HX_STACK_LINE(217)
									Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									_x1 = tmp42;
									HX_STACK_LINE(217)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(217)
									Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(217)
									Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(217)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(217)
									Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(217)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(217)
									Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(217)
									_y1 = tmp56;
									HX_STACK_LINE(217)
									Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(217)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(217)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(217)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(217)
									Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(217)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(217)
									Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(217)
									Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(217)
									Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(217)
									Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(217)
									Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(217)
									Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(217)
									Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(217)
									_z1 = tmp70;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(217)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(217)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(217)
										Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(217)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(217)
										_x1 = tmp55;
										HX_STACK_LINE(217)
										Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(217)
										{
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float value = tmp64;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(217)
											bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											if ((tmp65)){
												HX_STACK_LINE(217)
												tmp56 = (int)-1;
											}
											else{
												HX_STACK_LINE(217)
												bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												if ((tmp66)){
													HX_STACK_LINE(217)
													tmp56 = (int)1;
												}
												else{
													HX_STACK_LINE(217)
													tmp56 = value;
												}
											}
										}
										HX_STACK_LINE(217)
										Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(217)
										_y1 = tmp57;
										HX_STACK_LINE(217)
										Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(217)
										Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(217)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(217)
										Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(217)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(217)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(217)
										Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(217)
										Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(217)
										Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(217)
										Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(217)
										Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(217)
										Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(217)
										Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(217)
										Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(217)
										_z1 = tmp71;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										if ((tmp42)){
											HX_STACK_LINE(217)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(217)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(217)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(217)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(217)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(217)
											Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(217)
											Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(217)
											Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(217)
											Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(217)
											Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(217)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(217)
											Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(217)
											_x1 = tmp56;
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(217)
											Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(217)
											Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(217)
											Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(217)
											Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(217)
											_y1 = tmp70;
											HX_STACK_LINE(217)
											Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(217)
											{
												HX_STACK_LINE(217)
												Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(217)
												Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(217)
												Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(217)
												Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(217)
												Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(217)
												Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(217)
												Float value = tmp79;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(217)
												bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(217)
												if ((tmp80)){
													HX_STACK_LINE(217)
													tmp71 = (int)-1;
												}
												else{
													HX_STACK_LINE(217)
													bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp71 = (int)1;
													}
													else{
														HX_STACK_LINE(217)
														tmp71 = value;
													}
												}
											}
											HX_STACK_LINE(217)
											Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(217)
											_z1 = tmp72;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											if ((tmp43)){
												HX_STACK_LINE(217)
												Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(217)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(217)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(217)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(217)
												Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(217)
												Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(217)
												Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(217)
												Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(217)
												Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(217)
												Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(217)
												Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(217)
												Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(217)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(217)
												Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(217)
												_x1 = tmp57;
												HX_STACK_LINE(217)
												Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(217)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(217)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(217)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(217)
												Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(217)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(217)
												Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(217)
												Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(217)
												Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(217)
												Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(217)
												Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(217)
												Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(217)
												Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(217)
												_y1 = tmp71;
												HX_STACK_LINE(217)
												Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												{
													HX_STACK_LINE(217)
													Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(217)
													Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(217)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(217)
													Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(217)
													Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(217)
													Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(217)
													Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(217)
													Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(217)
													Float value = tmp80;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(217)
													bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp72 = (int)-1;
													}
													else{
														HX_STACK_LINE(217)
														bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(217)
														if ((tmp82)){
															HX_STACK_LINE(217)
															tmp72 = (int)1;
														}
														else{
															HX_STACK_LINE(217)
															tmp72 = value;
														}
													}
												}
												HX_STACK_LINE(217)
												Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												_z1 = tmp73;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(217)
						{
							HX_STACK_LINE(217)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(217)
							_this->ignore_listeners = true;
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->x = _x1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->x;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_x(tmp42);
									}
									HX_STACK_LINE(217)
									_this->x;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->y = _y1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->y;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_y(tmp42);
									}
									HX_STACK_LINE(217)
									_this->y;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->z = _z1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->z;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_z(tmp42);
									}
									HX_STACK_LINE(217)
									_this->z;
								}
							}
							HX_STACK_LINE(217)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(217)
							bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								tmp40 = !(tmp42);
							}
							else{
								HX_STACK_LINE(217)
								tmp40 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_this->listen_x(tmp41);
							}
							HX_STACK_LINE(217)
							bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							if ((tmp41)){
								HX_STACK_LINE(217)
								bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								tmp42 = !(tmp44);
							}
							else{
								HX_STACK_LINE(217)
								tmp42 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp42)){
								HX_STACK_LINE(217)
								Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								_this->listen_y(tmp43);
							}
							HX_STACK_LINE(217)
							bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							if ((tmp43)){
								HX_STACK_LINE(217)
								bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								tmp44 = !(tmp46);
							}
							else{
								HX_STACK_LINE(217)
								tmp44 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp44)){
								HX_STACK_LINE(217)
								Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								_this->listen_z(tmp45);
							}
							HX_STACK_LINE(217)
							_this;
						}
						HX_STACK_LINE(217)
						_this;
					}
				}
				HX_STACK_LINE(217)
				Dynamic tmp18 = this->listen_x_dyn();		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(217)
				bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(217)
				bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(217)
				if ((tmp19)){
					HX_STACK_LINE(217)
					bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					tmp20 = !(tmp23);
				}
				else{
					HX_STACK_LINE(217)
					tmp20 = false;
				}
				HX_STACK_LINE(217)
				if ((tmp20)){
					HX_STACK_LINE(217)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					this->listen_x(tmp21);
				}
				HX_STACK_LINE(217)
				this->x;
			}
		}
		HX_STACK_LINE(217)
		{
			HX_STACK_LINE(217)
			this->y = _y;
			HX_STACK_LINE(217)
			bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(217)
			if ((tmp17)){
				HX_STACK_LINE(217)
				this->y;
			}
			else{
				HX_STACK_LINE(217)
				{
					HX_STACK_LINE(217)
					::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(217)
					bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(217)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(217)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					if ((tmp21)){
						HX_STACK_LINE(217)
						tmp22 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(217)
						tmp22 = true;
					}
					HX_STACK_LINE(217)
					bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(217)
					if ((tmp23)){
						HX_STACK_LINE(217)
						tmp24 = this->_construct;
					}
					else{
						HX_STACK_LINE(217)
						tmp24 = true;
					}
					HX_STACK_LINE(217)
					if ((tmp24)){
						HX_STACK_LINE(217)
						Dynamic();
					}
					else{
						HX_STACK_LINE(217)
						::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(217)
						::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(217)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(217)
						Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(217)
						Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(217)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(217)
						Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(217)
						Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(217)
						Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(217)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(217)
						Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(217)
						Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(217)
						Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(217)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(217)
						Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(217)
						Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(217)
						Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(217)
						Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(217)
						Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(217)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(217)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(217)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(217)
						bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(217)
						if ((tmp38)){
							HX_STACK_LINE(217)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(217)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(217)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(217)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(217)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(217)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(217)
							Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(217)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(217)
							_x1 = tmp52;
							HX_STACK_LINE(217)
							Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float value = tmp61;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(217)
								bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								if ((tmp62)){
									HX_STACK_LINE(217)
									tmp53 = (int)-1;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									if ((tmp63)){
										HX_STACK_LINE(217)
										tmp53 = (int)1;
									}
									else{
										HX_STACK_LINE(217)
										tmp53 = value;
									}
								}
							}
							HX_STACK_LINE(217)
							Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(217)
							_y1 = tmp54;
							HX_STACK_LINE(217)
							Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(217)
							Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(217)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(217)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(217)
							Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(217)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(217)
							Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(217)
							Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(217)
							Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(217)
							Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(217)
							Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(217)
							Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(217)
							Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(217)
							Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(217)
							_z1 = tmp68;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								{
									HX_STACK_LINE(217)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float value = tmp48;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(217)
									bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									if ((tmp49)){
										HX_STACK_LINE(217)
										tmp40 = (int)-1;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp40 = (int)1;
										}
										else{
											HX_STACK_LINE(217)
											tmp40 = value;
										}
									}
								}
								HX_STACK_LINE(217)
								Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_x1 = tmp41;
								HX_STACK_LINE(217)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(217)
								Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(217)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(217)
								Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(217)
								Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(217)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(217)
								Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(217)
								Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								_y1 = tmp55;
								HX_STACK_LINE(217)
								Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(217)
								Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(217)
								Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(217)
								Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(217)
								Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(217)
								Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(217)
								Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(217)
								_z1 = tmp69;
							}
							else{
								HX_STACK_LINE(217)
								bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								if ((tmp40)){
									HX_STACK_LINE(217)
									Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									{
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float value = tmp49;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(217)
										bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp41 = (int)-1;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											if ((tmp51)){
												HX_STACK_LINE(217)
												tmp41 = (int)1;
											}
											else{
												HX_STACK_LINE(217)
												tmp41 = value;
											}
										}
									}
									HX_STACK_LINE(217)
									Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									_x1 = tmp42;
									HX_STACK_LINE(217)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(217)
									Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(217)
									Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(217)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(217)
									Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(217)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(217)
									Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(217)
									_y1 = tmp56;
									HX_STACK_LINE(217)
									Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(217)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(217)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(217)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(217)
									Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(217)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(217)
									Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(217)
									Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(217)
									Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(217)
									Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(217)
									Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(217)
									Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(217)
									Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(217)
									_z1 = tmp70;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(217)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(217)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(217)
										Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(217)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(217)
										_x1 = tmp55;
										HX_STACK_LINE(217)
										Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(217)
										{
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float value = tmp64;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(217)
											bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											if ((tmp65)){
												HX_STACK_LINE(217)
												tmp56 = (int)-1;
											}
											else{
												HX_STACK_LINE(217)
												bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												if ((tmp66)){
													HX_STACK_LINE(217)
													tmp56 = (int)1;
												}
												else{
													HX_STACK_LINE(217)
													tmp56 = value;
												}
											}
										}
										HX_STACK_LINE(217)
										Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(217)
										_y1 = tmp57;
										HX_STACK_LINE(217)
										Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(217)
										Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(217)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(217)
										Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(217)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(217)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(217)
										Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(217)
										Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(217)
										Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(217)
										Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(217)
										Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(217)
										Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(217)
										Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(217)
										Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(217)
										_z1 = tmp71;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										if ((tmp42)){
											HX_STACK_LINE(217)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(217)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(217)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(217)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(217)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(217)
											Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(217)
											Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(217)
											Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(217)
											Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(217)
											Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(217)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(217)
											Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(217)
											_x1 = tmp56;
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(217)
											Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(217)
											Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(217)
											Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(217)
											Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(217)
											_y1 = tmp70;
											HX_STACK_LINE(217)
											Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(217)
											{
												HX_STACK_LINE(217)
												Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(217)
												Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(217)
												Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(217)
												Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(217)
												Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(217)
												Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(217)
												Float value = tmp79;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(217)
												bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(217)
												if ((tmp80)){
													HX_STACK_LINE(217)
													tmp71 = (int)-1;
												}
												else{
													HX_STACK_LINE(217)
													bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp71 = (int)1;
													}
													else{
														HX_STACK_LINE(217)
														tmp71 = value;
													}
												}
											}
											HX_STACK_LINE(217)
											Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(217)
											_z1 = tmp72;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											if ((tmp43)){
												HX_STACK_LINE(217)
												Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(217)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(217)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(217)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(217)
												Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(217)
												Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(217)
												Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(217)
												Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(217)
												Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(217)
												Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(217)
												Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(217)
												Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(217)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(217)
												Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(217)
												_x1 = tmp57;
												HX_STACK_LINE(217)
												Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(217)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(217)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(217)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(217)
												Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(217)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(217)
												Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(217)
												Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(217)
												Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(217)
												Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(217)
												Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(217)
												Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(217)
												Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(217)
												_y1 = tmp71;
												HX_STACK_LINE(217)
												Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												{
													HX_STACK_LINE(217)
													Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(217)
													Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(217)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(217)
													Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(217)
													Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(217)
													Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(217)
													Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(217)
													Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(217)
													Float value = tmp80;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(217)
													bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp72 = (int)-1;
													}
													else{
														HX_STACK_LINE(217)
														bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(217)
														if ((tmp82)){
															HX_STACK_LINE(217)
															tmp72 = (int)1;
														}
														else{
															HX_STACK_LINE(217)
															tmp72 = value;
														}
													}
												}
												HX_STACK_LINE(217)
												Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												_z1 = tmp73;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(217)
						{
							HX_STACK_LINE(217)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(217)
							_this->ignore_listeners = true;
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->x = _x1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->x;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_x(tmp42);
									}
									HX_STACK_LINE(217)
									_this->x;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->y = _y1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->y;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_y(tmp42);
									}
									HX_STACK_LINE(217)
									_this->y;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->z = _z1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->z;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_z(tmp42);
									}
									HX_STACK_LINE(217)
									_this->z;
								}
							}
							HX_STACK_LINE(217)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(217)
							bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								tmp40 = !(tmp42);
							}
							else{
								HX_STACK_LINE(217)
								tmp40 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_this->listen_x(tmp41);
							}
							HX_STACK_LINE(217)
							bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							if ((tmp41)){
								HX_STACK_LINE(217)
								bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								tmp42 = !(tmp44);
							}
							else{
								HX_STACK_LINE(217)
								tmp42 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp42)){
								HX_STACK_LINE(217)
								Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								_this->listen_y(tmp43);
							}
							HX_STACK_LINE(217)
							bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							if ((tmp43)){
								HX_STACK_LINE(217)
								bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								tmp44 = !(tmp46);
							}
							else{
								HX_STACK_LINE(217)
								tmp44 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp44)){
								HX_STACK_LINE(217)
								Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								_this->listen_z(tmp45);
							}
							HX_STACK_LINE(217)
							_this;
						}
						HX_STACK_LINE(217)
						_this;
					}
				}
				HX_STACK_LINE(217)
				Dynamic tmp18 = this->listen_y_dyn();		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(217)
				bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(217)
				bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(217)
				if ((tmp19)){
					HX_STACK_LINE(217)
					bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					tmp20 = !(tmp23);
				}
				else{
					HX_STACK_LINE(217)
					tmp20 = false;
				}
				HX_STACK_LINE(217)
				if ((tmp20)){
					HX_STACK_LINE(217)
					Float tmp21 = this->y;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					this->listen_y(tmp21);
				}
				HX_STACK_LINE(217)
				this->y;
			}
		}
		HX_STACK_LINE(217)
		{
			HX_STACK_LINE(217)
			this->z = _z;
			HX_STACK_LINE(217)
			bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(217)
			if ((tmp17)){
				HX_STACK_LINE(217)
				this->z;
			}
			else{
				HX_STACK_LINE(217)
				{
					HX_STACK_LINE(217)
					::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(217)
					bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(217)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(217)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					if ((tmp21)){
						HX_STACK_LINE(217)
						tmp22 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(217)
						tmp22 = true;
					}
					HX_STACK_LINE(217)
					bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(217)
					if ((tmp23)){
						HX_STACK_LINE(217)
						tmp24 = this->_construct;
					}
					else{
						HX_STACK_LINE(217)
						tmp24 = true;
					}
					HX_STACK_LINE(217)
					if ((tmp24)){
						HX_STACK_LINE(217)
						Dynamic();
					}
					else{
						HX_STACK_LINE(217)
						::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(217)
						::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(217)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(217)
						Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(217)
						Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(217)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(217)
						Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(217)
						Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(217)
						Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(217)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(217)
						Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(217)
						Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(217)
						Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(217)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(217)
						Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(217)
						Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(217)
						Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(217)
						Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(217)
						Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(217)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(217)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(217)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(217)
						bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(217)
						if ((tmp38)){
							HX_STACK_LINE(217)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(217)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(217)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(217)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(217)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(217)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(217)
							Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(217)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(217)
							_x1 = tmp52;
							HX_STACK_LINE(217)
							Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float value = tmp61;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(217)
								bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								if ((tmp62)){
									HX_STACK_LINE(217)
									tmp53 = (int)-1;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									if ((tmp63)){
										HX_STACK_LINE(217)
										tmp53 = (int)1;
									}
									else{
										HX_STACK_LINE(217)
										tmp53 = value;
									}
								}
							}
							HX_STACK_LINE(217)
							Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(217)
							_y1 = tmp54;
							HX_STACK_LINE(217)
							Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(217)
							Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(217)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(217)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(217)
							Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(217)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(217)
							Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(217)
							Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(217)
							Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(217)
							Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(217)
							Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(217)
							Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(217)
							Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(217)
							Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(217)
							_z1 = tmp68;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								{
									HX_STACK_LINE(217)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float value = tmp48;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(217)
									bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									if ((tmp49)){
										HX_STACK_LINE(217)
										tmp40 = (int)-1;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp40 = (int)1;
										}
										else{
											HX_STACK_LINE(217)
											tmp40 = value;
										}
									}
								}
								HX_STACK_LINE(217)
								Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_x1 = tmp41;
								HX_STACK_LINE(217)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(217)
								Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(217)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(217)
								Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(217)
								Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(217)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(217)
								Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(217)
								Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								_y1 = tmp55;
								HX_STACK_LINE(217)
								Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(217)
								Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(217)
								Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(217)
								Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(217)
								Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(217)
								Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(217)
								Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(217)
								_z1 = tmp69;
							}
							else{
								HX_STACK_LINE(217)
								bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								if ((tmp40)){
									HX_STACK_LINE(217)
									Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									{
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float value = tmp49;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(217)
										bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp41 = (int)-1;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											if ((tmp51)){
												HX_STACK_LINE(217)
												tmp41 = (int)1;
											}
											else{
												HX_STACK_LINE(217)
												tmp41 = value;
											}
										}
									}
									HX_STACK_LINE(217)
									Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									_x1 = tmp42;
									HX_STACK_LINE(217)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(217)
									Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(217)
									Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(217)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(217)
									Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(217)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(217)
									Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(217)
									_y1 = tmp56;
									HX_STACK_LINE(217)
									Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(217)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(217)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(217)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(217)
									Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(217)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(217)
									Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(217)
									Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(217)
									Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(217)
									Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(217)
									Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(217)
									Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(217)
									Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(217)
									_z1 = tmp70;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(217)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(217)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(217)
										Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(217)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(217)
										_x1 = tmp55;
										HX_STACK_LINE(217)
										Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(217)
										{
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float value = tmp64;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(217)
											bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											if ((tmp65)){
												HX_STACK_LINE(217)
												tmp56 = (int)-1;
											}
											else{
												HX_STACK_LINE(217)
												bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												if ((tmp66)){
													HX_STACK_LINE(217)
													tmp56 = (int)1;
												}
												else{
													HX_STACK_LINE(217)
													tmp56 = value;
												}
											}
										}
										HX_STACK_LINE(217)
										Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(217)
										_y1 = tmp57;
										HX_STACK_LINE(217)
										Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(217)
										Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(217)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(217)
										Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(217)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(217)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(217)
										Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(217)
										Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(217)
										Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(217)
										Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(217)
										Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(217)
										Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(217)
										Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(217)
										Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(217)
										_z1 = tmp71;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										if ((tmp42)){
											HX_STACK_LINE(217)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(217)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(217)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(217)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(217)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(217)
											Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(217)
											Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(217)
											Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(217)
											Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(217)
											Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(217)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(217)
											Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(217)
											_x1 = tmp56;
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(217)
											Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(217)
											Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(217)
											Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(217)
											Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(217)
											_y1 = tmp70;
											HX_STACK_LINE(217)
											Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(217)
											{
												HX_STACK_LINE(217)
												Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(217)
												Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(217)
												Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(217)
												Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(217)
												Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(217)
												Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(217)
												Float value = tmp79;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(217)
												bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(217)
												if ((tmp80)){
													HX_STACK_LINE(217)
													tmp71 = (int)-1;
												}
												else{
													HX_STACK_LINE(217)
													bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp71 = (int)1;
													}
													else{
														HX_STACK_LINE(217)
														tmp71 = value;
													}
												}
											}
											HX_STACK_LINE(217)
											Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(217)
											_z1 = tmp72;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											if ((tmp43)){
												HX_STACK_LINE(217)
												Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(217)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(217)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(217)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(217)
												Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(217)
												Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(217)
												Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(217)
												Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(217)
												Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(217)
												Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(217)
												Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(217)
												Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(217)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(217)
												Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(217)
												_x1 = tmp57;
												HX_STACK_LINE(217)
												Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(217)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(217)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(217)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(217)
												Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(217)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(217)
												Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(217)
												Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(217)
												Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(217)
												Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(217)
												Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(217)
												Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(217)
												Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(217)
												_y1 = tmp71;
												HX_STACK_LINE(217)
												Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												{
													HX_STACK_LINE(217)
													Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(217)
													Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(217)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(217)
													Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(217)
													Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(217)
													Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(217)
													Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(217)
													Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(217)
													Float value = tmp80;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(217)
													bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp72 = (int)-1;
													}
													else{
														HX_STACK_LINE(217)
														bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(217)
														if ((tmp82)){
															HX_STACK_LINE(217)
															tmp72 = (int)1;
														}
														else{
															HX_STACK_LINE(217)
															tmp72 = value;
														}
													}
												}
												HX_STACK_LINE(217)
												Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												_z1 = tmp73;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(217)
						{
							HX_STACK_LINE(217)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(217)
							_this->ignore_listeners = true;
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->x = _x1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->x;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_x(tmp42);
									}
									HX_STACK_LINE(217)
									_this->x;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->y = _y1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->y;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_y(tmp42);
									}
									HX_STACK_LINE(217)
									_this->y;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->z = _z1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->z;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_z(tmp42);
									}
									HX_STACK_LINE(217)
									_this->z;
								}
							}
							HX_STACK_LINE(217)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(217)
							bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								tmp40 = !(tmp42);
							}
							else{
								HX_STACK_LINE(217)
								tmp40 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_this->listen_x(tmp41);
							}
							HX_STACK_LINE(217)
							bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							if ((tmp41)){
								HX_STACK_LINE(217)
								bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								tmp42 = !(tmp44);
							}
							else{
								HX_STACK_LINE(217)
								tmp42 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp42)){
								HX_STACK_LINE(217)
								Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								_this->listen_y(tmp43);
							}
							HX_STACK_LINE(217)
							bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							if ((tmp43)){
								HX_STACK_LINE(217)
								bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								tmp44 = !(tmp46);
							}
							else{
								HX_STACK_LINE(217)
								tmp44 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp44)){
								HX_STACK_LINE(217)
								Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								_this->listen_z(tmp45);
							}
							HX_STACK_LINE(217)
							_this;
						}
						HX_STACK_LINE(217)
						_this;
					}
				}
				HX_STACK_LINE(217)
				Dynamic tmp18 = this->listen_z_dyn();		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(217)
				bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(217)
				bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(217)
				if ((tmp19)){
					HX_STACK_LINE(217)
					bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					tmp20 = !(tmp23);
				}
				else{
					HX_STACK_LINE(217)
					tmp20 = false;
				}
				HX_STACK_LINE(217)
				if ((tmp20)){
					HX_STACK_LINE(217)
					Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					this->listen_z(tmp21);
				}
				HX_STACK_LINE(217)
				this->z;
			}
		}
		HX_STACK_LINE(217)
		{
			HX_STACK_LINE(217)
			this->w = _w;
			HX_STACK_LINE(217)
			bool tmp17 = this->_construct;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(217)
			if ((tmp17)){
				HX_STACK_LINE(217)
				this->w;
			}
			else{
				HX_STACK_LINE(217)
				{
					HX_STACK_LINE(217)
					::phoenix::Vector tmp18 = this->euler;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(217)
					bool tmp19 = (tmp18 == null());		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(217)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(217)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					if ((tmp21)){
						HX_STACK_LINE(217)
						tmp22 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(217)
						tmp22 = true;
					}
					HX_STACK_LINE(217)
					bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(217)
					if ((tmp23)){
						HX_STACK_LINE(217)
						tmp24 = this->_construct;
					}
					else{
						HX_STACK_LINE(217)
						tmp24 = true;
					}
					HX_STACK_LINE(217)
					if ((tmp24)){
						HX_STACK_LINE(217)
						Dynamic();
					}
					else{
						HX_STACK_LINE(217)
						::phoenix::Vector tmp25 = this->euler;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(217)
						::phoenix::Vector _this = tmp25;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(217)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(217)
						Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(217)
						Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(217)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(217)
						Float sqx = tmp28;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(217)
						Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(217)
						Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(217)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(217)
						Float sqy = tmp31;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(217)
						Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(217)
						Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(217)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(217)
						Float sqz = tmp34;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(217)
						Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(217)
						Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(217)
						Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(217)
						Float sqw = tmp37;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(217)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(217)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(217)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(217)
						bool tmp38 = (order == (int)0);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(217)
						if ((tmp38)){
							HX_STACK_LINE(217)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(217)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(217)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(217)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(217)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(217)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(217)
							Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(217)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(217)
							_x1 = tmp52;
							HX_STACK_LINE(217)
							Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float value = tmp61;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(217)
								bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								if ((tmp62)){
									HX_STACK_LINE(217)
									tmp53 = (int)-1;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									if ((tmp63)){
										HX_STACK_LINE(217)
										tmp53 = (int)1;
									}
									else{
										HX_STACK_LINE(217)
										tmp53 = value;
									}
								}
							}
							HX_STACK_LINE(217)
							Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(217)
							_y1 = tmp54;
							HX_STACK_LINE(217)
							Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(217)
							Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(217)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(217)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(217)
							Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(217)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(217)
							Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(217)
							Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(217)
							Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(217)
							Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(217)
							Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(217)
							Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(217)
							Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(217)
							Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(217)
							_z1 = tmp68;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp39 = (order == (int)1);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								{
									HX_STACK_LINE(217)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float value = tmp48;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(217)
									bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									if ((tmp49)){
										HX_STACK_LINE(217)
										tmp40 = (int)-1;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp40 = (int)1;
										}
										else{
											HX_STACK_LINE(217)
											tmp40 = value;
										}
									}
								}
								HX_STACK_LINE(217)
								Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_x1 = tmp41;
								HX_STACK_LINE(217)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(217)
								Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(217)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(217)
								Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(217)
								Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(217)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(217)
								Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(217)
								Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								_y1 = tmp55;
								HX_STACK_LINE(217)
								Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(217)
								Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(217)
								Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(217)
								Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(217)
								Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(217)
								Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(217)
								Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(217)
								_z1 = tmp69;
							}
							else{
								HX_STACK_LINE(217)
								bool tmp40 = (order == (int)2);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(217)
								if ((tmp40)){
									HX_STACK_LINE(217)
									Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									{
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float value = tmp49;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(217)
										bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										if ((tmp50)){
											HX_STACK_LINE(217)
											tmp41 = (int)-1;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											if ((tmp51)){
												HX_STACK_LINE(217)
												tmp41 = (int)1;
											}
											else{
												HX_STACK_LINE(217)
												tmp41 = value;
											}
										}
									}
									HX_STACK_LINE(217)
									Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									_x1 = tmp42;
									HX_STACK_LINE(217)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(217)
									Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(217)
									Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(217)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(217)
									Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(217)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(217)
									Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(217)
									_y1 = tmp56;
									HX_STACK_LINE(217)
									Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(217)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(217)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(217)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(217)
									Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(217)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(217)
									Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(217)
									Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(217)
									Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(217)
									Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(217)
									Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(217)
									Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(217)
									Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(217)
									_z1 = tmp70;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp41 = (order == (int)3);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(217)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(217)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(217)
										Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(217)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(217)
										_x1 = tmp55;
										HX_STACK_LINE(217)
										Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(217)
										{
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float value = tmp64;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(217)
											bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											if ((tmp65)){
												HX_STACK_LINE(217)
												tmp56 = (int)-1;
											}
											else{
												HX_STACK_LINE(217)
												bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												if ((tmp66)){
													HX_STACK_LINE(217)
													tmp56 = (int)1;
												}
												else{
													HX_STACK_LINE(217)
													tmp56 = value;
												}
											}
										}
										HX_STACK_LINE(217)
										Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(217)
										_y1 = tmp57;
										HX_STACK_LINE(217)
										Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(217)
										Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(217)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(217)
										Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(217)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(217)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(217)
										Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(217)
										Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(217)
										Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(217)
										Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(217)
										Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(217)
										Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(217)
										Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(217)
										Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(217)
										_z1 = tmp71;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp42 = (order == (int)4);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										if ((tmp42)){
											HX_STACK_LINE(217)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(217)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(217)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(217)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(217)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(217)
											Float tmp49 = (tmp45 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(217)
											Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(217)
											Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(217)
											Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(217)
											Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(217)
											Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(217)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(217)
											Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(217)
											_x1 = tmp56;
											HX_STACK_LINE(217)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(217)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(217)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(217)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(217)
											Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(217)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(217)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(217)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(217)
											Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(217)
											Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(217)
											Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(217)
											Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(217)
											Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(217)
											Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(217)
											_y1 = tmp70;
											HX_STACK_LINE(217)
											Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(217)
											{
												HX_STACK_LINE(217)
												Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(217)
												Float tmp75 = this->z;		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(217)
												Float tmp76 = this->w;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(217)
												Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(217)
												Float tmp78 = (tmp74 + tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(217)
												Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(217)
												Float value = tmp79;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(217)
												bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(217)
												if ((tmp80)){
													HX_STACK_LINE(217)
													tmp71 = (int)-1;
												}
												else{
													HX_STACK_LINE(217)
													bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp71 = (int)1;
													}
													else{
														HX_STACK_LINE(217)
														tmp71 = value;
													}
												}
											}
											HX_STACK_LINE(217)
											Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(217)
											_z1 = tmp72;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp43 = (order == (int)5);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(217)
											if ((tmp43)){
												HX_STACK_LINE(217)
												Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(217)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(217)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(217)
												Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(217)
												Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(217)
												Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(217)
												Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(217)
												Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(217)
												Float tmp52 = (sqw - sqx);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(217)
												Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(217)
												Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(217)
												Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(217)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(217)
												Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(217)
												_x1 = tmp57;
												HX_STACK_LINE(217)
												Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(217)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(217)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(217)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(217)
												Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(217)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(217)
												Float tmp64 = (tmp60 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(217)
												Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(217)
												Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(217)
												Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(217)
												Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(217)
												Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(217)
												Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(217)
												Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(217)
												_y1 = tmp71;
												HX_STACK_LINE(217)
												Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(217)
												{
													HX_STACK_LINE(217)
													Float tmp73 = this->z;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(217)
													Float tmp74 = this->w;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(217)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(217)
													Float tmp76 = this->x;		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(217)
													Float tmp77 = this->y;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(217)
													Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(217)
													Float tmp79 = (tmp75 - tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(217)
													Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(217)
													Float value = tmp80;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(217)
													bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(217)
													if ((tmp81)){
														HX_STACK_LINE(217)
														tmp72 = (int)-1;
													}
													else{
														HX_STACK_LINE(217)
														bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(217)
														if ((tmp82)){
															HX_STACK_LINE(217)
															tmp72 = (int)1;
														}
														else{
															HX_STACK_LINE(217)
															tmp72 = value;
														}
													}
												}
												HX_STACK_LINE(217)
												Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(217)
												_z1 = tmp73;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(217)
						{
							HX_STACK_LINE(217)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(217)
							_this->ignore_listeners = true;
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->x = _x1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->x;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_x != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _x1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_x(tmp42);
									}
									HX_STACK_LINE(217)
									_this->x;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->y = _y1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->y;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _y1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_y(tmp42);
									}
									HX_STACK_LINE(217)
									_this->y;
								}
							}
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								_this->z = _z1;
								HX_STACK_LINE(217)
								bool tmp39 = _this->_construct;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(217)
								if ((tmp39)){
									HX_STACK_LINE(217)
									_this->z;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(217)
									bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(217)
									if ((tmp40)){
										HX_STACK_LINE(217)
										bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										tmp41 = !(tmp43);
									}
									else{
										HX_STACK_LINE(217)
										tmp41 = false;
									}
									HX_STACK_LINE(217)
									if ((tmp41)){
										HX_STACK_LINE(217)
										Float tmp42 = _z1;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(217)
										_this->listen_z(tmp42);
									}
									HX_STACK_LINE(217)
									_this->z;
								}
							}
							HX_STACK_LINE(217)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(217)
							bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								tmp40 = !(tmp42);
							}
							else{
								HX_STACK_LINE(217)
								tmp40 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = _this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_this->listen_x(tmp41);
							}
							HX_STACK_LINE(217)
							bool tmp41 = (_this->listen_y != null());		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							if ((tmp41)){
								HX_STACK_LINE(217)
								bool tmp43 = _this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								tmp42 = !(tmp44);
							}
							else{
								HX_STACK_LINE(217)
								tmp42 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp42)){
								HX_STACK_LINE(217)
								Float tmp43 = _this->y;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								_this->listen_y(tmp43);
							}
							HX_STACK_LINE(217)
							bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							if ((tmp43)){
								HX_STACK_LINE(217)
								bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								tmp44 = !(tmp46);
							}
							else{
								HX_STACK_LINE(217)
								tmp44 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp44)){
								HX_STACK_LINE(217)
								Float tmp45 = _this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								_this->listen_z(tmp45);
							}
							HX_STACK_LINE(217)
							_this;
						}
						HX_STACK_LINE(217)
						_this;
					}
				}
				HX_STACK_LINE(217)
				Dynamic tmp18 = this->listen_w_dyn();		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(217)
				bool tmp19 = (tmp18 != null());		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(217)
				bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(217)
				if ((tmp19)){
					HX_STACK_LINE(217)
					bool tmp21 = this->ignore_listeners;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(217)
					bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(217)
					tmp20 = !(tmp23);
				}
				else{
					HX_STACK_LINE(217)
					tmp20 = false;
				}
				HX_STACK_LINE(217)
				if ((tmp20)){
					HX_STACK_LINE(217)
					Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(217)
					this->listen_w(tmp21);
				}
				HX_STACK_LINE(217)
				this->w;
			}
		}
		HX_STACK_LINE(217)
		this->ignore_euler = false;
		HX_STACK_LINE(217)
		{
			HX_STACK_LINE(217)
			::phoenix::Vector tmp17 = this->euler;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(217)
			bool tmp18 = (tmp17 == null());		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(217)
			bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(217)
			bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(217)
			bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(217)
			if ((tmp20)){
				HX_STACK_LINE(217)
				tmp21 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(217)
				tmp21 = true;
			}
			HX_STACK_LINE(217)
			bool tmp22 = !(tmp21);		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(217)
			bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(217)
			if ((tmp22)){
				HX_STACK_LINE(217)
				tmp23 = this->_construct;
			}
			else{
				HX_STACK_LINE(217)
				tmp23 = true;
			}
			HX_STACK_LINE(217)
			if ((tmp23)){
				HX_STACK_LINE(217)
				Dynamic();
			}
			else{
				HX_STACK_LINE(217)
				::phoenix::Vector tmp24 = this->euler;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(217)
				::phoenix::Vector _this = tmp24;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(217)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(217)
				Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(217)
				Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(217)
				Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(217)
				Float sqx = tmp27;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(217)
				Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(217)
				Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(217)
				Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(217)
				Float sqy = tmp30;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(217)
				Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(217)
				Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(217)
				Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(217)
				Float sqz = tmp33;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(217)
				Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(217)
				Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(217)
				Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(217)
				Float sqw = tmp36;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(217)
				Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
				HX_STACK_LINE(217)
				Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
				HX_STACK_LINE(217)
				Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
				HX_STACK_LINE(217)
				bool tmp37 = (order == (int)0);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(217)
				if ((tmp37)){
					HX_STACK_LINE(217)
					Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(217)
					Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(217)
					Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(217)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(217)
					Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(217)
					Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(217)
					Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(217)
					Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(217)
					Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(217)
					Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(217)
					Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(217)
					Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(217)
					Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(217)
					Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(217)
					_x1 = tmp51;
					HX_STACK_LINE(217)
					Float tmp52;		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(217)
					{
						HX_STACK_LINE(217)
						Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(217)
						Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(217)
						Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(217)
						Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(217)
						Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(217)
						Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(217)
						Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(217)
						Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(217)
						Float value = tmp60;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(217)
						bool tmp61 = (value < (int)-1);		HX_STACK_VAR(tmp61,"tmp61");
						HX_STACK_LINE(217)
						if ((tmp61)){
							HX_STACK_LINE(217)
							tmp52 = (int)-1;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp62 = (value > (int)1);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(217)
							if ((tmp62)){
								HX_STACK_LINE(217)
								tmp52 = (int)1;
							}
							else{
								HX_STACK_LINE(217)
								tmp52 = value;
							}
						}
					}
					HX_STACK_LINE(217)
					Float tmp53 = ::Math_obj::asin(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
					HX_STACK_LINE(217)
					_y1 = tmp53;
					HX_STACK_LINE(217)
					Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
					HX_STACK_LINE(217)
					Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
					HX_STACK_LINE(217)
					Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
					HX_STACK_LINE(217)
					Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
					HX_STACK_LINE(217)
					Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
					HX_STACK_LINE(217)
					Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
					HX_STACK_LINE(217)
					Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
					HX_STACK_LINE(217)
					Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
					HX_STACK_LINE(217)
					Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
					HX_STACK_LINE(217)
					Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
					HX_STACK_LINE(217)
					Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
					HX_STACK_LINE(217)
					Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
					HX_STACK_LINE(217)
					Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
					HX_STACK_LINE(217)
					Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
					HX_STACK_LINE(217)
					_z1 = tmp67;
				}
				else{
					HX_STACK_LINE(217)
					bool tmp38 = (order == (int)1);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(217)
					if ((tmp38)){
						HX_STACK_LINE(217)
						Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(217)
						{
							HX_STACK_LINE(217)
							Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(217)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(217)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(217)
							Float value = tmp47;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(217)
							bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(217)
							if ((tmp48)){
								HX_STACK_LINE(217)
								tmp39 = (int)-1;
							}
							else{
								HX_STACK_LINE(217)
								bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(217)
								if ((tmp49)){
									HX_STACK_LINE(217)
									tmp39 = (int)1;
								}
								else{
									HX_STACK_LINE(217)
									tmp39 = value;
								}
							}
						}
						HX_STACK_LINE(217)
						Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(217)
						_x1 = tmp40;
						HX_STACK_LINE(217)
						Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(217)
						Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(217)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(217)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(217)
						Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(217)
						Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(217)
						Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(217)
						Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(217)
						Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(217)
						Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(217)
						Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(217)
						Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(217)
						Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(217)
						Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(217)
						_y1 = tmp54;
						HX_STACK_LINE(217)
						Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(217)
						Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(217)
						Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(217)
						Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(217)
						Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(217)
						Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(217)
						Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
						HX_STACK_LINE(217)
						Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
						HX_STACK_LINE(217)
						Float tmp63 = (sqw - sqx);		HX_STACK_VAR(tmp63,"tmp63");
						HX_STACK_LINE(217)
						Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
						HX_STACK_LINE(217)
						Float tmp65 = (tmp63 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
						HX_STACK_LINE(217)
						Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
						HX_STACK_LINE(217)
						Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
						HX_STACK_LINE(217)
						Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
						HX_STACK_LINE(217)
						_z1 = tmp68;
					}
					else{
						HX_STACK_LINE(217)
						bool tmp39 = (order == (int)2);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(217)
						if ((tmp39)){
							HX_STACK_LINE(217)
							Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							{
								HX_STACK_LINE(217)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(217)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(217)
								Float value = tmp48;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(217)
								bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(217)
								if ((tmp49)){
									HX_STACK_LINE(217)
									tmp40 = (int)-1;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(217)
									if ((tmp50)){
										HX_STACK_LINE(217)
										tmp40 = (int)1;
									}
									else{
										HX_STACK_LINE(217)
										tmp40 = value;
									}
								}
							}
							HX_STACK_LINE(217)
							Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(217)
							_x1 = tmp41;
							HX_STACK_LINE(217)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(217)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(217)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(217)
							Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(217)
							Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(217)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(217)
							Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(217)
							Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(217)
							Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(217)
							Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(217)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(217)
							Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(217)
							Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(217)
							Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(217)
							_y1 = tmp55;
							HX_STACK_LINE(217)
							Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(217)
							Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(217)
							Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(217)
							Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(217)
							Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(217)
							Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(217)
							Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(217)
							Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(217)
							Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(217)
							Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(217)
							Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(217)
							Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(217)
							Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(217)
							Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(217)
							_z1 = tmp69;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp40 = (order == (int)3);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(217)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(217)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(217)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(217)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(217)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(217)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(217)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(217)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(217)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(217)
								Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(217)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(217)
								_x1 = tmp54;
								HX_STACK_LINE(217)
								Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(217)
								{
									HX_STACK_LINE(217)
									Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(217)
									Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(217)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(217)
									Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(217)
									Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(217)
									Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(217)
									Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(217)
									Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									Float value = tmp63;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(217)
									bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(217)
									if ((tmp64)){
										HX_STACK_LINE(217)
										tmp55 = (int)-1;
									}
									else{
										HX_STACK_LINE(217)
										bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(217)
										if ((tmp65)){
											HX_STACK_LINE(217)
											tmp55 = (int)1;
										}
										else{
											HX_STACK_LINE(217)
											tmp55 = value;
										}
									}
								}
								HX_STACK_LINE(217)
								Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(217)
								_y1 = tmp56;
								HX_STACK_LINE(217)
								Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(217)
								Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(217)
								Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(217)
								Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(217)
								Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(217)
								Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(217)
								Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(217)
								Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(217)
								Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(217)
								Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(217)
								Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(217)
								Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(217)
								Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(217)
								Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(217)
								_z1 = tmp70;
							}
							else{
								HX_STACK_LINE(217)
								bool tmp41 = (order == (int)4);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								if ((tmp41)){
									HX_STACK_LINE(217)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(217)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(217)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(217)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(217)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(217)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(217)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(217)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(217)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(217)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(217)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(217)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(217)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(217)
									_x1 = tmp55;
									HX_STACK_LINE(217)
									Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(217)
									Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(217)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(217)
									Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(217)
									Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(217)
									Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(217)
									Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(217)
									Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(217)
									Float tmp64 = (sqw + sqx);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(217)
									Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(217)
									Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(217)
									Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(217)
									Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(217)
									Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(217)
									_y1 = tmp69;
									HX_STACK_LINE(217)
									Float tmp70;		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(217)
									{
										HX_STACK_LINE(217)
										Float tmp71 = this->x;		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(217)
										Float tmp72 = this->y;		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(217)
										Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(217)
										Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(217)
										Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(217)
										Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(217)
										Float tmp77 = (tmp73 + tmp76);		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(217)
										Float tmp78 = ((int)2 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(217)
										Float value = tmp78;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(217)
										bool tmp79 = (value < (int)-1);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(217)
										if ((tmp79)){
											HX_STACK_LINE(217)
											tmp70 = (int)-1;
										}
										else{
											HX_STACK_LINE(217)
											bool tmp80 = (value > (int)1);		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(217)
											if ((tmp80)){
												HX_STACK_LINE(217)
												tmp70 = (int)1;
											}
											else{
												HX_STACK_LINE(217)
												tmp70 = value;
											}
										}
									}
									HX_STACK_LINE(217)
									Float tmp71 = ::Math_obj::asin(tmp70);		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(217)
									_z1 = tmp71;
								}
								else{
									HX_STACK_LINE(217)
									bool tmp42 = (order == (int)5);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(217)
									if ((tmp42)){
										HX_STACK_LINE(217)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(217)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(217)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(217)
										Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(217)
										Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(217)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(217)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(217)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(217)
										Float tmp51 = (sqw - sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(217)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(217)
										Float tmp53 = (tmp51 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(217)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(217)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(217)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(217)
										_x1 = tmp56;
										HX_STACK_LINE(217)
										Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(217)
										Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(217)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(217)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(217)
										Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(217)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(217)
										Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(217)
										Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(217)
										Float tmp65 = (sqw + sqx);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(217)
										Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(217)
										Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(217)
										Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(217)
										Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(217)
										Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(217)
										_y1 = tmp70;
										HX_STACK_LINE(217)
										Float tmp71;		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(217)
										{
											HX_STACK_LINE(217)
											Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(217)
											Float tmp73 = this->w;		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(217)
											Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(217)
											Float tmp75 = this->x;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(217)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(217)
											Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(217)
											Float tmp78 = (tmp74 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(217)
											Float tmp79 = ((int)2 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(217)
											Float value = tmp79;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(217)
											bool tmp80 = (value < (int)-1);		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(217)
											if ((tmp80)){
												HX_STACK_LINE(217)
												tmp71 = (int)-1;
											}
											else{
												HX_STACK_LINE(217)
												bool tmp81 = (value > (int)1);		HX_STACK_VAR(tmp81,"tmp81");
												HX_STACK_LINE(217)
												if ((tmp81)){
													HX_STACK_LINE(217)
													tmp71 = (int)1;
												}
												else{
													HX_STACK_LINE(217)
													tmp71 = value;
												}
											}
										}
										HX_STACK_LINE(217)
										Float tmp72 = ::Math_obj::asin(tmp71);		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(217)
										_z1 = tmp72;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(217)
				{
					HX_STACK_LINE(217)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(217)
					_this->ignore_listeners = true;
					HX_STACK_LINE(217)
					{
						HX_STACK_LINE(217)
						_this->x = _x1;
						HX_STACK_LINE(217)
						bool tmp38 = _this->_construct;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(217)
						if ((tmp38)){
							HX_STACK_LINE(217)
							_this->x;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp39 = (_this->listen_x != null());		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								tmp40 = !(tmp42);
							}
							else{
								HX_STACK_LINE(217)
								tmp40 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = _x1;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_this->listen_x(tmp41);
							}
							HX_STACK_LINE(217)
							_this->x;
						}
					}
					HX_STACK_LINE(217)
					{
						HX_STACK_LINE(217)
						_this->y = _y1;
						HX_STACK_LINE(217)
						bool tmp38 = _this->_construct;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(217)
						if ((tmp38)){
							HX_STACK_LINE(217)
							_this->y;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp39 = (_this->listen_y != null());		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								tmp40 = !(tmp42);
							}
							else{
								HX_STACK_LINE(217)
								tmp40 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = _y1;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_this->listen_y(tmp41);
							}
							HX_STACK_LINE(217)
							_this->y;
						}
					}
					HX_STACK_LINE(217)
					{
						HX_STACK_LINE(217)
						_this->z = _z1;
						HX_STACK_LINE(217)
						bool tmp38 = _this->_construct;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(217)
						if ((tmp38)){
							HX_STACK_LINE(217)
							_this->z;
						}
						else{
							HX_STACK_LINE(217)
							bool tmp39 = (_this->listen_z != null());		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(217)
							bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(217)
							if ((tmp39)){
								HX_STACK_LINE(217)
								bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(217)
								tmp40 = !(tmp42);
							}
							else{
								HX_STACK_LINE(217)
								tmp40 = false;
							}
							HX_STACK_LINE(217)
							if ((tmp40)){
								HX_STACK_LINE(217)
								Float tmp41 = _z1;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(217)
								_this->listen_z(tmp41);
							}
							HX_STACK_LINE(217)
							_this->z;
						}
					}
					HX_STACK_LINE(217)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(217)
					bool tmp38 = (_this->listen_x != null());		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(217)
					bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(217)
					if ((tmp38)){
						HX_STACK_LINE(217)
						bool tmp40 = _this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(217)
						bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(217)
						tmp39 = !(tmp41);
					}
					else{
						HX_STACK_LINE(217)
						tmp39 = false;
					}
					HX_STACK_LINE(217)
					if ((tmp39)){
						HX_STACK_LINE(217)
						Float tmp40 = _this->x;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(217)
						_this->listen_x(tmp40);
					}
					HX_STACK_LINE(217)
					bool tmp40 = (_this->listen_y != null());		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(217)
					bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(217)
					if ((tmp40)){
						HX_STACK_LINE(217)
						bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(217)
						bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(217)
						tmp41 = !(tmp43);
					}
					else{
						HX_STACK_LINE(217)
						tmp41 = false;
					}
					HX_STACK_LINE(217)
					if ((tmp41)){
						HX_STACK_LINE(217)
						Float tmp42 = _this->y;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(217)
						_this->listen_y(tmp42);
					}
					HX_STACK_LINE(217)
					bool tmp42 = (_this->listen_z != null());		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(217)
					bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(217)
					if ((tmp42)){
						HX_STACK_LINE(217)
						bool tmp44 = _this->ignore_listeners;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(217)
						bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(217)
						tmp43 = !(tmp45);
					}
					else{
						HX_STACK_LINE(217)
						tmp43 = false;
					}
					HX_STACK_LINE(217)
					if ((tmp43)){
						HX_STACK_LINE(217)
						Float tmp44 = _this->z;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(217)
						_this->listen_z(tmp44);
					}
					HX_STACK_LINE(217)
					_this;
				}
				HX_STACK_LINE(217)
				_this;
			}
		}
		HX_STACK_LINE(217)
		Dynamic tmp17 = this->listen_x_dyn();		HX_STACK_VAR(tmp17,"tmp17");
		HX_STACK_LINE(217)
		bool tmp18 = (tmp17 != null());		HX_STACK_VAR(tmp18,"tmp18");
		HX_STACK_LINE(217)
		bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
		HX_STACK_LINE(217)
		if ((tmp18)){
			HX_STACK_LINE(217)
			bool tmp20 = this->ignore_listeners;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(217)
			bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(217)
			bool tmp22 = tmp21;		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(217)
			tmp19 = !(tmp22);
		}
		else{
			HX_STACK_LINE(217)
			tmp19 = false;
		}
		HX_STACK_LINE(217)
		if ((tmp19)){
			HX_STACK_LINE(217)
			Float tmp20 = this->x;		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(217)
			this->listen_x(tmp20);
		}
		HX_STACK_LINE(217)
		Dynamic tmp20 = this->listen_y_dyn();		HX_STACK_VAR(tmp20,"tmp20");
		HX_STACK_LINE(217)
		bool tmp21 = (tmp20 != null());		HX_STACK_VAR(tmp21,"tmp21");
		HX_STACK_LINE(217)
		bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
		HX_STACK_LINE(217)
		if ((tmp21)){
			HX_STACK_LINE(217)
			bool tmp23 = this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(217)
			bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(217)
			bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(217)
			tmp22 = !(tmp25);
		}
		else{
			HX_STACK_LINE(217)
			tmp22 = false;
		}
		HX_STACK_LINE(217)
		if ((tmp22)){
			HX_STACK_LINE(217)
			Float tmp23 = this->y;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(217)
			this->listen_y(tmp23);
		}
		HX_STACK_LINE(217)
		Dynamic tmp23 = this->listen_z_dyn();		HX_STACK_VAR(tmp23,"tmp23");
		HX_STACK_LINE(217)
		bool tmp24 = (tmp23 != null());		HX_STACK_VAR(tmp24,"tmp24");
		HX_STACK_LINE(217)
		bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
		HX_STACK_LINE(217)
		if ((tmp24)){
			HX_STACK_LINE(217)
			bool tmp26 = this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(217)
			bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(217)
			bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(217)
			tmp25 = !(tmp28);
		}
		else{
			HX_STACK_LINE(217)
			tmp25 = false;
		}
		HX_STACK_LINE(217)
		if ((tmp25)){
			HX_STACK_LINE(217)
			Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(217)
			this->listen_z(tmp26);
		}
		HX_STACK_LINE(217)
		Dynamic tmp26 = this->listen_w_dyn();		HX_STACK_VAR(tmp26,"tmp26");
		HX_STACK_LINE(217)
		bool tmp27 = (tmp26 != null());		HX_STACK_VAR(tmp27,"tmp27");
		HX_STACK_LINE(217)
		bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
		HX_STACK_LINE(217)
		if ((tmp27)){
			HX_STACK_LINE(217)
			bool tmp29 = this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(217)
			bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(217)
			bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(217)
			tmp28 = !(tmp31);
		}
		else{
			HX_STACK_LINE(217)
			tmp28 = false;
		}
		HX_STACK_LINE(217)
		if ((tmp28)){
			HX_STACK_LINE(217)
			Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(217)
			this->listen_w(tmp29);
		}
	}
	HX_STACK_LINE(219)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,setFromRotationMatrix,return )

::phoenix::Quaternion Quaternion_obj::inverse( ){
	HX_STACK_FRAME("phoenix.Quaternion","inverse",0x883005ff,"phoenix.Quaternion.inverse","phoenix/Quaternion.hx",224,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(226)
	::phoenix::Quaternion tmp = this->conjugate();		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(226)
	::phoenix::Quaternion tmp1 = tmp->normalize();		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(226)
	return tmp1;
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,inverse,return )

::phoenix::Quaternion Quaternion_obj::conjugate( ){
	HX_STACK_FRAME("phoenix.Quaternion","conjugate",0xa5a66227,"phoenix.Quaternion.conjugate","phoenix/Quaternion.hx",231,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(233)
	{
		HX_STACK_LINE(233)
		this->ignore_euler = true;
		HX_STACK_LINE(233)
		{
			HX_STACK_LINE(233)
			Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(233)
			Float tmp1 = (tmp * (int)-1);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(233)
			this->x = tmp1;
			HX_STACK_LINE(233)
			bool tmp2 = this->_construct;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(233)
			if ((tmp2)){
				HX_STACK_LINE(233)
				this->x;
			}
			else{
				HX_STACK_LINE(233)
				{
					HX_STACK_LINE(233)
					::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(233)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(233)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(233)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(233)
					if ((tmp6)){
						HX_STACK_LINE(233)
						tmp7 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(233)
						tmp7 = true;
					}
					HX_STACK_LINE(233)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(233)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(233)
					if ((tmp8)){
						HX_STACK_LINE(233)
						tmp9 = this->_construct;
					}
					else{
						HX_STACK_LINE(233)
						tmp9 = true;
					}
					HX_STACK_LINE(233)
					if ((tmp9)){
						HX_STACK_LINE(233)
						Dynamic();
					}
					else{
						HX_STACK_LINE(233)
						::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(233)
						::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(233)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(233)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(233)
						Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(233)
						Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(233)
						Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(233)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(233)
						Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(233)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(233)
						Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(233)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(233)
						Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(233)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(233)
						Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(233)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(233)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(233)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(233)
						Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(233)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(233)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(233)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(233)
						bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(233)
						if ((tmp23)){
							HX_STACK_LINE(233)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(233)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(233)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(233)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(233)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(233)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(233)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(233)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(233)
							_x = tmp37;
							HX_STACK_LINE(233)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(233)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(233)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(233)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(233)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(233)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(233)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(233)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(233)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(233)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(233)
								if ((tmp47)){
									HX_STACK_LINE(233)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(233)
									if ((tmp48)){
										HX_STACK_LINE(233)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(233)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(233)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(233)
							_y = tmp39;
							HX_STACK_LINE(233)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(233)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(233)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(233)
							Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(233)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(233)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(233)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(233)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(233)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(233)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(233)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(233)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(233)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(233)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(233)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							if ((tmp24)){
								HX_STACK_LINE(233)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								{
									HX_STACK_LINE(233)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(233)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(233)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(233)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(233)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(233)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(233)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(233)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(233)
									if ((tmp34)){
										HX_STACK_LINE(233)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(233)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										if ((tmp35)){
											HX_STACK_LINE(233)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(233)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(233)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								_x = tmp26;
								HX_STACK_LINE(233)
								Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(233)
								Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(233)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(233)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(233)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(233)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(233)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(233)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(233)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(233)
								_y = tmp40;
								HX_STACK_LINE(233)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(233)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(233)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(233)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(233)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(233)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(233)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(233)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(233)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(233)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(233)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(233)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(233)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(233)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(233)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(233)
								bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								if ((tmp25)){
									HX_STACK_LINE(233)
									Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									{
										HX_STACK_LINE(233)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(233)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(233)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(233)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(233)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(233)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(233)
										Float value = tmp34;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(233)
										bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										if ((tmp35)){
											HX_STACK_LINE(233)
											tmp26 = (int)-1;
										}
										else{
											HX_STACK_LINE(233)
											bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(233)
											if ((tmp36)){
												HX_STACK_LINE(233)
												tmp26 = (int)1;
											}
											else{
												HX_STACK_LINE(233)
												tmp26 = value;
											}
										}
									}
									HX_STACK_LINE(233)
									Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(233)
									_x = tmp27;
									HX_STACK_LINE(233)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(233)
									Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(233)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(233)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(233)
									Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(233)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(233)
									Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(233)
									Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(233)
									Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(233)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(233)
									Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(233)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(233)
									Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(233)
									_y = tmp41;
									HX_STACK_LINE(233)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(233)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(233)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(233)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(233)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(233)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(233)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(233)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(233)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(233)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(233)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(233)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(233)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(233)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(233)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(233)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(233)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(233)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(233)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(233)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(233)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(233)
										Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(233)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(233)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(233)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(233)
										_x = tmp40;
										HX_STACK_LINE(233)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(233)
										{
											HX_STACK_LINE(233)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(233)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(233)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(233)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(233)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(233)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(233)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(233)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(233)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(233)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(233)
											if ((tmp50)){
												HX_STACK_LINE(233)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(233)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(233)
												if ((tmp51)){
													HX_STACK_LINE(233)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(233)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(233)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(233)
										_y = tmp42;
										HX_STACK_LINE(233)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(233)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(233)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(233)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(233)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(233)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(233)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(233)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(233)
										Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(233)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(233)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(233)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(233)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(233)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(233)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(233)
										bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										if ((tmp27)){
											HX_STACK_LINE(233)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(233)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(233)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(233)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(233)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(233)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(233)
											Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(233)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(233)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(233)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(233)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(233)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(233)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(233)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(233)
											_x = tmp41;
											HX_STACK_LINE(233)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(233)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(233)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(233)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(233)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(233)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(233)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(233)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(233)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(233)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(233)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(233)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(233)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(233)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(233)
											_y = tmp55;
											HX_STACK_LINE(233)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(233)
											{
												HX_STACK_LINE(233)
												Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(233)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(233)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(233)
												Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(233)
												Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(233)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(233)
												Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(233)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(233)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(233)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(233)
												if ((tmp65)){
													HX_STACK_LINE(233)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(233)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(233)
													if ((tmp66)){
														HX_STACK_LINE(233)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(233)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(233)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(233)
											_z = tmp57;
										}
										else{
											HX_STACK_LINE(233)
											bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(233)
											if ((tmp28)){
												HX_STACK_LINE(233)
												Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(233)
												Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(233)
												Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(233)
												Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(233)
												Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(233)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(233)
												Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(233)
												Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(233)
												Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(233)
												Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(233)
												Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(233)
												Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(233)
												Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(233)
												Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(233)
												_x = tmp42;
												HX_STACK_LINE(233)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(233)
												Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(233)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(233)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(233)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(233)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(233)
												Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(233)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(233)
												Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(233)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(233)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(233)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(233)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(233)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(233)
												_y = tmp56;
												HX_STACK_LINE(233)
												Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(233)
												{
													HX_STACK_LINE(233)
													Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(233)
													Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(233)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(233)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(233)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(233)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(233)
													Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(233)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(233)
													Float value = tmp65;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(233)
													bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(233)
													if ((tmp66)){
														HX_STACK_LINE(233)
														tmp57 = (int)-1;
													}
													else{
														HX_STACK_LINE(233)
														bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(233)
														if ((tmp67)){
															HX_STACK_LINE(233)
															tmp57 = (int)1;
														}
														else{
															HX_STACK_LINE(233)
															tmp57 = value;
														}
													}
												}
												HX_STACK_LINE(233)
												Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(233)
												_z = tmp58;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(233)
						{
							HX_STACK_LINE(233)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(233)
							_this->ignore_listeners = true;
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->x = _x;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->x;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_x(tmp27);
									}
									HX_STACK_LINE(233)
									_this->x;
								}
							}
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->y = _y;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->y;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_y(tmp27);
									}
									HX_STACK_LINE(233)
									_this->y;
								}
							}
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->z = _z;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->z;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_z(tmp27);
									}
									HX_STACK_LINE(233)
									_this->z;
								}
							}
							HX_STACK_LINE(233)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(233)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							if ((tmp24)){
								HX_STACK_LINE(233)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(233)
								tmp25 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp25)){
								HX_STACK_LINE(233)
								Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(233)
							bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							if ((tmp26)){
								HX_STACK_LINE(233)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(233)
								tmp27 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp27)){
								HX_STACK_LINE(233)
								Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								_this->listen_y(tmp28);
							}
							HX_STACK_LINE(233)
							bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							if ((tmp28)){
								HX_STACK_LINE(233)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(233)
								tmp29 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp29)){
								HX_STACK_LINE(233)
								Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								_this->listen_z(tmp30);
							}
							HX_STACK_LINE(233)
							_this;
						}
						HX_STACK_LINE(233)
						_this;
					}
				}
				HX_STACK_LINE(233)
				Dynamic tmp3 = this->listen_x_dyn();		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(233)
				bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(233)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(233)
				if ((tmp4)){
					HX_STACK_LINE(233)
					bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(233)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(233)
					tmp5 = !(tmp8);
				}
				else{
					HX_STACK_LINE(233)
					tmp5 = false;
				}
				HX_STACK_LINE(233)
				if ((tmp5)){
					HX_STACK_LINE(233)
					Float tmp6 = this->x;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					this->listen_x(tmp6);
				}
				HX_STACK_LINE(233)
				this->x;
			}
		}
		HX_STACK_LINE(233)
		{
			HX_STACK_LINE(233)
			Float tmp = this->y;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(233)
			Float tmp1 = (tmp * (int)-1);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(233)
			this->y = tmp1;
			HX_STACK_LINE(233)
			bool tmp2 = this->_construct;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(233)
			if ((tmp2)){
				HX_STACK_LINE(233)
				this->y;
			}
			else{
				HX_STACK_LINE(233)
				{
					HX_STACK_LINE(233)
					::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(233)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(233)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(233)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(233)
					if ((tmp6)){
						HX_STACK_LINE(233)
						tmp7 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(233)
						tmp7 = true;
					}
					HX_STACK_LINE(233)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(233)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(233)
					if ((tmp8)){
						HX_STACK_LINE(233)
						tmp9 = this->_construct;
					}
					else{
						HX_STACK_LINE(233)
						tmp9 = true;
					}
					HX_STACK_LINE(233)
					if ((tmp9)){
						HX_STACK_LINE(233)
						Dynamic();
					}
					else{
						HX_STACK_LINE(233)
						::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(233)
						::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(233)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(233)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(233)
						Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(233)
						Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(233)
						Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(233)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(233)
						Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(233)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(233)
						Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(233)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(233)
						Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(233)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(233)
						Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(233)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(233)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(233)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(233)
						Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(233)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(233)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(233)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(233)
						bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(233)
						if ((tmp23)){
							HX_STACK_LINE(233)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(233)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(233)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(233)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(233)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(233)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(233)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(233)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(233)
							_x = tmp37;
							HX_STACK_LINE(233)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(233)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(233)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(233)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(233)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(233)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(233)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(233)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(233)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(233)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(233)
								if ((tmp47)){
									HX_STACK_LINE(233)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(233)
									if ((tmp48)){
										HX_STACK_LINE(233)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(233)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(233)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(233)
							_y = tmp39;
							HX_STACK_LINE(233)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(233)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(233)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(233)
							Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(233)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(233)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(233)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(233)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(233)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(233)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(233)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(233)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(233)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(233)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(233)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							if ((tmp24)){
								HX_STACK_LINE(233)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								{
									HX_STACK_LINE(233)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(233)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(233)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(233)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(233)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(233)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(233)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(233)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(233)
									if ((tmp34)){
										HX_STACK_LINE(233)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(233)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										if ((tmp35)){
											HX_STACK_LINE(233)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(233)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(233)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								_x = tmp26;
								HX_STACK_LINE(233)
								Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(233)
								Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(233)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(233)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(233)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(233)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(233)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(233)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(233)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(233)
								_y = tmp40;
								HX_STACK_LINE(233)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(233)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(233)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(233)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(233)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(233)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(233)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(233)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(233)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(233)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(233)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(233)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(233)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(233)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(233)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(233)
								bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								if ((tmp25)){
									HX_STACK_LINE(233)
									Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									{
										HX_STACK_LINE(233)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(233)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(233)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(233)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(233)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(233)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(233)
										Float value = tmp34;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(233)
										bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										if ((tmp35)){
											HX_STACK_LINE(233)
											tmp26 = (int)-1;
										}
										else{
											HX_STACK_LINE(233)
											bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(233)
											if ((tmp36)){
												HX_STACK_LINE(233)
												tmp26 = (int)1;
											}
											else{
												HX_STACK_LINE(233)
												tmp26 = value;
											}
										}
									}
									HX_STACK_LINE(233)
									Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(233)
									_x = tmp27;
									HX_STACK_LINE(233)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(233)
									Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(233)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(233)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(233)
									Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(233)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(233)
									Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(233)
									Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(233)
									Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(233)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(233)
									Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(233)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(233)
									Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(233)
									_y = tmp41;
									HX_STACK_LINE(233)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(233)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(233)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(233)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(233)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(233)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(233)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(233)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(233)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(233)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(233)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(233)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(233)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(233)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(233)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(233)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(233)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(233)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(233)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(233)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(233)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(233)
										Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(233)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(233)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(233)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(233)
										_x = tmp40;
										HX_STACK_LINE(233)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(233)
										{
											HX_STACK_LINE(233)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(233)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(233)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(233)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(233)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(233)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(233)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(233)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(233)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(233)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(233)
											if ((tmp50)){
												HX_STACK_LINE(233)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(233)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(233)
												if ((tmp51)){
													HX_STACK_LINE(233)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(233)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(233)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(233)
										_y = tmp42;
										HX_STACK_LINE(233)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(233)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(233)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(233)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(233)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(233)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(233)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(233)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(233)
										Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(233)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(233)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(233)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(233)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(233)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(233)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(233)
										bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										if ((tmp27)){
											HX_STACK_LINE(233)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(233)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(233)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(233)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(233)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(233)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(233)
											Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(233)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(233)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(233)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(233)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(233)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(233)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(233)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(233)
											_x = tmp41;
											HX_STACK_LINE(233)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(233)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(233)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(233)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(233)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(233)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(233)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(233)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(233)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(233)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(233)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(233)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(233)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(233)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(233)
											_y = tmp55;
											HX_STACK_LINE(233)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(233)
											{
												HX_STACK_LINE(233)
												Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(233)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(233)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(233)
												Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(233)
												Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(233)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(233)
												Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(233)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(233)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(233)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(233)
												if ((tmp65)){
													HX_STACK_LINE(233)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(233)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(233)
													if ((tmp66)){
														HX_STACK_LINE(233)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(233)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(233)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(233)
											_z = tmp57;
										}
										else{
											HX_STACK_LINE(233)
											bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(233)
											if ((tmp28)){
												HX_STACK_LINE(233)
												Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(233)
												Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(233)
												Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(233)
												Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(233)
												Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(233)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(233)
												Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(233)
												Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(233)
												Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(233)
												Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(233)
												Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(233)
												Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(233)
												Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(233)
												Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(233)
												_x = tmp42;
												HX_STACK_LINE(233)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(233)
												Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(233)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(233)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(233)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(233)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(233)
												Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(233)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(233)
												Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(233)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(233)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(233)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(233)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(233)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(233)
												_y = tmp56;
												HX_STACK_LINE(233)
												Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(233)
												{
													HX_STACK_LINE(233)
													Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(233)
													Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(233)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(233)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(233)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(233)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(233)
													Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(233)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(233)
													Float value = tmp65;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(233)
													bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(233)
													if ((tmp66)){
														HX_STACK_LINE(233)
														tmp57 = (int)-1;
													}
													else{
														HX_STACK_LINE(233)
														bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(233)
														if ((tmp67)){
															HX_STACK_LINE(233)
															tmp57 = (int)1;
														}
														else{
															HX_STACK_LINE(233)
															tmp57 = value;
														}
													}
												}
												HX_STACK_LINE(233)
												Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(233)
												_z = tmp58;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(233)
						{
							HX_STACK_LINE(233)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(233)
							_this->ignore_listeners = true;
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->x = _x;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->x;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_x(tmp27);
									}
									HX_STACK_LINE(233)
									_this->x;
								}
							}
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->y = _y;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->y;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_y(tmp27);
									}
									HX_STACK_LINE(233)
									_this->y;
								}
							}
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->z = _z;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->z;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_z(tmp27);
									}
									HX_STACK_LINE(233)
									_this->z;
								}
							}
							HX_STACK_LINE(233)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(233)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							if ((tmp24)){
								HX_STACK_LINE(233)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(233)
								tmp25 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp25)){
								HX_STACK_LINE(233)
								Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(233)
							bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							if ((tmp26)){
								HX_STACK_LINE(233)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(233)
								tmp27 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp27)){
								HX_STACK_LINE(233)
								Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								_this->listen_y(tmp28);
							}
							HX_STACK_LINE(233)
							bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							if ((tmp28)){
								HX_STACK_LINE(233)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(233)
								tmp29 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp29)){
								HX_STACK_LINE(233)
								Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								_this->listen_z(tmp30);
							}
							HX_STACK_LINE(233)
							_this;
						}
						HX_STACK_LINE(233)
						_this;
					}
				}
				HX_STACK_LINE(233)
				Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(233)
				bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(233)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(233)
				if ((tmp4)){
					HX_STACK_LINE(233)
					bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(233)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(233)
					tmp5 = !(tmp8);
				}
				else{
					HX_STACK_LINE(233)
					tmp5 = false;
				}
				HX_STACK_LINE(233)
				if ((tmp5)){
					HX_STACK_LINE(233)
					Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					this->listen_y(tmp6);
				}
				HX_STACK_LINE(233)
				this->y;
			}
		}
		HX_STACK_LINE(233)
		{
			HX_STACK_LINE(233)
			Float tmp = this->z;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(233)
			Float tmp1 = (tmp * (int)-1);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(233)
			this->z = tmp1;
			HX_STACK_LINE(233)
			bool tmp2 = this->_construct;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(233)
			if ((tmp2)){
				HX_STACK_LINE(233)
				this->z;
			}
			else{
				HX_STACK_LINE(233)
				{
					HX_STACK_LINE(233)
					::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(233)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(233)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(233)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(233)
					if ((tmp6)){
						HX_STACK_LINE(233)
						tmp7 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(233)
						tmp7 = true;
					}
					HX_STACK_LINE(233)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(233)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(233)
					if ((tmp8)){
						HX_STACK_LINE(233)
						tmp9 = this->_construct;
					}
					else{
						HX_STACK_LINE(233)
						tmp9 = true;
					}
					HX_STACK_LINE(233)
					if ((tmp9)){
						HX_STACK_LINE(233)
						Dynamic();
					}
					else{
						HX_STACK_LINE(233)
						::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(233)
						::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(233)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(233)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(233)
						Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(233)
						Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(233)
						Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(233)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(233)
						Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(233)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(233)
						Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(233)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(233)
						Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(233)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(233)
						Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(233)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(233)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(233)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(233)
						Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(233)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(233)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(233)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(233)
						bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(233)
						if ((tmp23)){
							HX_STACK_LINE(233)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(233)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(233)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(233)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(233)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(233)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(233)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(233)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(233)
							_x = tmp37;
							HX_STACK_LINE(233)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(233)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(233)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(233)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(233)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(233)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(233)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(233)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(233)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(233)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(233)
								if ((tmp47)){
									HX_STACK_LINE(233)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(233)
									if ((tmp48)){
										HX_STACK_LINE(233)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(233)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(233)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(233)
							_y = tmp39;
							HX_STACK_LINE(233)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(233)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(233)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(233)
							Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(233)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(233)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(233)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(233)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(233)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(233)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(233)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(233)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(233)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(233)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(233)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							if ((tmp24)){
								HX_STACK_LINE(233)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								{
									HX_STACK_LINE(233)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(233)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(233)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(233)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(233)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(233)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(233)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(233)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(233)
									if ((tmp34)){
										HX_STACK_LINE(233)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(233)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										if ((tmp35)){
											HX_STACK_LINE(233)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(233)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(233)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								_x = tmp26;
								HX_STACK_LINE(233)
								Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(233)
								Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(233)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(233)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(233)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(233)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(233)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(233)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(233)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(233)
								_y = tmp40;
								HX_STACK_LINE(233)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(233)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(233)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(233)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(233)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(233)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(233)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(233)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(233)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(233)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(233)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(233)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(233)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(233)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(233)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(233)
								bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								if ((tmp25)){
									HX_STACK_LINE(233)
									Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									{
										HX_STACK_LINE(233)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(233)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(233)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(233)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(233)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(233)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(233)
										Float value = tmp34;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(233)
										bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										if ((tmp35)){
											HX_STACK_LINE(233)
											tmp26 = (int)-1;
										}
										else{
											HX_STACK_LINE(233)
											bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(233)
											if ((tmp36)){
												HX_STACK_LINE(233)
												tmp26 = (int)1;
											}
											else{
												HX_STACK_LINE(233)
												tmp26 = value;
											}
										}
									}
									HX_STACK_LINE(233)
									Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(233)
									_x = tmp27;
									HX_STACK_LINE(233)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(233)
									Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(233)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(233)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(233)
									Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(233)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(233)
									Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(233)
									Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(233)
									Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(233)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(233)
									Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(233)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(233)
									Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(233)
									_y = tmp41;
									HX_STACK_LINE(233)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(233)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(233)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(233)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(233)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(233)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(233)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(233)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(233)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(233)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(233)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(233)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(233)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(233)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(233)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(233)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(233)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(233)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(233)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(233)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(233)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(233)
										Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(233)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(233)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(233)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(233)
										_x = tmp40;
										HX_STACK_LINE(233)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(233)
										{
											HX_STACK_LINE(233)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(233)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(233)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(233)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(233)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(233)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(233)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(233)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(233)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(233)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(233)
											if ((tmp50)){
												HX_STACK_LINE(233)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(233)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(233)
												if ((tmp51)){
													HX_STACK_LINE(233)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(233)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(233)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(233)
										_y = tmp42;
										HX_STACK_LINE(233)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(233)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(233)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(233)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(233)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(233)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(233)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(233)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(233)
										Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(233)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(233)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(233)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(233)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(233)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(233)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(233)
										bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										if ((tmp27)){
											HX_STACK_LINE(233)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(233)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(233)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(233)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(233)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(233)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(233)
											Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(233)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(233)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(233)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(233)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(233)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(233)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(233)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(233)
											_x = tmp41;
											HX_STACK_LINE(233)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(233)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(233)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(233)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(233)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(233)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(233)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(233)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(233)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(233)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(233)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(233)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(233)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(233)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(233)
											_y = tmp55;
											HX_STACK_LINE(233)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(233)
											{
												HX_STACK_LINE(233)
												Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(233)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(233)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(233)
												Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(233)
												Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(233)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(233)
												Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(233)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(233)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(233)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(233)
												if ((tmp65)){
													HX_STACK_LINE(233)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(233)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(233)
													if ((tmp66)){
														HX_STACK_LINE(233)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(233)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(233)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(233)
											_z = tmp57;
										}
										else{
											HX_STACK_LINE(233)
											bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(233)
											if ((tmp28)){
												HX_STACK_LINE(233)
												Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(233)
												Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(233)
												Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(233)
												Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(233)
												Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(233)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(233)
												Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(233)
												Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(233)
												Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(233)
												Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(233)
												Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(233)
												Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(233)
												Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(233)
												Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(233)
												_x = tmp42;
												HX_STACK_LINE(233)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(233)
												Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(233)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(233)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(233)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(233)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(233)
												Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(233)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(233)
												Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(233)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(233)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(233)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(233)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(233)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(233)
												_y = tmp56;
												HX_STACK_LINE(233)
												Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(233)
												{
													HX_STACK_LINE(233)
													Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(233)
													Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(233)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(233)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(233)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(233)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(233)
													Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(233)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(233)
													Float value = tmp65;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(233)
													bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(233)
													if ((tmp66)){
														HX_STACK_LINE(233)
														tmp57 = (int)-1;
													}
													else{
														HX_STACK_LINE(233)
														bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(233)
														if ((tmp67)){
															HX_STACK_LINE(233)
															tmp57 = (int)1;
														}
														else{
															HX_STACK_LINE(233)
															tmp57 = value;
														}
													}
												}
												HX_STACK_LINE(233)
												Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(233)
												_z = tmp58;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(233)
						{
							HX_STACK_LINE(233)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(233)
							_this->ignore_listeners = true;
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->x = _x;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->x;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_x(tmp27);
									}
									HX_STACK_LINE(233)
									_this->x;
								}
							}
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->y = _y;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->y;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_y(tmp27);
									}
									HX_STACK_LINE(233)
									_this->y;
								}
							}
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								_this->z = _z;
								HX_STACK_LINE(233)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									_this->z;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(233)
										tmp26 = false;
									}
									HX_STACK_LINE(233)
									if ((tmp26)){
										HX_STACK_LINE(233)
										Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										_this->listen_z(tmp27);
									}
									HX_STACK_LINE(233)
									_this->z;
								}
							}
							HX_STACK_LINE(233)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(233)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							if ((tmp24)){
								HX_STACK_LINE(233)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(233)
								tmp25 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp25)){
								HX_STACK_LINE(233)
								Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(233)
							bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							if ((tmp26)){
								HX_STACK_LINE(233)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(233)
								tmp27 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp27)){
								HX_STACK_LINE(233)
								Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								_this->listen_y(tmp28);
							}
							HX_STACK_LINE(233)
							bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							if ((tmp28)){
								HX_STACK_LINE(233)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(233)
								tmp29 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp29)){
								HX_STACK_LINE(233)
								Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								_this->listen_z(tmp30);
							}
							HX_STACK_LINE(233)
							_this;
						}
						HX_STACK_LINE(233)
						_this;
					}
				}
				HX_STACK_LINE(233)
				Dynamic tmp3 = this->listen_z_dyn();		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(233)
				bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(233)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(233)
				if ((tmp4)){
					HX_STACK_LINE(233)
					bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(233)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(233)
					tmp5 = !(tmp8);
				}
				else{
					HX_STACK_LINE(233)
					tmp5 = false;
				}
				HX_STACK_LINE(233)
				if ((tmp5)){
					HX_STACK_LINE(233)
					Float tmp6 = this->z;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(233)
					this->listen_z(tmp6);
				}
				HX_STACK_LINE(233)
				this->z;
			}
		}
		HX_STACK_LINE(233)
		this->ignore_euler = false;
		HX_STACK_LINE(233)
		{
			HX_STACK_LINE(233)
			::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(233)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(233)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(233)
			bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(233)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(233)
			if ((tmp3)){
				HX_STACK_LINE(233)
				tmp4 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(233)
				tmp4 = true;
			}
			HX_STACK_LINE(233)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(233)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(233)
			if ((tmp5)){
				HX_STACK_LINE(233)
				tmp6 = this->_construct;
			}
			else{
				HX_STACK_LINE(233)
				tmp6 = true;
			}
			HX_STACK_LINE(233)
			if ((tmp6)){
				HX_STACK_LINE(233)
				Dynamic();
			}
			else{
				HX_STACK_LINE(233)
				::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(233)
				::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(233)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(233)
				Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(233)
				Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(233)
				Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(233)
				Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(233)
				Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(233)
				Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(233)
				Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(233)
				Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(233)
				Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(233)
				Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(233)
				Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(233)
				Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(233)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(233)
				Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(233)
				Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(233)
				Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(233)
				Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
				HX_STACK_LINE(233)
				Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
				HX_STACK_LINE(233)
				Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
				HX_STACK_LINE(233)
				bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(233)
				if ((tmp20)){
					HX_STACK_LINE(233)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(233)
					Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(233)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(233)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(233)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(233)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(233)
					Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(233)
					Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(233)
					Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(233)
					Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(233)
					Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(233)
					Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(233)
					Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(233)
					Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(233)
					_x = tmp34;
					HX_STACK_LINE(233)
					Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(233)
					{
						HX_STACK_LINE(233)
						Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(233)
						Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(233)
						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(233)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(233)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(233)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(233)
						Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(233)
						Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(233)
						Float value = tmp43;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(233)
						bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(233)
						if ((tmp44)){
							HX_STACK_LINE(233)
							tmp35 = (int)-1;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(233)
							if ((tmp45)){
								HX_STACK_LINE(233)
								tmp35 = (int)1;
							}
							else{
								HX_STACK_LINE(233)
								tmp35 = value;
							}
						}
					}
					HX_STACK_LINE(233)
					Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(233)
					_y = tmp36;
					HX_STACK_LINE(233)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(233)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(233)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(233)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(233)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(233)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(233)
					Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(233)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(233)
					Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(233)
					Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(233)
					Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(233)
					Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(233)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(233)
					Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(233)
					_z = tmp50;
				}
				else{
					HX_STACK_LINE(233)
					bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(233)
					if ((tmp21)){
						HX_STACK_LINE(233)
						Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(233)
						{
							HX_STACK_LINE(233)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(233)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(233)
							Float value = tmp30;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(233)
							bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(233)
							if ((tmp31)){
								HX_STACK_LINE(233)
								tmp22 = (int)-1;
							}
							else{
								HX_STACK_LINE(233)
								bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(233)
								if ((tmp32)){
									HX_STACK_LINE(233)
									tmp22 = (int)1;
								}
								else{
									HX_STACK_LINE(233)
									tmp22 = value;
								}
							}
						}
						HX_STACK_LINE(233)
						Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(233)
						_x = tmp23;
						HX_STACK_LINE(233)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(233)
						Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(233)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(233)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(233)
						Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(233)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(233)
						Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(233)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(233)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(233)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(233)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(233)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(233)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(233)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(233)
						_y = tmp37;
						HX_STACK_LINE(233)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(233)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(233)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(233)
						Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(233)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(233)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(233)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(233)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(233)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(233)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(233)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(233)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(233)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(233)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(233)
						_z = tmp51;
					}
					else{
						HX_STACK_LINE(233)
						bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(233)
						if ((tmp22)){
							HX_STACK_LINE(233)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(233)
							{
								HX_STACK_LINE(233)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(233)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(233)
								if ((tmp32)){
									HX_STACK_LINE(233)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									if ((tmp33)){
										HX_STACK_LINE(233)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(233)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(233)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(233)
							_x = tmp24;
							HX_STACK_LINE(233)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(233)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(233)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(233)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(233)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(233)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(233)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(233)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(233)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(233)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(233)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(233)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(233)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(233)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(233)
							_y = tmp38;
							HX_STACK_LINE(233)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(233)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(233)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(233)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(233)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(233)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(233)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(233)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(233)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(233)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(233)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(233)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(233)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(233)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(233)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(233)
							if ((tmp23)){
								HX_STACK_LINE(233)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(233)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(233)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(233)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(233)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(233)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(233)
								Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(233)
								Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(233)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(233)
								Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(233)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(233)
								Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(233)
								_x = tmp37;
								HX_STACK_LINE(233)
								Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(233)
								{
									HX_STACK_LINE(233)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(233)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(233)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(233)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(233)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(233)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(233)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(233)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(233)
									Float value = tmp46;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(233)
									bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(233)
									if ((tmp47)){
										HX_STACK_LINE(233)
										tmp38 = (int)-1;
									}
									else{
										HX_STACK_LINE(233)
										bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(233)
										if ((tmp48)){
											HX_STACK_LINE(233)
											tmp38 = (int)1;
										}
										else{
											HX_STACK_LINE(233)
											tmp38 = value;
										}
									}
								}
								HX_STACK_LINE(233)
								Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(233)
								_y = tmp39;
								HX_STACK_LINE(233)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(233)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(233)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(233)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(233)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(233)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(233)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(233)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(233)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(233)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(233)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(233)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(233)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(233)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(233)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(233)
								bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								if ((tmp24)){
									HX_STACK_LINE(233)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(233)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(233)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(233)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(233)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(233)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(233)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(233)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(233)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(233)
									Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(233)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(233)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(233)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(233)
									_x = tmp38;
									HX_STACK_LINE(233)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(233)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(233)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(233)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(233)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(233)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(233)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(233)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(233)
									Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(233)
									Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(233)
									Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(233)
									Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(233)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(233)
									Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(233)
									_y = tmp52;
									HX_STACK_LINE(233)
									Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(233)
									{
										HX_STACK_LINE(233)
										Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(233)
										Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(233)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(233)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(233)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(233)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(233)
										Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(233)
										Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(233)
										Float value = tmp61;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(233)
										bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(233)
										if ((tmp62)){
											HX_STACK_LINE(233)
											tmp53 = (int)-1;
										}
										else{
											HX_STACK_LINE(233)
											bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(233)
											if ((tmp63)){
												HX_STACK_LINE(233)
												tmp53 = (int)1;
											}
											else{
												HX_STACK_LINE(233)
												tmp53 = value;
											}
										}
									}
									HX_STACK_LINE(233)
									Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(233)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(233)
									bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(233)
									if ((tmp25)){
										HX_STACK_LINE(233)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(233)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(233)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(233)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(233)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(233)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(233)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(233)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(233)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(233)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(233)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(233)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(233)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(233)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(233)
										_x = tmp39;
										HX_STACK_LINE(233)
										Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(233)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(233)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(233)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(233)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(233)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(233)
										Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(233)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(233)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(233)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(233)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(233)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(233)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(233)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(233)
										_y = tmp53;
										HX_STACK_LINE(233)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(233)
										{
											HX_STACK_LINE(233)
											Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(233)
											Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(233)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(233)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(233)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(233)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(233)
											Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(233)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(233)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(233)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(233)
											if ((tmp63)){
												HX_STACK_LINE(233)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(233)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(233)
												if ((tmp64)){
													HX_STACK_LINE(233)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(233)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(233)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(233)
										_z = tmp55;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(233)
				{
					HX_STACK_LINE(233)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(233)
					_this->ignore_listeners = true;
					HX_STACK_LINE(233)
					{
						HX_STACK_LINE(233)
						_this->x = _x;
						HX_STACK_LINE(233)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(233)
						if ((tmp21)){
							HX_STACK_LINE(233)
							_this->x;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(233)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(233)
							if ((tmp22)){
								HX_STACK_LINE(233)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(233)
								tmp23 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp23)){
								HX_STACK_LINE(233)
								Float tmp24 = _x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(233)
							_this->x;
						}
					}
					HX_STACK_LINE(233)
					{
						HX_STACK_LINE(233)
						_this->y = _y;
						HX_STACK_LINE(233)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(233)
						if ((tmp21)){
							HX_STACK_LINE(233)
							_this->y;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(233)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(233)
							if ((tmp22)){
								HX_STACK_LINE(233)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(233)
								tmp23 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp23)){
								HX_STACK_LINE(233)
								Float tmp24 = _y;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								_this->listen_y(tmp24);
							}
							HX_STACK_LINE(233)
							_this->y;
						}
					}
					HX_STACK_LINE(233)
					{
						HX_STACK_LINE(233)
						_this->z = _z;
						HX_STACK_LINE(233)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(233)
						if ((tmp21)){
							HX_STACK_LINE(233)
							_this->z;
						}
						else{
							HX_STACK_LINE(233)
							bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(233)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(233)
							if ((tmp22)){
								HX_STACK_LINE(233)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(233)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(233)
								tmp23 = false;
							}
							HX_STACK_LINE(233)
							if ((tmp23)){
								HX_STACK_LINE(233)
								Float tmp24 = _z;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(233)
								_this->listen_z(tmp24);
							}
							HX_STACK_LINE(233)
							_this->z;
						}
					}
					HX_STACK_LINE(233)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(233)
					bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(233)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(233)
					if ((tmp21)){
						HX_STACK_LINE(233)
						bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(233)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(233)
						tmp22 = !(tmp24);
					}
					else{
						HX_STACK_LINE(233)
						tmp22 = false;
					}
					HX_STACK_LINE(233)
					if ((tmp22)){
						HX_STACK_LINE(233)
						Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(233)
						_this->listen_x(tmp23);
					}
					HX_STACK_LINE(233)
					bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(233)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(233)
					if ((tmp23)){
						HX_STACK_LINE(233)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(233)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(233)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(233)
						tmp24 = false;
					}
					HX_STACK_LINE(233)
					if ((tmp24)){
						HX_STACK_LINE(233)
						Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(233)
						_this->listen_y(tmp25);
					}
					HX_STACK_LINE(233)
					bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(233)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(233)
					if ((tmp25)){
						HX_STACK_LINE(233)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(233)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(233)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(233)
						tmp26 = false;
					}
					HX_STACK_LINE(233)
					if ((tmp26)){
						HX_STACK_LINE(233)
						Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(233)
						_this->listen_z(tmp27);
					}
					HX_STACK_LINE(233)
					_this;
				}
				HX_STACK_LINE(233)
				_this;
			}
		}
		HX_STACK_LINE(233)
		Dynamic tmp = this->listen_x_dyn();		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(233)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(233)
		bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(233)
		if ((tmp1)){
			HX_STACK_LINE(233)
			bool tmp3 = this->ignore_listeners;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(233)
			bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(233)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(233)
			tmp2 = !(tmp5);
		}
		else{
			HX_STACK_LINE(233)
			tmp2 = false;
		}
		HX_STACK_LINE(233)
		if ((tmp2)){
			HX_STACK_LINE(233)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(233)
			this->listen_x(tmp3);
		}
		HX_STACK_LINE(233)
		Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(233)
		bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(233)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(233)
		if ((tmp4)){
			HX_STACK_LINE(233)
			bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(233)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(233)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(233)
			tmp5 = !(tmp8);
		}
		else{
			HX_STACK_LINE(233)
			tmp5 = false;
		}
		HX_STACK_LINE(233)
		if ((tmp5)){
			HX_STACK_LINE(233)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(233)
			this->listen_y(tmp6);
		}
		HX_STACK_LINE(233)
		Dynamic tmp6 = this->listen_z_dyn();		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(233)
		bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(233)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(233)
		if ((tmp7)){
			HX_STACK_LINE(233)
			bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(233)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(233)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(233)
			tmp8 = !(tmp11);
		}
		else{
			HX_STACK_LINE(233)
			tmp8 = false;
		}
		HX_STACK_LINE(233)
		if ((tmp8)){
			HX_STACK_LINE(233)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(233)
			this->listen_z(tmp9);
		}
	}
	HX_STACK_LINE(235)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,conjugate,return )

Float Quaternion_obj::lengthSq( ){
	HX_STACK_FRAME("phoenix.Quaternion","lengthSq",0xcc67adf5,"phoenix.Quaternion.lengthSq","phoenix/Quaternion.hx",240,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(242)
	Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(242)
	Float tmp1 = this->x;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(242)
	Float tmp2 = (tmp * tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(242)
	Float tmp3 = this->y;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(242)
	Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(242)
	Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(242)
	Float tmp6 = (tmp2 + tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(242)
	Float tmp7 = this->z;		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(242)
	Float tmp8 = this->z;		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(242)
	Float tmp9 = (tmp7 * tmp8);		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(242)
	Float tmp10 = (tmp6 + tmp9);		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(242)
	Float tmp11 = this->w;		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(242)
	Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(242)
	Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(242)
	Float tmp14 = (tmp10 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(242)
	return tmp14;
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,lengthSq,return )

Float Quaternion_obj::length( ){
	HX_STACK_FRAME("phoenix.Quaternion","length",0xc664d977,"phoenix.Quaternion.length","phoenix/Quaternion.hx",247,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(249)
	Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(249)
	Float tmp1 = this->x;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(249)
	Float tmp2 = (tmp * tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(249)
	Float tmp3 = this->y;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(249)
	Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(249)
	Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(249)
	Float tmp6 = (tmp2 + tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(249)
	Float tmp7 = this->z;		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(249)
	Float tmp8 = this->z;		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(249)
	Float tmp9 = (tmp7 * tmp8);		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(249)
	Float tmp10 = (tmp6 + tmp9);		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(249)
	Float tmp11 = this->w;		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(249)
	Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(249)
	Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(249)
	Float tmp14 = (tmp10 + tmp13);		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(249)
	Float tmp15 = ::Math_obj::sqrt(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(249)
	return tmp15;
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,length,return )

::phoenix::Quaternion Quaternion_obj::normalize( ){
	HX_STACK_FRAME("phoenix.Quaternion","normalize",0x0ebe639c,"phoenix.Quaternion.normalize","phoenix/Quaternion.hx",254,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(256)
	Float tmp = this->length();		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(256)
	Float l = tmp;		HX_STACK_VAR(l,"l");
	HX_STACK_LINE(258)
	bool tmp1 = (l == (int)0);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(258)
	if ((tmp1)){
		HX_STACK_LINE(260)
		this->ignore_euler = true;
		HX_STACK_LINE(260)
		{
			HX_STACK_LINE(260)
			this->x = (int)0;
			HX_STACK_LINE(260)
			bool tmp2 = this->_construct;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(260)
			if ((tmp2)){
				HX_STACK_LINE(260)
				this->x;
			}
			else{
				HX_STACK_LINE(260)
				{
					HX_STACK_LINE(260)
					::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(260)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(260)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(260)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					if ((tmp6)){
						HX_STACK_LINE(260)
						tmp7 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(260)
						tmp7 = true;
					}
					HX_STACK_LINE(260)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(260)
					if ((tmp8)){
						HX_STACK_LINE(260)
						tmp9 = this->_construct;
					}
					else{
						HX_STACK_LINE(260)
						tmp9 = true;
					}
					HX_STACK_LINE(260)
					if ((tmp9)){
						HX_STACK_LINE(260)
						Dynamic();
					}
					else{
						HX_STACK_LINE(260)
						::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(260)
						::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(260)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(260)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(260)
						Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(260)
						Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(260)
						Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(260)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(260)
						Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(260)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(260)
						Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(260)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(260)
						Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(260)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(260)
						Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(260)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(260)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(260)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(260)
						Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(260)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(260)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(260)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(260)
						bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(260)
						if ((tmp23)){
							HX_STACK_LINE(260)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(260)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(260)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(260)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(260)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(260)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(260)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(260)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(260)
							_x = tmp37;
							HX_STACK_LINE(260)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(260)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								if ((tmp47)){
									HX_STACK_LINE(260)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									if ((tmp48)){
										HX_STACK_LINE(260)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(260)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(260)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(260)
							_y = tmp39;
							HX_STACK_LINE(260)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(260)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(260)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(260)
							Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(260)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(260)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(260)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(260)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(260)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(260)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(260)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(260)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(260)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(260)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(260)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								{
									HX_STACK_LINE(260)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(260)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									if ((tmp34)){
										HX_STACK_LINE(260)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(260)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(260)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_x = tmp26;
								HX_STACK_LINE(260)
								Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(260)
								Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(260)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(260)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(260)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(260)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(260)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(260)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								_y = tmp40;
								HX_STACK_LINE(260)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(260)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(260)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(260)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(260)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(260)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(260)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(260)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(260)
								bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								if ((tmp25)){
									HX_STACK_LINE(260)
									Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									{
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float value = tmp34;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(260)
										bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp26 = (int)-1;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											if ((tmp36)){
												HX_STACK_LINE(260)
												tmp26 = (int)1;
											}
											else{
												HX_STACK_LINE(260)
												tmp26 = value;
											}
										}
									}
									HX_STACK_LINE(260)
									Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									_x = tmp27;
									HX_STACK_LINE(260)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(260)
									Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(260)
									Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(260)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(260)
									Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(260)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(260)
									Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(260)
									_y = tmp41;
									HX_STACK_LINE(260)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(260)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(260)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(260)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(260)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(260)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(260)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(260)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(260)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(260)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(260)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(260)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(260)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(260)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(260)
										Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(260)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(260)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(260)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(260)
										_x = tmp40;
										HX_STACK_LINE(260)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(260)
										{
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(260)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											if ((tmp50)){
												HX_STACK_LINE(260)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(260)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												if ((tmp51)){
													HX_STACK_LINE(260)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(260)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(260)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(260)
										_y = tmp42;
										HX_STACK_LINE(260)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(260)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(260)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(260)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(260)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(260)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(260)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(260)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(260)
										Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(260)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(260)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(260)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(260)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(260)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(260)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										if ((tmp27)){
											HX_STACK_LINE(260)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(260)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(260)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(260)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(260)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(260)
											Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(260)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(260)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(260)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(260)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(260)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(260)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(260)
											_x = tmp41;
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(260)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(260)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(260)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(260)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(260)
											_y = tmp55;
											HX_STACK_LINE(260)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(260)
											{
												HX_STACK_LINE(260)
												Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(260)
												Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(260)
												Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(260)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(260)
												Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(260)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(260)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(260)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(260)
												if ((tmp65)){
													HX_STACK_LINE(260)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(260)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(260)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(260)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(260)
											_z = tmp57;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											if ((tmp28)){
												HX_STACK_LINE(260)
												Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(260)
												Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(260)
												Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(260)
												Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(260)
												Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(260)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(260)
												Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(260)
												Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(260)
												Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(260)
												Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(260)
												Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(260)
												Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(260)
												Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(260)
												Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(260)
												_x = tmp42;
												HX_STACK_LINE(260)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(260)
												Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(260)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(260)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(260)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(260)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(260)
												Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(260)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(260)
												Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(260)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(260)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(260)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(260)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(260)
												_y = tmp56;
												HX_STACK_LINE(260)
												Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												{
													HX_STACK_LINE(260)
													Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(260)
													Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(260)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(260)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(260)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(260)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(260)
													Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(260)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(260)
													Float value = tmp65;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(260)
													bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp57 = (int)-1;
													}
													else{
														HX_STACK_LINE(260)
														bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(260)
														if ((tmp67)){
															HX_STACK_LINE(260)
															tmp57 = (int)1;
														}
														else{
															HX_STACK_LINE(260)
															tmp57 = value;
														}
													}
												}
												HX_STACK_LINE(260)
												Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												_z = tmp58;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(260)
						{
							HX_STACK_LINE(260)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(260)
							_this->ignore_listeners = true;
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->x = _x;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->x;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_x(tmp27);
									}
									HX_STACK_LINE(260)
									_this->x;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->y = _y;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->y;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_y(tmp27);
									}
									HX_STACK_LINE(260)
									_this->y;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->z = _z;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->z;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_z(tmp27);
									}
									HX_STACK_LINE(260)
									_this->z;
								}
							}
							HX_STACK_LINE(260)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(260)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(260)
								tmp25 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(260)
							bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							if ((tmp26)){
								HX_STACK_LINE(260)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(260)
								tmp27 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp27)){
								HX_STACK_LINE(260)
								Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								_this->listen_y(tmp28);
							}
							HX_STACK_LINE(260)
							bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							if ((tmp28)){
								HX_STACK_LINE(260)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(260)
								tmp29 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp29)){
								HX_STACK_LINE(260)
								Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								_this->listen_z(tmp30);
							}
							HX_STACK_LINE(260)
							_this;
						}
						HX_STACK_LINE(260)
						_this;
					}
				}
				HX_STACK_LINE(260)
				Dynamic tmp3 = this->listen_x_dyn();		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(260)
				bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(260)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(260)
				if ((tmp4)){
					HX_STACK_LINE(260)
					bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					tmp5 = !(tmp8);
				}
				else{
					HX_STACK_LINE(260)
					tmp5 = false;
				}
				HX_STACK_LINE(260)
				if ((tmp5)){
					HX_STACK_LINE(260)
					Float tmp6 = this->x;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					this->listen_x(tmp6);
				}
				HX_STACK_LINE(260)
				this->x;
			}
		}
		HX_STACK_LINE(260)
		{
			HX_STACK_LINE(260)
			this->y = (int)0;
			HX_STACK_LINE(260)
			bool tmp2 = this->_construct;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(260)
			if ((tmp2)){
				HX_STACK_LINE(260)
				this->y;
			}
			else{
				HX_STACK_LINE(260)
				{
					HX_STACK_LINE(260)
					::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(260)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(260)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(260)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					if ((tmp6)){
						HX_STACK_LINE(260)
						tmp7 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(260)
						tmp7 = true;
					}
					HX_STACK_LINE(260)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(260)
					if ((tmp8)){
						HX_STACK_LINE(260)
						tmp9 = this->_construct;
					}
					else{
						HX_STACK_LINE(260)
						tmp9 = true;
					}
					HX_STACK_LINE(260)
					if ((tmp9)){
						HX_STACK_LINE(260)
						Dynamic();
					}
					else{
						HX_STACK_LINE(260)
						::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(260)
						::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(260)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(260)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(260)
						Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(260)
						Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(260)
						Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(260)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(260)
						Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(260)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(260)
						Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(260)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(260)
						Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(260)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(260)
						Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(260)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(260)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(260)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(260)
						Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(260)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(260)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(260)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(260)
						bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(260)
						if ((tmp23)){
							HX_STACK_LINE(260)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(260)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(260)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(260)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(260)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(260)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(260)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(260)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(260)
							_x = tmp37;
							HX_STACK_LINE(260)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(260)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								if ((tmp47)){
									HX_STACK_LINE(260)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									if ((tmp48)){
										HX_STACK_LINE(260)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(260)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(260)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(260)
							_y = tmp39;
							HX_STACK_LINE(260)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(260)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(260)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(260)
							Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(260)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(260)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(260)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(260)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(260)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(260)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(260)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(260)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(260)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(260)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(260)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								{
									HX_STACK_LINE(260)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(260)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									if ((tmp34)){
										HX_STACK_LINE(260)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(260)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(260)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_x = tmp26;
								HX_STACK_LINE(260)
								Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(260)
								Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(260)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(260)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(260)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(260)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(260)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(260)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								_y = tmp40;
								HX_STACK_LINE(260)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(260)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(260)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(260)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(260)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(260)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(260)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(260)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(260)
								bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								if ((tmp25)){
									HX_STACK_LINE(260)
									Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									{
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float value = tmp34;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(260)
										bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp26 = (int)-1;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											if ((tmp36)){
												HX_STACK_LINE(260)
												tmp26 = (int)1;
											}
											else{
												HX_STACK_LINE(260)
												tmp26 = value;
											}
										}
									}
									HX_STACK_LINE(260)
									Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									_x = tmp27;
									HX_STACK_LINE(260)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(260)
									Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(260)
									Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(260)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(260)
									Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(260)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(260)
									Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(260)
									_y = tmp41;
									HX_STACK_LINE(260)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(260)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(260)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(260)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(260)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(260)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(260)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(260)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(260)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(260)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(260)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(260)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(260)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(260)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(260)
										Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(260)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(260)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(260)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(260)
										_x = tmp40;
										HX_STACK_LINE(260)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(260)
										{
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(260)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											if ((tmp50)){
												HX_STACK_LINE(260)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(260)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												if ((tmp51)){
													HX_STACK_LINE(260)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(260)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(260)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(260)
										_y = tmp42;
										HX_STACK_LINE(260)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(260)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(260)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(260)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(260)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(260)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(260)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(260)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(260)
										Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(260)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(260)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(260)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(260)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(260)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(260)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										if ((tmp27)){
											HX_STACK_LINE(260)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(260)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(260)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(260)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(260)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(260)
											Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(260)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(260)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(260)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(260)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(260)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(260)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(260)
											_x = tmp41;
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(260)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(260)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(260)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(260)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(260)
											_y = tmp55;
											HX_STACK_LINE(260)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(260)
											{
												HX_STACK_LINE(260)
												Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(260)
												Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(260)
												Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(260)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(260)
												Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(260)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(260)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(260)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(260)
												if ((tmp65)){
													HX_STACK_LINE(260)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(260)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(260)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(260)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(260)
											_z = tmp57;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											if ((tmp28)){
												HX_STACK_LINE(260)
												Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(260)
												Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(260)
												Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(260)
												Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(260)
												Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(260)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(260)
												Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(260)
												Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(260)
												Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(260)
												Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(260)
												Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(260)
												Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(260)
												Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(260)
												Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(260)
												_x = tmp42;
												HX_STACK_LINE(260)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(260)
												Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(260)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(260)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(260)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(260)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(260)
												Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(260)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(260)
												Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(260)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(260)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(260)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(260)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(260)
												_y = tmp56;
												HX_STACK_LINE(260)
												Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												{
													HX_STACK_LINE(260)
													Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(260)
													Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(260)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(260)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(260)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(260)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(260)
													Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(260)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(260)
													Float value = tmp65;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(260)
													bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp57 = (int)-1;
													}
													else{
														HX_STACK_LINE(260)
														bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(260)
														if ((tmp67)){
															HX_STACK_LINE(260)
															tmp57 = (int)1;
														}
														else{
															HX_STACK_LINE(260)
															tmp57 = value;
														}
													}
												}
												HX_STACK_LINE(260)
												Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												_z = tmp58;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(260)
						{
							HX_STACK_LINE(260)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(260)
							_this->ignore_listeners = true;
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->x = _x;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->x;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_x(tmp27);
									}
									HX_STACK_LINE(260)
									_this->x;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->y = _y;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->y;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_y(tmp27);
									}
									HX_STACK_LINE(260)
									_this->y;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->z = _z;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->z;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_z(tmp27);
									}
									HX_STACK_LINE(260)
									_this->z;
								}
							}
							HX_STACK_LINE(260)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(260)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(260)
								tmp25 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(260)
							bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							if ((tmp26)){
								HX_STACK_LINE(260)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(260)
								tmp27 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp27)){
								HX_STACK_LINE(260)
								Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								_this->listen_y(tmp28);
							}
							HX_STACK_LINE(260)
							bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							if ((tmp28)){
								HX_STACK_LINE(260)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(260)
								tmp29 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp29)){
								HX_STACK_LINE(260)
								Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								_this->listen_z(tmp30);
							}
							HX_STACK_LINE(260)
							_this;
						}
						HX_STACK_LINE(260)
						_this;
					}
				}
				HX_STACK_LINE(260)
				Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(260)
				bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(260)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(260)
				if ((tmp4)){
					HX_STACK_LINE(260)
					bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					tmp5 = !(tmp8);
				}
				else{
					HX_STACK_LINE(260)
					tmp5 = false;
				}
				HX_STACK_LINE(260)
				if ((tmp5)){
					HX_STACK_LINE(260)
					Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					this->listen_y(tmp6);
				}
				HX_STACK_LINE(260)
				this->y;
			}
		}
		HX_STACK_LINE(260)
		{
			HX_STACK_LINE(260)
			this->z = (int)0;
			HX_STACK_LINE(260)
			bool tmp2 = this->_construct;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(260)
			if ((tmp2)){
				HX_STACK_LINE(260)
				this->z;
			}
			else{
				HX_STACK_LINE(260)
				{
					HX_STACK_LINE(260)
					::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(260)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(260)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(260)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					if ((tmp6)){
						HX_STACK_LINE(260)
						tmp7 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(260)
						tmp7 = true;
					}
					HX_STACK_LINE(260)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(260)
					if ((tmp8)){
						HX_STACK_LINE(260)
						tmp9 = this->_construct;
					}
					else{
						HX_STACK_LINE(260)
						tmp9 = true;
					}
					HX_STACK_LINE(260)
					if ((tmp9)){
						HX_STACK_LINE(260)
						Dynamic();
					}
					else{
						HX_STACK_LINE(260)
						::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(260)
						::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(260)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(260)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(260)
						Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(260)
						Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(260)
						Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(260)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(260)
						Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(260)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(260)
						Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(260)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(260)
						Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(260)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(260)
						Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(260)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(260)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(260)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(260)
						Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(260)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(260)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(260)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(260)
						bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(260)
						if ((tmp23)){
							HX_STACK_LINE(260)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(260)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(260)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(260)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(260)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(260)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(260)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(260)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(260)
							_x = tmp37;
							HX_STACK_LINE(260)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(260)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								if ((tmp47)){
									HX_STACK_LINE(260)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									if ((tmp48)){
										HX_STACK_LINE(260)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(260)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(260)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(260)
							_y = tmp39;
							HX_STACK_LINE(260)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(260)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(260)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(260)
							Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(260)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(260)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(260)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(260)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(260)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(260)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(260)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(260)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(260)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(260)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(260)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								{
									HX_STACK_LINE(260)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(260)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									if ((tmp34)){
										HX_STACK_LINE(260)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(260)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(260)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_x = tmp26;
								HX_STACK_LINE(260)
								Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(260)
								Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(260)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(260)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(260)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(260)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(260)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(260)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								_y = tmp40;
								HX_STACK_LINE(260)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(260)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(260)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(260)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(260)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(260)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(260)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(260)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(260)
								bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								if ((tmp25)){
									HX_STACK_LINE(260)
									Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									{
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float value = tmp34;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(260)
										bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp26 = (int)-1;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											if ((tmp36)){
												HX_STACK_LINE(260)
												tmp26 = (int)1;
											}
											else{
												HX_STACK_LINE(260)
												tmp26 = value;
											}
										}
									}
									HX_STACK_LINE(260)
									Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									_x = tmp27;
									HX_STACK_LINE(260)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(260)
									Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(260)
									Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(260)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(260)
									Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(260)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(260)
									Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(260)
									_y = tmp41;
									HX_STACK_LINE(260)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(260)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(260)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(260)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(260)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(260)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(260)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(260)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(260)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(260)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(260)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(260)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(260)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(260)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(260)
										Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(260)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(260)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(260)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(260)
										_x = tmp40;
										HX_STACK_LINE(260)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(260)
										{
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(260)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											if ((tmp50)){
												HX_STACK_LINE(260)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(260)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												if ((tmp51)){
													HX_STACK_LINE(260)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(260)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(260)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(260)
										_y = tmp42;
										HX_STACK_LINE(260)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(260)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(260)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(260)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(260)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(260)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(260)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(260)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(260)
										Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(260)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(260)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(260)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(260)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(260)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(260)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										if ((tmp27)){
											HX_STACK_LINE(260)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(260)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(260)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(260)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(260)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(260)
											Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(260)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(260)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(260)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(260)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(260)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(260)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(260)
											_x = tmp41;
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(260)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(260)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(260)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(260)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(260)
											_y = tmp55;
											HX_STACK_LINE(260)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(260)
											{
												HX_STACK_LINE(260)
												Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(260)
												Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(260)
												Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(260)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(260)
												Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(260)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(260)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(260)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(260)
												if ((tmp65)){
													HX_STACK_LINE(260)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(260)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(260)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(260)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(260)
											_z = tmp57;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											if ((tmp28)){
												HX_STACK_LINE(260)
												Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(260)
												Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(260)
												Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(260)
												Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(260)
												Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(260)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(260)
												Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(260)
												Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(260)
												Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(260)
												Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(260)
												Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(260)
												Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(260)
												Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(260)
												Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(260)
												_x = tmp42;
												HX_STACK_LINE(260)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(260)
												Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(260)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(260)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(260)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(260)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(260)
												Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(260)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(260)
												Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(260)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(260)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(260)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(260)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(260)
												_y = tmp56;
												HX_STACK_LINE(260)
												Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												{
													HX_STACK_LINE(260)
													Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(260)
													Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(260)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(260)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(260)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(260)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(260)
													Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(260)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(260)
													Float value = tmp65;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(260)
													bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp57 = (int)-1;
													}
													else{
														HX_STACK_LINE(260)
														bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(260)
														if ((tmp67)){
															HX_STACK_LINE(260)
															tmp57 = (int)1;
														}
														else{
															HX_STACK_LINE(260)
															tmp57 = value;
														}
													}
												}
												HX_STACK_LINE(260)
												Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												_z = tmp58;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(260)
						{
							HX_STACK_LINE(260)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(260)
							_this->ignore_listeners = true;
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->x = _x;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->x;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_x(tmp27);
									}
									HX_STACK_LINE(260)
									_this->x;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->y = _y;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->y;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_y(tmp27);
									}
									HX_STACK_LINE(260)
									_this->y;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->z = _z;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->z;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_z(tmp27);
									}
									HX_STACK_LINE(260)
									_this->z;
								}
							}
							HX_STACK_LINE(260)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(260)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(260)
								tmp25 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(260)
							bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							if ((tmp26)){
								HX_STACK_LINE(260)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(260)
								tmp27 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp27)){
								HX_STACK_LINE(260)
								Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								_this->listen_y(tmp28);
							}
							HX_STACK_LINE(260)
							bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							if ((tmp28)){
								HX_STACK_LINE(260)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(260)
								tmp29 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp29)){
								HX_STACK_LINE(260)
								Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								_this->listen_z(tmp30);
							}
							HX_STACK_LINE(260)
							_this;
						}
						HX_STACK_LINE(260)
						_this;
					}
				}
				HX_STACK_LINE(260)
				Dynamic tmp3 = this->listen_z_dyn();		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(260)
				bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(260)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(260)
				if ((tmp4)){
					HX_STACK_LINE(260)
					bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					tmp5 = !(tmp8);
				}
				else{
					HX_STACK_LINE(260)
					tmp5 = false;
				}
				HX_STACK_LINE(260)
				if ((tmp5)){
					HX_STACK_LINE(260)
					Float tmp6 = this->z;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					this->listen_z(tmp6);
				}
				HX_STACK_LINE(260)
				this->z;
			}
		}
		HX_STACK_LINE(260)
		{
			HX_STACK_LINE(260)
			this->w = (int)1;
			HX_STACK_LINE(260)
			bool tmp2 = this->_construct;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(260)
			if ((tmp2)){
				HX_STACK_LINE(260)
				this->w;
			}
			else{
				HX_STACK_LINE(260)
				{
					HX_STACK_LINE(260)
					::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(260)
					bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(260)
					bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(260)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					if ((tmp6)){
						HX_STACK_LINE(260)
						tmp7 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(260)
						tmp7 = true;
					}
					HX_STACK_LINE(260)
					bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(260)
					if ((tmp8)){
						HX_STACK_LINE(260)
						tmp9 = this->_construct;
					}
					else{
						HX_STACK_LINE(260)
						tmp9 = true;
					}
					HX_STACK_LINE(260)
					if ((tmp9)){
						HX_STACK_LINE(260)
						Dynamic();
					}
					else{
						HX_STACK_LINE(260)
						::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(260)
						::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(260)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(260)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(260)
						Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(260)
						Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(260)
						Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(260)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(260)
						Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(260)
						Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(260)
						Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(260)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(260)
						Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(260)
						Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(260)
						Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(260)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(260)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(260)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(260)
						Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(260)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(260)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(260)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(260)
						bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(260)
						if ((tmp23)){
							HX_STACK_LINE(260)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(260)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(260)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(260)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(260)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(260)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(260)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(260)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(260)
							_x = tmp37;
							HX_STACK_LINE(260)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(260)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								if ((tmp47)){
									HX_STACK_LINE(260)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									if ((tmp48)){
										HX_STACK_LINE(260)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(260)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(260)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(260)
							_y = tmp39;
							HX_STACK_LINE(260)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(260)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(260)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(260)
							Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(260)
							Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(260)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(260)
							Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(260)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(260)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(260)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(260)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(260)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(260)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(260)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(260)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								{
									HX_STACK_LINE(260)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(260)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									if ((tmp34)){
										HX_STACK_LINE(260)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(260)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(260)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_x = tmp26;
								HX_STACK_LINE(260)
								Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(260)
								Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(260)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(260)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(260)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(260)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(260)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(260)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								_y = tmp40;
								HX_STACK_LINE(260)
								Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(260)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(260)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(260)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(260)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(260)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(260)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(260)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(260)
								bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(260)
								if ((tmp25)){
									HX_STACK_LINE(260)
									Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									{
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float value = tmp34;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(260)
										bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										if ((tmp35)){
											HX_STACK_LINE(260)
											tmp26 = (int)-1;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											if ((tmp36)){
												HX_STACK_LINE(260)
												tmp26 = (int)1;
											}
											else{
												HX_STACK_LINE(260)
												tmp26 = value;
											}
										}
									}
									HX_STACK_LINE(260)
									Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									_x = tmp27;
									HX_STACK_LINE(260)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(260)
									Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(260)
									Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(260)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(260)
									Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(260)
									Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(260)
									Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(260)
									_y = tmp41;
									HX_STACK_LINE(260)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(260)
									Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(260)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(260)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(260)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(260)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(260)
									Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(260)
									Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(260)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(260)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(260)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(260)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(260)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(260)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(260)
										Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(260)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(260)
										Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(260)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(260)
										_x = tmp40;
										HX_STACK_LINE(260)
										Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(260)
										{
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float value = tmp49;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(260)
											bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											if ((tmp50)){
												HX_STACK_LINE(260)
												tmp41 = (int)-1;
											}
											else{
												HX_STACK_LINE(260)
												bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												if ((tmp51)){
													HX_STACK_LINE(260)
													tmp41 = (int)1;
												}
												else{
													HX_STACK_LINE(260)
													tmp41 = value;
												}
											}
										}
										HX_STACK_LINE(260)
										Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(260)
										_y = tmp42;
										HX_STACK_LINE(260)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(260)
										Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(260)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(260)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(260)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(260)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(260)
										Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(260)
										Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(260)
										Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(260)
										Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(260)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(260)
										Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(260)
										Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(260)
										Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(260)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										if ((tmp27)){
											HX_STACK_LINE(260)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(260)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(260)
											Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(260)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(260)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(260)
											Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(260)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(260)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(260)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(260)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(260)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(260)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(260)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(260)
											_x = tmp41;
											HX_STACK_LINE(260)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(260)
											Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(260)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(260)
											Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(260)
											Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(260)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(260)
											Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(260)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(260)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(260)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(260)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(260)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(260)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(260)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(260)
											_y = tmp55;
											HX_STACK_LINE(260)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(260)
											{
												HX_STACK_LINE(260)
												Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(260)
												Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(260)
												Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(260)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(260)
												Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(260)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(260)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(260)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(260)
												if ((tmp65)){
													HX_STACK_LINE(260)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(260)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(260)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(260)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(260)
											_z = tmp57;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(260)
											if ((tmp28)){
												HX_STACK_LINE(260)
												Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(260)
												Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(260)
												Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(260)
												Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(260)
												Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(260)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(260)
												Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(260)
												Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(260)
												Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(260)
												Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(260)
												Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(260)
												Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(260)
												Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(260)
												Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(260)
												_x = tmp42;
												HX_STACK_LINE(260)
												Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(260)
												Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(260)
												Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(260)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(260)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(260)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(260)
												Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(260)
												Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(260)
												Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(260)
												Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(260)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(260)
												Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(260)
												Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(260)
												Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(260)
												_y = tmp56;
												HX_STACK_LINE(260)
												Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(260)
												{
													HX_STACK_LINE(260)
													Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(260)
													Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(260)
													Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(260)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(260)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(260)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(260)
													Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(260)
													Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(260)
													Float value = tmp65;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(260)
													bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(260)
													if ((tmp66)){
														HX_STACK_LINE(260)
														tmp57 = (int)-1;
													}
													else{
														HX_STACK_LINE(260)
														bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(260)
														if ((tmp67)){
															HX_STACK_LINE(260)
															tmp57 = (int)1;
														}
														else{
															HX_STACK_LINE(260)
															tmp57 = value;
														}
													}
												}
												HX_STACK_LINE(260)
												Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(260)
												_z = tmp58;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(260)
						{
							HX_STACK_LINE(260)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(260)
							_this->ignore_listeners = true;
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->x = _x;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->x;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_x(tmp27);
									}
									HX_STACK_LINE(260)
									_this->x;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->y = _y;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->y;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_y(tmp27);
									}
									HX_STACK_LINE(260)
									_this->y;
								}
							}
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								_this->z = _z;
								HX_STACK_LINE(260)
								bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(260)
								if ((tmp24)){
									HX_STACK_LINE(260)
									_this->z;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(260)
									bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(260)
									if ((tmp25)){
										HX_STACK_LINE(260)
										bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										tmp26 = !(tmp28);
									}
									else{
										HX_STACK_LINE(260)
										tmp26 = false;
									}
									HX_STACK_LINE(260)
									if ((tmp26)){
										HX_STACK_LINE(260)
										Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(260)
										_this->listen_z(tmp27);
									}
									HX_STACK_LINE(260)
									_this->z;
								}
							}
							HX_STACK_LINE(260)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(260)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(260)
								tmp25 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(260)
							bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							if ((tmp26)){
								HX_STACK_LINE(260)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(260)
								tmp27 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp27)){
								HX_STACK_LINE(260)
								Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								_this->listen_y(tmp28);
							}
							HX_STACK_LINE(260)
							bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							if ((tmp28)){
								HX_STACK_LINE(260)
								bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								tmp29 = !(tmp31);
							}
							else{
								HX_STACK_LINE(260)
								tmp29 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp29)){
								HX_STACK_LINE(260)
								Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								_this->listen_z(tmp30);
							}
							HX_STACK_LINE(260)
							_this;
						}
						HX_STACK_LINE(260)
						_this;
					}
				}
				HX_STACK_LINE(260)
				Dynamic tmp3 = this->listen_w_dyn();		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(260)
				bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(260)
				bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(260)
				if ((tmp4)){
					HX_STACK_LINE(260)
					bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(260)
					bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(260)
					tmp5 = !(tmp8);
				}
				else{
					HX_STACK_LINE(260)
					tmp5 = false;
				}
				HX_STACK_LINE(260)
				if ((tmp5)){
					HX_STACK_LINE(260)
					Float tmp6 = this->w;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(260)
					this->listen_w(tmp6);
				}
				HX_STACK_LINE(260)
				this->w;
			}
		}
		HX_STACK_LINE(260)
		this->ignore_euler = false;
		HX_STACK_LINE(260)
		{
			HX_STACK_LINE(260)
			::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(260)
			bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(260)
			bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(260)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(260)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(260)
			if ((tmp5)){
				HX_STACK_LINE(260)
				tmp6 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(260)
				tmp6 = true;
			}
			HX_STACK_LINE(260)
			bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(260)
			bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(260)
			if ((tmp7)){
				HX_STACK_LINE(260)
				tmp8 = this->_construct;
			}
			else{
				HX_STACK_LINE(260)
				tmp8 = true;
			}
			HX_STACK_LINE(260)
			if ((tmp8)){
				HX_STACK_LINE(260)
				Dynamic();
			}
			else{
				HX_STACK_LINE(260)
				::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(260)
				::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(260)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(260)
				Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(260)
				Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(260)
				Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(260)
				Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(260)
				Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(260)
				Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(260)
				Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(260)
				Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(260)
				Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(260)
				Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(260)
				Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(260)
				Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(260)
				Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(260)
				Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(260)
				Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(260)
				Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(260)
				Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
				HX_STACK_LINE(260)
				Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
				HX_STACK_LINE(260)
				Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
				HX_STACK_LINE(260)
				bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(260)
				if ((tmp22)){
					HX_STACK_LINE(260)
					Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(260)
					Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(260)
					Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(260)
					Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(260)
					Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(260)
					Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(260)
					Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(260)
					Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(260)
					Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(260)
					Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(260)
					Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(260)
					Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(260)
					Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(260)
					Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(260)
					_x = tmp36;
					HX_STACK_LINE(260)
					Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(260)
					{
						HX_STACK_LINE(260)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(260)
						Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(260)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(260)
						Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(260)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(260)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(260)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(260)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(260)
						Float value = tmp45;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(260)
						bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(260)
						if ((tmp46)){
							HX_STACK_LINE(260)
							tmp37 = (int)-1;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(260)
							if ((tmp47)){
								HX_STACK_LINE(260)
								tmp37 = (int)1;
							}
							else{
								HX_STACK_LINE(260)
								tmp37 = value;
							}
						}
					}
					HX_STACK_LINE(260)
					Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(260)
					_y = tmp38;
					HX_STACK_LINE(260)
					Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(260)
					Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(260)
					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(260)
					Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(260)
					Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(260)
					Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(260)
					Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(260)
					Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(260)
					Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(260)
					Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(260)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(260)
					Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(260)
					Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(260)
					Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(260)
					_z = tmp52;
				}
				else{
					HX_STACK_LINE(260)
					bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(260)
					if ((tmp23)){
						HX_STACK_LINE(260)
						Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(260)
						{
							HX_STACK_LINE(260)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(260)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(260)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(260)
							Float value = tmp32;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(260)
							bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(260)
							if ((tmp33)){
								HX_STACK_LINE(260)
								tmp24 = (int)-1;
							}
							else{
								HX_STACK_LINE(260)
								bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(260)
								if ((tmp34)){
									HX_STACK_LINE(260)
									tmp24 = (int)1;
								}
								else{
									HX_STACK_LINE(260)
									tmp24 = value;
								}
							}
						}
						HX_STACK_LINE(260)
						Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(260)
						_x = tmp25;
						HX_STACK_LINE(260)
						Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(260)
						Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(260)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(260)
						Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(260)
						Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(260)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(260)
						Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(260)
						Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(260)
						Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(260)
						Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(260)
						Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(260)
						Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(260)
						Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(260)
						Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(260)
						_y = tmp39;
						HX_STACK_LINE(260)
						Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(260)
						Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(260)
						Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(260)
						Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(260)
						Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(260)
						Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(260)
						Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(260)
						Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(260)
						Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(260)
						Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(260)
						Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(260)
						Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(260)
						Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(260)
						Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(260)
						_z = tmp53;
					}
					else{
						HX_STACK_LINE(260)
						bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(260)
						if ((tmp24)){
							HX_STACK_LINE(260)
							Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							{
								HX_STACK_LINE(260)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(260)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(260)
								Float value = tmp33;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(260)
								bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(260)
								if ((tmp34)){
									HX_STACK_LINE(260)
									tmp25 = (int)-1;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(260)
									if ((tmp35)){
										HX_STACK_LINE(260)
										tmp25 = (int)1;
									}
									else{
										HX_STACK_LINE(260)
										tmp25 = value;
									}
								}
							}
							HX_STACK_LINE(260)
							Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(260)
							_x = tmp26;
							HX_STACK_LINE(260)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(260)
							Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(260)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(260)
							Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(260)
							Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(260)
							Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(260)
							Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(260)
							Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(260)
							Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(260)
							Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(260)
							Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(260)
							Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(260)
							Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(260)
							Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(260)
							_y = tmp40;
							HX_STACK_LINE(260)
							Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(260)
							Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(260)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(260)
							Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(260)
							Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(260)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(260)
							Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(260)
							Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(260)
							Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(260)
							Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(260)
							Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(260)
							Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(260)
							Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(260)
							Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(260)
							_z = tmp54;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(260)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(260)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(260)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(260)
								Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(260)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(260)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(260)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(260)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(260)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(260)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(260)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(260)
								_x = tmp39;
								HX_STACK_LINE(260)
								Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(260)
								{
									HX_STACK_LINE(260)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(260)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(260)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(260)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(260)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(260)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(260)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(260)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									Float value = tmp48;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(260)
									bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(260)
									if ((tmp49)){
										HX_STACK_LINE(260)
										tmp40 = (int)-1;
									}
									else{
										HX_STACK_LINE(260)
										bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(260)
										if ((tmp50)){
											HX_STACK_LINE(260)
											tmp40 = (int)1;
										}
										else{
											HX_STACK_LINE(260)
											tmp40 = value;
										}
									}
								}
								HX_STACK_LINE(260)
								Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(260)
								_y = tmp41;
								HX_STACK_LINE(260)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(260)
								Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(260)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(260)
								Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(260)
								Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(260)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(260)
								Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(260)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(260)
								Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(260)
								Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(260)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(260)
								Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(260)
								Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(260)
								Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(260)
								_z = tmp55;
							}
							else{
								HX_STACK_LINE(260)
								bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								if ((tmp26)){
									HX_STACK_LINE(260)
									Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(260)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(260)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(260)
									Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(260)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(260)
									Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(260)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(260)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(260)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(260)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(260)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(260)
									Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(260)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(260)
									_x = tmp40;
									HX_STACK_LINE(260)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(260)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(260)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(260)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(260)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(260)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(260)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(260)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(260)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(260)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(260)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(260)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(260)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(260)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(260)
									_y = tmp54;
									HX_STACK_LINE(260)
									Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(260)
									{
										HX_STACK_LINE(260)
										Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(260)
										Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(260)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(260)
										Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(260)
										Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(260)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(260)
										Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(260)
										Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(260)
										Float value = tmp63;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(260)
										bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(260)
										if ((tmp64)){
											HX_STACK_LINE(260)
											tmp55 = (int)-1;
										}
										else{
											HX_STACK_LINE(260)
											bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(260)
											if ((tmp65)){
												HX_STACK_LINE(260)
												tmp55 = (int)1;
											}
											else{
												HX_STACK_LINE(260)
												tmp55 = value;
											}
										}
									}
									HX_STACK_LINE(260)
									Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(260)
									_z = tmp56;
								}
								else{
									HX_STACK_LINE(260)
									bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(260)
									if ((tmp27)){
										HX_STACK_LINE(260)
										Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(260)
										Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(260)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(260)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(260)
										Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(260)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(260)
										Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(260)
										Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(260)
										Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(260)
										Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(260)
										Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(260)
										Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(260)
										Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(260)
										Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(260)
										_x = tmp41;
										HX_STACK_LINE(260)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(260)
										Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(260)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(260)
										Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(260)
										Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(260)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(260)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(260)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(260)
										Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(260)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(260)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(260)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(260)
										Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(260)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(260)
										_y = tmp55;
										HX_STACK_LINE(260)
										Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(260)
										{
											HX_STACK_LINE(260)
											Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(260)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(260)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(260)
											Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(260)
											Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(260)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(260)
											Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(260)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(260)
											Float value = tmp64;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(260)
											bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(260)
											if ((tmp65)){
												HX_STACK_LINE(260)
												tmp56 = (int)-1;
											}
											else{
												HX_STACK_LINE(260)
												bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(260)
												if ((tmp66)){
													HX_STACK_LINE(260)
													tmp56 = (int)1;
												}
												else{
													HX_STACK_LINE(260)
													tmp56 = value;
												}
											}
										}
										HX_STACK_LINE(260)
										Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(260)
										_z = tmp57;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(260)
				{
					HX_STACK_LINE(260)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(260)
					_this->ignore_listeners = true;
					HX_STACK_LINE(260)
					{
						HX_STACK_LINE(260)
						_this->x = _x;
						HX_STACK_LINE(260)
						bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(260)
						if ((tmp23)){
							HX_STACK_LINE(260)
							_this->x;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(260)
								tmp25 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_this->listen_x(tmp26);
							}
							HX_STACK_LINE(260)
							_this->x;
						}
					}
					HX_STACK_LINE(260)
					{
						HX_STACK_LINE(260)
						_this->y = _y;
						HX_STACK_LINE(260)
						bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(260)
						if ((tmp23)){
							HX_STACK_LINE(260)
							_this->y;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(260)
								tmp25 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(260)
							_this->y;
						}
					}
					HX_STACK_LINE(260)
					{
						HX_STACK_LINE(260)
						_this->z = _z;
						HX_STACK_LINE(260)
						bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(260)
						if ((tmp23)){
							HX_STACK_LINE(260)
							_this->z;
						}
						else{
							HX_STACK_LINE(260)
							bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(260)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(260)
							if ((tmp24)){
								HX_STACK_LINE(260)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(260)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(260)
								tmp25 = false;
							}
							HX_STACK_LINE(260)
							if ((tmp25)){
								HX_STACK_LINE(260)
								Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(260)
								_this->listen_z(tmp26);
							}
							HX_STACK_LINE(260)
							_this->z;
						}
					}
					HX_STACK_LINE(260)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(260)
					bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(260)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(260)
					if ((tmp23)){
						HX_STACK_LINE(260)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(260)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(260)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(260)
						tmp24 = false;
					}
					HX_STACK_LINE(260)
					if ((tmp24)){
						HX_STACK_LINE(260)
						Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(260)
						_this->listen_x(tmp25);
					}
					HX_STACK_LINE(260)
					bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(260)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(260)
					if ((tmp25)){
						HX_STACK_LINE(260)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(260)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(260)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(260)
						tmp26 = false;
					}
					HX_STACK_LINE(260)
					if ((tmp26)){
						HX_STACK_LINE(260)
						Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(260)
						_this->listen_y(tmp27);
					}
					HX_STACK_LINE(260)
					bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(260)
					bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(260)
					if ((tmp27)){
						HX_STACK_LINE(260)
						bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(260)
						bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(260)
						tmp28 = !(tmp30);
					}
					else{
						HX_STACK_LINE(260)
						tmp28 = false;
					}
					HX_STACK_LINE(260)
					if ((tmp28)){
						HX_STACK_LINE(260)
						Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(260)
						_this->listen_z(tmp29);
					}
					HX_STACK_LINE(260)
					_this;
				}
				HX_STACK_LINE(260)
				_this;
			}
		}
		HX_STACK_LINE(260)
		Dynamic tmp2 = this->listen_x_dyn();		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(260)
		bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(260)
		bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(260)
		if ((tmp3)){
			HX_STACK_LINE(260)
			bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(260)
			bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(260)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(260)
			tmp4 = !(tmp7);
		}
		else{
			HX_STACK_LINE(260)
			tmp4 = false;
		}
		HX_STACK_LINE(260)
		if ((tmp4)){
			HX_STACK_LINE(260)
			Float tmp5 = this->x;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(260)
			this->listen_x(tmp5);
		}
		HX_STACK_LINE(260)
		Dynamic tmp5 = this->listen_y_dyn();		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(260)
		bool tmp6 = (tmp5 != null());		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(260)
		bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(260)
		if ((tmp6)){
			HX_STACK_LINE(260)
			bool tmp8 = this->ignore_listeners;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(260)
			bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(260)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(260)
			tmp7 = !(tmp10);
		}
		else{
			HX_STACK_LINE(260)
			tmp7 = false;
		}
		HX_STACK_LINE(260)
		if ((tmp7)){
			HX_STACK_LINE(260)
			Float tmp8 = this->y;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(260)
			this->listen_y(tmp8);
		}
		HX_STACK_LINE(260)
		Dynamic tmp8 = this->listen_z_dyn();		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(260)
		bool tmp9 = (tmp8 != null());		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(260)
		bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(260)
		if ((tmp9)){
			HX_STACK_LINE(260)
			bool tmp11 = this->ignore_listeners;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(260)
			bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(260)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(260)
			tmp10 = !(tmp13);
		}
		else{
			HX_STACK_LINE(260)
			tmp10 = false;
		}
		HX_STACK_LINE(260)
		if ((tmp10)){
			HX_STACK_LINE(260)
			Float tmp11 = this->z;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(260)
			this->listen_z(tmp11);
		}
		HX_STACK_LINE(260)
		Dynamic tmp11 = this->listen_w_dyn();		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(260)
		bool tmp12 = (tmp11 != null());		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(260)
		bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(260)
		if ((tmp12)){
			HX_STACK_LINE(260)
			bool tmp14 = this->ignore_listeners;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(260)
			bool tmp15 = tmp14;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(260)
			bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(260)
			tmp13 = !(tmp16);
		}
		else{
			HX_STACK_LINE(260)
			tmp13 = false;
		}
		HX_STACK_LINE(260)
		if ((tmp13)){
			HX_STACK_LINE(260)
			Float tmp14 = this->w;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(260)
			this->listen_w(tmp14);
		}
	}
	else{
		HX_STACK_LINE(264)
		Float tmp2 = (Float((int)1) / Float(l));		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(264)
		l = tmp2;
		HX_STACK_LINE(266)
		{
			HX_STACK_LINE(266)
			this->ignore_euler = true;
			HX_STACK_LINE(266)
			{
				HX_STACK_LINE(266)
				Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(266)
				Float tmp4 = l;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(266)
				Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(266)
				this->x = tmp5;
				HX_STACK_LINE(266)
				bool tmp6 = this->_construct;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(266)
				if ((tmp6)){
					HX_STACK_LINE(266)
					this->x;
				}
				else{
					HX_STACK_LINE(266)
					{
						HX_STACK_LINE(266)
						::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(266)
						bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(266)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(266)
						bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						if ((tmp10)){
							HX_STACK_LINE(266)
							tmp11 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(266)
							tmp11 = true;
						}
						HX_STACK_LINE(266)
						bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(266)
						if ((tmp12)){
							HX_STACK_LINE(266)
							tmp13 = this->_construct;
						}
						else{
							HX_STACK_LINE(266)
							tmp13 = true;
						}
						HX_STACK_LINE(266)
						if ((tmp13)){
							HX_STACK_LINE(266)
							Dynamic();
						}
						else{
							HX_STACK_LINE(266)
							::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(266)
							::phoenix::Vector _this = tmp14;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(266)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(266)
							Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(266)
							Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(266)
							Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(266)
							Float sqx = tmp17;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(266)
							Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(266)
							Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(266)
							Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(266)
							Float sqy = tmp20;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(266)
							Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(266)
							Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(266)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(266)
							Float sqz = tmp23;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(266)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(266)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(266)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(266)
							Float sqw = tmp26;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(266)
							Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
							HX_STACK_LINE(266)
							Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
							HX_STACK_LINE(266)
							Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
							HX_STACK_LINE(266)
							bool tmp27 = (order == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(266)
							if ((tmp27)){
								HX_STACK_LINE(266)
								Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(266)
								Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(266)
								Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(266)
								Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(266)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(266)
								Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(266)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(266)
								Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(266)
								_x = tmp41;
								HX_STACK_LINE(266)
								Float tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float value = tmp50;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(266)
									bool tmp51 = (value < (int)-1);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									if ((tmp51)){
										HX_STACK_LINE(266)
										tmp42 = (int)-1;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp52 = (value > (int)1);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										if ((tmp52)){
											HX_STACK_LINE(266)
											tmp42 = (int)1;
										}
										else{
											HX_STACK_LINE(266)
											tmp42 = value;
										}
									}
								}
								HX_STACK_LINE(266)
								Float tmp43 = ::Math_obj::asin(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(266)
								_y = tmp43;
								HX_STACK_LINE(266)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(266)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(266)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(266)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(266)
								Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(266)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(266)
								Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(266)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(266)
								Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(266)
								Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(266)
								Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(266)
								Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(266)
								Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(266)
								Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(266)
								_z = tmp57;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp28 = (order == (int)1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									{
										HX_STACK_LINE(266)
										Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float value = tmp37;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(266)
										bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										if ((tmp38)){
											HX_STACK_LINE(266)
											tmp29 = (int)-1;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp29 = (int)1;
											}
											else{
												HX_STACK_LINE(266)
												tmp29 = value;
											}
										}
									}
									HX_STACK_LINE(266)
									Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_x = tmp30;
									HX_STACK_LINE(266)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(266)
									Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(266)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(266)
									Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(266)
									Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(266)
									Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(266)
									Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(266)
									Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									_y = tmp44;
									HX_STACK_LINE(266)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(266)
									Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(266)
									Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(266)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(266)
									Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(266)
									Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(266)
									Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(266)
									_z = tmp58;
								}
								else{
									HX_STACK_LINE(266)
									bool tmp29 = (order == (int)2);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									if ((tmp29)){
										HX_STACK_LINE(266)
										Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										{
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float value = tmp38;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(266)
											bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp30 = (int)-1;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												if ((tmp40)){
													HX_STACK_LINE(266)
													tmp30 = (int)1;
												}
												else{
													HX_STACK_LINE(266)
													tmp30 = value;
												}
											}
										}
										HX_STACK_LINE(266)
										Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										_x = tmp31;
										HX_STACK_LINE(266)
										Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(266)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(266)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(266)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(266)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(266)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(266)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(266)
										_y = tmp45;
										HX_STACK_LINE(266)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(266)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(266)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(266)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(266)
										Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(266)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(266)
										Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(266)
										Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(266)
										Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(266)
										Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(266)
										Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(266)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(266)
										Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(266)
										_z = tmp59;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp30 = (order == (int)3);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(266)
											Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(266)
											Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(266)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(266)
											Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(266)
											_x = tmp44;
											HX_STACK_LINE(266)
											Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(266)
											{
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float value = tmp53;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(266)
												bool tmp54 = (value < (int)-1);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												if ((tmp54)){
													HX_STACK_LINE(266)
													tmp45 = (int)-1;
												}
												else{
													HX_STACK_LINE(266)
													bool tmp55 = (value > (int)1);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													if ((tmp55)){
														HX_STACK_LINE(266)
														tmp45 = (int)1;
													}
													else{
														HX_STACK_LINE(266)
														tmp45 = value;
													}
												}
											}
											HX_STACK_LINE(266)
											Float tmp46 = ::Math_obj::asin(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(266)
											_y = tmp46;
											HX_STACK_LINE(266)
											Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(266)
											Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(266)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(266)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(266)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(266)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(266)
											Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(266)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(266)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(266)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(266)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(266)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(266)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(266)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(266)
											_z = tmp60;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp31 = (order == (int)4);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											if ((tmp31)){
												HX_STACK_LINE(266)
												Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(266)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(266)
												Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(266)
												Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(266)
												Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(266)
												Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(266)
												Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(266)
												Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(266)
												Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(266)
												Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(266)
												Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(266)
												Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(266)
												_x = tmp45;
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(266)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(266)
												Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(266)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(266)
												Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(266)
												_y = tmp59;
												HX_STACK_LINE(266)
												Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(266)
												{
													HX_STACK_LINE(266)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(266)
													Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(266)
													Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(266)
													Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(266)
													Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(266)
													Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(266)
													Float value = tmp68;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(266)
													bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(266)
													if ((tmp69)){
														HX_STACK_LINE(266)
														tmp60 = (int)-1;
													}
													else{
														HX_STACK_LINE(266)
														bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp60 = (int)1;
														}
														else{
															HX_STACK_LINE(266)
															tmp60 = value;
														}
													}
												}
												HX_STACK_LINE(266)
												Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(266)
												_z = tmp61;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp32 = (order == (int)5);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												if ((tmp32)){
													HX_STACK_LINE(266)
													Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(266)
													Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(266)
													Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(266)
													Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(266)
													Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
													HX_STACK_LINE(266)
													Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
													HX_STACK_LINE(266)
													Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(266)
													Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(266)
													Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(266)
													Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(266)
													Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(266)
													Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(266)
													Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(266)
													Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(266)
													_x = tmp46;
													HX_STACK_LINE(266)
													Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(266)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(266)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(266)
													Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(266)
													Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(266)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(266)
													Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(266)
													Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(266)
													Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(266)
													Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(266)
													Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(266)
													Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(266)
													Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(266)
													_y = tmp60;
													HX_STACK_LINE(266)
													Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													{
														HX_STACK_LINE(266)
														Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(266)
														Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(266)
														Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(266)
														Float tmp65 = this->x;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(266)
														Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(266)
														Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(266)
														Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(266)
														Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(266)
														Float value = tmp69;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(266)
														bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp61 = (int)-1;
														}
														else{
															HX_STACK_LINE(266)
															bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
															HX_STACK_LINE(266)
															if ((tmp71)){
																HX_STACK_LINE(266)
																tmp61 = (int)1;
															}
															else{
																HX_STACK_LINE(266)
																tmp61 = value;
															}
														}
													}
													HX_STACK_LINE(266)
													Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													_z = tmp62;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(266)
							{
								HX_STACK_LINE(266)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(266)
								_this->ignore_listeners = true;
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->x = _x;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->x;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_x(tmp31);
										}
										HX_STACK_LINE(266)
										_this->x;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->y = _y;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->y;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_y(tmp31);
										}
										HX_STACK_LINE(266)
										_this->y;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->z = _z;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->z;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_z != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_z(tmp31);
										}
										HX_STACK_LINE(266)
										_this->z;
									}
								}
								HX_STACK_LINE(266)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(266)
								bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									tmp29 = !(tmp31);
								}
								else{
									HX_STACK_LINE(266)
									tmp29 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp29)){
									HX_STACK_LINE(266)
									Float tmp30 = _this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_this->listen_x(tmp30);
								}
								HX_STACK_LINE(266)
								bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								if ((tmp30)){
									HX_STACK_LINE(266)
									bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									tmp31 = !(tmp33);
								}
								else{
									HX_STACK_LINE(266)
									tmp31 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp31)){
									HX_STACK_LINE(266)
									Float tmp32 = _this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									_this->listen_y(tmp32);
								}
								HX_STACK_LINE(266)
								bool tmp32 = (_this->listen_z != null());		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								if ((tmp32)){
									HX_STACK_LINE(266)
									bool tmp34 = _this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									tmp33 = !(tmp35);
								}
								else{
									HX_STACK_LINE(266)
									tmp33 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp33)){
									HX_STACK_LINE(266)
									Float tmp34 = _this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									_this->listen_z(tmp34);
								}
								HX_STACK_LINE(266)
								_this;
							}
							HX_STACK_LINE(266)
							_this;
						}
					}
					HX_STACK_LINE(266)
					Dynamic tmp7 = this->listen_x_dyn();		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(266)
					bool tmp8 = (tmp7 != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(266)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(266)
					if ((tmp8)){
						HX_STACK_LINE(266)
						bool tmp10 = this->ignore_listeners;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						tmp9 = !(tmp12);
					}
					else{
						HX_STACK_LINE(266)
						tmp9 = false;
					}
					HX_STACK_LINE(266)
					if ((tmp9)){
						HX_STACK_LINE(266)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						this->listen_x(tmp10);
					}
					HX_STACK_LINE(266)
					this->x;
				}
			}
			HX_STACK_LINE(266)
			{
				HX_STACK_LINE(266)
				Float tmp3 = this->y;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(266)
				Float tmp4 = l;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(266)
				Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(266)
				this->y = tmp5;
				HX_STACK_LINE(266)
				bool tmp6 = this->_construct;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(266)
				if ((tmp6)){
					HX_STACK_LINE(266)
					this->y;
				}
				else{
					HX_STACK_LINE(266)
					{
						HX_STACK_LINE(266)
						::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(266)
						bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(266)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(266)
						bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						if ((tmp10)){
							HX_STACK_LINE(266)
							tmp11 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(266)
							tmp11 = true;
						}
						HX_STACK_LINE(266)
						bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(266)
						if ((tmp12)){
							HX_STACK_LINE(266)
							tmp13 = this->_construct;
						}
						else{
							HX_STACK_LINE(266)
							tmp13 = true;
						}
						HX_STACK_LINE(266)
						if ((tmp13)){
							HX_STACK_LINE(266)
							Dynamic();
						}
						else{
							HX_STACK_LINE(266)
							::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(266)
							::phoenix::Vector _this = tmp14;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(266)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(266)
							Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(266)
							Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(266)
							Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(266)
							Float sqx = tmp17;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(266)
							Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(266)
							Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(266)
							Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(266)
							Float sqy = tmp20;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(266)
							Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(266)
							Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(266)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(266)
							Float sqz = tmp23;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(266)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(266)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(266)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(266)
							Float sqw = tmp26;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(266)
							Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
							HX_STACK_LINE(266)
							Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
							HX_STACK_LINE(266)
							Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
							HX_STACK_LINE(266)
							bool tmp27 = (order == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(266)
							if ((tmp27)){
								HX_STACK_LINE(266)
								Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(266)
								Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(266)
								Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(266)
								Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(266)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(266)
								Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(266)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(266)
								Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(266)
								_x = tmp41;
								HX_STACK_LINE(266)
								Float tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float value = tmp50;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(266)
									bool tmp51 = (value < (int)-1);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									if ((tmp51)){
										HX_STACK_LINE(266)
										tmp42 = (int)-1;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp52 = (value > (int)1);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										if ((tmp52)){
											HX_STACK_LINE(266)
											tmp42 = (int)1;
										}
										else{
											HX_STACK_LINE(266)
											tmp42 = value;
										}
									}
								}
								HX_STACK_LINE(266)
								Float tmp43 = ::Math_obj::asin(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(266)
								_y = tmp43;
								HX_STACK_LINE(266)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(266)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(266)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(266)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(266)
								Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(266)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(266)
								Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(266)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(266)
								Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(266)
								Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(266)
								Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(266)
								Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(266)
								Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(266)
								Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(266)
								_z = tmp57;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp28 = (order == (int)1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									{
										HX_STACK_LINE(266)
										Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float value = tmp37;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(266)
										bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										if ((tmp38)){
											HX_STACK_LINE(266)
											tmp29 = (int)-1;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp29 = (int)1;
											}
											else{
												HX_STACK_LINE(266)
												tmp29 = value;
											}
										}
									}
									HX_STACK_LINE(266)
									Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_x = tmp30;
									HX_STACK_LINE(266)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(266)
									Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(266)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(266)
									Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(266)
									Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(266)
									Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(266)
									Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(266)
									Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									_y = tmp44;
									HX_STACK_LINE(266)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(266)
									Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(266)
									Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(266)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(266)
									Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(266)
									Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(266)
									Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(266)
									_z = tmp58;
								}
								else{
									HX_STACK_LINE(266)
									bool tmp29 = (order == (int)2);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									if ((tmp29)){
										HX_STACK_LINE(266)
										Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										{
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float value = tmp38;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(266)
											bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp30 = (int)-1;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												if ((tmp40)){
													HX_STACK_LINE(266)
													tmp30 = (int)1;
												}
												else{
													HX_STACK_LINE(266)
													tmp30 = value;
												}
											}
										}
										HX_STACK_LINE(266)
										Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										_x = tmp31;
										HX_STACK_LINE(266)
										Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(266)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(266)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(266)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(266)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(266)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(266)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(266)
										_y = tmp45;
										HX_STACK_LINE(266)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(266)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(266)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(266)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(266)
										Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(266)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(266)
										Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(266)
										Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(266)
										Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(266)
										Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(266)
										Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(266)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(266)
										Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(266)
										_z = tmp59;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp30 = (order == (int)3);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(266)
											Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(266)
											Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(266)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(266)
											Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(266)
											_x = tmp44;
											HX_STACK_LINE(266)
											Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(266)
											{
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float value = tmp53;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(266)
												bool tmp54 = (value < (int)-1);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												if ((tmp54)){
													HX_STACK_LINE(266)
													tmp45 = (int)-1;
												}
												else{
													HX_STACK_LINE(266)
													bool tmp55 = (value > (int)1);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													if ((tmp55)){
														HX_STACK_LINE(266)
														tmp45 = (int)1;
													}
													else{
														HX_STACK_LINE(266)
														tmp45 = value;
													}
												}
											}
											HX_STACK_LINE(266)
											Float tmp46 = ::Math_obj::asin(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(266)
											_y = tmp46;
											HX_STACK_LINE(266)
											Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(266)
											Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(266)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(266)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(266)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(266)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(266)
											Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(266)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(266)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(266)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(266)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(266)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(266)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(266)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(266)
											_z = tmp60;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp31 = (order == (int)4);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											if ((tmp31)){
												HX_STACK_LINE(266)
												Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(266)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(266)
												Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(266)
												Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(266)
												Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(266)
												Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(266)
												Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(266)
												Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(266)
												Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(266)
												Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(266)
												Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(266)
												Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(266)
												_x = tmp45;
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(266)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(266)
												Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(266)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(266)
												Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(266)
												_y = tmp59;
												HX_STACK_LINE(266)
												Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(266)
												{
													HX_STACK_LINE(266)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(266)
													Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(266)
													Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(266)
													Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(266)
													Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(266)
													Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(266)
													Float value = tmp68;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(266)
													bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(266)
													if ((tmp69)){
														HX_STACK_LINE(266)
														tmp60 = (int)-1;
													}
													else{
														HX_STACK_LINE(266)
														bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp60 = (int)1;
														}
														else{
															HX_STACK_LINE(266)
															tmp60 = value;
														}
													}
												}
												HX_STACK_LINE(266)
												Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(266)
												_z = tmp61;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp32 = (order == (int)5);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												if ((tmp32)){
													HX_STACK_LINE(266)
													Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(266)
													Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(266)
													Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(266)
													Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(266)
													Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
													HX_STACK_LINE(266)
													Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
													HX_STACK_LINE(266)
													Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(266)
													Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(266)
													Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(266)
													Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(266)
													Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(266)
													Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(266)
													Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(266)
													Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(266)
													_x = tmp46;
													HX_STACK_LINE(266)
													Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(266)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(266)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(266)
													Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(266)
													Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(266)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(266)
													Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(266)
													Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(266)
													Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(266)
													Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(266)
													Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(266)
													Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(266)
													Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(266)
													_y = tmp60;
													HX_STACK_LINE(266)
													Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													{
														HX_STACK_LINE(266)
														Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(266)
														Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(266)
														Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(266)
														Float tmp65 = this->x;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(266)
														Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(266)
														Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(266)
														Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(266)
														Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(266)
														Float value = tmp69;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(266)
														bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp61 = (int)-1;
														}
														else{
															HX_STACK_LINE(266)
															bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
															HX_STACK_LINE(266)
															if ((tmp71)){
																HX_STACK_LINE(266)
																tmp61 = (int)1;
															}
															else{
																HX_STACK_LINE(266)
																tmp61 = value;
															}
														}
													}
													HX_STACK_LINE(266)
													Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													_z = tmp62;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(266)
							{
								HX_STACK_LINE(266)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(266)
								_this->ignore_listeners = true;
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->x = _x;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->x;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_x(tmp31);
										}
										HX_STACK_LINE(266)
										_this->x;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->y = _y;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->y;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_y(tmp31);
										}
										HX_STACK_LINE(266)
										_this->y;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->z = _z;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->z;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_z != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_z(tmp31);
										}
										HX_STACK_LINE(266)
										_this->z;
									}
								}
								HX_STACK_LINE(266)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(266)
								bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									tmp29 = !(tmp31);
								}
								else{
									HX_STACK_LINE(266)
									tmp29 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp29)){
									HX_STACK_LINE(266)
									Float tmp30 = _this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_this->listen_x(tmp30);
								}
								HX_STACK_LINE(266)
								bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								if ((tmp30)){
									HX_STACK_LINE(266)
									bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									tmp31 = !(tmp33);
								}
								else{
									HX_STACK_LINE(266)
									tmp31 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp31)){
									HX_STACK_LINE(266)
									Float tmp32 = _this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									_this->listen_y(tmp32);
								}
								HX_STACK_LINE(266)
								bool tmp32 = (_this->listen_z != null());		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								if ((tmp32)){
									HX_STACK_LINE(266)
									bool tmp34 = _this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									tmp33 = !(tmp35);
								}
								else{
									HX_STACK_LINE(266)
									tmp33 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp33)){
									HX_STACK_LINE(266)
									Float tmp34 = _this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									_this->listen_z(tmp34);
								}
								HX_STACK_LINE(266)
								_this;
							}
							HX_STACK_LINE(266)
							_this;
						}
					}
					HX_STACK_LINE(266)
					Dynamic tmp7 = this->listen_y_dyn();		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(266)
					bool tmp8 = (tmp7 != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(266)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(266)
					if ((tmp8)){
						HX_STACK_LINE(266)
						bool tmp10 = this->ignore_listeners;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						tmp9 = !(tmp12);
					}
					else{
						HX_STACK_LINE(266)
						tmp9 = false;
					}
					HX_STACK_LINE(266)
					if ((tmp9)){
						HX_STACK_LINE(266)
						Float tmp10 = this->y;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						this->listen_y(tmp10);
					}
					HX_STACK_LINE(266)
					this->y;
				}
			}
			HX_STACK_LINE(266)
			{
				HX_STACK_LINE(266)
				Float tmp3 = this->z;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(266)
				Float tmp4 = l;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(266)
				Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(266)
				this->z = tmp5;
				HX_STACK_LINE(266)
				bool tmp6 = this->_construct;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(266)
				if ((tmp6)){
					HX_STACK_LINE(266)
					this->z;
				}
				else{
					HX_STACK_LINE(266)
					{
						HX_STACK_LINE(266)
						::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(266)
						bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(266)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(266)
						bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						if ((tmp10)){
							HX_STACK_LINE(266)
							tmp11 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(266)
							tmp11 = true;
						}
						HX_STACK_LINE(266)
						bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(266)
						if ((tmp12)){
							HX_STACK_LINE(266)
							tmp13 = this->_construct;
						}
						else{
							HX_STACK_LINE(266)
							tmp13 = true;
						}
						HX_STACK_LINE(266)
						if ((tmp13)){
							HX_STACK_LINE(266)
							Dynamic();
						}
						else{
							HX_STACK_LINE(266)
							::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(266)
							::phoenix::Vector _this = tmp14;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(266)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(266)
							Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(266)
							Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(266)
							Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(266)
							Float sqx = tmp17;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(266)
							Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(266)
							Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(266)
							Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(266)
							Float sqy = tmp20;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(266)
							Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(266)
							Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(266)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(266)
							Float sqz = tmp23;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(266)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(266)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(266)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(266)
							Float sqw = tmp26;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(266)
							Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
							HX_STACK_LINE(266)
							Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
							HX_STACK_LINE(266)
							Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
							HX_STACK_LINE(266)
							bool tmp27 = (order == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(266)
							if ((tmp27)){
								HX_STACK_LINE(266)
								Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(266)
								Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(266)
								Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(266)
								Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(266)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(266)
								Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(266)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(266)
								Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(266)
								_x = tmp41;
								HX_STACK_LINE(266)
								Float tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float value = tmp50;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(266)
									bool tmp51 = (value < (int)-1);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									if ((tmp51)){
										HX_STACK_LINE(266)
										tmp42 = (int)-1;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp52 = (value > (int)1);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										if ((tmp52)){
											HX_STACK_LINE(266)
											tmp42 = (int)1;
										}
										else{
											HX_STACK_LINE(266)
											tmp42 = value;
										}
									}
								}
								HX_STACK_LINE(266)
								Float tmp43 = ::Math_obj::asin(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(266)
								_y = tmp43;
								HX_STACK_LINE(266)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(266)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(266)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(266)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(266)
								Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(266)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(266)
								Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(266)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(266)
								Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(266)
								Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(266)
								Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(266)
								Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(266)
								Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(266)
								Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(266)
								_z = tmp57;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp28 = (order == (int)1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									{
										HX_STACK_LINE(266)
										Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float value = tmp37;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(266)
										bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										if ((tmp38)){
											HX_STACK_LINE(266)
											tmp29 = (int)-1;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp29 = (int)1;
											}
											else{
												HX_STACK_LINE(266)
												tmp29 = value;
											}
										}
									}
									HX_STACK_LINE(266)
									Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_x = tmp30;
									HX_STACK_LINE(266)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(266)
									Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(266)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(266)
									Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(266)
									Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(266)
									Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(266)
									Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(266)
									Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									_y = tmp44;
									HX_STACK_LINE(266)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(266)
									Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(266)
									Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(266)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(266)
									Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(266)
									Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(266)
									Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(266)
									_z = tmp58;
								}
								else{
									HX_STACK_LINE(266)
									bool tmp29 = (order == (int)2);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									if ((tmp29)){
										HX_STACK_LINE(266)
										Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										{
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float value = tmp38;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(266)
											bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp30 = (int)-1;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												if ((tmp40)){
													HX_STACK_LINE(266)
													tmp30 = (int)1;
												}
												else{
													HX_STACK_LINE(266)
													tmp30 = value;
												}
											}
										}
										HX_STACK_LINE(266)
										Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										_x = tmp31;
										HX_STACK_LINE(266)
										Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(266)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(266)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(266)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(266)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(266)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(266)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(266)
										_y = tmp45;
										HX_STACK_LINE(266)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(266)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(266)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(266)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(266)
										Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(266)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(266)
										Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(266)
										Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(266)
										Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(266)
										Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(266)
										Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(266)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(266)
										Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(266)
										_z = tmp59;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp30 = (order == (int)3);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(266)
											Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(266)
											Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(266)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(266)
											Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(266)
											_x = tmp44;
											HX_STACK_LINE(266)
											Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(266)
											{
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float value = tmp53;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(266)
												bool tmp54 = (value < (int)-1);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												if ((tmp54)){
													HX_STACK_LINE(266)
													tmp45 = (int)-1;
												}
												else{
													HX_STACK_LINE(266)
													bool tmp55 = (value > (int)1);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													if ((tmp55)){
														HX_STACK_LINE(266)
														tmp45 = (int)1;
													}
													else{
														HX_STACK_LINE(266)
														tmp45 = value;
													}
												}
											}
											HX_STACK_LINE(266)
											Float tmp46 = ::Math_obj::asin(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(266)
											_y = tmp46;
											HX_STACK_LINE(266)
											Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(266)
											Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(266)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(266)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(266)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(266)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(266)
											Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(266)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(266)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(266)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(266)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(266)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(266)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(266)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(266)
											_z = tmp60;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp31 = (order == (int)4);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											if ((tmp31)){
												HX_STACK_LINE(266)
												Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(266)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(266)
												Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(266)
												Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(266)
												Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(266)
												Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(266)
												Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(266)
												Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(266)
												Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(266)
												Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(266)
												Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(266)
												Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(266)
												_x = tmp45;
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(266)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(266)
												Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(266)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(266)
												Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(266)
												_y = tmp59;
												HX_STACK_LINE(266)
												Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(266)
												{
													HX_STACK_LINE(266)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(266)
													Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(266)
													Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(266)
													Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(266)
													Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(266)
													Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(266)
													Float value = tmp68;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(266)
													bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(266)
													if ((tmp69)){
														HX_STACK_LINE(266)
														tmp60 = (int)-1;
													}
													else{
														HX_STACK_LINE(266)
														bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp60 = (int)1;
														}
														else{
															HX_STACK_LINE(266)
															tmp60 = value;
														}
													}
												}
												HX_STACK_LINE(266)
												Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(266)
												_z = tmp61;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp32 = (order == (int)5);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												if ((tmp32)){
													HX_STACK_LINE(266)
													Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(266)
													Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(266)
													Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(266)
													Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(266)
													Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
													HX_STACK_LINE(266)
													Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
													HX_STACK_LINE(266)
													Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(266)
													Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(266)
													Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(266)
													Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(266)
													Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(266)
													Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(266)
													Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(266)
													Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(266)
													_x = tmp46;
													HX_STACK_LINE(266)
													Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(266)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(266)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(266)
													Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(266)
													Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(266)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(266)
													Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(266)
													Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(266)
													Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(266)
													Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(266)
													Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(266)
													Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(266)
													Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(266)
													_y = tmp60;
													HX_STACK_LINE(266)
													Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													{
														HX_STACK_LINE(266)
														Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(266)
														Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(266)
														Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(266)
														Float tmp65 = this->x;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(266)
														Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(266)
														Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(266)
														Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(266)
														Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(266)
														Float value = tmp69;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(266)
														bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp61 = (int)-1;
														}
														else{
															HX_STACK_LINE(266)
															bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
															HX_STACK_LINE(266)
															if ((tmp71)){
																HX_STACK_LINE(266)
																tmp61 = (int)1;
															}
															else{
																HX_STACK_LINE(266)
																tmp61 = value;
															}
														}
													}
													HX_STACK_LINE(266)
													Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													_z = tmp62;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(266)
							{
								HX_STACK_LINE(266)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(266)
								_this->ignore_listeners = true;
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->x = _x;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->x;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_x(tmp31);
										}
										HX_STACK_LINE(266)
										_this->x;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->y = _y;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->y;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_y(tmp31);
										}
										HX_STACK_LINE(266)
										_this->y;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->z = _z;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->z;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_z != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_z(tmp31);
										}
										HX_STACK_LINE(266)
										_this->z;
									}
								}
								HX_STACK_LINE(266)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(266)
								bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									tmp29 = !(tmp31);
								}
								else{
									HX_STACK_LINE(266)
									tmp29 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp29)){
									HX_STACK_LINE(266)
									Float tmp30 = _this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_this->listen_x(tmp30);
								}
								HX_STACK_LINE(266)
								bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								if ((tmp30)){
									HX_STACK_LINE(266)
									bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									tmp31 = !(tmp33);
								}
								else{
									HX_STACK_LINE(266)
									tmp31 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp31)){
									HX_STACK_LINE(266)
									Float tmp32 = _this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									_this->listen_y(tmp32);
								}
								HX_STACK_LINE(266)
								bool tmp32 = (_this->listen_z != null());		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								if ((tmp32)){
									HX_STACK_LINE(266)
									bool tmp34 = _this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									tmp33 = !(tmp35);
								}
								else{
									HX_STACK_LINE(266)
									tmp33 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp33)){
									HX_STACK_LINE(266)
									Float tmp34 = _this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									_this->listen_z(tmp34);
								}
								HX_STACK_LINE(266)
								_this;
							}
							HX_STACK_LINE(266)
							_this;
						}
					}
					HX_STACK_LINE(266)
					Dynamic tmp7 = this->listen_z_dyn();		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(266)
					bool tmp8 = (tmp7 != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(266)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(266)
					if ((tmp8)){
						HX_STACK_LINE(266)
						bool tmp10 = this->ignore_listeners;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						tmp9 = !(tmp12);
					}
					else{
						HX_STACK_LINE(266)
						tmp9 = false;
					}
					HX_STACK_LINE(266)
					if ((tmp9)){
						HX_STACK_LINE(266)
						Float tmp10 = this->z;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						this->listen_z(tmp10);
					}
					HX_STACK_LINE(266)
					this->z;
				}
			}
			HX_STACK_LINE(266)
			{
				HX_STACK_LINE(266)
				Float tmp3 = this->w;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(266)
				Float tmp4 = l;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(266)
				Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(266)
				this->w = tmp5;
				HX_STACK_LINE(266)
				bool tmp6 = this->_construct;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(266)
				if ((tmp6)){
					HX_STACK_LINE(266)
					this->w;
				}
				else{
					HX_STACK_LINE(266)
					{
						HX_STACK_LINE(266)
						::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
						HX_STACK_LINE(266)
						bool tmp8 = (tmp7 == null());		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(266)
						bool tmp9 = !(tmp8);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(266)
						bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						if ((tmp10)){
							HX_STACK_LINE(266)
							tmp11 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(266)
							tmp11 = true;
						}
						HX_STACK_LINE(266)
						bool tmp12 = !(tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						bool tmp13;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(266)
						if ((tmp12)){
							HX_STACK_LINE(266)
							tmp13 = this->_construct;
						}
						else{
							HX_STACK_LINE(266)
							tmp13 = true;
						}
						HX_STACK_LINE(266)
						if ((tmp13)){
							HX_STACK_LINE(266)
							Dynamic();
						}
						else{
							HX_STACK_LINE(266)
							::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(266)
							::phoenix::Vector _this = tmp14;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(266)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(266)
							Float tmp15 = this->x;		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(266)
							Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(266)
							Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(266)
							Float sqx = tmp17;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(266)
							Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(266)
							Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(266)
							Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(266)
							Float sqy = tmp20;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(266)
							Float tmp21 = this->z;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(266)
							Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(266)
							Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(266)
							Float sqz = tmp23;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(266)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(266)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(266)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(266)
							Float sqw = tmp26;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(266)
							Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
							HX_STACK_LINE(266)
							Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
							HX_STACK_LINE(266)
							Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
							HX_STACK_LINE(266)
							bool tmp27 = (order == (int)0);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(266)
							if ((tmp27)){
								HX_STACK_LINE(266)
								Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(266)
								Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(266)
								Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(266)
								Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(266)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(266)
								Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(266)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(266)
								Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(266)
								_x = tmp41;
								HX_STACK_LINE(266)
								Float tmp42;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float value = tmp50;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(266)
									bool tmp51 = (value < (int)-1);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									if ((tmp51)){
										HX_STACK_LINE(266)
										tmp42 = (int)-1;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp52 = (value > (int)1);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										if ((tmp52)){
											HX_STACK_LINE(266)
											tmp42 = (int)1;
										}
										else{
											HX_STACK_LINE(266)
											tmp42 = value;
										}
									}
								}
								HX_STACK_LINE(266)
								Float tmp43 = ::Math_obj::asin(tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(266)
								_y = tmp43;
								HX_STACK_LINE(266)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(266)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(266)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(266)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(266)
								Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(266)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(266)
								Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(266)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(266)
								Float tmp52 = (sqw + sqx);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(266)
								Float tmp53 = sqy;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(266)
								Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(266)
								Float tmp55 = sqz;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(266)
								Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(266)
								Float tmp57 = ::Math_obj::atan2(tmp51,tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(266)
								_z = tmp57;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp28 = (order == (int)1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									Float tmp29;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									{
										HX_STACK_LINE(266)
										Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = (tmp32 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = ((int)2 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float value = tmp37;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(266)
										bool tmp38 = (value < (int)-1);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										if ((tmp38)){
											HX_STACK_LINE(266)
											tmp29 = (int)-1;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp39 = (value > (int)1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp29 = (int)1;
											}
											else{
												HX_STACK_LINE(266)
												tmp29 = value;
											}
										}
									}
									HX_STACK_LINE(266)
									Float tmp30 = ::Math_obj::asin(tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_x = tmp30;
									HX_STACK_LINE(266)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(266)
									Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(266)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(266)
									Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(266)
									Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(266)
									Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(266)
									Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(266)
									Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									_y = tmp44;
									HX_STACK_LINE(266)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(266)
									Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(266)
									Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(266)
									Float tmp55 = (tmp53 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(266)
									Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(266)
									Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(266)
									Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(266)
									_z = tmp58;
								}
								else{
									HX_STACK_LINE(266)
									bool tmp29 = (order == (int)2);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									if ((tmp29)){
										HX_STACK_LINE(266)
										Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										{
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float value = tmp38;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(266)
											bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											if ((tmp39)){
												HX_STACK_LINE(266)
												tmp30 = (int)-1;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												if ((tmp40)){
													HX_STACK_LINE(266)
													tmp30 = (int)1;
												}
												else{
													HX_STACK_LINE(266)
													tmp30 = value;
												}
											}
										}
										HX_STACK_LINE(266)
										Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										_x = tmp31;
										HX_STACK_LINE(266)
										Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(266)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(266)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(266)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(266)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(266)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(266)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(266)
										_y = tmp45;
										HX_STACK_LINE(266)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(266)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(266)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(266)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(266)
										Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(266)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(266)
										Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(266)
										Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(266)
										Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(266)
										Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(266)
										Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(266)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(266)
										Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(266)
										_z = tmp59;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp30 = (order == (int)3);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float tmp39 = (sqw - sqx);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											Float tmp40 = sqy;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(266)
											Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(266)
											Float tmp42 = sqz;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(266)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(266)
											Float tmp44 = ::Math_obj::atan2(tmp38,tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(266)
											_x = tmp44;
											HX_STACK_LINE(266)
											Float tmp45;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(266)
											{
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float value = tmp53;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(266)
												bool tmp54 = (value < (int)-1);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												if ((tmp54)){
													HX_STACK_LINE(266)
													tmp45 = (int)-1;
												}
												else{
													HX_STACK_LINE(266)
													bool tmp55 = (value > (int)1);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													if ((tmp55)){
														HX_STACK_LINE(266)
														tmp45 = (int)1;
													}
													else{
														HX_STACK_LINE(266)
														tmp45 = value;
													}
												}
											}
											HX_STACK_LINE(266)
											Float tmp46 = ::Math_obj::asin(tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(266)
											_y = tmp46;
											HX_STACK_LINE(266)
											Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(266)
											Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(266)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(266)
											Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(266)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(266)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(266)
											Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(266)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(266)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(266)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(266)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(266)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(266)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(266)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(266)
											_z = tmp60;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp31 = (order == (int)4);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											if ((tmp31)){
												HX_STACK_LINE(266)
												Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(266)
												Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(266)
												Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(266)
												Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(266)
												Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(266)
												Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(266)
												Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(266)
												Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(266)
												Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(266)
												Float tmp42 = (tmp40 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(266)
												Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(266)
												Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(266)
												Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(266)
												_x = tmp45;
												HX_STACK_LINE(266)
												Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(266)
												Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(266)
												Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(266)
												Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(266)
												Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(266)
												Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(266)
												Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(266)
												Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(266)
												Float tmp54 = (sqw + sqx);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(266)
												Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(266)
												Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(266)
												Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(266)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(266)
												Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(266)
												_y = tmp59;
												HX_STACK_LINE(266)
												Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(266)
												{
													HX_STACK_LINE(266)
													Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(266)
													Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(266)
													Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(266)
													Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(266)
													Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(266)
													Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(266)
													Float value = tmp68;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(266)
													bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(266)
													if ((tmp69)){
														HX_STACK_LINE(266)
														tmp60 = (int)-1;
													}
													else{
														HX_STACK_LINE(266)
														bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp60 = (int)1;
														}
														else{
															HX_STACK_LINE(266)
															tmp60 = value;
														}
													}
												}
												HX_STACK_LINE(266)
												Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(266)
												_z = tmp61;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp32 = (order == (int)5);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(266)
												if ((tmp32)){
													HX_STACK_LINE(266)
													Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
													HX_STACK_LINE(266)
													Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
													HX_STACK_LINE(266)
													Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
													HX_STACK_LINE(266)
													Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
													HX_STACK_LINE(266)
													Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
													HX_STACK_LINE(266)
													Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
													HX_STACK_LINE(266)
													Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(266)
													Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(266)
													Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(266)
													Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(266)
													Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(266)
													Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(266)
													Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(266)
													Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(266)
													_x = tmp46;
													HX_STACK_LINE(266)
													Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(266)
													Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(266)
													Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(266)
													Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(266)
													Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(266)
													Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(266)
													Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(266)
													Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(266)
													Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(266)
													Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(266)
													Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(266)
													Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(266)
													Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(266)
													Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(266)
													_y = tmp60;
													HX_STACK_LINE(266)
													Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(266)
													{
														HX_STACK_LINE(266)
														Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
														HX_STACK_LINE(266)
														Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
														HX_STACK_LINE(266)
														Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
														HX_STACK_LINE(266)
														Float tmp65 = this->x;		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(266)
														Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(266)
														Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
														HX_STACK_LINE(266)
														Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
														HX_STACK_LINE(266)
														Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(266)
														Float value = tmp69;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(266)
														bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(266)
														if ((tmp70)){
															HX_STACK_LINE(266)
															tmp61 = (int)-1;
														}
														else{
															HX_STACK_LINE(266)
															bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
															HX_STACK_LINE(266)
															if ((tmp71)){
																HX_STACK_LINE(266)
																tmp61 = (int)1;
															}
															else{
																HX_STACK_LINE(266)
																tmp61 = value;
															}
														}
													}
													HX_STACK_LINE(266)
													Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(266)
													_z = tmp62;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(266)
							{
								HX_STACK_LINE(266)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(266)
								_this->ignore_listeners = true;
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->x = _x;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->x;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _x;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_x(tmp31);
										}
										HX_STACK_LINE(266)
										_this->x;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->y = _y;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->y;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_y != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_y(tmp31);
										}
										HX_STACK_LINE(266)
										_this->y;
									}
								}
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									_this->z = _z;
									HX_STACK_LINE(266)
									bool tmp28 = _this->_construct;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									if ((tmp28)){
										HX_STACK_LINE(266)
										_this->z;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp29 = (_this->listen_z != null());		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										if ((tmp29)){
											HX_STACK_LINE(266)
											bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											tmp30 = !(tmp32);
										}
										else{
											HX_STACK_LINE(266)
											tmp30 = false;
										}
										HX_STACK_LINE(266)
										if ((tmp30)){
											HX_STACK_LINE(266)
											Float tmp31 = _z;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											_this->listen_z(tmp31);
										}
										HX_STACK_LINE(266)
										_this->z;
									}
								}
								HX_STACK_LINE(266)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(266)
								bool tmp28 = (_this->listen_x != null());		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								if ((tmp28)){
									HX_STACK_LINE(266)
									bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									tmp29 = !(tmp31);
								}
								else{
									HX_STACK_LINE(266)
									tmp29 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp29)){
									HX_STACK_LINE(266)
									Float tmp30 = _this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									_this->listen_x(tmp30);
								}
								HX_STACK_LINE(266)
								bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								if ((tmp30)){
									HX_STACK_LINE(266)
									bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									tmp31 = !(tmp33);
								}
								else{
									HX_STACK_LINE(266)
									tmp31 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp31)){
									HX_STACK_LINE(266)
									Float tmp32 = _this->y;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									_this->listen_y(tmp32);
								}
								HX_STACK_LINE(266)
								bool tmp32 = (_this->listen_z != null());		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								if ((tmp32)){
									HX_STACK_LINE(266)
									bool tmp34 = _this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									tmp33 = !(tmp35);
								}
								else{
									HX_STACK_LINE(266)
									tmp33 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp33)){
									HX_STACK_LINE(266)
									Float tmp34 = _this->z;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									_this->listen_z(tmp34);
								}
								HX_STACK_LINE(266)
								_this;
							}
							HX_STACK_LINE(266)
							_this;
						}
					}
					HX_STACK_LINE(266)
					Dynamic tmp7 = this->listen_w_dyn();		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(266)
					bool tmp8 = (tmp7 != null());		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(266)
					bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(266)
					if ((tmp8)){
						HX_STACK_LINE(266)
						bool tmp10 = this->ignore_listeners;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(266)
						bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(266)
						tmp9 = !(tmp12);
					}
					else{
						HX_STACK_LINE(266)
						tmp9 = false;
					}
					HX_STACK_LINE(266)
					if ((tmp9)){
						HX_STACK_LINE(266)
						Float tmp10 = this->w;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(266)
						this->listen_w(tmp10);
					}
					HX_STACK_LINE(266)
					this->w;
				}
			}
			HX_STACK_LINE(266)
			this->ignore_euler = false;
			HX_STACK_LINE(266)
			{
				HX_STACK_LINE(266)
				::phoenix::Vector tmp3 = this->euler;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(266)
				bool tmp4 = (tmp3 == null());		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(266)
				bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(266)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(266)
				bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(266)
				if ((tmp6)){
					HX_STACK_LINE(266)
					tmp7 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(266)
					tmp7 = true;
				}
				HX_STACK_LINE(266)
				bool tmp8 = !(tmp7);		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(266)
				bool tmp9;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(266)
				if ((tmp8)){
					HX_STACK_LINE(266)
					tmp9 = this->_construct;
				}
				else{
					HX_STACK_LINE(266)
					tmp9 = true;
				}
				HX_STACK_LINE(266)
				if ((tmp9)){
					HX_STACK_LINE(266)
					Dynamic();
				}
				else{
					HX_STACK_LINE(266)
					::phoenix::Vector tmp10 = this->euler;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(266)
					::phoenix::Vector _this = tmp10;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(266)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(266)
					Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(266)
					Float tmp12 = this->x;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(266)
					Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(266)
					Float sqx = tmp13;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(266)
					Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(266)
					Float tmp15 = this->y;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(266)
					Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(266)
					Float sqy = tmp16;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(266)
					Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(266)
					Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(266)
					Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(266)
					Float sqz = tmp19;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(266)
					Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(266)
					Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(266)
					Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(266)
					Float sqw = tmp22;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(266)
					Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
					HX_STACK_LINE(266)
					Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
					HX_STACK_LINE(266)
					Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
					HX_STACK_LINE(266)
					bool tmp23 = (order == (int)0);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(266)
					if ((tmp23)){
						HX_STACK_LINE(266)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(266)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(266)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(266)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(266)
						Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(266)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(266)
						Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(266)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(266)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(266)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(266)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(266)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(266)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(266)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(266)
						_x = tmp37;
						HX_STACK_LINE(266)
						Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(266)
						{
							HX_STACK_LINE(266)
							Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(266)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(266)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(266)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(266)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(266)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(266)
							Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(266)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(266)
							Float value = tmp46;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(266)
							bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(266)
							if ((tmp47)){
								HX_STACK_LINE(266)
								tmp38 = (int)-1;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(266)
								if ((tmp48)){
									HX_STACK_LINE(266)
									tmp38 = (int)1;
								}
								else{
									HX_STACK_LINE(266)
									tmp38 = value;
								}
							}
						}
						HX_STACK_LINE(266)
						Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(266)
						_y = tmp39;
						HX_STACK_LINE(266)
						Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(266)
						Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(266)
						Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(266)
						Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(266)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(266)
						Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(266)
						Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(266)
						Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(266)
						Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(266)
						Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(266)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(266)
						Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(266)
						Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(266)
						Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(266)
						_z = tmp53;
					}
					else{
						HX_STACK_LINE(266)
						bool tmp24 = (order == (int)1);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(266)
						if ((tmp24)){
							HX_STACK_LINE(266)
							Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(266)
							{
								HX_STACK_LINE(266)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(266)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(266)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								Float value = tmp33;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(266)
								bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(266)
								if ((tmp34)){
									HX_STACK_LINE(266)
									tmp25 = (int)-1;
								}
								else{
									HX_STACK_LINE(266)
									bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									if ((tmp35)){
										HX_STACK_LINE(266)
										tmp25 = (int)1;
									}
									else{
										HX_STACK_LINE(266)
										tmp25 = value;
									}
								}
							}
							HX_STACK_LINE(266)
							Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(266)
							_x = tmp26;
							HX_STACK_LINE(266)
							Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(266)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(266)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(266)
							Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(266)
							Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(266)
							Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(266)
							Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(266)
							Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(266)
							Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(266)
							Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(266)
							Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(266)
							Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(266)
							Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(266)
							Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(266)
							_y = tmp40;
							HX_STACK_LINE(266)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(266)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(266)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(266)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(266)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(266)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(266)
							Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(266)
							Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(266)
							Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(266)
							Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(266)
							Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(266)
							Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(266)
							Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(266)
							Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(266)
							_z = tmp54;
						}
						else{
							HX_STACK_LINE(266)
							bool tmp25 = (order == (int)2);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(266)
							if ((tmp25)){
								HX_STACK_LINE(266)
								Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(266)
								{
									HX_STACK_LINE(266)
									Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									Float value = tmp34;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(266)
									bool tmp35 = (value < (int)-1);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									if ((tmp35)){
										HX_STACK_LINE(266)
										tmp26 = (int)-1;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp36 = (value > (int)1);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										if ((tmp36)){
											HX_STACK_LINE(266)
											tmp26 = (int)1;
										}
										else{
											HX_STACK_LINE(266)
											tmp26 = value;
										}
									}
								}
								HX_STACK_LINE(266)
								Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(266)
								_x = tmp27;
								HX_STACK_LINE(266)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(266)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(266)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(266)
								Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(266)
								Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(266)
								Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(266)
								Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(266)
								Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(266)
								Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(266)
								Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(266)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(266)
								Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(266)
								Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(266)
								Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(266)
								_y = tmp41;
								HX_STACK_LINE(266)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(266)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(266)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(266)
								Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(266)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(266)
								Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(266)
								Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(266)
								Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(266)
								Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(266)
								Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(266)
								Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(266)
								Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(266)
								Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(266)
								Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(266)
								_z = tmp55;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp26 = (order == (int)3);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(266)
								if ((tmp26)){
									HX_STACK_LINE(266)
									Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(266)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(266)
									Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(266)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(266)
									Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(266)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(266)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(266)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(266)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(266)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(266)
									Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(266)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(266)
									_x = tmp40;
									HX_STACK_LINE(266)
									Float tmp41;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(266)
									{
										HX_STACK_LINE(266)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(266)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(266)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(266)
										Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(266)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(266)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(266)
										Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(266)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(266)
										Float value = tmp49;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(266)
										bool tmp50 = (value < (int)-1);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(266)
										if ((tmp50)){
											HX_STACK_LINE(266)
											tmp41 = (int)-1;
										}
										else{
											HX_STACK_LINE(266)
											bool tmp51 = (value > (int)1);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(266)
											if ((tmp51)){
												HX_STACK_LINE(266)
												tmp41 = (int)1;
											}
											else{
												HX_STACK_LINE(266)
												tmp41 = value;
											}
										}
									}
									HX_STACK_LINE(266)
									Float tmp42 = ::Math_obj::asin(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(266)
									_y = tmp42;
									HX_STACK_LINE(266)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(266)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(266)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(266)
									Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(266)
									Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(266)
									Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(266)
									Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(266)
									Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(266)
									Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(266)
									Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(266)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(266)
									Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(266)
									Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(266)
									Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(266)
									_z = tmp56;
								}
								else{
									HX_STACK_LINE(266)
									bool tmp27 = (order == (int)4);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									if ((tmp27)){
										HX_STACK_LINE(266)
										Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(266)
										Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(266)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(266)
										Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(266)
										Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(266)
										Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(266)
										Float tmp34 = (tmp30 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(266)
										Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(266)
										Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(266)
										Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(266)
										Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(266)
										Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(266)
										Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(266)
										Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(266)
										_x = tmp41;
										HX_STACK_LINE(266)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(266)
										Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(266)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(266)
										Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(266)
										Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(266)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(266)
										Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(266)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(266)
										Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(266)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(266)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(266)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(266)
										Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(266)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(266)
										_y = tmp55;
										HX_STACK_LINE(266)
										Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(266)
										{
											HX_STACK_LINE(266)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(266)
											Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(266)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(266)
											Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(266)
											Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(266)
											Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(266)
											Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(266)
											Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(266)
											Float value = tmp64;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(266)
											bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(266)
											if ((tmp65)){
												HX_STACK_LINE(266)
												tmp56 = (int)-1;
											}
											else{
												HX_STACK_LINE(266)
												bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(266)
												if ((tmp66)){
													HX_STACK_LINE(266)
													tmp56 = (int)1;
												}
												else{
													HX_STACK_LINE(266)
													tmp56 = value;
												}
											}
										}
										HX_STACK_LINE(266)
										Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(266)
										_z = tmp57;
									}
									else{
										HX_STACK_LINE(266)
										bool tmp28 = (order == (int)5);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(266)
										if ((tmp28)){
											HX_STACK_LINE(266)
											Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(266)
											Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(266)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(266)
											Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(266)
											Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(266)
											Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(266)
											Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(266)
											Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(266)
											Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(266)
											Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(266)
											Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(266)
											Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(266)
											Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(266)
											Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(266)
											_x = tmp42;
											HX_STACK_LINE(266)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(266)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(266)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(266)
											Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(266)
											Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(266)
											Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(266)
											Float tmp49 = (tmp45 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(266)
											Float tmp50 = ((int)2 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(266)
											Float tmp51 = (sqw + sqx);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(266)
											Float tmp52 = sqy;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(266)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(266)
											Float tmp54 = sqz;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(266)
											Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(266)
											Float tmp56 = ::Math_obj::atan2(tmp50,tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(266)
											_y = tmp56;
											HX_STACK_LINE(266)
											Float tmp57;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(266)
											{
												HX_STACK_LINE(266)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(266)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(266)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(266)
												Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(266)
												Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(266)
												Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(266)
												Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(266)
												Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(266)
												Float value = tmp65;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(266)
												bool tmp66 = (value < (int)-1);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(266)
												if ((tmp66)){
													HX_STACK_LINE(266)
													tmp57 = (int)-1;
												}
												else{
													HX_STACK_LINE(266)
													bool tmp67 = (value > (int)1);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(266)
													if ((tmp67)){
														HX_STACK_LINE(266)
														tmp57 = (int)1;
													}
													else{
														HX_STACK_LINE(266)
														tmp57 = value;
													}
												}
											}
											HX_STACK_LINE(266)
											Float tmp58 = ::Math_obj::asin(tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(266)
											_z = tmp58;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(266)
					{
						HX_STACK_LINE(266)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(266)
						_this->ignore_listeners = true;
						HX_STACK_LINE(266)
						{
							HX_STACK_LINE(266)
							_this->x = _x;
							HX_STACK_LINE(266)
							bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(266)
							if ((tmp24)){
								HX_STACK_LINE(266)
								_this->x;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp25 = (_this->listen_x != null());		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(266)
								bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(266)
								if ((tmp25)){
									HX_STACK_LINE(266)
									bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									tmp26 = !(tmp28);
								}
								else{
									HX_STACK_LINE(266)
									tmp26 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp26)){
									HX_STACK_LINE(266)
									Float tmp27 = _x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									_this->listen_x(tmp27);
								}
								HX_STACK_LINE(266)
								_this->x;
							}
						}
						HX_STACK_LINE(266)
						{
							HX_STACK_LINE(266)
							_this->y = _y;
							HX_STACK_LINE(266)
							bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(266)
							if ((tmp24)){
								HX_STACK_LINE(266)
								_this->y;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(266)
								bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(266)
								if ((tmp25)){
									HX_STACK_LINE(266)
									bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									tmp26 = !(tmp28);
								}
								else{
									HX_STACK_LINE(266)
									tmp26 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp26)){
									HX_STACK_LINE(266)
									Float tmp27 = _y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									_this->listen_y(tmp27);
								}
								HX_STACK_LINE(266)
								_this->y;
							}
						}
						HX_STACK_LINE(266)
						{
							HX_STACK_LINE(266)
							_this->z = _z;
							HX_STACK_LINE(266)
							bool tmp24 = _this->_construct;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(266)
							if ((tmp24)){
								HX_STACK_LINE(266)
								_this->z;
							}
							else{
								HX_STACK_LINE(266)
								bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(266)
								bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(266)
								if ((tmp25)){
									HX_STACK_LINE(266)
									bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(266)
									tmp26 = !(tmp28);
								}
								else{
									HX_STACK_LINE(266)
									tmp26 = false;
								}
								HX_STACK_LINE(266)
								if ((tmp26)){
									HX_STACK_LINE(266)
									Float tmp27 = _z;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(266)
									_this->listen_z(tmp27);
								}
								HX_STACK_LINE(266)
								_this->z;
							}
						}
						HX_STACK_LINE(266)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(266)
						bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(266)
						bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(266)
						if ((tmp24)){
							HX_STACK_LINE(266)
							bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(266)
							bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(266)
							tmp25 = !(tmp27);
						}
						else{
							HX_STACK_LINE(266)
							tmp25 = false;
						}
						HX_STACK_LINE(266)
						if ((tmp25)){
							HX_STACK_LINE(266)
							Float tmp26 = _this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(266)
							_this->listen_x(tmp26);
						}
						HX_STACK_LINE(266)
						bool tmp26 = (_this->listen_y != null());		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(266)
						bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(266)
						if ((tmp26)){
							HX_STACK_LINE(266)
							bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(266)
							bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(266)
							tmp27 = !(tmp29);
						}
						else{
							HX_STACK_LINE(266)
							tmp27 = false;
						}
						HX_STACK_LINE(266)
						if ((tmp27)){
							HX_STACK_LINE(266)
							Float tmp28 = _this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(266)
							_this->listen_y(tmp28);
						}
						HX_STACK_LINE(266)
						bool tmp28 = (_this->listen_z != null());		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(266)
						bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(266)
						if ((tmp28)){
							HX_STACK_LINE(266)
							bool tmp30 = _this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(266)
							bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(266)
							tmp29 = !(tmp31);
						}
						else{
							HX_STACK_LINE(266)
							tmp29 = false;
						}
						HX_STACK_LINE(266)
						if ((tmp29)){
							HX_STACK_LINE(266)
							Float tmp30 = _this->z;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(266)
							_this->listen_z(tmp30);
						}
						HX_STACK_LINE(266)
						_this;
					}
					HX_STACK_LINE(266)
					_this;
				}
			}
			HX_STACK_LINE(266)
			Dynamic tmp3 = this->listen_x_dyn();		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(266)
			bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(266)
			bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(266)
			if ((tmp4)){
				HX_STACK_LINE(266)
				bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(266)
				bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(266)
				bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(266)
				tmp5 = !(tmp8);
			}
			else{
				HX_STACK_LINE(266)
				tmp5 = false;
			}
			HX_STACK_LINE(266)
			if ((tmp5)){
				HX_STACK_LINE(266)
				Float tmp6 = this->x;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(266)
				this->listen_x(tmp6);
			}
			HX_STACK_LINE(266)
			Dynamic tmp6 = this->listen_y_dyn();		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(266)
			bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(266)
			bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(266)
			if ((tmp7)){
				HX_STACK_LINE(266)
				bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(266)
				bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(266)
				bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(266)
				tmp8 = !(tmp11);
			}
			else{
				HX_STACK_LINE(266)
				tmp8 = false;
			}
			HX_STACK_LINE(266)
			if ((tmp8)){
				HX_STACK_LINE(266)
				Float tmp9 = this->y;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(266)
				this->listen_y(tmp9);
			}
			HX_STACK_LINE(266)
			Dynamic tmp9 = this->listen_z_dyn();		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(266)
			bool tmp10 = (tmp9 != null());		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(266)
			bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(266)
			if ((tmp10)){
				HX_STACK_LINE(266)
				bool tmp12 = this->ignore_listeners;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(266)
				bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(266)
				bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(266)
				tmp11 = !(tmp14);
			}
			else{
				HX_STACK_LINE(266)
				tmp11 = false;
			}
			HX_STACK_LINE(266)
			if ((tmp11)){
				HX_STACK_LINE(266)
				Float tmp12 = this->z;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(266)
				this->listen_z(tmp12);
			}
			HX_STACK_LINE(266)
			Dynamic tmp12 = this->listen_w_dyn();		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(266)
			bool tmp13 = (tmp12 != null());		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(266)
			bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(266)
			if ((tmp13)){
				HX_STACK_LINE(266)
				bool tmp15 = this->ignore_listeners;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(266)
				bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(266)
				bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(266)
				tmp14 = !(tmp17);
			}
			else{
				HX_STACK_LINE(266)
				tmp14 = false;
			}
			HX_STACK_LINE(266)
			if ((tmp14)){
				HX_STACK_LINE(266)
				Float tmp15 = this->w;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(266)
				this->listen_w(tmp15);
			}
		}
	}
	HX_STACK_LINE(270)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,normalize,return )

::phoenix::Quaternion Quaternion_obj::multiply( ::phoenix::Quaternion _quaternion){
	HX_STACK_FRAME("phoenix.Quaternion","multiply",0x47312cf5,"phoenix.Quaternion.multiply","phoenix/Quaternion.hx",286,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_quaternion,"_quaternion")
	HX_STACK_LINE(288)
	::phoenix::Quaternion tmp = _quaternion;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(288)
	::phoenix::Quaternion tmp1 = this->multiplyQuaternions(hx::ObjectPtr<OBJ_>(this),tmp);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(288)
	return tmp1;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,multiply,return )

::phoenix::Quaternion Quaternion_obj::add( ::phoenix::Quaternion _quaternion){
	HX_STACK_FRAME("phoenix.Quaternion","add",0x41cb98f0,"phoenix.Quaternion.add","phoenix/Quaternion.hx",292,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_quaternion,"_quaternion")
	HX_STACK_LINE(294)
	::phoenix::Quaternion tmp = _quaternion;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(294)
	::phoenix::Quaternion tmp1 = this->addQuaternions(hx::ObjectPtr<OBJ_>(this),tmp);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(294)
	return tmp1;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,add,return )

::phoenix::Quaternion Quaternion_obj::addQuaternions( ::phoenix::Quaternion _a,::phoenix::Quaternion _b){
	HX_STACK_FRAME("phoenix.Quaternion","addQuaternions",0xb1d63285,"phoenix.Quaternion.addQuaternions","phoenix/Quaternion.hx",298,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_a,"_a")
	HX_STACK_ARG(_b,"_b")
	HX_STACK_LINE(300)
	{
		HX_STACK_LINE(300)
		Float tmp = (_a->x + _b->x);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(300)
		this->x = tmp;
		HX_STACK_LINE(300)
		bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(300)
		if ((tmp1)){
			HX_STACK_LINE(300)
			this->x;
		}
		else{
			HX_STACK_LINE(300)
			{
				HX_STACK_LINE(300)
				::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(300)
				bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(300)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(300)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(300)
				bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(300)
				if ((tmp5)){
					HX_STACK_LINE(300)
					tmp6 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(300)
					tmp6 = true;
				}
				HX_STACK_LINE(300)
				bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(300)
				bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(300)
				if ((tmp7)){
					HX_STACK_LINE(300)
					tmp8 = this->_construct;
				}
				else{
					HX_STACK_LINE(300)
					tmp8 = true;
				}
				HX_STACK_LINE(300)
				if ((tmp8)){
					HX_STACK_LINE(300)
					Dynamic();
				}
				else{
					HX_STACK_LINE(300)
					::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(300)
					::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(300)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(300)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(300)
					Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(300)
					Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(300)
					Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(300)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(300)
					Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(300)
					Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(300)
					Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(300)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(300)
					Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(300)
					Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(300)
					Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(300)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(300)
					Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(300)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(300)
					Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(300)
					Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
					HX_STACK_LINE(300)
					Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
					HX_STACK_LINE(300)
					Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
					HX_STACK_LINE(300)
					bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(300)
					if ((tmp22)){
						HX_STACK_LINE(300)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(300)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(300)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(300)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(300)
						Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(300)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(300)
						Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(300)
						Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(300)
						Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(300)
						Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(300)
						Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(300)
						Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(300)
						Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(300)
						Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(300)
						_x = tmp36;
						HX_STACK_LINE(300)
						Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(300)
						{
							HX_STACK_LINE(300)
							Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(300)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(300)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(300)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(300)
							Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(300)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(300)
							Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(300)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(300)
							Float value = tmp45;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(300)
							bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(300)
							if ((tmp46)){
								HX_STACK_LINE(300)
								tmp37 = (int)-1;
							}
							else{
								HX_STACK_LINE(300)
								bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(300)
								if ((tmp47)){
									HX_STACK_LINE(300)
									tmp37 = (int)1;
								}
								else{
									HX_STACK_LINE(300)
									tmp37 = value;
								}
							}
						}
						HX_STACK_LINE(300)
						Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(300)
						_y = tmp38;
						HX_STACK_LINE(300)
						Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(300)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(300)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(300)
						Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(300)
						Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(300)
						Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(300)
						Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(300)
						Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(300)
						Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(300)
						Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(300)
						Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(300)
						Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(300)
						Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(300)
						Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(300)
						_z = tmp52;
					}
					else{
						HX_STACK_LINE(300)
						bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(300)
						if ((tmp23)){
							HX_STACK_LINE(300)
							Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(300)
							{
								HX_STACK_LINE(300)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(300)
								Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(300)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(300)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(300)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(300)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(300)
								Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(300)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(300)
								Float value = tmp32;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(300)
								bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(300)
								if ((tmp33)){
									HX_STACK_LINE(300)
									tmp24 = (int)-1;
								}
								else{
									HX_STACK_LINE(300)
									bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(300)
									if ((tmp34)){
										HX_STACK_LINE(300)
										tmp24 = (int)1;
									}
									else{
										HX_STACK_LINE(300)
										tmp24 = value;
									}
								}
							}
							HX_STACK_LINE(300)
							Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(300)
							_x = tmp25;
							HX_STACK_LINE(300)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(300)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(300)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(300)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(300)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(300)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(300)
							Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(300)
							Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(300)
							Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(300)
							Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(300)
							Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(300)
							Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(300)
							Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(300)
							Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(300)
							_y = tmp39;
							HX_STACK_LINE(300)
							Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(300)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(300)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(300)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(300)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(300)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(300)
							Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(300)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(300)
							Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(300)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(300)
							Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(300)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(300)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(300)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(300)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(300)
							bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(300)
							if ((tmp24)){
								HX_STACK_LINE(300)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(300)
								{
									HX_STACK_LINE(300)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(300)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(300)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(300)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(300)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(300)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(300)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(300)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(300)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(300)
									if ((tmp34)){
										HX_STACK_LINE(300)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(300)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(300)
										if ((tmp35)){
											HX_STACK_LINE(300)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(300)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(300)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(300)
								_x = tmp26;
								HX_STACK_LINE(300)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(300)
								Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(300)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(300)
								Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(300)
								Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(300)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(300)
								Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(300)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(300)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(300)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(300)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(300)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(300)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(300)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(300)
								_y = tmp40;
								HX_STACK_LINE(300)
								Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(300)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(300)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(300)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(300)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(300)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(300)
								Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(300)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(300)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(300)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(300)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(300)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(300)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(300)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(300)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(300)
								bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(300)
								if ((tmp25)){
									HX_STACK_LINE(300)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(300)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(300)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(300)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(300)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(300)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(300)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(300)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(300)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(300)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(300)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(300)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(300)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(300)
									_x = tmp39;
									HX_STACK_LINE(300)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(300)
									{
										HX_STACK_LINE(300)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(300)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(300)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(300)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(300)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(300)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(300)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(300)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(300)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(300)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(300)
										if ((tmp49)){
											HX_STACK_LINE(300)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(300)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(300)
											if ((tmp50)){
												HX_STACK_LINE(300)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(300)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(300)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(300)
									_y = tmp41;
									HX_STACK_LINE(300)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(300)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(300)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(300)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(300)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(300)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(300)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(300)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(300)
									Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(300)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(300)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(300)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(300)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(300)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(300)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(300)
									bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									if ((tmp26)){
										HX_STACK_LINE(300)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(300)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(300)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(300)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(300)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(300)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(300)
										Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(300)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(300)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(300)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(300)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(300)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(300)
										Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(300)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(300)
										_x = tmp40;
										HX_STACK_LINE(300)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(300)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(300)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(300)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(300)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(300)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(300)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(300)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(300)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(300)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(300)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(300)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(300)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(300)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(300)
										_y = tmp54;
										HX_STACK_LINE(300)
										Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(300)
										{
											HX_STACK_LINE(300)
											Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(300)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(300)
											Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(300)
											Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(300)
											Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(300)
											Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(300)
											Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(300)
											Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(300)
											Float value = tmp63;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(300)
											bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(300)
											if ((tmp64)){
												HX_STACK_LINE(300)
												tmp55 = (int)-1;
											}
											else{
												HX_STACK_LINE(300)
												bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(300)
												if ((tmp65)){
													HX_STACK_LINE(300)
													tmp55 = (int)1;
												}
												else{
													HX_STACK_LINE(300)
													tmp55 = value;
												}
											}
										}
										HX_STACK_LINE(300)
										Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(300)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(300)
										bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(300)
										if ((tmp27)){
											HX_STACK_LINE(300)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(300)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(300)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(300)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(300)
											Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(300)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(300)
											Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(300)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(300)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(300)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(300)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(300)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(300)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(300)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(300)
											_x = tmp41;
											HX_STACK_LINE(300)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(300)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(300)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(300)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(300)
											Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(300)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(300)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(300)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(300)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(300)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(300)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(300)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(300)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(300)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(300)
											_y = tmp55;
											HX_STACK_LINE(300)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(300)
											{
												HX_STACK_LINE(300)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(300)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(300)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(300)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(300)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(300)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(300)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(300)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(300)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(300)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(300)
												if ((tmp65)){
													HX_STACK_LINE(300)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(300)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(300)
													if ((tmp66)){
														HX_STACK_LINE(300)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(300)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(300)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(300)
											_z = tmp57;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(300)
					{
						HX_STACK_LINE(300)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(300)
						_this->ignore_listeners = true;
						HX_STACK_LINE(300)
						{
							HX_STACK_LINE(300)
							_this->x = _x;
							HX_STACK_LINE(300)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(300)
							if ((tmp23)){
								HX_STACK_LINE(300)
								_this->x;
							}
							else{
								HX_STACK_LINE(300)
								bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(300)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(300)
								if ((tmp24)){
									HX_STACK_LINE(300)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(300)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(300)
									tmp25 = false;
								}
								HX_STACK_LINE(300)
								if ((tmp25)){
									HX_STACK_LINE(300)
									Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									_this->listen_x(tmp26);
								}
								HX_STACK_LINE(300)
								_this->x;
							}
						}
						HX_STACK_LINE(300)
						{
							HX_STACK_LINE(300)
							_this->y = _y;
							HX_STACK_LINE(300)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(300)
							if ((tmp23)){
								HX_STACK_LINE(300)
								_this->y;
							}
							else{
								HX_STACK_LINE(300)
								bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(300)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(300)
								if ((tmp24)){
									HX_STACK_LINE(300)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(300)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(300)
									tmp25 = false;
								}
								HX_STACK_LINE(300)
								if ((tmp25)){
									HX_STACK_LINE(300)
									Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									_this->listen_y(tmp26);
								}
								HX_STACK_LINE(300)
								_this->y;
							}
						}
						HX_STACK_LINE(300)
						{
							HX_STACK_LINE(300)
							_this->z = _z;
							HX_STACK_LINE(300)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(300)
							if ((tmp23)){
								HX_STACK_LINE(300)
								_this->z;
							}
							else{
								HX_STACK_LINE(300)
								bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(300)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(300)
								if ((tmp24)){
									HX_STACK_LINE(300)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(300)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(300)
									tmp25 = false;
								}
								HX_STACK_LINE(300)
								if ((tmp25)){
									HX_STACK_LINE(300)
									Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(300)
									_this->listen_z(tmp26);
								}
								HX_STACK_LINE(300)
								_this->z;
							}
						}
						HX_STACK_LINE(300)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(300)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(300)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(300)
						if ((tmp23)){
							HX_STACK_LINE(300)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(300)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(300)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(300)
							tmp24 = false;
						}
						HX_STACK_LINE(300)
						if ((tmp24)){
							HX_STACK_LINE(300)
							Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(300)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(300)
						bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(300)
						bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(300)
						if ((tmp25)){
							HX_STACK_LINE(300)
							bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(300)
							bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(300)
							tmp26 = !(tmp28);
						}
						else{
							HX_STACK_LINE(300)
							tmp26 = false;
						}
						HX_STACK_LINE(300)
						if ((tmp26)){
							HX_STACK_LINE(300)
							Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(300)
							_this->listen_y(tmp27);
						}
						HX_STACK_LINE(300)
						bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(300)
						bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(300)
						if ((tmp27)){
							HX_STACK_LINE(300)
							bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(300)
							bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(300)
							tmp28 = !(tmp30);
						}
						else{
							HX_STACK_LINE(300)
							tmp28 = false;
						}
						HX_STACK_LINE(300)
						if ((tmp28)){
							HX_STACK_LINE(300)
							Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(300)
							_this->listen_z(tmp29);
						}
						HX_STACK_LINE(300)
						_this;
					}
					HX_STACK_LINE(300)
					_this;
				}
			}
			HX_STACK_LINE(300)
			Dynamic tmp2 = this->listen_x_dyn();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(300)
			bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(300)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(300)
			if ((tmp3)){
				HX_STACK_LINE(300)
				bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(300)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(300)
				bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(300)
				tmp4 = !(tmp7);
			}
			else{
				HX_STACK_LINE(300)
				tmp4 = false;
			}
			HX_STACK_LINE(300)
			if ((tmp4)){
				HX_STACK_LINE(300)
				Float tmp5 = this->x;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(300)
				this->listen_x(tmp5);
			}
			HX_STACK_LINE(300)
			this->x;
		}
	}
	HX_STACK_LINE(301)
	{
		HX_STACK_LINE(301)
		Float tmp = (_a->y + _b->y);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(301)
		this->y = tmp;
		HX_STACK_LINE(301)
		bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(301)
		if ((tmp1)){
			HX_STACK_LINE(301)
			this->y;
		}
		else{
			HX_STACK_LINE(301)
			{
				HX_STACK_LINE(301)
				::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(301)
				bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(301)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(301)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(301)
				bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(301)
				if ((tmp5)){
					HX_STACK_LINE(301)
					tmp6 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(301)
					tmp6 = true;
				}
				HX_STACK_LINE(301)
				bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(301)
				bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(301)
				if ((tmp7)){
					HX_STACK_LINE(301)
					tmp8 = this->_construct;
				}
				else{
					HX_STACK_LINE(301)
					tmp8 = true;
				}
				HX_STACK_LINE(301)
				if ((tmp8)){
					HX_STACK_LINE(301)
					Dynamic();
				}
				else{
					HX_STACK_LINE(301)
					::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(301)
					::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(301)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(301)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(301)
					Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(301)
					Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(301)
					Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(301)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(301)
					Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(301)
					Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(301)
					Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(301)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(301)
					Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(301)
					Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(301)
					Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(301)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(301)
					Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(301)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(301)
					Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(301)
					Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
					HX_STACK_LINE(301)
					Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
					HX_STACK_LINE(301)
					Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
					HX_STACK_LINE(301)
					bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(301)
					if ((tmp22)){
						HX_STACK_LINE(301)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(301)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(301)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(301)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(301)
						Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(301)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(301)
						Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(301)
						Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(301)
						Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(301)
						Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(301)
						Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(301)
						Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(301)
						Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(301)
						Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(301)
						_x = tmp36;
						HX_STACK_LINE(301)
						Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(301)
						{
							HX_STACK_LINE(301)
							Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(301)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(301)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(301)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(301)
							Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(301)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(301)
							Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(301)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(301)
							Float value = tmp45;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(301)
							bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(301)
							if ((tmp46)){
								HX_STACK_LINE(301)
								tmp37 = (int)-1;
							}
							else{
								HX_STACK_LINE(301)
								bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(301)
								if ((tmp47)){
									HX_STACK_LINE(301)
									tmp37 = (int)1;
								}
								else{
									HX_STACK_LINE(301)
									tmp37 = value;
								}
							}
						}
						HX_STACK_LINE(301)
						Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(301)
						_y = tmp38;
						HX_STACK_LINE(301)
						Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(301)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(301)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(301)
						Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(301)
						Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(301)
						Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(301)
						Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(301)
						Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(301)
						Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(301)
						Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(301)
						Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(301)
						Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(301)
						Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(301)
						Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(301)
						_z = tmp52;
					}
					else{
						HX_STACK_LINE(301)
						bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(301)
						if ((tmp23)){
							HX_STACK_LINE(301)
							Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(301)
							{
								HX_STACK_LINE(301)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(301)
								Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(301)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(301)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(301)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(301)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(301)
								Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(301)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(301)
								Float value = tmp32;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(301)
								bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(301)
								if ((tmp33)){
									HX_STACK_LINE(301)
									tmp24 = (int)-1;
								}
								else{
									HX_STACK_LINE(301)
									bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(301)
									if ((tmp34)){
										HX_STACK_LINE(301)
										tmp24 = (int)1;
									}
									else{
										HX_STACK_LINE(301)
										tmp24 = value;
									}
								}
							}
							HX_STACK_LINE(301)
							Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(301)
							_x = tmp25;
							HX_STACK_LINE(301)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(301)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(301)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(301)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(301)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(301)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(301)
							Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(301)
							Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(301)
							Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(301)
							Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(301)
							Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(301)
							Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(301)
							Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(301)
							Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(301)
							_y = tmp39;
							HX_STACK_LINE(301)
							Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(301)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(301)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(301)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(301)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(301)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(301)
							Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(301)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(301)
							Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(301)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(301)
							Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(301)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(301)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(301)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(301)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(301)
							bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(301)
							if ((tmp24)){
								HX_STACK_LINE(301)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(301)
								{
									HX_STACK_LINE(301)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(301)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(301)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(301)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(301)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(301)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(301)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(301)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(301)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(301)
									if ((tmp34)){
										HX_STACK_LINE(301)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(301)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(301)
										if ((tmp35)){
											HX_STACK_LINE(301)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(301)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(301)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(301)
								_x = tmp26;
								HX_STACK_LINE(301)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(301)
								Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(301)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(301)
								Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(301)
								Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(301)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(301)
								Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(301)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(301)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(301)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(301)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(301)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(301)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(301)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(301)
								_y = tmp40;
								HX_STACK_LINE(301)
								Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(301)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(301)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(301)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(301)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(301)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(301)
								Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(301)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(301)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(301)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(301)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(301)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(301)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(301)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(301)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(301)
								bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(301)
								if ((tmp25)){
									HX_STACK_LINE(301)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(301)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(301)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(301)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(301)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(301)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(301)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(301)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(301)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(301)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(301)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(301)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(301)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(301)
									_x = tmp39;
									HX_STACK_LINE(301)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(301)
									{
										HX_STACK_LINE(301)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(301)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(301)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(301)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(301)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(301)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(301)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(301)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(301)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(301)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(301)
										if ((tmp49)){
											HX_STACK_LINE(301)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(301)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(301)
											if ((tmp50)){
												HX_STACK_LINE(301)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(301)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(301)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(301)
									_y = tmp41;
									HX_STACK_LINE(301)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(301)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(301)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(301)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(301)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(301)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(301)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(301)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(301)
									Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(301)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(301)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(301)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(301)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(301)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(301)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(301)
									bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									if ((tmp26)){
										HX_STACK_LINE(301)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(301)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(301)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(301)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(301)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(301)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(301)
										Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(301)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(301)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(301)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(301)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(301)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(301)
										Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(301)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(301)
										_x = tmp40;
										HX_STACK_LINE(301)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(301)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(301)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(301)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(301)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(301)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(301)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(301)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(301)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(301)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(301)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(301)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(301)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(301)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(301)
										_y = tmp54;
										HX_STACK_LINE(301)
										Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(301)
										{
											HX_STACK_LINE(301)
											Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(301)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(301)
											Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(301)
											Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(301)
											Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(301)
											Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(301)
											Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(301)
											Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(301)
											Float value = tmp63;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(301)
											bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(301)
											if ((tmp64)){
												HX_STACK_LINE(301)
												tmp55 = (int)-1;
											}
											else{
												HX_STACK_LINE(301)
												bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(301)
												if ((tmp65)){
													HX_STACK_LINE(301)
													tmp55 = (int)1;
												}
												else{
													HX_STACK_LINE(301)
													tmp55 = value;
												}
											}
										}
										HX_STACK_LINE(301)
										Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(301)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(301)
										bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(301)
										if ((tmp27)){
											HX_STACK_LINE(301)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(301)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(301)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(301)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(301)
											Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(301)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(301)
											Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(301)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(301)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(301)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(301)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(301)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(301)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(301)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(301)
											_x = tmp41;
											HX_STACK_LINE(301)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(301)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(301)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(301)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(301)
											Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(301)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(301)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(301)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(301)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(301)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(301)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(301)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(301)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(301)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(301)
											_y = tmp55;
											HX_STACK_LINE(301)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(301)
											{
												HX_STACK_LINE(301)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(301)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(301)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(301)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(301)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(301)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(301)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(301)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(301)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(301)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(301)
												if ((tmp65)){
													HX_STACK_LINE(301)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(301)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(301)
													if ((tmp66)){
														HX_STACK_LINE(301)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(301)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(301)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(301)
											_z = tmp57;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(301)
					{
						HX_STACK_LINE(301)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(301)
						_this->ignore_listeners = true;
						HX_STACK_LINE(301)
						{
							HX_STACK_LINE(301)
							_this->x = _x;
							HX_STACK_LINE(301)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(301)
							if ((tmp23)){
								HX_STACK_LINE(301)
								_this->x;
							}
							else{
								HX_STACK_LINE(301)
								bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(301)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(301)
								if ((tmp24)){
									HX_STACK_LINE(301)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(301)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(301)
									tmp25 = false;
								}
								HX_STACK_LINE(301)
								if ((tmp25)){
									HX_STACK_LINE(301)
									Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									_this->listen_x(tmp26);
								}
								HX_STACK_LINE(301)
								_this->x;
							}
						}
						HX_STACK_LINE(301)
						{
							HX_STACK_LINE(301)
							_this->y = _y;
							HX_STACK_LINE(301)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(301)
							if ((tmp23)){
								HX_STACK_LINE(301)
								_this->y;
							}
							else{
								HX_STACK_LINE(301)
								bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(301)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(301)
								if ((tmp24)){
									HX_STACK_LINE(301)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(301)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(301)
									tmp25 = false;
								}
								HX_STACK_LINE(301)
								if ((tmp25)){
									HX_STACK_LINE(301)
									Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									_this->listen_y(tmp26);
								}
								HX_STACK_LINE(301)
								_this->y;
							}
						}
						HX_STACK_LINE(301)
						{
							HX_STACK_LINE(301)
							_this->z = _z;
							HX_STACK_LINE(301)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(301)
							if ((tmp23)){
								HX_STACK_LINE(301)
								_this->z;
							}
							else{
								HX_STACK_LINE(301)
								bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(301)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(301)
								if ((tmp24)){
									HX_STACK_LINE(301)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(301)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(301)
									tmp25 = false;
								}
								HX_STACK_LINE(301)
								if ((tmp25)){
									HX_STACK_LINE(301)
									Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(301)
									_this->listen_z(tmp26);
								}
								HX_STACK_LINE(301)
								_this->z;
							}
						}
						HX_STACK_LINE(301)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(301)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(301)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(301)
						if ((tmp23)){
							HX_STACK_LINE(301)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(301)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(301)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(301)
							tmp24 = false;
						}
						HX_STACK_LINE(301)
						if ((tmp24)){
							HX_STACK_LINE(301)
							Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(301)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(301)
						bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(301)
						bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(301)
						if ((tmp25)){
							HX_STACK_LINE(301)
							bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(301)
							bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(301)
							tmp26 = !(tmp28);
						}
						else{
							HX_STACK_LINE(301)
							tmp26 = false;
						}
						HX_STACK_LINE(301)
						if ((tmp26)){
							HX_STACK_LINE(301)
							Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(301)
							_this->listen_y(tmp27);
						}
						HX_STACK_LINE(301)
						bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(301)
						bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(301)
						if ((tmp27)){
							HX_STACK_LINE(301)
							bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(301)
							bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(301)
							tmp28 = !(tmp30);
						}
						else{
							HX_STACK_LINE(301)
							tmp28 = false;
						}
						HX_STACK_LINE(301)
						if ((tmp28)){
							HX_STACK_LINE(301)
							Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(301)
							_this->listen_z(tmp29);
						}
						HX_STACK_LINE(301)
						_this;
					}
					HX_STACK_LINE(301)
					_this;
				}
			}
			HX_STACK_LINE(301)
			Dynamic tmp2 = this->listen_y_dyn();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(301)
			bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(301)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(301)
			if ((tmp3)){
				HX_STACK_LINE(301)
				bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(301)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(301)
				bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(301)
				tmp4 = !(tmp7);
			}
			else{
				HX_STACK_LINE(301)
				tmp4 = false;
			}
			HX_STACK_LINE(301)
			if ((tmp4)){
				HX_STACK_LINE(301)
				Float tmp5 = this->y;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(301)
				this->listen_y(tmp5);
			}
			HX_STACK_LINE(301)
			this->y;
		}
	}
	HX_STACK_LINE(302)
	{
		HX_STACK_LINE(302)
		Float tmp = (_a->z + _b->z);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(302)
		this->z = tmp;
		HX_STACK_LINE(302)
		bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(302)
		if ((tmp1)){
			HX_STACK_LINE(302)
			this->z;
		}
		else{
			HX_STACK_LINE(302)
			{
				HX_STACK_LINE(302)
				::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(302)
				bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(302)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(302)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(302)
				bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(302)
				if ((tmp5)){
					HX_STACK_LINE(302)
					tmp6 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(302)
					tmp6 = true;
				}
				HX_STACK_LINE(302)
				bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(302)
				bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(302)
				if ((tmp7)){
					HX_STACK_LINE(302)
					tmp8 = this->_construct;
				}
				else{
					HX_STACK_LINE(302)
					tmp8 = true;
				}
				HX_STACK_LINE(302)
				if ((tmp8)){
					HX_STACK_LINE(302)
					Dynamic();
				}
				else{
					HX_STACK_LINE(302)
					::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(302)
					::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(302)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(302)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(302)
					Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(302)
					Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(302)
					Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(302)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(302)
					Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(302)
					Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(302)
					Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(302)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(302)
					Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(302)
					Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(302)
					Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(302)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(302)
					Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(302)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(302)
					Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(302)
					Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
					HX_STACK_LINE(302)
					Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
					HX_STACK_LINE(302)
					Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
					HX_STACK_LINE(302)
					bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(302)
					if ((tmp22)){
						HX_STACK_LINE(302)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(302)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(302)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(302)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(302)
						Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(302)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(302)
						Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(302)
						Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(302)
						Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(302)
						Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(302)
						Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(302)
						Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(302)
						Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(302)
						Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(302)
						_x = tmp36;
						HX_STACK_LINE(302)
						Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(302)
						{
							HX_STACK_LINE(302)
							Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(302)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(302)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(302)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(302)
							Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(302)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(302)
							Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(302)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(302)
							Float value = tmp45;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(302)
							bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(302)
							if ((tmp46)){
								HX_STACK_LINE(302)
								tmp37 = (int)-1;
							}
							else{
								HX_STACK_LINE(302)
								bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(302)
								if ((tmp47)){
									HX_STACK_LINE(302)
									tmp37 = (int)1;
								}
								else{
									HX_STACK_LINE(302)
									tmp37 = value;
								}
							}
						}
						HX_STACK_LINE(302)
						Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(302)
						_y = tmp38;
						HX_STACK_LINE(302)
						Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(302)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(302)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(302)
						Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(302)
						Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(302)
						Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(302)
						Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(302)
						Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(302)
						Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(302)
						Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(302)
						Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(302)
						Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(302)
						Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(302)
						Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(302)
						_z = tmp52;
					}
					else{
						HX_STACK_LINE(302)
						bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(302)
						if ((tmp23)){
							HX_STACK_LINE(302)
							Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(302)
							{
								HX_STACK_LINE(302)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(302)
								Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(302)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(302)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(302)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(302)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(302)
								Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(302)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(302)
								Float value = tmp32;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(302)
								bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(302)
								if ((tmp33)){
									HX_STACK_LINE(302)
									tmp24 = (int)-1;
								}
								else{
									HX_STACK_LINE(302)
									bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(302)
									if ((tmp34)){
										HX_STACK_LINE(302)
										tmp24 = (int)1;
									}
									else{
										HX_STACK_LINE(302)
										tmp24 = value;
									}
								}
							}
							HX_STACK_LINE(302)
							Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(302)
							_x = tmp25;
							HX_STACK_LINE(302)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(302)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(302)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(302)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(302)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(302)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(302)
							Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(302)
							Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(302)
							Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(302)
							Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(302)
							Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(302)
							Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(302)
							Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(302)
							Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(302)
							_y = tmp39;
							HX_STACK_LINE(302)
							Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(302)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(302)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(302)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(302)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(302)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(302)
							Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(302)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(302)
							Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(302)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(302)
							Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(302)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(302)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(302)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(302)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(302)
							bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(302)
							if ((tmp24)){
								HX_STACK_LINE(302)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(302)
								{
									HX_STACK_LINE(302)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(302)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(302)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(302)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(302)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(302)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(302)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(302)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(302)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(302)
									if ((tmp34)){
										HX_STACK_LINE(302)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(302)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(302)
										if ((tmp35)){
											HX_STACK_LINE(302)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(302)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(302)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(302)
								_x = tmp26;
								HX_STACK_LINE(302)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(302)
								Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(302)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(302)
								Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(302)
								Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(302)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(302)
								Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(302)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(302)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(302)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(302)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(302)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(302)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(302)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(302)
								_y = tmp40;
								HX_STACK_LINE(302)
								Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(302)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(302)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(302)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(302)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(302)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(302)
								Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(302)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(302)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(302)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(302)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(302)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(302)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(302)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(302)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(302)
								bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(302)
								if ((tmp25)){
									HX_STACK_LINE(302)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(302)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(302)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(302)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(302)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(302)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(302)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(302)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(302)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(302)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(302)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(302)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(302)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(302)
									_x = tmp39;
									HX_STACK_LINE(302)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(302)
									{
										HX_STACK_LINE(302)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(302)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(302)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(302)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(302)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(302)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(302)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(302)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(302)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(302)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(302)
										if ((tmp49)){
											HX_STACK_LINE(302)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(302)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(302)
											if ((tmp50)){
												HX_STACK_LINE(302)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(302)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(302)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(302)
									_y = tmp41;
									HX_STACK_LINE(302)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(302)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(302)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(302)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(302)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(302)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(302)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(302)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(302)
									Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(302)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(302)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(302)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(302)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(302)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(302)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(302)
									bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									if ((tmp26)){
										HX_STACK_LINE(302)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(302)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(302)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(302)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(302)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(302)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(302)
										Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(302)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(302)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(302)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(302)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(302)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(302)
										Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(302)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(302)
										_x = tmp40;
										HX_STACK_LINE(302)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(302)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(302)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(302)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(302)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(302)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(302)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(302)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(302)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(302)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(302)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(302)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(302)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(302)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(302)
										_y = tmp54;
										HX_STACK_LINE(302)
										Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(302)
										{
											HX_STACK_LINE(302)
											Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(302)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(302)
											Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(302)
											Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(302)
											Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(302)
											Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(302)
											Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(302)
											Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(302)
											Float value = tmp63;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(302)
											bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(302)
											if ((tmp64)){
												HX_STACK_LINE(302)
												tmp55 = (int)-1;
											}
											else{
												HX_STACK_LINE(302)
												bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(302)
												if ((tmp65)){
													HX_STACK_LINE(302)
													tmp55 = (int)1;
												}
												else{
													HX_STACK_LINE(302)
													tmp55 = value;
												}
											}
										}
										HX_STACK_LINE(302)
										Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(302)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(302)
										bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(302)
										if ((tmp27)){
											HX_STACK_LINE(302)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(302)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(302)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(302)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(302)
											Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(302)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(302)
											Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(302)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(302)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(302)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(302)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(302)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(302)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(302)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(302)
											_x = tmp41;
											HX_STACK_LINE(302)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(302)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(302)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(302)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(302)
											Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(302)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(302)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(302)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(302)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(302)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(302)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(302)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(302)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(302)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(302)
											_y = tmp55;
											HX_STACK_LINE(302)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(302)
											{
												HX_STACK_LINE(302)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(302)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(302)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(302)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(302)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(302)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(302)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(302)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(302)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(302)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(302)
												if ((tmp65)){
													HX_STACK_LINE(302)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(302)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(302)
													if ((tmp66)){
														HX_STACK_LINE(302)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(302)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(302)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(302)
											_z = tmp57;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(302)
					{
						HX_STACK_LINE(302)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(302)
						_this->ignore_listeners = true;
						HX_STACK_LINE(302)
						{
							HX_STACK_LINE(302)
							_this->x = _x;
							HX_STACK_LINE(302)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(302)
							if ((tmp23)){
								HX_STACK_LINE(302)
								_this->x;
							}
							else{
								HX_STACK_LINE(302)
								bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(302)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(302)
								if ((tmp24)){
									HX_STACK_LINE(302)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(302)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(302)
									tmp25 = false;
								}
								HX_STACK_LINE(302)
								if ((tmp25)){
									HX_STACK_LINE(302)
									Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									_this->listen_x(tmp26);
								}
								HX_STACK_LINE(302)
								_this->x;
							}
						}
						HX_STACK_LINE(302)
						{
							HX_STACK_LINE(302)
							_this->y = _y;
							HX_STACK_LINE(302)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(302)
							if ((tmp23)){
								HX_STACK_LINE(302)
								_this->y;
							}
							else{
								HX_STACK_LINE(302)
								bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(302)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(302)
								if ((tmp24)){
									HX_STACK_LINE(302)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(302)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(302)
									tmp25 = false;
								}
								HX_STACK_LINE(302)
								if ((tmp25)){
									HX_STACK_LINE(302)
									Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									_this->listen_y(tmp26);
								}
								HX_STACK_LINE(302)
								_this->y;
							}
						}
						HX_STACK_LINE(302)
						{
							HX_STACK_LINE(302)
							_this->z = _z;
							HX_STACK_LINE(302)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(302)
							if ((tmp23)){
								HX_STACK_LINE(302)
								_this->z;
							}
							else{
								HX_STACK_LINE(302)
								bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(302)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(302)
								if ((tmp24)){
									HX_STACK_LINE(302)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(302)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(302)
									tmp25 = false;
								}
								HX_STACK_LINE(302)
								if ((tmp25)){
									HX_STACK_LINE(302)
									Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(302)
									_this->listen_z(tmp26);
								}
								HX_STACK_LINE(302)
								_this->z;
							}
						}
						HX_STACK_LINE(302)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(302)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(302)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(302)
						if ((tmp23)){
							HX_STACK_LINE(302)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(302)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(302)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(302)
							tmp24 = false;
						}
						HX_STACK_LINE(302)
						if ((tmp24)){
							HX_STACK_LINE(302)
							Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(302)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(302)
						bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(302)
						bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(302)
						if ((tmp25)){
							HX_STACK_LINE(302)
							bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(302)
							bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(302)
							tmp26 = !(tmp28);
						}
						else{
							HX_STACK_LINE(302)
							tmp26 = false;
						}
						HX_STACK_LINE(302)
						if ((tmp26)){
							HX_STACK_LINE(302)
							Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(302)
							_this->listen_y(tmp27);
						}
						HX_STACK_LINE(302)
						bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(302)
						bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(302)
						if ((tmp27)){
							HX_STACK_LINE(302)
							bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(302)
							bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(302)
							tmp28 = !(tmp30);
						}
						else{
							HX_STACK_LINE(302)
							tmp28 = false;
						}
						HX_STACK_LINE(302)
						if ((tmp28)){
							HX_STACK_LINE(302)
							Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(302)
							_this->listen_z(tmp29);
						}
						HX_STACK_LINE(302)
						_this;
					}
					HX_STACK_LINE(302)
					_this;
				}
			}
			HX_STACK_LINE(302)
			Dynamic tmp2 = this->listen_z_dyn();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(302)
			bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(302)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(302)
			if ((tmp3)){
				HX_STACK_LINE(302)
				bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(302)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(302)
				bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(302)
				tmp4 = !(tmp7);
			}
			else{
				HX_STACK_LINE(302)
				tmp4 = false;
			}
			HX_STACK_LINE(302)
			if ((tmp4)){
				HX_STACK_LINE(302)
				Float tmp5 = this->z;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(302)
				this->listen_z(tmp5);
			}
			HX_STACK_LINE(302)
			this->z;
		}
	}
	HX_STACK_LINE(303)
	{
		HX_STACK_LINE(303)
		Float tmp = (_a->w + _b->w);		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(303)
		this->w = tmp;
		HX_STACK_LINE(303)
		bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(303)
		if ((tmp1)){
			HX_STACK_LINE(303)
			this->w;
		}
		else{
			HX_STACK_LINE(303)
			{
				HX_STACK_LINE(303)
				::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(303)
				bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(303)
				bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(303)
				bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(303)
				bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(303)
				if ((tmp5)){
					HX_STACK_LINE(303)
					tmp6 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(303)
					tmp6 = true;
				}
				HX_STACK_LINE(303)
				bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(303)
				bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(303)
				if ((tmp7)){
					HX_STACK_LINE(303)
					tmp8 = this->_construct;
				}
				else{
					HX_STACK_LINE(303)
					tmp8 = true;
				}
				HX_STACK_LINE(303)
				if ((tmp8)){
					HX_STACK_LINE(303)
					Dynamic();
				}
				else{
					HX_STACK_LINE(303)
					::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(303)
					::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(303)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(303)
					Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(303)
					Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(303)
					Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(303)
					Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(303)
					Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(303)
					Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(303)
					Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(303)
					Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(303)
					Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(303)
					Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(303)
					Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(303)
					Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(303)
					Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(303)
					Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(303)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(303)
					Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(303)
					Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
					HX_STACK_LINE(303)
					Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
					HX_STACK_LINE(303)
					Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
					HX_STACK_LINE(303)
					bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(303)
					if ((tmp22)){
						HX_STACK_LINE(303)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(303)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(303)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(303)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(303)
						Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(303)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(303)
						Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(303)
						Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(303)
						Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(303)
						Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(303)
						Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(303)
						Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(303)
						Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(303)
						Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(303)
						_x = tmp36;
						HX_STACK_LINE(303)
						Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(303)
						{
							HX_STACK_LINE(303)
							Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(303)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(303)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(303)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(303)
							Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(303)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(303)
							Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(303)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(303)
							Float value = tmp45;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(303)
							bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(303)
							if ((tmp46)){
								HX_STACK_LINE(303)
								tmp37 = (int)-1;
							}
							else{
								HX_STACK_LINE(303)
								bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(303)
								if ((tmp47)){
									HX_STACK_LINE(303)
									tmp37 = (int)1;
								}
								else{
									HX_STACK_LINE(303)
									tmp37 = value;
								}
							}
						}
						HX_STACK_LINE(303)
						Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(303)
						_y = tmp38;
						HX_STACK_LINE(303)
						Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(303)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(303)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(303)
						Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(303)
						Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(303)
						Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(303)
						Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(303)
						Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(303)
						Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(303)
						Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(303)
						Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(303)
						Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(303)
						Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(303)
						Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(303)
						_z = tmp52;
					}
					else{
						HX_STACK_LINE(303)
						bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(303)
						if ((tmp23)){
							HX_STACK_LINE(303)
							Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(303)
							{
								HX_STACK_LINE(303)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(303)
								Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(303)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(303)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(303)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(303)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(303)
								Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(303)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(303)
								Float value = tmp32;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(303)
								bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(303)
								if ((tmp33)){
									HX_STACK_LINE(303)
									tmp24 = (int)-1;
								}
								else{
									HX_STACK_LINE(303)
									bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(303)
									if ((tmp34)){
										HX_STACK_LINE(303)
										tmp24 = (int)1;
									}
									else{
										HX_STACK_LINE(303)
										tmp24 = value;
									}
								}
							}
							HX_STACK_LINE(303)
							Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(303)
							_x = tmp25;
							HX_STACK_LINE(303)
							Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(303)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(303)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(303)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(303)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(303)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(303)
							Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(303)
							Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(303)
							Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(303)
							Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(303)
							Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(303)
							Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(303)
							Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(303)
							Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(303)
							_y = tmp39;
							HX_STACK_LINE(303)
							Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(303)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(303)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(303)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(303)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(303)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(303)
							Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(303)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(303)
							Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(303)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(303)
							Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(303)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(303)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(303)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(303)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(303)
							bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(303)
							if ((tmp24)){
								HX_STACK_LINE(303)
								Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(303)
								{
									HX_STACK_LINE(303)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(303)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(303)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(303)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(303)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(303)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(303)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(303)
									Float value = tmp33;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(303)
									bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(303)
									if ((tmp34)){
										HX_STACK_LINE(303)
										tmp25 = (int)-1;
									}
									else{
										HX_STACK_LINE(303)
										bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(303)
										if ((tmp35)){
											HX_STACK_LINE(303)
											tmp25 = (int)1;
										}
										else{
											HX_STACK_LINE(303)
											tmp25 = value;
										}
									}
								}
								HX_STACK_LINE(303)
								Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(303)
								_x = tmp26;
								HX_STACK_LINE(303)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(303)
								Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(303)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(303)
								Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(303)
								Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(303)
								Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(303)
								Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(303)
								Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(303)
								Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(303)
								Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(303)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(303)
								Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(303)
								Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(303)
								Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(303)
								_y = tmp40;
								HX_STACK_LINE(303)
								Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(303)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(303)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(303)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(303)
								Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(303)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(303)
								Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(303)
								Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(303)
								Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(303)
								Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(303)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(303)
								Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(303)
								Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(303)
								Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(303)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(303)
								bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(303)
								if ((tmp25)){
									HX_STACK_LINE(303)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(303)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(303)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(303)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(303)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(303)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(303)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(303)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(303)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(303)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(303)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(303)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(303)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(303)
									_x = tmp39;
									HX_STACK_LINE(303)
									Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(303)
									{
										HX_STACK_LINE(303)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(303)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(303)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(303)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(303)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(303)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(303)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(303)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(303)
										Float value = tmp48;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(303)
										bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(303)
										if ((tmp49)){
											HX_STACK_LINE(303)
											tmp40 = (int)-1;
										}
										else{
											HX_STACK_LINE(303)
											bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(303)
											if ((tmp50)){
												HX_STACK_LINE(303)
												tmp40 = (int)1;
											}
											else{
												HX_STACK_LINE(303)
												tmp40 = value;
											}
										}
									}
									HX_STACK_LINE(303)
									Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(303)
									_y = tmp41;
									HX_STACK_LINE(303)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(303)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(303)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(303)
									Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(303)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(303)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(303)
									Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(303)
									Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(303)
									Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(303)
									Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(303)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(303)
									Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(303)
									Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(303)
									Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(303)
									_z = tmp55;
								}
								else{
									HX_STACK_LINE(303)
									bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									if ((tmp26)){
										HX_STACK_LINE(303)
										Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(303)
										Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(303)
										Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(303)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(303)
										Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(303)
										Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(303)
										Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(303)
										Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(303)
										Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(303)
										Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(303)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(303)
										Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(303)
										Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(303)
										Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(303)
										_x = tmp40;
										HX_STACK_LINE(303)
										Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(303)
										Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(303)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(303)
										Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(303)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(303)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(303)
										Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(303)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(303)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(303)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(303)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(303)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(303)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(303)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(303)
										_y = tmp54;
										HX_STACK_LINE(303)
										Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(303)
										{
											HX_STACK_LINE(303)
											Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(303)
											Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(303)
											Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(303)
											Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(303)
											Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(303)
											Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(303)
											Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(303)
											Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(303)
											Float value = tmp63;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(303)
											bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(303)
											if ((tmp64)){
												HX_STACK_LINE(303)
												tmp55 = (int)-1;
											}
											else{
												HX_STACK_LINE(303)
												bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(303)
												if ((tmp65)){
													HX_STACK_LINE(303)
													tmp55 = (int)1;
												}
												else{
													HX_STACK_LINE(303)
													tmp55 = value;
												}
											}
										}
										HX_STACK_LINE(303)
										Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(303)
										_z = tmp56;
									}
									else{
										HX_STACK_LINE(303)
										bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(303)
										if ((tmp27)){
											HX_STACK_LINE(303)
											Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(303)
											Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(303)
											Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(303)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(303)
											Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(303)
											Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(303)
											Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(303)
											Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(303)
											Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(303)
											Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(303)
											Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(303)
											Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(303)
											Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(303)
											Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(303)
											_x = tmp41;
											HX_STACK_LINE(303)
											Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(303)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(303)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(303)
											Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(303)
											Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(303)
											Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(303)
											Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(303)
											Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(303)
											Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(303)
											Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(303)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(303)
											Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(303)
											Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(303)
											Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(303)
											_y = tmp55;
											HX_STACK_LINE(303)
											Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(303)
											{
												HX_STACK_LINE(303)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(303)
												Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(303)
												Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(303)
												Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(303)
												Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(303)
												Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(303)
												Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(303)
												Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(303)
												Float value = tmp64;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(303)
												bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(303)
												if ((tmp65)){
													HX_STACK_LINE(303)
													tmp56 = (int)-1;
												}
												else{
													HX_STACK_LINE(303)
													bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(303)
													if ((tmp66)){
														HX_STACK_LINE(303)
														tmp56 = (int)1;
													}
													else{
														HX_STACK_LINE(303)
														tmp56 = value;
													}
												}
											}
											HX_STACK_LINE(303)
											Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(303)
											_z = tmp57;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(303)
					{
						HX_STACK_LINE(303)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(303)
						_this->ignore_listeners = true;
						HX_STACK_LINE(303)
						{
							HX_STACK_LINE(303)
							_this->x = _x;
							HX_STACK_LINE(303)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(303)
							if ((tmp23)){
								HX_STACK_LINE(303)
								_this->x;
							}
							else{
								HX_STACK_LINE(303)
								bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(303)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(303)
								if ((tmp24)){
									HX_STACK_LINE(303)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(303)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(303)
									tmp25 = false;
								}
								HX_STACK_LINE(303)
								if ((tmp25)){
									HX_STACK_LINE(303)
									Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									_this->listen_x(tmp26);
								}
								HX_STACK_LINE(303)
								_this->x;
							}
						}
						HX_STACK_LINE(303)
						{
							HX_STACK_LINE(303)
							_this->y = _y;
							HX_STACK_LINE(303)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(303)
							if ((tmp23)){
								HX_STACK_LINE(303)
								_this->y;
							}
							else{
								HX_STACK_LINE(303)
								bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(303)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(303)
								if ((tmp24)){
									HX_STACK_LINE(303)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(303)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(303)
									tmp25 = false;
								}
								HX_STACK_LINE(303)
								if ((tmp25)){
									HX_STACK_LINE(303)
									Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									_this->listen_y(tmp26);
								}
								HX_STACK_LINE(303)
								_this->y;
							}
						}
						HX_STACK_LINE(303)
						{
							HX_STACK_LINE(303)
							_this->z = _z;
							HX_STACK_LINE(303)
							bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(303)
							if ((tmp23)){
								HX_STACK_LINE(303)
								_this->z;
							}
							else{
								HX_STACK_LINE(303)
								bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(303)
								bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(303)
								if ((tmp24)){
									HX_STACK_LINE(303)
									bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(303)
									tmp25 = !(tmp27);
								}
								else{
									HX_STACK_LINE(303)
									tmp25 = false;
								}
								HX_STACK_LINE(303)
								if ((tmp25)){
									HX_STACK_LINE(303)
									Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(303)
									_this->listen_z(tmp26);
								}
								HX_STACK_LINE(303)
								_this->z;
							}
						}
						HX_STACK_LINE(303)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(303)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(303)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(303)
						if ((tmp23)){
							HX_STACK_LINE(303)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(303)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(303)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(303)
							tmp24 = false;
						}
						HX_STACK_LINE(303)
						if ((tmp24)){
							HX_STACK_LINE(303)
							Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(303)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(303)
						bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(303)
						bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(303)
						if ((tmp25)){
							HX_STACK_LINE(303)
							bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(303)
							bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(303)
							tmp26 = !(tmp28);
						}
						else{
							HX_STACK_LINE(303)
							tmp26 = false;
						}
						HX_STACK_LINE(303)
						if ((tmp26)){
							HX_STACK_LINE(303)
							Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(303)
							_this->listen_y(tmp27);
						}
						HX_STACK_LINE(303)
						bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(303)
						bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(303)
						if ((tmp27)){
							HX_STACK_LINE(303)
							bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(303)
							bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(303)
							tmp28 = !(tmp30);
						}
						else{
							HX_STACK_LINE(303)
							tmp28 = false;
						}
						HX_STACK_LINE(303)
						if ((tmp28)){
							HX_STACK_LINE(303)
							Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(303)
							_this->listen_z(tmp29);
						}
						HX_STACK_LINE(303)
						_this;
					}
					HX_STACK_LINE(303)
					_this;
				}
			}
			HX_STACK_LINE(303)
			Dynamic tmp2 = this->listen_w_dyn();		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(303)
			bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(303)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(303)
			if ((tmp3)){
				HX_STACK_LINE(303)
				bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(303)
				bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
				HX_STACK_LINE(303)
				bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(303)
				tmp4 = !(tmp7);
			}
			else{
				HX_STACK_LINE(303)
				tmp4 = false;
			}
			HX_STACK_LINE(303)
			if ((tmp4)){
				HX_STACK_LINE(303)
				Float tmp5 = this->w;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(303)
				this->listen_w(tmp5);
			}
			HX_STACK_LINE(303)
			this->w;
		}
	}
	HX_STACK_LINE(305)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,addQuaternions,return )

::phoenix::Quaternion Quaternion_obj::multiplyScalar( Float _scalar){
	HX_STACK_FRAME("phoenix.Quaternion","multiplyScalar",0x2f1f2e01,"phoenix.Quaternion.multiplyScalar","phoenix/Quaternion.hx",309,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_scalar,"_scalar")
	HX_STACK_LINE(311)
	{
		HX_STACK_LINE(311)
		::phoenix::Quaternion _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(311)
		{
			HX_STACK_LINE(311)
			Float tmp = (_g->x * _scalar);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(311)
			_g->x = tmp;
			HX_STACK_LINE(311)
			bool tmp1 = _g->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(311)
			if ((tmp1)){
				HX_STACK_LINE(311)
				_g->x;
			}
			else{
				HX_STACK_LINE(311)
				{
					HX_STACK_LINE(311)
					bool tmp2 = (_g->euler == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(311)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(311)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(311)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(311)
					if ((tmp4)){
						HX_STACK_LINE(311)
						tmp5 = _g->ignore_euler;
					}
					else{
						HX_STACK_LINE(311)
						tmp5 = true;
					}
					HX_STACK_LINE(311)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(311)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(311)
					if ((tmp6)){
						HX_STACK_LINE(311)
						tmp7 = _g->_construct;
					}
					else{
						HX_STACK_LINE(311)
						tmp7 = true;
					}
					HX_STACK_LINE(311)
					if ((tmp7)){
						HX_STACK_LINE(311)
						Dynamic();
					}
					else{
						HX_STACK_LINE(311)
						::phoenix::Vector _this = _g->euler;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(311)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(311)
						Float tmp8 = (_g->x * _g->x);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(311)
						Float sqx = tmp8;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(311)
						Float tmp9 = (_g->y * _g->y);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(311)
						Float sqy = tmp9;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(311)
						Float tmp10 = (_g->z * _g->z);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(311)
						Float sqz = tmp10;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(311)
						Float tmp11 = (_g->w * _g->w);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(311)
						Float sqw = tmp11;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(311)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(311)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(311)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(311)
						bool tmp12 = (order == (int)0);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(311)
						if ((tmp12)){
							HX_STACK_LINE(311)
							Float tmp13 = (_g->x * _g->w);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(311)
							Float tmp14 = (_g->y * _g->z);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(311)
							Float tmp15 = (tmp13 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(311)
							Float tmp16 = ((int)2 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(311)
							Float tmp17 = (sqw - sqx);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(311)
							Float tmp18 = sqy;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(311)
							Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(311)
							Float tmp20 = sqz;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(311)
							Float tmp21 = (tmp19 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(311)
							Float tmp22 = ::Math_obj::atan2(tmp16,tmp21);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(311)
							_x = tmp22;
							HX_STACK_LINE(311)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(311)
							{
								HX_STACK_LINE(311)
								Float tmp24 = (_g->x * _g->z);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(311)
								Float tmp25 = (_g->y * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(311)
								Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(311)
								Float tmp27 = ((int)2 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(311)
								Float value = tmp27;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(311)
								bool tmp28 = (value < (int)-1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(311)
								if ((tmp28)){
									HX_STACK_LINE(311)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(311)
									bool tmp29 = (value > (int)1);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(311)
									if ((tmp29)){
										HX_STACK_LINE(311)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(311)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(311)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(311)
							_y = tmp24;
							HX_STACK_LINE(311)
							Float tmp25 = (_g->z * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(311)
							Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(311)
							Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(311)
							Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(311)
							Float tmp29 = (sqw + sqx);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(311)
							Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(311)
							Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(311)
							Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(311)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(311)
							Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(311)
							_z = tmp34;
						}
						else{
							HX_STACK_LINE(311)
							bool tmp13 = (order == (int)1);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(311)
							if ((tmp13)){
								HX_STACK_LINE(311)
								Float tmp14;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(311)
								{
									HX_STACK_LINE(311)
									Float tmp15 = (_g->x * _g->w);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(311)
									Float tmp16 = (_g->y * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(311)
									Float tmp17 = (tmp15 - tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(311)
									Float tmp18 = ((int)2 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(311)
									Float value = tmp18;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(311)
									bool tmp19 = (value < (int)-1);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(311)
									if ((tmp19)){
										HX_STACK_LINE(311)
										tmp14 = (int)-1;
									}
									else{
										HX_STACK_LINE(311)
										bool tmp20 = (value > (int)1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(311)
										if ((tmp20)){
											HX_STACK_LINE(311)
											tmp14 = (int)1;
										}
										else{
											HX_STACK_LINE(311)
											tmp14 = value;
										}
									}
								}
								HX_STACK_LINE(311)
								Float tmp15 = ::Math_obj::asin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(311)
								_x = tmp15;
								HX_STACK_LINE(311)
								Float tmp16 = (_g->x * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(311)
								Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(311)
								Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(311)
								Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(311)
								Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(311)
								Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(311)
								Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(311)
								Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(311)
								Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(311)
								Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(311)
								_y = tmp25;
								HX_STACK_LINE(311)
								Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(311)
								Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(311)
								Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(311)
								Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(311)
								Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(311)
								Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(311)
								Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(311)
								Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(311)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(311)
								Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(311)
								_z = tmp35;
							}
							else{
								HX_STACK_LINE(311)
								bool tmp14 = (order == (int)2);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(311)
								if ((tmp14)){
									HX_STACK_LINE(311)
									Float tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(311)
									{
										HX_STACK_LINE(311)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										Float tmp17 = (_g->y * _g->z);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(311)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(311)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(311)
										Float value = tmp19;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(311)
										bool tmp20 = (value < (int)-1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(311)
										if ((tmp20)){
											HX_STACK_LINE(311)
											tmp15 = (int)-1;
										}
										else{
											HX_STACK_LINE(311)
											bool tmp21 = (value > (int)1);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(311)
											if ((tmp21)){
												HX_STACK_LINE(311)
												tmp15 = (int)1;
											}
											else{
												HX_STACK_LINE(311)
												tmp15 = value;
											}
										}
									}
									HX_STACK_LINE(311)
									Float tmp16 = ::Math_obj::asin(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(311)
									_x = tmp16;
									HX_STACK_LINE(311)
									Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(311)
									Float tmp18 = (_g->z * _g->x);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(311)
									Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(311)
									Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(311)
									Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(311)
									Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(311)
									Float tmp23 = (tmp21 - tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(311)
									Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(311)
									Float tmp25 = (tmp23 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(311)
									Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(311)
									_y = tmp26;
									HX_STACK_LINE(311)
									Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(311)
									Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(311)
									Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(311)
									Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(311)
									Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(311)
									Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(311)
									Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(311)
									Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(311)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(311)
									Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(311)
									_z = tmp36;
								}
								else{
									HX_STACK_LINE(311)
									bool tmp15 = (order == (int)3);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(311)
									if ((tmp15)){
										HX_STACK_LINE(311)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										Float tmp17 = (_g->z * _g->y);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(311)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(311)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(311)
										Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(311)
										Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(311)
										Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(311)
										Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(311)
										Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(311)
										Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(311)
										_x = tmp25;
										HX_STACK_LINE(311)
										Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(311)
										{
											HX_STACK_LINE(311)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(311)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(311)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(311)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(311)
											Float value = tmp30;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(311)
											bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(311)
											if ((tmp31)){
												HX_STACK_LINE(311)
												tmp26 = (int)-1;
											}
											else{
												HX_STACK_LINE(311)
												bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(311)
												if ((tmp32)){
													HX_STACK_LINE(311)
													tmp26 = (int)1;
												}
												else{
													HX_STACK_LINE(311)
													tmp26 = value;
												}
											}
										}
										HX_STACK_LINE(311)
										Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(311)
										_y = tmp27;
										HX_STACK_LINE(311)
										Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(311)
										Float tmp29 = (_g->z * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(311)
										Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(311)
										Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(311)
										Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(311)
										Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(311)
										Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(311)
										Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(311)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(311)
										Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(311)
										_z = tmp37;
									}
									else{
										HX_STACK_LINE(311)
										bool tmp16 = (order == (int)4);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										if ((tmp16)){
											HX_STACK_LINE(311)
											Float tmp17 = (_g->x * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(311)
											Float tmp18 = (_g->z * _g->y);		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(311)
											Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
											HX_STACK_LINE(311)
											Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(311)
											Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(311)
											Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(311)
											Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(311)
											Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(311)
											Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(311)
											Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(311)
											_x = tmp26;
											HX_STACK_LINE(311)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(311)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(311)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(311)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(311)
											Float tmp31 = (sqw + sqx);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(311)
											Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(311)
											Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(311)
											Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(311)
											Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(311)
											Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(311)
											_y = tmp36;
											HX_STACK_LINE(311)
											Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(311)
											{
												HX_STACK_LINE(311)
												Float tmp38 = (_g->x * _g->y);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(311)
												Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(311)
												Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(311)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(311)
												Float value = tmp41;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(311)
												bool tmp42 = (value < (int)-1);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(311)
												if ((tmp42)){
													HX_STACK_LINE(311)
													tmp37 = (int)-1;
												}
												else{
													HX_STACK_LINE(311)
													bool tmp43 = (value > (int)1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(311)
													if ((tmp43)){
														HX_STACK_LINE(311)
														tmp37 = (int)1;
													}
													else{
														HX_STACK_LINE(311)
														tmp37 = value;
													}
												}
											}
											HX_STACK_LINE(311)
											Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(311)
											_z = tmp38;
										}
										else{
											HX_STACK_LINE(311)
											bool tmp17 = (order == (int)5);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(311)
											if ((tmp17)){
												HX_STACK_LINE(311)
												Float tmp18 = (_g->x * _g->w);		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(311)
												Float tmp19 = (_g->y * _g->z);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(311)
												Float tmp20 = (tmp18 + tmp19);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(311)
												Float tmp21 = ((int)2 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(311)
												Float tmp22 = (sqw - sqx);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(311)
												Float tmp23 = sqy;		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(311)
												Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(311)
												Float tmp25 = sqz;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(311)
												Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(311)
												Float tmp27 = ::Math_obj::atan2(tmp21,tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(311)
												_x = tmp27;
												HX_STACK_LINE(311)
												Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(311)
												Float tmp29 = (_g->y * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(311)
												Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(311)
												Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(311)
												Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(311)
												Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(311)
												Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(311)
												Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(311)
												Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(311)
												Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(311)
												_y = tmp37;
												HX_STACK_LINE(311)
												Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(311)
												{
													HX_STACK_LINE(311)
													Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(311)
													Float tmp40 = (_g->x * _g->y);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(311)
													Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(311)
													Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(311)
													Float value = tmp42;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(311)
													bool tmp43 = (value < (int)-1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(311)
													if ((tmp43)){
														HX_STACK_LINE(311)
														tmp38 = (int)-1;
													}
													else{
														HX_STACK_LINE(311)
														bool tmp44 = (value > (int)1);		HX_STACK_VAR(tmp44,"tmp44");
														HX_STACK_LINE(311)
														if ((tmp44)){
															HX_STACK_LINE(311)
															tmp38 = (int)1;
														}
														else{
															HX_STACK_LINE(311)
															tmp38 = value;
														}
													}
												}
												HX_STACK_LINE(311)
												Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(311)
												_z = tmp39;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(311)
						{
							HX_STACK_LINE(311)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(311)
							_this->ignore_listeners = true;
							HX_STACK_LINE(311)
							{
								HX_STACK_LINE(311)
								_this->x = _x;
								HX_STACK_LINE(311)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(311)
								if ((tmp13)){
									HX_STACK_LINE(311)
									_this->x;
								}
								else{
									HX_STACK_LINE(311)
									bool tmp14 = (_this->listen_x != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(311)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(311)
									if ((tmp14)){
										HX_STACK_LINE(311)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(311)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(311)
										tmp15 = false;
									}
									HX_STACK_LINE(311)
									if ((tmp15)){
										HX_STACK_LINE(311)
										Float tmp16 = _x;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										_this->listen_x(tmp16);
									}
									HX_STACK_LINE(311)
									_this->x;
								}
							}
							HX_STACK_LINE(311)
							{
								HX_STACK_LINE(311)
								_this->y = _y;
								HX_STACK_LINE(311)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(311)
								if ((tmp13)){
									HX_STACK_LINE(311)
									_this->y;
								}
								else{
									HX_STACK_LINE(311)
									bool tmp14 = (_this->listen_y != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(311)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(311)
									if ((tmp14)){
										HX_STACK_LINE(311)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(311)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(311)
										tmp15 = false;
									}
									HX_STACK_LINE(311)
									if ((tmp15)){
										HX_STACK_LINE(311)
										Float tmp16 = _y;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										_this->listen_y(tmp16);
									}
									HX_STACK_LINE(311)
									_this->y;
								}
							}
							HX_STACK_LINE(311)
							{
								HX_STACK_LINE(311)
								_this->z = _z;
								HX_STACK_LINE(311)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(311)
								if ((tmp13)){
									HX_STACK_LINE(311)
									_this->z;
								}
								else{
									HX_STACK_LINE(311)
									bool tmp14 = (_this->listen_z != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(311)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(311)
									if ((tmp14)){
										HX_STACK_LINE(311)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(311)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(311)
										tmp15 = false;
									}
									HX_STACK_LINE(311)
									if ((tmp15)){
										HX_STACK_LINE(311)
										Float tmp16 = _z;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(311)
										_this->listen_z(tmp16);
									}
									HX_STACK_LINE(311)
									_this->z;
								}
							}
							HX_STACK_LINE(311)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(311)
							bool tmp13 = (_this->listen_x != null());		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(311)
							bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(311)
							if ((tmp13)){
								HX_STACK_LINE(311)
								bool tmp15 = _this->ignore_listeners;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(311)
								bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(311)
								tmp14 = !(tmp16);
							}
							else{
								HX_STACK_LINE(311)
								tmp14 = false;
							}
							HX_STACK_LINE(311)
							if ((tmp14)){
								HX_STACK_LINE(311)
								Float tmp15 = _this->x;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(311)
								_this->listen_x(tmp15);
							}
							HX_STACK_LINE(311)
							bool tmp15 = (_this->listen_y != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(311)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(311)
							if ((tmp15)){
								HX_STACK_LINE(311)
								bool tmp17 = _this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(311)
								bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(311)
								tmp16 = !(tmp18);
							}
							else{
								HX_STACK_LINE(311)
								tmp16 = false;
							}
							HX_STACK_LINE(311)
							if ((tmp16)){
								HX_STACK_LINE(311)
								Float tmp17 = _this->y;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(311)
								_this->listen_y(tmp17);
							}
							HX_STACK_LINE(311)
							bool tmp17 = (_this->listen_z != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(311)
							bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(311)
							if ((tmp17)){
								HX_STACK_LINE(311)
								bool tmp19 = _this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(311)
								bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(311)
								tmp18 = !(tmp20);
							}
							else{
								HX_STACK_LINE(311)
								tmp18 = false;
							}
							HX_STACK_LINE(311)
							if ((tmp18)){
								HX_STACK_LINE(311)
								Float tmp19 = _this->z;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(311)
								_this->listen_z(tmp19);
							}
							HX_STACK_LINE(311)
							_this;
						}
						HX_STACK_LINE(311)
						_this;
					}
				}
				HX_STACK_LINE(311)
				bool tmp2 = (_g->listen_x != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(311)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(311)
				if ((tmp2)){
					HX_STACK_LINE(311)
					bool tmp4 = _g->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(311)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(311)
					tmp3 = !(tmp5);
				}
				else{
					HX_STACK_LINE(311)
					tmp3 = false;
				}
				HX_STACK_LINE(311)
				if ((tmp3)){
					HX_STACK_LINE(311)
					Float tmp4 = _g->x;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(311)
					_g->listen_x(tmp4);
				}
				HX_STACK_LINE(311)
				_g->x;
			}
		}
	}
	HX_STACK_LINE(312)
	{
		HX_STACK_LINE(312)
		::phoenix::Quaternion _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(312)
		{
			HX_STACK_LINE(312)
			Float tmp = (_g->y * _scalar);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(312)
			_g->y = tmp;
			HX_STACK_LINE(312)
			bool tmp1 = _g->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(312)
			if ((tmp1)){
				HX_STACK_LINE(312)
				_g->y;
			}
			else{
				HX_STACK_LINE(312)
				{
					HX_STACK_LINE(312)
					bool tmp2 = (_g->euler == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(312)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(312)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(312)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(312)
					if ((tmp4)){
						HX_STACK_LINE(312)
						tmp5 = _g->ignore_euler;
					}
					else{
						HX_STACK_LINE(312)
						tmp5 = true;
					}
					HX_STACK_LINE(312)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(312)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(312)
					if ((tmp6)){
						HX_STACK_LINE(312)
						tmp7 = _g->_construct;
					}
					else{
						HX_STACK_LINE(312)
						tmp7 = true;
					}
					HX_STACK_LINE(312)
					if ((tmp7)){
						HX_STACK_LINE(312)
						Dynamic();
					}
					else{
						HX_STACK_LINE(312)
						::phoenix::Vector _this = _g->euler;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(312)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(312)
						Float tmp8 = (_g->x * _g->x);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(312)
						Float sqx = tmp8;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(312)
						Float tmp9 = (_g->y * _g->y);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(312)
						Float sqy = tmp9;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(312)
						Float tmp10 = (_g->z * _g->z);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(312)
						Float sqz = tmp10;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(312)
						Float tmp11 = (_g->w * _g->w);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(312)
						Float sqw = tmp11;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(312)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(312)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(312)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(312)
						bool tmp12 = (order == (int)0);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(312)
						if ((tmp12)){
							HX_STACK_LINE(312)
							Float tmp13 = (_g->x * _g->w);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(312)
							Float tmp14 = (_g->y * _g->z);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(312)
							Float tmp15 = (tmp13 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(312)
							Float tmp16 = ((int)2 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(312)
							Float tmp17 = (sqw - sqx);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(312)
							Float tmp18 = sqy;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(312)
							Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(312)
							Float tmp20 = sqz;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(312)
							Float tmp21 = (tmp19 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(312)
							Float tmp22 = ::Math_obj::atan2(tmp16,tmp21);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(312)
							_x = tmp22;
							HX_STACK_LINE(312)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(312)
							{
								HX_STACK_LINE(312)
								Float tmp24 = (_g->x * _g->z);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(312)
								Float tmp25 = (_g->y * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(312)
								Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(312)
								Float tmp27 = ((int)2 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(312)
								Float value = tmp27;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(312)
								bool tmp28 = (value < (int)-1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(312)
								if ((tmp28)){
									HX_STACK_LINE(312)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(312)
									bool tmp29 = (value > (int)1);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(312)
									if ((tmp29)){
										HX_STACK_LINE(312)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(312)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(312)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(312)
							_y = tmp24;
							HX_STACK_LINE(312)
							Float tmp25 = (_g->z * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(312)
							Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(312)
							Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(312)
							Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(312)
							Float tmp29 = (sqw + sqx);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(312)
							Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(312)
							Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(312)
							Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(312)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(312)
							Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(312)
							_z = tmp34;
						}
						else{
							HX_STACK_LINE(312)
							bool tmp13 = (order == (int)1);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(312)
							if ((tmp13)){
								HX_STACK_LINE(312)
								Float tmp14;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(312)
								{
									HX_STACK_LINE(312)
									Float tmp15 = (_g->x * _g->w);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(312)
									Float tmp16 = (_g->y * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(312)
									Float tmp17 = (tmp15 - tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(312)
									Float tmp18 = ((int)2 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(312)
									Float value = tmp18;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(312)
									bool tmp19 = (value < (int)-1);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(312)
									if ((tmp19)){
										HX_STACK_LINE(312)
										tmp14 = (int)-1;
									}
									else{
										HX_STACK_LINE(312)
										bool tmp20 = (value > (int)1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(312)
										if ((tmp20)){
											HX_STACK_LINE(312)
											tmp14 = (int)1;
										}
										else{
											HX_STACK_LINE(312)
											tmp14 = value;
										}
									}
								}
								HX_STACK_LINE(312)
								Float tmp15 = ::Math_obj::asin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(312)
								_x = tmp15;
								HX_STACK_LINE(312)
								Float tmp16 = (_g->x * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(312)
								Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(312)
								Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(312)
								Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(312)
								Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(312)
								Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(312)
								Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(312)
								Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(312)
								Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(312)
								Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(312)
								_y = tmp25;
								HX_STACK_LINE(312)
								Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(312)
								Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(312)
								Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(312)
								Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(312)
								Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(312)
								Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(312)
								Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(312)
								Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(312)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(312)
								Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(312)
								_z = tmp35;
							}
							else{
								HX_STACK_LINE(312)
								bool tmp14 = (order == (int)2);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(312)
								if ((tmp14)){
									HX_STACK_LINE(312)
									Float tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(312)
									{
										HX_STACK_LINE(312)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										Float tmp17 = (_g->y * _g->z);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(312)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(312)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(312)
										Float value = tmp19;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(312)
										bool tmp20 = (value < (int)-1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(312)
										if ((tmp20)){
											HX_STACK_LINE(312)
											tmp15 = (int)-1;
										}
										else{
											HX_STACK_LINE(312)
											bool tmp21 = (value > (int)1);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(312)
											if ((tmp21)){
												HX_STACK_LINE(312)
												tmp15 = (int)1;
											}
											else{
												HX_STACK_LINE(312)
												tmp15 = value;
											}
										}
									}
									HX_STACK_LINE(312)
									Float tmp16 = ::Math_obj::asin(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(312)
									_x = tmp16;
									HX_STACK_LINE(312)
									Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(312)
									Float tmp18 = (_g->z * _g->x);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(312)
									Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(312)
									Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(312)
									Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(312)
									Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(312)
									Float tmp23 = (tmp21 - tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(312)
									Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(312)
									Float tmp25 = (tmp23 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(312)
									Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(312)
									_y = tmp26;
									HX_STACK_LINE(312)
									Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(312)
									Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(312)
									Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(312)
									Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(312)
									Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(312)
									Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(312)
									Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(312)
									Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(312)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(312)
									Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(312)
									_z = tmp36;
								}
								else{
									HX_STACK_LINE(312)
									bool tmp15 = (order == (int)3);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(312)
									if ((tmp15)){
										HX_STACK_LINE(312)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										Float tmp17 = (_g->z * _g->y);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(312)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(312)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(312)
										Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(312)
										Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(312)
										Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(312)
										Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(312)
										Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(312)
										Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(312)
										_x = tmp25;
										HX_STACK_LINE(312)
										Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(312)
										{
											HX_STACK_LINE(312)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(312)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(312)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(312)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(312)
											Float value = tmp30;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(312)
											bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(312)
											if ((tmp31)){
												HX_STACK_LINE(312)
												tmp26 = (int)-1;
											}
											else{
												HX_STACK_LINE(312)
												bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(312)
												if ((tmp32)){
													HX_STACK_LINE(312)
													tmp26 = (int)1;
												}
												else{
													HX_STACK_LINE(312)
													tmp26 = value;
												}
											}
										}
										HX_STACK_LINE(312)
										Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(312)
										_y = tmp27;
										HX_STACK_LINE(312)
										Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(312)
										Float tmp29 = (_g->z * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(312)
										Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(312)
										Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(312)
										Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(312)
										Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(312)
										Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(312)
										Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(312)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(312)
										Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(312)
										_z = tmp37;
									}
									else{
										HX_STACK_LINE(312)
										bool tmp16 = (order == (int)4);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										if ((tmp16)){
											HX_STACK_LINE(312)
											Float tmp17 = (_g->x * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(312)
											Float tmp18 = (_g->z * _g->y);		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(312)
											Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
											HX_STACK_LINE(312)
											Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(312)
											Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(312)
											Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(312)
											Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(312)
											Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(312)
											Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(312)
											Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(312)
											_x = tmp26;
											HX_STACK_LINE(312)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(312)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(312)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(312)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(312)
											Float tmp31 = (sqw + sqx);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(312)
											Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(312)
											Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(312)
											Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(312)
											Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(312)
											Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(312)
											_y = tmp36;
											HX_STACK_LINE(312)
											Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(312)
											{
												HX_STACK_LINE(312)
												Float tmp38 = (_g->x * _g->y);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(312)
												Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(312)
												Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(312)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(312)
												Float value = tmp41;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(312)
												bool tmp42 = (value < (int)-1);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(312)
												if ((tmp42)){
													HX_STACK_LINE(312)
													tmp37 = (int)-1;
												}
												else{
													HX_STACK_LINE(312)
													bool tmp43 = (value > (int)1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(312)
													if ((tmp43)){
														HX_STACK_LINE(312)
														tmp37 = (int)1;
													}
													else{
														HX_STACK_LINE(312)
														tmp37 = value;
													}
												}
											}
											HX_STACK_LINE(312)
											Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(312)
											_z = tmp38;
										}
										else{
											HX_STACK_LINE(312)
											bool tmp17 = (order == (int)5);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(312)
											if ((tmp17)){
												HX_STACK_LINE(312)
												Float tmp18 = (_g->x * _g->w);		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(312)
												Float tmp19 = (_g->y * _g->z);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(312)
												Float tmp20 = (tmp18 + tmp19);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(312)
												Float tmp21 = ((int)2 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(312)
												Float tmp22 = (sqw - sqx);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(312)
												Float tmp23 = sqy;		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(312)
												Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(312)
												Float tmp25 = sqz;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(312)
												Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(312)
												Float tmp27 = ::Math_obj::atan2(tmp21,tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(312)
												_x = tmp27;
												HX_STACK_LINE(312)
												Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(312)
												Float tmp29 = (_g->y * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(312)
												Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(312)
												Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(312)
												Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(312)
												Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(312)
												Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(312)
												Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(312)
												Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(312)
												Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(312)
												_y = tmp37;
												HX_STACK_LINE(312)
												Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(312)
												{
													HX_STACK_LINE(312)
													Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(312)
													Float tmp40 = (_g->x * _g->y);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(312)
													Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(312)
													Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(312)
													Float value = tmp42;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(312)
													bool tmp43 = (value < (int)-1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(312)
													if ((tmp43)){
														HX_STACK_LINE(312)
														tmp38 = (int)-1;
													}
													else{
														HX_STACK_LINE(312)
														bool tmp44 = (value > (int)1);		HX_STACK_VAR(tmp44,"tmp44");
														HX_STACK_LINE(312)
														if ((tmp44)){
															HX_STACK_LINE(312)
															tmp38 = (int)1;
														}
														else{
															HX_STACK_LINE(312)
															tmp38 = value;
														}
													}
												}
												HX_STACK_LINE(312)
												Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(312)
												_z = tmp39;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(312)
						{
							HX_STACK_LINE(312)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(312)
							_this->ignore_listeners = true;
							HX_STACK_LINE(312)
							{
								HX_STACK_LINE(312)
								_this->x = _x;
								HX_STACK_LINE(312)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(312)
								if ((tmp13)){
									HX_STACK_LINE(312)
									_this->x;
								}
								else{
									HX_STACK_LINE(312)
									bool tmp14 = (_this->listen_x != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(312)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(312)
									if ((tmp14)){
										HX_STACK_LINE(312)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(312)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(312)
										tmp15 = false;
									}
									HX_STACK_LINE(312)
									if ((tmp15)){
										HX_STACK_LINE(312)
										Float tmp16 = _x;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										_this->listen_x(tmp16);
									}
									HX_STACK_LINE(312)
									_this->x;
								}
							}
							HX_STACK_LINE(312)
							{
								HX_STACK_LINE(312)
								_this->y = _y;
								HX_STACK_LINE(312)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(312)
								if ((tmp13)){
									HX_STACK_LINE(312)
									_this->y;
								}
								else{
									HX_STACK_LINE(312)
									bool tmp14 = (_this->listen_y != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(312)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(312)
									if ((tmp14)){
										HX_STACK_LINE(312)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(312)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(312)
										tmp15 = false;
									}
									HX_STACK_LINE(312)
									if ((tmp15)){
										HX_STACK_LINE(312)
										Float tmp16 = _y;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										_this->listen_y(tmp16);
									}
									HX_STACK_LINE(312)
									_this->y;
								}
							}
							HX_STACK_LINE(312)
							{
								HX_STACK_LINE(312)
								_this->z = _z;
								HX_STACK_LINE(312)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(312)
								if ((tmp13)){
									HX_STACK_LINE(312)
									_this->z;
								}
								else{
									HX_STACK_LINE(312)
									bool tmp14 = (_this->listen_z != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(312)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(312)
									if ((tmp14)){
										HX_STACK_LINE(312)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(312)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(312)
										tmp15 = false;
									}
									HX_STACK_LINE(312)
									if ((tmp15)){
										HX_STACK_LINE(312)
										Float tmp16 = _z;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(312)
										_this->listen_z(tmp16);
									}
									HX_STACK_LINE(312)
									_this->z;
								}
							}
							HX_STACK_LINE(312)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(312)
							bool tmp13 = (_this->listen_x != null());		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(312)
							bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(312)
							if ((tmp13)){
								HX_STACK_LINE(312)
								bool tmp15 = _this->ignore_listeners;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(312)
								bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(312)
								tmp14 = !(tmp16);
							}
							else{
								HX_STACK_LINE(312)
								tmp14 = false;
							}
							HX_STACK_LINE(312)
							if ((tmp14)){
								HX_STACK_LINE(312)
								Float tmp15 = _this->x;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(312)
								_this->listen_x(tmp15);
							}
							HX_STACK_LINE(312)
							bool tmp15 = (_this->listen_y != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(312)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(312)
							if ((tmp15)){
								HX_STACK_LINE(312)
								bool tmp17 = _this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(312)
								bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(312)
								tmp16 = !(tmp18);
							}
							else{
								HX_STACK_LINE(312)
								tmp16 = false;
							}
							HX_STACK_LINE(312)
							if ((tmp16)){
								HX_STACK_LINE(312)
								Float tmp17 = _this->y;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(312)
								_this->listen_y(tmp17);
							}
							HX_STACK_LINE(312)
							bool tmp17 = (_this->listen_z != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(312)
							bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(312)
							if ((tmp17)){
								HX_STACK_LINE(312)
								bool tmp19 = _this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(312)
								bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(312)
								tmp18 = !(tmp20);
							}
							else{
								HX_STACK_LINE(312)
								tmp18 = false;
							}
							HX_STACK_LINE(312)
							if ((tmp18)){
								HX_STACK_LINE(312)
								Float tmp19 = _this->z;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(312)
								_this->listen_z(tmp19);
							}
							HX_STACK_LINE(312)
							_this;
						}
						HX_STACK_LINE(312)
						_this;
					}
				}
				HX_STACK_LINE(312)
				bool tmp2 = (_g->listen_y != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(312)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(312)
				if ((tmp2)){
					HX_STACK_LINE(312)
					bool tmp4 = _g->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(312)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(312)
					tmp3 = !(tmp5);
				}
				else{
					HX_STACK_LINE(312)
					tmp3 = false;
				}
				HX_STACK_LINE(312)
				if ((tmp3)){
					HX_STACK_LINE(312)
					Float tmp4 = _g->y;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(312)
					_g->listen_y(tmp4);
				}
				HX_STACK_LINE(312)
				_g->y;
			}
		}
	}
	HX_STACK_LINE(313)
	{
		HX_STACK_LINE(313)
		::phoenix::Quaternion _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(313)
		{
			HX_STACK_LINE(313)
			Float tmp = (_g->z * _scalar);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(313)
			_g->z = tmp;
			HX_STACK_LINE(313)
			bool tmp1 = _g->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(313)
			if ((tmp1)){
				HX_STACK_LINE(313)
				_g->z;
			}
			else{
				HX_STACK_LINE(313)
				{
					HX_STACK_LINE(313)
					bool tmp2 = (_g->euler == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(313)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(313)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(313)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(313)
					if ((tmp4)){
						HX_STACK_LINE(313)
						tmp5 = _g->ignore_euler;
					}
					else{
						HX_STACK_LINE(313)
						tmp5 = true;
					}
					HX_STACK_LINE(313)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(313)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(313)
					if ((tmp6)){
						HX_STACK_LINE(313)
						tmp7 = _g->_construct;
					}
					else{
						HX_STACK_LINE(313)
						tmp7 = true;
					}
					HX_STACK_LINE(313)
					if ((tmp7)){
						HX_STACK_LINE(313)
						Dynamic();
					}
					else{
						HX_STACK_LINE(313)
						::phoenix::Vector _this = _g->euler;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(313)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(313)
						Float tmp8 = (_g->x * _g->x);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(313)
						Float sqx = tmp8;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(313)
						Float tmp9 = (_g->y * _g->y);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(313)
						Float sqy = tmp9;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(313)
						Float tmp10 = (_g->z * _g->z);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(313)
						Float sqz = tmp10;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(313)
						Float tmp11 = (_g->w * _g->w);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(313)
						Float sqw = tmp11;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(313)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(313)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(313)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(313)
						bool tmp12 = (order == (int)0);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(313)
						if ((tmp12)){
							HX_STACK_LINE(313)
							Float tmp13 = (_g->x * _g->w);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(313)
							Float tmp14 = (_g->y * _g->z);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(313)
							Float tmp15 = (tmp13 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(313)
							Float tmp16 = ((int)2 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(313)
							Float tmp17 = (sqw - sqx);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(313)
							Float tmp18 = sqy;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(313)
							Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(313)
							Float tmp20 = sqz;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(313)
							Float tmp21 = (tmp19 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(313)
							Float tmp22 = ::Math_obj::atan2(tmp16,tmp21);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(313)
							_x = tmp22;
							HX_STACK_LINE(313)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(313)
							{
								HX_STACK_LINE(313)
								Float tmp24 = (_g->x * _g->z);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(313)
								Float tmp25 = (_g->y * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(313)
								Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(313)
								Float tmp27 = ((int)2 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(313)
								Float value = tmp27;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(313)
								bool tmp28 = (value < (int)-1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(313)
								if ((tmp28)){
									HX_STACK_LINE(313)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(313)
									bool tmp29 = (value > (int)1);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(313)
									if ((tmp29)){
										HX_STACK_LINE(313)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(313)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(313)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(313)
							_y = tmp24;
							HX_STACK_LINE(313)
							Float tmp25 = (_g->z * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(313)
							Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(313)
							Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(313)
							Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(313)
							Float tmp29 = (sqw + sqx);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(313)
							Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(313)
							Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(313)
							Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(313)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(313)
							Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(313)
							_z = tmp34;
						}
						else{
							HX_STACK_LINE(313)
							bool tmp13 = (order == (int)1);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(313)
							if ((tmp13)){
								HX_STACK_LINE(313)
								Float tmp14;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(313)
								{
									HX_STACK_LINE(313)
									Float tmp15 = (_g->x * _g->w);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(313)
									Float tmp16 = (_g->y * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(313)
									Float tmp17 = (tmp15 - tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(313)
									Float tmp18 = ((int)2 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(313)
									Float value = tmp18;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(313)
									bool tmp19 = (value < (int)-1);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(313)
									if ((tmp19)){
										HX_STACK_LINE(313)
										tmp14 = (int)-1;
									}
									else{
										HX_STACK_LINE(313)
										bool tmp20 = (value > (int)1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(313)
										if ((tmp20)){
											HX_STACK_LINE(313)
											tmp14 = (int)1;
										}
										else{
											HX_STACK_LINE(313)
											tmp14 = value;
										}
									}
								}
								HX_STACK_LINE(313)
								Float tmp15 = ::Math_obj::asin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(313)
								_x = tmp15;
								HX_STACK_LINE(313)
								Float tmp16 = (_g->x * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(313)
								Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(313)
								Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(313)
								Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(313)
								Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(313)
								Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(313)
								Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(313)
								Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(313)
								Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(313)
								Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(313)
								_y = tmp25;
								HX_STACK_LINE(313)
								Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(313)
								Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(313)
								Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(313)
								Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(313)
								Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(313)
								Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(313)
								Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(313)
								Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(313)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(313)
								Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(313)
								_z = tmp35;
							}
							else{
								HX_STACK_LINE(313)
								bool tmp14 = (order == (int)2);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(313)
								if ((tmp14)){
									HX_STACK_LINE(313)
									Float tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(313)
									{
										HX_STACK_LINE(313)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										Float tmp17 = (_g->y * _g->z);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(313)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(313)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(313)
										Float value = tmp19;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(313)
										bool tmp20 = (value < (int)-1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(313)
										if ((tmp20)){
											HX_STACK_LINE(313)
											tmp15 = (int)-1;
										}
										else{
											HX_STACK_LINE(313)
											bool tmp21 = (value > (int)1);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(313)
											if ((tmp21)){
												HX_STACK_LINE(313)
												tmp15 = (int)1;
											}
											else{
												HX_STACK_LINE(313)
												tmp15 = value;
											}
										}
									}
									HX_STACK_LINE(313)
									Float tmp16 = ::Math_obj::asin(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(313)
									_x = tmp16;
									HX_STACK_LINE(313)
									Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(313)
									Float tmp18 = (_g->z * _g->x);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(313)
									Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(313)
									Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(313)
									Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(313)
									Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(313)
									Float tmp23 = (tmp21 - tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(313)
									Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(313)
									Float tmp25 = (tmp23 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(313)
									Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(313)
									_y = tmp26;
									HX_STACK_LINE(313)
									Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(313)
									Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(313)
									Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(313)
									Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(313)
									Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(313)
									Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(313)
									Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(313)
									Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(313)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(313)
									Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(313)
									_z = tmp36;
								}
								else{
									HX_STACK_LINE(313)
									bool tmp15 = (order == (int)3);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(313)
									if ((tmp15)){
										HX_STACK_LINE(313)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										Float tmp17 = (_g->z * _g->y);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(313)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(313)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(313)
										Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(313)
										Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(313)
										Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(313)
										Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(313)
										Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(313)
										Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(313)
										_x = tmp25;
										HX_STACK_LINE(313)
										Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(313)
										{
											HX_STACK_LINE(313)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(313)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(313)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(313)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(313)
											Float value = tmp30;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(313)
											bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(313)
											if ((tmp31)){
												HX_STACK_LINE(313)
												tmp26 = (int)-1;
											}
											else{
												HX_STACK_LINE(313)
												bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(313)
												if ((tmp32)){
													HX_STACK_LINE(313)
													tmp26 = (int)1;
												}
												else{
													HX_STACK_LINE(313)
													tmp26 = value;
												}
											}
										}
										HX_STACK_LINE(313)
										Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(313)
										_y = tmp27;
										HX_STACK_LINE(313)
										Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(313)
										Float tmp29 = (_g->z * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(313)
										Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(313)
										Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(313)
										Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(313)
										Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(313)
										Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(313)
										Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(313)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(313)
										Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(313)
										_z = tmp37;
									}
									else{
										HX_STACK_LINE(313)
										bool tmp16 = (order == (int)4);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										if ((tmp16)){
											HX_STACK_LINE(313)
											Float tmp17 = (_g->x * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(313)
											Float tmp18 = (_g->z * _g->y);		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(313)
											Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
											HX_STACK_LINE(313)
											Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(313)
											Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(313)
											Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(313)
											Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(313)
											Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(313)
											Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(313)
											Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(313)
											_x = tmp26;
											HX_STACK_LINE(313)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(313)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(313)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(313)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(313)
											Float tmp31 = (sqw + sqx);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(313)
											Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(313)
											Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(313)
											Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(313)
											Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(313)
											Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(313)
											_y = tmp36;
											HX_STACK_LINE(313)
											Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(313)
											{
												HX_STACK_LINE(313)
												Float tmp38 = (_g->x * _g->y);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(313)
												Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(313)
												Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(313)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(313)
												Float value = tmp41;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(313)
												bool tmp42 = (value < (int)-1);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(313)
												if ((tmp42)){
													HX_STACK_LINE(313)
													tmp37 = (int)-1;
												}
												else{
													HX_STACK_LINE(313)
													bool tmp43 = (value > (int)1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(313)
													if ((tmp43)){
														HX_STACK_LINE(313)
														tmp37 = (int)1;
													}
													else{
														HX_STACK_LINE(313)
														tmp37 = value;
													}
												}
											}
											HX_STACK_LINE(313)
											Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(313)
											_z = tmp38;
										}
										else{
											HX_STACK_LINE(313)
											bool tmp17 = (order == (int)5);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(313)
											if ((tmp17)){
												HX_STACK_LINE(313)
												Float tmp18 = (_g->x * _g->w);		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(313)
												Float tmp19 = (_g->y * _g->z);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(313)
												Float tmp20 = (tmp18 + tmp19);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(313)
												Float tmp21 = ((int)2 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(313)
												Float tmp22 = (sqw - sqx);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(313)
												Float tmp23 = sqy;		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(313)
												Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(313)
												Float tmp25 = sqz;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(313)
												Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(313)
												Float tmp27 = ::Math_obj::atan2(tmp21,tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(313)
												_x = tmp27;
												HX_STACK_LINE(313)
												Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(313)
												Float tmp29 = (_g->y * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(313)
												Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(313)
												Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(313)
												Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(313)
												Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(313)
												Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(313)
												Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(313)
												Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(313)
												Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(313)
												_y = tmp37;
												HX_STACK_LINE(313)
												Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(313)
												{
													HX_STACK_LINE(313)
													Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(313)
													Float tmp40 = (_g->x * _g->y);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(313)
													Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(313)
													Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(313)
													Float value = tmp42;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(313)
													bool tmp43 = (value < (int)-1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(313)
													if ((tmp43)){
														HX_STACK_LINE(313)
														tmp38 = (int)-1;
													}
													else{
														HX_STACK_LINE(313)
														bool tmp44 = (value > (int)1);		HX_STACK_VAR(tmp44,"tmp44");
														HX_STACK_LINE(313)
														if ((tmp44)){
															HX_STACK_LINE(313)
															tmp38 = (int)1;
														}
														else{
															HX_STACK_LINE(313)
															tmp38 = value;
														}
													}
												}
												HX_STACK_LINE(313)
												Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(313)
												_z = tmp39;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(313)
						{
							HX_STACK_LINE(313)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(313)
							_this->ignore_listeners = true;
							HX_STACK_LINE(313)
							{
								HX_STACK_LINE(313)
								_this->x = _x;
								HX_STACK_LINE(313)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(313)
								if ((tmp13)){
									HX_STACK_LINE(313)
									_this->x;
								}
								else{
									HX_STACK_LINE(313)
									bool tmp14 = (_this->listen_x != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(313)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(313)
									if ((tmp14)){
										HX_STACK_LINE(313)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(313)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(313)
										tmp15 = false;
									}
									HX_STACK_LINE(313)
									if ((tmp15)){
										HX_STACK_LINE(313)
										Float tmp16 = _x;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										_this->listen_x(tmp16);
									}
									HX_STACK_LINE(313)
									_this->x;
								}
							}
							HX_STACK_LINE(313)
							{
								HX_STACK_LINE(313)
								_this->y = _y;
								HX_STACK_LINE(313)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(313)
								if ((tmp13)){
									HX_STACK_LINE(313)
									_this->y;
								}
								else{
									HX_STACK_LINE(313)
									bool tmp14 = (_this->listen_y != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(313)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(313)
									if ((tmp14)){
										HX_STACK_LINE(313)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(313)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(313)
										tmp15 = false;
									}
									HX_STACK_LINE(313)
									if ((tmp15)){
										HX_STACK_LINE(313)
										Float tmp16 = _y;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										_this->listen_y(tmp16);
									}
									HX_STACK_LINE(313)
									_this->y;
								}
							}
							HX_STACK_LINE(313)
							{
								HX_STACK_LINE(313)
								_this->z = _z;
								HX_STACK_LINE(313)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(313)
								if ((tmp13)){
									HX_STACK_LINE(313)
									_this->z;
								}
								else{
									HX_STACK_LINE(313)
									bool tmp14 = (_this->listen_z != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(313)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(313)
									if ((tmp14)){
										HX_STACK_LINE(313)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(313)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(313)
										tmp15 = false;
									}
									HX_STACK_LINE(313)
									if ((tmp15)){
										HX_STACK_LINE(313)
										Float tmp16 = _z;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(313)
										_this->listen_z(tmp16);
									}
									HX_STACK_LINE(313)
									_this->z;
								}
							}
							HX_STACK_LINE(313)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(313)
							bool tmp13 = (_this->listen_x != null());		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(313)
							bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(313)
							if ((tmp13)){
								HX_STACK_LINE(313)
								bool tmp15 = _this->ignore_listeners;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(313)
								bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(313)
								tmp14 = !(tmp16);
							}
							else{
								HX_STACK_LINE(313)
								tmp14 = false;
							}
							HX_STACK_LINE(313)
							if ((tmp14)){
								HX_STACK_LINE(313)
								Float tmp15 = _this->x;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(313)
								_this->listen_x(tmp15);
							}
							HX_STACK_LINE(313)
							bool tmp15 = (_this->listen_y != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(313)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(313)
							if ((tmp15)){
								HX_STACK_LINE(313)
								bool tmp17 = _this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(313)
								bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(313)
								tmp16 = !(tmp18);
							}
							else{
								HX_STACK_LINE(313)
								tmp16 = false;
							}
							HX_STACK_LINE(313)
							if ((tmp16)){
								HX_STACK_LINE(313)
								Float tmp17 = _this->y;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(313)
								_this->listen_y(tmp17);
							}
							HX_STACK_LINE(313)
							bool tmp17 = (_this->listen_z != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(313)
							bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(313)
							if ((tmp17)){
								HX_STACK_LINE(313)
								bool tmp19 = _this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(313)
								bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(313)
								tmp18 = !(tmp20);
							}
							else{
								HX_STACK_LINE(313)
								tmp18 = false;
							}
							HX_STACK_LINE(313)
							if ((tmp18)){
								HX_STACK_LINE(313)
								Float tmp19 = _this->z;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(313)
								_this->listen_z(tmp19);
							}
							HX_STACK_LINE(313)
							_this;
						}
						HX_STACK_LINE(313)
						_this;
					}
				}
				HX_STACK_LINE(313)
				bool tmp2 = (_g->listen_z != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(313)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(313)
				if ((tmp2)){
					HX_STACK_LINE(313)
					bool tmp4 = _g->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(313)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(313)
					tmp3 = !(tmp5);
				}
				else{
					HX_STACK_LINE(313)
					tmp3 = false;
				}
				HX_STACK_LINE(313)
				if ((tmp3)){
					HX_STACK_LINE(313)
					Float tmp4 = _g->z;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(313)
					_g->listen_z(tmp4);
				}
				HX_STACK_LINE(313)
				_g->z;
			}
		}
	}
	HX_STACK_LINE(314)
	{
		HX_STACK_LINE(314)
		::phoenix::Quaternion _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(314)
		{
			HX_STACK_LINE(314)
			Float tmp = (_g->w * _scalar);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(314)
			_g->w = tmp;
			HX_STACK_LINE(314)
			bool tmp1 = _g->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(314)
			if ((tmp1)){
				HX_STACK_LINE(314)
				_g->w;
			}
			else{
				HX_STACK_LINE(314)
				{
					HX_STACK_LINE(314)
					bool tmp2 = (_g->euler == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(314)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(314)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(314)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(314)
					if ((tmp4)){
						HX_STACK_LINE(314)
						tmp5 = _g->ignore_euler;
					}
					else{
						HX_STACK_LINE(314)
						tmp5 = true;
					}
					HX_STACK_LINE(314)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(314)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(314)
					if ((tmp6)){
						HX_STACK_LINE(314)
						tmp7 = _g->_construct;
					}
					else{
						HX_STACK_LINE(314)
						tmp7 = true;
					}
					HX_STACK_LINE(314)
					if ((tmp7)){
						HX_STACK_LINE(314)
						Dynamic();
					}
					else{
						HX_STACK_LINE(314)
						::phoenix::Vector _this = _g->euler;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(314)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(314)
						Float tmp8 = (_g->x * _g->x);		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(314)
						Float sqx = tmp8;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(314)
						Float tmp9 = (_g->y * _g->y);		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(314)
						Float sqy = tmp9;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(314)
						Float tmp10 = (_g->z * _g->z);		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(314)
						Float sqz = tmp10;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(314)
						Float tmp11 = (_g->w * _g->w);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(314)
						Float sqw = tmp11;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(314)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(314)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(314)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(314)
						bool tmp12 = (order == (int)0);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(314)
						if ((tmp12)){
							HX_STACK_LINE(314)
							Float tmp13 = (_g->x * _g->w);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(314)
							Float tmp14 = (_g->y * _g->z);		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(314)
							Float tmp15 = (tmp13 - tmp14);		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(314)
							Float tmp16 = ((int)2 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(314)
							Float tmp17 = (sqw - sqx);		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(314)
							Float tmp18 = sqy;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(314)
							Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(314)
							Float tmp20 = sqz;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(314)
							Float tmp21 = (tmp19 + tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(314)
							Float tmp22 = ::Math_obj::atan2(tmp16,tmp21);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(314)
							_x = tmp22;
							HX_STACK_LINE(314)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(314)
							{
								HX_STACK_LINE(314)
								Float tmp24 = (_g->x * _g->z);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(314)
								Float tmp25 = (_g->y * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(314)
								Float tmp26 = (tmp24 + tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(314)
								Float tmp27 = ((int)2 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(314)
								Float value = tmp27;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(314)
								bool tmp28 = (value < (int)-1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(314)
								if ((tmp28)){
									HX_STACK_LINE(314)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(314)
									bool tmp29 = (value > (int)1);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(314)
									if ((tmp29)){
										HX_STACK_LINE(314)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(314)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(314)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(314)
							_y = tmp24;
							HX_STACK_LINE(314)
							Float tmp25 = (_g->z * _g->w);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(314)
							Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(314)
							Float tmp27 = (tmp25 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(314)
							Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(314)
							Float tmp29 = (sqw + sqx);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(314)
							Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(314)
							Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(314)
							Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(314)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(314)
							Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(314)
							_z = tmp34;
						}
						else{
							HX_STACK_LINE(314)
							bool tmp13 = (order == (int)1);		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(314)
							if ((tmp13)){
								HX_STACK_LINE(314)
								Float tmp14;		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(314)
								{
									HX_STACK_LINE(314)
									Float tmp15 = (_g->x * _g->w);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(314)
									Float tmp16 = (_g->y * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(314)
									Float tmp17 = (tmp15 - tmp16);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(314)
									Float tmp18 = ((int)2 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(314)
									Float value = tmp18;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(314)
									bool tmp19 = (value < (int)-1);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(314)
									if ((tmp19)){
										HX_STACK_LINE(314)
										tmp14 = (int)-1;
									}
									else{
										HX_STACK_LINE(314)
										bool tmp20 = (value > (int)1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(314)
										if ((tmp20)){
											HX_STACK_LINE(314)
											tmp14 = (int)1;
										}
										else{
											HX_STACK_LINE(314)
											tmp14 = value;
										}
									}
								}
								HX_STACK_LINE(314)
								Float tmp15 = ::Math_obj::asin(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(314)
								_x = tmp15;
								HX_STACK_LINE(314)
								Float tmp16 = (_g->x * _g->z);		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(314)
								Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(314)
								Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(314)
								Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(314)
								Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(314)
								Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(314)
								Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(314)
								Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(314)
								Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(314)
								Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(314)
								_y = tmp25;
								HX_STACK_LINE(314)
								Float tmp26 = (_g->x * _g->y);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(314)
								Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(314)
								Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(314)
								Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(314)
								Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(314)
								Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(314)
								Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(314)
								Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(314)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(314)
								Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(314)
								_z = tmp35;
							}
							else{
								HX_STACK_LINE(314)
								bool tmp14 = (order == (int)2);		HX_STACK_VAR(tmp14,"tmp14");
								HX_STACK_LINE(314)
								if ((tmp14)){
									HX_STACK_LINE(314)
									Float tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(314)
									{
										HX_STACK_LINE(314)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										Float tmp17 = (_g->y * _g->z);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(314)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(314)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(314)
										Float value = tmp19;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(314)
										bool tmp20 = (value < (int)-1);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(314)
										if ((tmp20)){
											HX_STACK_LINE(314)
											tmp15 = (int)-1;
										}
										else{
											HX_STACK_LINE(314)
											bool tmp21 = (value > (int)1);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(314)
											if ((tmp21)){
												HX_STACK_LINE(314)
												tmp15 = (int)1;
											}
											else{
												HX_STACK_LINE(314)
												tmp15 = value;
											}
										}
									}
									HX_STACK_LINE(314)
									Float tmp16 = ::Math_obj::asin(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
									HX_STACK_LINE(314)
									_x = tmp16;
									HX_STACK_LINE(314)
									Float tmp17 = (_g->y * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
									HX_STACK_LINE(314)
									Float tmp18 = (_g->z * _g->x);		HX_STACK_VAR(tmp18,"tmp18");
									HX_STACK_LINE(314)
									Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
									HX_STACK_LINE(314)
									Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
									HX_STACK_LINE(314)
									Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(314)
									Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(314)
									Float tmp23 = (tmp21 - tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(314)
									Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(314)
									Float tmp25 = (tmp23 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(314)
									Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(314)
									_y = tmp26;
									HX_STACK_LINE(314)
									Float tmp27 = (_g->z * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(314)
									Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(314)
									Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(314)
									Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(314)
									Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(314)
									Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(314)
									Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(314)
									Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(314)
									Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(314)
									Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(314)
									_z = tmp36;
								}
								else{
									HX_STACK_LINE(314)
									bool tmp15 = (order == (int)3);		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(314)
									if ((tmp15)){
										HX_STACK_LINE(314)
										Float tmp16 = (_g->x * _g->w);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										Float tmp17 = (_g->z * _g->y);		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(314)
										Float tmp18 = (tmp16 + tmp17);		HX_STACK_VAR(tmp18,"tmp18");
										HX_STACK_LINE(314)
										Float tmp19 = ((int)2 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
										HX_STACK_LINE(314)
										Float tmp20 = (sqw - sqx);		HX_STACK_VAR(tmp20,"tmp20");
										HX_STACK_LINE(314)
										Float tmp21 = sqy;		HX_STACK_VAR(tmp21,"tmp21");
										HX_STACK_LINE(314)
										Float tmp22 = (tmp20 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
										HX_STACK_LINE(314)
										Float tmp23 = sqz;		HX_STACK_VAR(tmp23,"tmp23");
										HX_STACK_LINE(314)
										Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
										HX_STACK_LINE(314)
										Float tmp25 = ::Math_obj::atan2(tmp19,tmp24);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(314)
										_x = tmp25;
										HX_STACK_LINE(314)
										Float tmp26;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(314)
										{
											HX_STACK_LINE(314)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(314)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(314)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(314)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(314)
											Float value = tmp30;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(314)
											bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(314)
											if ((tmp31)){
												HX_STACK_LINE(314)
												tmp26 = (int)-1;
											}
											else{
												HX_STACK_LINE(314)
												bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(314)
												if ((tmp32)){
													HX_STACK_LINE(314)
													tmp26 = (int)1;
												}
												else{
													HX_STACK_LINE(314)
													tmp26 = value;
												}
											}
										}
										HX_STACK_LINE(314)
										Float tmp27 = ::Math_obj::asin(tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(314)
										_y = tmp27;
										HX_STACK_LINE(314)
										Float tmp28 = (_g->x * _g->y);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(314)
										Float tmp29 = (_g->z * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(314)
										Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(314)
										Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(314)
										Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(314)
										Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(314)
										Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(314)
										Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(314)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(314)
										Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(314)
										_z = tmp37;
									}
									else{
										HX_STACK_LINE(314)
										bool tmp16 = (order == (int)4);		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										if ((tmp16)){
											HX_STACK_LINE(314)
											Float tmp17 = (_g->x * _g->w);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(314)
											Float tmp18 = (_g->z * _g->y);		HX_STACK_VAR(tmp18,"tmp18");
											HX_STACK_LINE(314)
											Float tmp19 = (tmp17 - tmp18);		HX_STACK_VAR(tmp19,"tmp19");
											HX_STACK_LINE(314)
											Float tmp20 = ((int)2 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
											HX_STACK_LINE(314)
											Float tmp21 = (sqw - sqx);		HX_STACK_VAR(tmp21,"tmp21");
											HX_STACK_LINE(314)
											Float tmp22 = sqy;		HX_STACK_VAR(tmp22,"tmp22");
											HX_STACK_LINE(314)
											Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
											HX_STACK_LINE(314)
											Float tmp24 = sqz;		HX_STACK_VAR(tmp24,"tmp24");
											HX_STACK_LINE(314)
											Float tmp25 = (tmp23 - tmp24);		HX_STACK_VAR(tmp25,"tmp25");
											HX_STACK_LINE(314)
											Float tmp26 = ::Math_obj::atan2(tmp20,tmp25);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(314)
											_x = tmp26;
											HX_STACK_LINE(314)
											Float tmp27 = (_g->y * _g->w);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(314)
											Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(314)
											Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(314)
											Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(314)
											Float tmp31 = (sqw + sqx);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(314)
											Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(314)
											Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(314)
											Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(314)
											Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(314)
											Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(314)
											_y = tmp36;
											HX_STACK_LINE(314)
											Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(314)
											{
												HX_STACK_LINE(314)
												Float tmp38 = (_g->x * _g->y);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(314)
												Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(314)
												Float tmp40 = (tmp38 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(314)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(314)
												Float value = tmp41;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(314)
												bool tmp42 = (value < (int)-1);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(314)
												if ((tmp42)){
													HX_STACK_LINE(314)
													tmp37 = (int)-1;
												}
												else{
													HX_STACK_LINE(314)
													bool tmp43 = (value > (int)1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(314)
													if ((tmp43)){
														HX_STACK_LINE(314)
														tmp37 = (int)1;
													}
													else{
														HX_STACK_LINE(314)
														tmp37 = value;
													}
												}
											}
											HX_STACK_LINE(314)
											Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(314)
											_z = tmp38;
										}
										else{
											HX_STACK_LINE(314)
											bool tmp17 = (order == (int)5);		HX_STACK_VAR(tmp17,"tmp17");
											HX_STACK_LINE(314)
											if ((tmp17)){
												HX_STACK_LINE(314)
												Float tmp18 = (_g->x * _g->w);		HX_STACK_VAR(tmp18,"tmp18");
												HX_STACK_LINE(314)
												Float tmp19 = (_g->y * _g->z);		HX_STACK_VAR(tmp19,"tmp19");
												HX_STACK_LINE(314)
												Float tmp20 = (tmp18 + tmp19);		HX_STACK_VAR(tmp20,"tmp20");
												HX_STACK_LINE(314)
												Float tmp21 = ((int)2 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
												HX_STACK_LINE(314)
												Float tmp22 = (sqw - sqx);		HX_STACK_VAR(tmp22,"tmp22");
												HX_STACK_LINE(314)
												Float tmp23 = sqy;		HX_STACK_VAR(tmp23,"tmp23");
												HX_STACK_LINE(314)
												Float tmp24 = (tmp22 + tmp23);		HX_STACK_VAR(tmp24,"tmp24");
												HX_STACK_LINE(314)
												Float tmp25 = sqz;		HX_STACK_VAR(tmp25,"tmp25");
												HX_STACK_LINE(314)
												Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
												HX_STACK_LINE(314)
												Float tmp27 = ::Math_obj::atan2(tmp21,tmp26);		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(314)
												_x = tmp27;
												HX_STACK_LINE(314)
												Float tmp28 = (_g->x * _g->z);		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(314)
												Float tmp29 = (_g->y * _g->w);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(314)
												Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(314)
												Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(314)
												Float tmp32 = (sqw + sqx);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(314)
												Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(314)
												Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(314)
												Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(314)
												Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(314)
												Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(314)
												_y = tmp37;
												HX_STACK_LINE(314)
												Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(314)
												{
													HX_STACK_LINE(314)
													Float tmp39 = (_g->z * _g->w);		HX_STACK_VAR(tmp39,"tmp39");
													HX_STACK_LINE(314)
													Float tmp40 = (_g->x * _g->y);		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(314)
													Float tmp41 = (tmp39 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(314)
													Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(314)
													Float value = tmp42;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(314)
													bool tmp43 = (value < (int)-1);		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(314)
													if ((tmp43)){
														HX_STACK_LINE(314)
														tmp38 = (int)-1;
													}
													else{
														HX_STACK_LINE(314)
														bool tmp44 = (value > (int)1);		HX_STACK_VAR(tmp44,"tmp44");
														HX_STACK_LINE(314)
														if ((tmp44)){
															HX_STACK_LINE(314)
															tmp38 = (int)1;
														}
														else{
															HX_STACK_LINE(314)
															tmp38 = value;
														}
													}
												}
												HX_STACK_LINE(314)
												Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(314)
												_z = tmp39;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(314)
						{
							HX_STACK_LINE(314)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(314)
							_this->ignore_listeners = true;
							HX_STACK_LINE(314)
							{
								HX_STACK_LINE(314)
								_this->x = _x;
								HX_STACK_LINE(314)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(314)
								if ((tmp13)){
									HX_STACK_LINE(314)
									_this->x;
								}
								else{
									HX_STACK_LINE(314)
									bool tmp14 = (_this->listen_x != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(314)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(314)
									if ((tmp14)){
										HX_STACK_LINE(314)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(314)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(314)
										tmp15 = false;
									}
									HX_STACK_LINE(314)
									if ((tmp15)){
										HX_STACK_LINE(314)
										Float tmp16 = _x;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										_this->listen_x(tmp16);
									}
									HX_STACK_LINE(314)
									_this->x;
								}
							}
							HX_STACK_LINE(314)
							{
								HX_STACK_LINE(314)
								_this->y = _y;
								HX_STACK_LINE(314)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(314)
								if ((tmp13)){
									HX_STACK_LINE(314)
									_this->y;
								}
								else{
									HX_STACK_LINE(314)
									bool tmp14 = (_this->listen_y != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(314)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(314)
									if ((tmp14)){
										HX_STACK_LINE(314)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(314)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(314)
										tmp15 = false;
									}
									HX_STACK_LINE(314)
									if ((tmp15)){
										HX_STACK_LINE(314)
										Float tmp16 = _y;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										_this->listen_y(tmp16);
									}
									HX_STACK_LINE(314)
									_this->y;
								}
							}
							HX_STACK_LINE(314)
							{
								HX_STACK_LINE(314)
								_this->z = _z;
								HX_STACK_LINE(314)
								bool tmp13 = _this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
								HX_STACK_LINE(314)
								if ((tmp13)){
									HX_STACK_LINE(314)
									_this->z;
								}
								else{
									HX_STACK_LINE(314)
									bool tmp14 = (_this->listen_z != null());		HX_STACK_VAR(tmp14,"tmp14");
									HX_STACK_LINE(314)
									bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
									HX_STACK_LINE(314)
									if ((tmp14)){
										HX_STACK_LINE(314)
										bool tmp16 = _this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
										HX_STACK_LINE(314)
										tmp15 = !(tmp17);
									}
									else{
										HX_STACK_LINE(314)
										tmp15 = false;
									}
									HX_STACK_LINE(314)
									if ((tmp15)){
										HX_STACK_LINE(314)
										Float tmp16 = _z;		HX_STACK_VAR(tmp16,"tmp16");
										HX_STACK_LINE(314)
										_this->listen_z(tmp16);
									}
									HX_STACK_LINE(314)
									_this->z;
								}
							}
							HX_STACK_LINE(314)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(314)
							bool tmp13 = (_this->listen_x != null());		HX_STACK_VAR(tmp13,"tmp13");
							HX_STACK_LINE(314)
							bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
							HX_STACK_LINE(314)
							if ((tmp13)){
								HX_STACK_LINE(314)
								bool tmp15 = _this->ignore_listeners;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(314)
								bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
								HX_STACK_LINE(314)
								tmp14 = !(tmp16);
							}
							else{
								HX_STACK_LINE(314)
								tmp14 = false;
							}
							HX_STACK_LINE(314)
							if ((tmp14)){
								HX_STACK_LINE(314)
								Float tmp15 = _this->x;		HX_STACK_VAR(tmp15,"tmp15");
								HX_STACK_LINE(314)
								_this->listen_x(tmp15);
							}
							HX_STACK_LINE(314)
							bool tmp15 = (_this->listen_y != null());		HX_STACK_VAR(tmp15,"tmp15");
							HX_STACK_LINE(314)
							bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
							HX_STACK_LINE(314)
							if ((tmp15)){
								HX_STACK_LINE(314)
								bool tmp17 = _this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(314)
								bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
								HX_STACK_LINE(314)
								tmp16 = !(tmp18);
							}
							else{
								HX_STACK_LINE(314)
								tmp16 = false;
							}
							HX_STACK_LINE(314)
							if ((tmp16)){
								HX_STACK_LINE(314)
								Float tmp17 = _this->y;		HX_STACK_VAR(tmp17,"tmp17");
								HX_STACK_LINE(314)
								_this->listen_y(tmp17);
							}
							HX_STACK_LINE(314)
							bool tmp17 = (_this->listen_z != null());		HX_STACK_VAR(tmp17,"tmp17");
							HX_STACK_LINE(314)
							bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
							HX_STACK_LINE(314)
							if ((tmp17)){
								HX_STACK_LINE(314)
								bool tmp19 = _this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(314)
								bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(314)
								tmp18 = !(tmp20);
							}
							else{
								HX_STACK_LINE(314)
								tmp18 = false;
							}
							HX_STACK_LINE(314)
							if ((tmp18)){
								HX_STACK_LINE(314)
								Float tmp19 = _this->z;		HX_STACK_VAR(tmp19,"tmp19");
								HX_STACK_LINE(314)
								_this->listen_z(tmp19);
							}
							HX_STACK_LINE(314)
							_this;
						}
						HX_STACK_LINE(314)
						_this;
					}
				}
				HX_STACK_LINE(314)
				bool tmp2 = (_g->listen_w != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(314)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(314)
				if ((tmp2)){
					HX_STACK_LINE(314)
					bool tmp4 = _g->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(314)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(314)
					tmp3 = !(tmp5);
				}
				else{
					HX_STACK_LINE(314)
					tmp3 = false;
				}
				HX_STACK_LINE(314)
				if ((tmp3)){
					HX_STACK_LINE(314)
					Float tmp4 = _g->w;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(314)
					_g->listen_w(tmp4);
				}
				HX_STACK_LINE(314)
				_g->w;
			}
		}
	}
	HX_STACK_LINE(316)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,multiplyScalar,return )

::phoenix::Quaternion Quaternion_obj::multiplyQuaternions( ::phoenix::Quaternion _a,::phoenix::Quaternion _b){
	HX_STACK_FRAME("phoenix.Quaternion","multiplyQuaternions",0x00ae42a0,"phoenix.Quaternion.multiplyQuaternions","phoenix/Quaternion.hx",320,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_a,"_a")
	HX_STACK_ARG(_b,"_b")
	HX_STACK_LINE(322)
	Float qax = _a->x;		HX_STACK_VAR(qax,"qax");
	HX_STACK_LINE(322)
	Float qay = _a->y;		HX_STACK_VAR(qay,"qay");
	HX_STACK_LINE(322)
	Float qaz = _a->z;		HX_STACK_VAR(qaz,"qaz");
	HX_STACK_LINE(322)
	Float qaw = _a->w;		HX_STACK_VAR(qaw,"qaw");
	HX_STACK_LINE(323)
	Float qbx = _b->x;		HX_STACK_VAR(qbx,"qbx");
	HX_STACK_LINE(323)
	Float qby = _b->y;		HX_STACK_VAR(qby,"qby");
	HX_STACK_LINE(323)
	Float qbz = _b->z;		HX_STACK_VAR(qbz,"qbz");
	HX_STACK_LINE(323)
	Float qbw = _b->w;		HX_STACK_VAR(qbw,"qbw");
	HX_STACK_LINE(325)
	{
		HX_STACK_LINE(325)
		this->ignore_euler = true;
		HX_STACK_LINE(325)
		{
			HX_STACK_LINE(325)
			Float tmp = (qax * qbw);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(325)
			Float tmp1 = (qaw * qbx);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(325)
			Float tmp2 = (tmp + tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(325)
			Float tmp3 = (qay * qbz);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(325)
			Float tmp4 = (tmp2 + tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(325)
			Float tmp5 = (qaz * qby);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(325)
			Float tmp6 = (tmp4 - tmp5);		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(325)
			this->x = tmp6;
			HX_STACK_LINE(325)
			bool tmp7 = this->_construct;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(325)
			if ((tmp7)){
				HX_STACK_LINE(325)
				this->x;
			}
			else{
				HX_STACK_LINE(325)
				{
					HX_STACK_LINE(325)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(325)
					bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(325)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(325)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					if ((tmp11)){
						HX_STACK_LINE(325)
						tmp12 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(325)
						tmp12 = true;
					}
					HX_STACK_LINE(325)
					bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(325)
					if ((tmp13)){
						HX_STACK_LINE(325)
						tmp14 = this->_construct;
					}
					else{
						HX_STACK_LINE(325)
						tmp14 = true;
					}
					HX_STACK_LINE(325)
					if ((tmp14)){
						HX_STACK_LINE(325)
						Dynamic();
					}
					else{
						HX_STACK_LINE(325)
						::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(325)
						::phoenix::Vector _this = tmp15;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(325)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(325)
						Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(325)
						Float tmp17 = this->x;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(325)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(325)
						Float sqx = tmp18;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(325)
						Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(325)
						Float tmp20 = this->y;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(325)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(325)
						Float sqy = tmp21;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(325)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(325)
						Float tmp23 = this->z;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(325)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(325)
						Float sqz = tmp24;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(325)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(325)
						Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(325)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(325)
						Float sqw = tmp27;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(325)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(325)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(325)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(325)
						bool tmp28 = (order == (int)0);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(325)
						if ((tmp28)){
							HX_STACK_LINE(325)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(325)
							Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(325)
							Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(325)
							Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(325)
							Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(325)
							Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(325)
							Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(325)
							Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(325)
							_x = tmp42;
							HX_STACK_LINE(325)
							Float tmp43;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float value = tmp51;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(325)
								bool tmp52 = (value < (int)-1);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								if ((tmp52)){
									HX_STACK_LINE(325)
									tmp43 = (int)-1;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp53 = (value > (int)1);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									if ((tmp53)){
										HX_STACK_LINE(325)
										tmp43 = (int)1;
									}
									else{
										HX_STACK_LINE(325)
										tmp43 = value;
									}
								}
							}
							HX_STACK_LINE(325)
							Float tmp44 = ::Math_obj::asin(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(325)
							_y = tmp44;
							HX_STACK_LINE(325)
							Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(325)
							Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(325)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(325)
							Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(325)
							Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(325)
							Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(325)
							Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(325)
							Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(325)
							Float tmp53 = (sqw + sqx);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(325)
							Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(325)
							Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(325)
							Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(325)
							Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(325)
							Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(325)
							_z = tmp58;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp29 = (order == (int)1);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								{
									HX_STACK_LINE(325)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float value = tmp38;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(325)
									bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									if ((tmp39)){
										HX_STACK_LINE(325)
										tmp30 = (int)-1;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp30 = (int)1;
										}
										else{
											HX_STACK_LINE(325)
											tmp30 = value;
										}
									}
								}
								HX_STACK_LINE(325)
								Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_x = tmp31;
								HX_STACK_LINE(325)
								Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(325)
								Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(325)
								Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(325)
								Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(325)
								Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(325)
								Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(325)
								Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(325)
								Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								_y = tmp45;
								HX_STACK_LINE(325)
								Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float tmp52 = (tmp48 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(325)
								Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(325)
								Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(325)
								Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(325)
								Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(325)
								Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(325)
								Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(325)
								_z = tmp59;
							}
							else{
								HX_STACK_LINE(325)
								bool tmp30 = (order == (int)2);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								if ((tmp30)){
									HX_STACK_LINE(325)
									Float tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									{
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float value = tmp39;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(325)
										bool tmp40 = (value < (int)-1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp31 = (int)-1;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp41 = (value > (int)1);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											if ((tmp41)){
												HX_STACK_LINE(325)
												tmp31 = (int)1;
											}
											else{
												HX_STACK_LINE(325)
												tmp31 = value;
											}
										}
									}
									HX_STACK_LINE(325)
									Float tmp32 = ::Math_obj::asin(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									_x = tmp32;
									HX_STACK_LINE(325)
									Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(325)
									Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(325)
									Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(325)
									Float tmp43 = (tmp41 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(325)
									Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(325)
									Float tmp45 = (tmp43 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(325)
									Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(325)
									_y = tmp46;
									HX_STACK_LINE(325)
									Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(325)
									Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(325)
									Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(325)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(325)
									Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(325)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(325)
									Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(325)
									Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(325)
									Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(325)
									Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(325)
									Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(325)
									Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(325)
									Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(325)
									_z = tmp60;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp31 = (order == (int)3);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(325)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(325)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(325)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(325)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(325)
										_x = tmp45;
										HX_STACK_LINE(325)
										Float tmp46;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(325)
										{
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float value = tmp54;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(325)
											bool tmp55 = (value < (int)-1);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											if ((tmp55)){
												HX_STACK_LINE(325)
												tmp46 = (int)-1;
											}
											else{
												HX_STACK_LINE(325)
												bool tmp56 = (value > (int)1);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												if ((tmp56)){
													HX_STACK_LINE(325)
													tmp46 = (int)1;
												}
												else{
													HX_STACK_LINE(325)
													tmp46 = value;
												}
											}
										}
										HX_STACK_LINE(325)
										Float tmp47 = ::Math_obj::asin(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(325)
										_y = tmp47;
										HX_STACK_LINE(325)
										Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(325)
										Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(325)
										Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(325)
										Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(325)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(325)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(325)
										Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(325)
										Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(325)
										Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(325)
										Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(325)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(325)
										Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(325)
										Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(325)
										Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(325)
										_z = tmp61;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp32 = (order == (int)4);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										if ((tmp32)){
											HX_STACK_LINE(325)
											Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(325)
											Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(325)
											Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(325)
											Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(325)
											Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(325)
											Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(325)
											Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(325)
											Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(325)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(325)
											Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(325)
											Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(325)
											Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(325)
											_x = tmp46;
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(325)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(325)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(325)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(325)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(325)
											_y = tmp60;
											HX_STACK_LINE(325)
											Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(325)
											{
												HX_STACK_LINE(325)
												Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(325)
												Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(325)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(325)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(325)
												Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(325)
												Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(325)
												Float value = tmp69;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(325)
												bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(325)
												if ((tmp70)){
													HX_STACK_LINE(325)
													tmp61 = (int)-1;
												}
												else{
													HX_STACK_LINE(325)
													bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp61 = (int)1;
													}
													else{
														HX_STACK_LINE(325)
														tmp61 = value;
													}
												}
											}
											HX_STACK_LINE(325)
											Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(325)
											_z = tmp62;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp33 = (order == (int)5);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											if ((tmp33)){
												HX_STACK_LINE(325)
												Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(325)
												Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(325)
												Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(325)
												Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(325)
												Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(325)
												Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(325)
												Float tmp40 = (tmp36 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(325)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(325)
												Float tmp42 = (sqw - sqx);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(325)
												Float tmp43 = sqy;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(325)
												Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(325)
												Float tmp45 = sqz;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(325)
												Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(325)
												Float tmp47 = ::Math_obj::atan2(tmp41,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(325)
												_x = tmp47;
												HX_STACK_LINE(325)
												Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(325)
												Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(325)
												Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(325)
												Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(325)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(325)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(325)
												Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(325)
												Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(325)
												Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(325)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(325)
												Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(325)
												Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(325)
												Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(325)
												_y = tmp61;
												HX_STACK_LINE(325)
												Float tmp62;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												{
													HX_STACK_LINE(325)
													Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(325)
													Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(325)
													Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(325)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(325)
													Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(325)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(325)
													Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(325)
													Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(325)
													Float value = tmp70;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(325)
													bool tmp71 = (value < (int)-1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp62 = (int)-1;
													}
													else{
														HX_STACK_LINE(325)
														bool tmp72 = (value > (int)1);		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(325)
														if ((tmp72)){
															HX_STACK_LINE(325)
															tmp62 = (int)1;
														}
														else{
															HX_STACK_LINE(325)
															tmp62 = value;
														}
													}
												}
												HX_STACK_LINE(325)
												Float tmp63 = ::Math_obj::asin(tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												_z = tmp63;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(325)
						{
							HX_STACK_LINE(325)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(325)
							_this->ignore_listeners = true;
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->x = _x;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->x;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_x != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_x(tmp32);
									}
									HX_STACK_LINE(325)
									_this->x;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->y = _y;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->y;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_y(tmp32);
									}
									HX_STACK_LINE(325)
									_this->y;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->z = _z;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->z;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_z != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _z;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_z(tmp32);
									}
									HX_STACK_LINE(325)
									_this->z;
								}
							}
							HX_STACK_LINE(325)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(325)
							bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								tmp30 = !(tmp32);
							}
							else{
								HX_STACK_LINE(325)
								tmp30 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp30)){
								HX_STACK_LINE(325)
								Float tmp31 = _this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_this->listen_x(tmp31);
							}
							HX_STACK_LINE(325)
							bool tmp31 = (_this->listen_y != null());		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							if ((tmp31)){
								HX_STACK_LINE(325)
								bool tmp33 = _this->ignore_listeners;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								tmp32 = !(tmp34);
							}
							else{
								HX_STACK_LINE(325)
								tmp32 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp32)){
								HX_STACK_LINE(325)
								Float tmp33 = _this->y;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								_this->listen_y(tmp33);
							}
							HX_STACK_LINE(325)
							bool tmp33 = (_this->listen_z != null());		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							if ((tmp33)){
								HX_STACK_LINE(325)
								bool tmp35 = _this->ignore_listeners;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								tmp34 = !(tmp36);
							}
							else{
								HX_STACK_LINE(325)
								tmp34 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp34)){
								HX_STACK_LINE(325)
								Float tmp35 = _this->z;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								_this->listen_z(tmp35);
							}
							HX_STACK_LINE(325)
							_this;
						}
						HX_STACK_LINE(325)
						_this;
					}
				}
				HX_STACK_LINE(325)
				Dynamic tmp8 = this->listen_x_dyn();		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(325)
				bool tmp9 = (tmp8 != null());		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(325)
				bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(325)
				if ((tmp9)){
					HX_STACK_LINE(325)
					bool tmp11 = this->ignore_listeners;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					tmp10 = !(tmp13);
				}
				else{
					HX_STACK_LINE(325)
					tmp10 = false;
				}
				HX_STACK_LINE(325)
				if ((tmp10)){
					HX_STACK_LINE(325)
					Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					this->listen_x(tmp11);
				}
				HX_STACK_LINE(325)
				this->x;
			}
		}
		HX_STACK_LINE(325)
		{
			HX_STACK_LINE(326)
			Float tmp = (qay * qbw);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(326)
			Float tmp1 = (qaw * qby);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(326)
			Float tmp2 = (tmp + tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(326)
			Float tmp3 = (qaz * qbx);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(326)
			Float tmp4 = (tmp2 + tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(326)
			Float tmp5 = (qax * qbz);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(326)
			Float tmp6 = (tmp4 - tmp5);		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(325)
			this->y = tmp6;
			HX_STACK_LINE(325)
			bool tmp7 = this->_construct;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(325)
			if ((tmp7)){
				HX_STACK_LINE(325)
				this->y;
			}
			else{
				HX_STACK_LINE(325)
				{
					HX_STACK_LINE(325)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(325)
					bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(325)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(325)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					if ((tmp11)){
						HX_STACK_LINE(325)
						tmp12 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(325)
						tmp12 = true;
					}
					HX_STACK_LINE(325)
					bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(325)
					if ((tmp13)){
						HX_STACK_LINE(325)
						tmp14 = this->_construct;
					}
					else{
						HX_STACK_LINE(325)
						tmp14 = true;
					}
					HX_STACK_LINE(325)
					if ((tmp14)){
						HX_STACK_LINE(325)
						Dynamic();
					}
					else{
						HX_STACK_LINE(325)
						::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(325)
						::phoenix::Vector _this = tmp15;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(325)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(325)
						Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(325)
						Float tmp17 = this->x;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(325)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(325)
						Float sqx = tmp18;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(325)
						Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(325)
						Float tmp20 = this->y;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(325)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(325)
						Float sqy = tmp21;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(325)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(325)
						Float tmp23 = this->z;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(325)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(325)
						Float sqz = tmp24;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(325)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(325)
						Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(325)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(325)
						Float sqw = tmp27;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(325)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(325)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(325)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(325)
						bool tmp28 = (order == (int)0);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(325)
						if ((tmp28)){
							HX_STACK_LINE(325)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(325)
							Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(325)
							Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(325)
							Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(325)
							Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(325)
							Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(325)
							Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(325)
							Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(325)
							_x = tmp42;
							HX_STACK_LINE(325)
							Float tmp43;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float value = tmp51;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(325)
								bool tmp52 = (value < (int)-1);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								if ((tmp52)){
									HX_STACK_LINE(325)
									tmp43 = (int)-1;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp53 = (value > (int)1);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									if ((tmp53)){
										HX_STACK_LINE(325)
										tmp43 = (int)1;
									}
									else{
										HX_STACK_LINE(325)
										tmp43 = value;
									}
								}
							}
							HX_STACK_LINE(325)
							Float tmp44 = ::Math_obj::asin(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(325)
							_y = tmp44;
							HX_STACK_LINE(325)
							Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(325)
							Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(325)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(325)
							Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(325)
							Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(325)
							Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(325)
							Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(325)
							Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(325)
							Float tmp53 = (sqw + sqx);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(325)
							Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(325)
							Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(325)
							Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(325)
							Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(325)
							Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(325)
							_z = tmp58;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp29 = (order == (int)1);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								{
									HX_STACK_LINE(325)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float value = tmp38;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(325)
									bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									if ((tmp39)){
										HX_STACK_LINE(325)
										tmp30 = (int)-1;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp30 = (int)1;
										}
										else{
											HX_STACK_LINE(325)
											tmp30 = value;
										}
									}
								}
								HX_STACK_LINE(325)
								Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_x = tmp31;
								HX_STACK_LINE(325)
								Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(325)
								Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(325)
								Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(325)
								Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(325)
								Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(325)
								Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(325)
								Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(325)
								Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								_y = tmp45;
								HX_STACK_LINE(325)
								Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float tmp52 = (tmp48 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(325)
								Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(325)
								Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(325)
								Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(325)
								Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(325)
								Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(325)
								Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(325)
								_z = tmp59;
							}
							else{
								HX_STACK_LINE(325)
								bool tmp30 = (order == (int)2);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								if ((tmp30)){
									HX_STACK_LINE(325)
									Float tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									{
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float value = tmp39;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(325)
										bool tmp40 = (value < (int)-1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp31 = (int)-1;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp41 = (value > (int)1);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											if ((tmp41)){
												HX_STACK_LINE(325)
												tmp31 = (int)1;
											}
											else{
												HX_STACK_LINE(325)
												tmp31 = value;
											}
										}
									}
									HX_STACK_LINE(325)
									Float tmp32 = ::Math_obj::asin(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									_x = tmp32;
									HX_STACK_LINE(325)
									Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(325)
									Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(325)
									Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(325)
									Float tmp43 = (tmp41 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(325)
									Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(325)
									Float tmp45 = (tmp43 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(325)
									Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(325)
									_y = tmp46;
									HX_STACK_LINE(325)
									Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(325)
									Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(325)
									Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(325)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(325)
									Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(325)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(325)
									Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(325)
									Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(325)
									Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(325)
									Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(325)
									Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(325)
									Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(325)
									Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(325)
									_z = tmp60;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp31 = (order == (int)3);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(325)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(325)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(325)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(325)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(325)
										_x = tmp45;
										HX_STACK_LINE(325)
										Float tmp46;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(325)
										{
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float value = tmp54;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(325)
											bool tmp55 = (value < (int)-1);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											if ((tmp55)){
												HX_STACK_LINE(325)
												tmp46 = (int)-1;
											}
											else{
												HX_STACK_LINE(325)
												bool tmp56 = (value > (int)1);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												if ((tmp56)){
													HX_STACK_LINE(325)
													tmp46 = (int)1;
												}
												else{
													HX_STACK_LINE(325)
													tmp46 = value;
												}
											}
										}
										HX_STACK_LINE(325)
										Float tmp47 = ::Math_obj::asin(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(325)
										_y = tmp47;
										HX_STACK_LINE(325)
										Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(325)
										Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(325)
										Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(325)
										Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(325)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(325)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(325)
										Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(325)
										Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(325)
										Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(325)
										Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(325)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(325)
										Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(325)
										Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(325)
										Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(325)
										_z = tmp61;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp32 = (order == (int)4);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										if ((tmp32)){
											HX_STACK_LINE(325)
											Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(325)
											Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(325)
											Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(325)
											Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(325)
											Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(325)
											Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(325)
											Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(325)
											Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(325)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(325)
											Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(325)
											Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(325)
											Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(325)
											_x = tmp46;
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(325)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(325)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(325)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(325)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(325)
											_y = tmp60;
											HX_STACK_LINE(325)
											Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(325)
											{
												HX_STACK_LINE(325)
												Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(325)
												Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(325)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(325)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(325)
												Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(325)
												Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(325)
												Float value = tmp69;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(325)
												bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(325)
												if ((tmp70)){
													HX_STACK_LINE(325)
													tmp61 = (int)-1;
												}
												else{
													HX_STACK_LINE(325)
													bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp61 = (int)1;
													}
													else{
														HX_STACK_LINE(325)
														tmp61 = value;
													}
												}
											}
											HX_STACK_LINE(325)
											Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(325)
											_z = tmp62;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp33 = (order == (int)5);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											if ((tmp33)){
												HX_STACK_LINE(325)
												Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(325)
												Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(325)
												Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(325)
												Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(325)
												Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(325)
												Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(325)
												Float tmp40 = (tmp36 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(325)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(325)
												Float tmp42 = (sqw - sqx);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(325)
												Float tmp43 = sqy;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(325)
												Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(325)
												Float tmp45 = sqz;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(325)
												Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(325)
												Float tmp47 = ::Math_obj::atan2(tmp41,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(325)
												_x = tmp47;
												HX_STACK_LINE(325)
												Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(325)
												Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(325)
												Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(325)
												Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(325)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(325)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(325)
												Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(325)
												Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(325)
												Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(325)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(325)
												Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(325)
												Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(325)
												Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(325)
												_y = tmp61;
												HX_STACK_LINE(325)
												Float tmp62;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												{
													HX_STACK_LINE(325)
													Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(325)
													Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(325)
													Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(325)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(325)
													Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(325)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(325)
													Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(325)
													Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(325)
													Float value = tmp70;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(325)
													bool tmp71 = (value < (int)-1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp62 = (int)-1;
													}
													else{
														HX_STACK_LINE(325)
														bool tmp72 = (value > (int)1);		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(325)
														if ((tmp72)){
															HX_STACK_LINE(325)
															tmp62 = (int)1;
														}
														else{
															HX_STACK_LINE(325)
															tmp62 = value;
														}
													}
												}
												HX_STACK_LINE(325)
												Float tmp63 = ::Math_obj::asin(tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												_z = tmp63;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(325)
						{
							HX_STACK_LINE(325)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(325)
							_this->ignore_listeners = true;
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->x = _x;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->x;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_x != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_x(tmp32);
									}
									HX_STACK_LINE(325)
									_this->x;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->y = _y;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->y;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_y(tmp32);
									}
									HX_STACK_LINE(325)
									_this->y;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->z = _z;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->z;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_z != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _z;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_z(tmp32);
									}
									HX_STACK_LINE(325)
									_this->z;
								}
							}
							HX_STACK_LINE(325)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(325)
							bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								tmp30 = !(tmp32);
							}
							else{
								HX_STACK_LINE(325)
								tmp30 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp30)){
								HX_STACK_LINE(325)
								Float tmp31 = _this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_this->listen_x(tmp31);
							}
							HX_STACK_LINE(325)
							bool tmp31 = (_this->listen_y != null());		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							if ((tmp31)){
								HX_STACK_LINE(325)
								bool tmp33 = _this->ignore_listeners;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								tmp32 = !(tmp34);
							}
							else{
								HX_STACK_LINE(325)
								tmp32 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp32)){
								HX_STACK_LINE(325)
								Float tmp33 = _this->y;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								_this->listen_y(tmp33);
							}
							HX_STACK_LINE(325)
							bool tmp33 = (_this->listen_z != null());		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							if ((tmp33)){
								HX_STACK_LINE(325)
								bool tmp35 = _this->ignore_listeners;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								tmp34 = !(tmp36);
							}
							else{
								HX_STACK_LINE(325)
								tmp34 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp34)){
								HX_STACK_LINE(325)
								Float tmp35 = _this->z;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								_this->listen_z(tmp35);
							}
							HX_STACK_LINE(325)
							_this;
						}
						HX_STACK_LINE(325)
						_this;
					}
				}
				HX_STACK_LINE(325)
				Dynamic tmp8 = this->listen_y_dyn();		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(325)
				bool tmp9 = (tmp8 != null());		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(325)
				bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(325)
				if ((tmp9)){
					HX_STACK_LINE(325)
					bool tmp11 = this->ignore_listeners;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					tmp10 = !(tmp13);
				}
				else{
					HX_STACK_LINE(325)
					tmp10 = false;
				}
				HX_STACK_LINE(325)
				if ((tmp10)){
					HX_STACK_LINE(325)
					Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					this->listen_y(tmp11);
				}
				HX_STACK_LINE(325)
				this->y;
			}
		}
		HX_STACK_LINE(325)
		{
			HX_STACK_LINE(327)
			Float tmp = (qaz * qbw);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(327)
			Float tmp1 = (qaw * qbz);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(327)
			Float tmp2 = (tmp + tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(327)
			Float tmp3 = (qax * qby);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(327)
			Float tmp4 = (tmp2 + tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(327)
			Float tmp5 = (qay * qbx);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(327)
			Float tmp6 = (tmp4 - tmp5);		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(325)
			this->z = tmp6;
			HX_STACK_LINE(325)
			bool tmp7 = this->_construct;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(325)
			if ((tmp7)){
				HX_STACK_LINE(325)
				this->z;
			}
			else{
				HX_STACK_LINE(325)
				{
					HX_STACK_LINE(325)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(325)
					bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(325)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(325)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					if ((tmp11)){
						HX_STACK_LINE(325)
						tmp12 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(325)
						tmp12 = true;
					}
					HX_STACK_LINE(325)
					bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(325)
					if ((tmp13)){
						HX_STACK_LINE(325)
						tmp14 = this->_construct;
					}
					else{
						HX_STACK_LINE(325)
						tmp14 = true;
					}
					HX_STACK_LINE(325)
					if ((tmp14)){
						HX_STACK_LINE(325)
						Dynamic();
					}
					else{
						HX_STACK_LINE(325)
						::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(325)
						::phoenix::Vector _this = tmp15;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(325)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(325)
						Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(325)
						Float tmp17 = this->x;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(325)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(325)
						Float sqx = tmp18;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(325)
						Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(325)
						Float tmp20 = this->y;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(325)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(325)
						Float sqy = tmp21;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(325)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(325)
						Float tmp23 = this->z;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(325)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(325)
						Float sqz = tmp24;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(325)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(325)
						Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(325)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(325)
						Float sqw = tmp27;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(325)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(325)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(325)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(325)
						bool tmp28 = (order == (int)0);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(325)
						if ((tmp28)){
							HX_STACK_LINE(325)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(325)
							Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(325)
							Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(325)
							Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(325)
							Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(325)
							Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(325)
							Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(325)
							Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(325)
							_x = tmp42;
							HX_STACK_LINE(325)
							Float tmp43;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float value = tmp51;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(325)
								bool tmp52 = (value < (int)-1);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								if ((tmp52)){
									HX_STACK_LINE(325)
									tmp43 = (int)-1;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp53 = (value > (int)1);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									if ((tmp53)){
										HX_STACK_LINE(325)
										tmp43 = (int)1;
									}
									else{
										HX_STACK_LINE(325)
										tmp43 = value;
									}
								}
							}
							HX_STACK_LINE(325)
							Float tmp44 = ::Math_obj::asin(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(325)
							_y = tmp44;
							HX_STACK_LINE(325)
							Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(325)
							Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(325)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(325)
							Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(325)
							Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(325)
							Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(325)
							Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(325)
							Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(325)
							Float tmp53 = (sqw + sqx);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(325)
							Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(325)
							Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(325)
							Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(325)
							Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(325)
							Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(325)
							_z = tmp58;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp29 = (order == (int)1);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								{
									HX_STACK_LINE(325)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float value = tmp38;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(325)
									bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									if ((tmp39)){
										HX_STACK_LINE(325)
										tmp30 = (int)-1;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp30 = (int)1;
										}
										else{
											HX_STACK_LINE(325)
											tmp30 = value;
										}
									}
								}
								HX_STACK_LINE(325)
								Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_x = tmp31;
								HX_STACK_LINE(325)
								Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(325)
								Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(325)
								Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(325)
								Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(325)
								Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(325)
								Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(325)
								Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(325)
								Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								_y = tmp45;
								HX_STACK_LINE(325)
								Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float tmp52 = (tmp48 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(325)
								Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(325)
								Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(325)
								Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(325)
								Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(325)
								Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(325)
								Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(325)
								_z = tmp59;
							}
							else{
								HX_STACK_LINE(325)
								bool tmp30 = (order == (int)2);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								if ((tmp30)){
									HX_STACK_LINE(325)
									Float tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									{
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float value = tmp39;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(325)
										bool tmp40 = (value < (int)-1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp31 = (int)-1;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp41 = (value > (int)1);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											if ((tmp41)){
												HX_STACK_LINE(325)
												tmp31 = (int)1;
											}
											else{
												HX_STACK_LINE(325)
												tmp31 = value;
											}
										}
									}
									HX_STACK_LINE(325)
									Float tmp32 = ::Math_obj::asin(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									_x = tmp32;
									HX_STACK_LINE(325)
									Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(325)
									Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(325)
									Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(325)
									Float tmp43 = (tmp41 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(325)
									Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(325)
									Float tmp45 = (tmp43 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(325)
									Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(325)
									_y = tmp46;
									HX_STACK_LINE(325)
									Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(325)
									Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(325)
									Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(325)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(325)
									Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(325)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(325)
									Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(325)
									Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(325)
									Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(325)
									Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(325)
									Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(325)
									Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(325)
									Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(325)
									_z = tmp60;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp31 = (order == (int)3);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(325)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(325)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(325)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(325)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(325)
										_x = tmp45;
										HX_STACK_LINE(325)
										Float tmp46;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(325)
										{
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float value = tmp54;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(325)
											bool tmp55 = (value < (int)-1);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											if ((tmp55)){
												HX_STACK_LINE(325)
												tmp46 = (int)-1;
											}
											else{
												HX_STACK_LINE(325)
												bool tmp56 = (value > (int)1);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												if ((tmp56)){
													HX_STACK_LINE(325)
													tmp46 = (int)1;
												}
												else{
													HX_STACK_LINE(325)
													tmp46 = value;
												}
											}
										}
										HX_STACK_LINE(325)
										Float tmp47 = ::Math_obj::asin(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(325)
										_y = tmp47;
										HX_STACK_LINE(325)
										Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(325)
										Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(325)
										Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(325)
										Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(325)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(325)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(325)
										Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(325)
										Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(325)
										Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(325)
										Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(325)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(325)
										Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(325)
										Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(325)
										Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(325)
										_z = tmp61;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp32 = (order == (int)4);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										if ((tmp32)){
											HX_STACK_LINE(325)
											Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(325)
											Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(325)
											Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(325)
											Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(325)
											Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(325)
											Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(325)
											Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(325)
											Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(325)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(325)
											Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(325)
											Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(325)
											Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(325)
											_x = tmp46;
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(325)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(325)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(325)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(325)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(325)
											_y = tmp60;
											HX_STACK_LINE(325)
											Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(325)
											{
												HX_STACK_LINE(325)
												Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(325)
												Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(325)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(325)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(325)
												Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(325)
												Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(325)
												Float value = tmp69;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(325)
												bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(325)
												if ((tmp70)){
													HX_STACK_LINE(325)
													tmp61 = (int)-1;
												}
												else{
													HX_STACK_LINE(325)
													bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp61 = (int)1;
													}
													else{
														HX_STACK_LINE(325)
														tmp61 = value;
													}
												}
											}
											HX_STACK_LINE(325)
											Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(325)
											_z = tmp62;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp33 = (order == (int)5);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											if ((tmp33)){
												HX_STACK_LINE(325)
												Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(325)
												Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(325)
												Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(325)
												Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(325)
												Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(325)
												Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(325)
												Float tmp40 = (tmp36 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(325)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(325)
												Float tmp42 = (sqw - sqx);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(325)
												Float tmp43 = sqy;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(325)
												Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(325)
												Float tmp45 = sqz;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(325)
												Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(325)
												Float tmp47 = ::Math_obj::atan2(tmp41,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(325)
												_x = tmp47;
												HX_STACK_LINE(325)
												Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(325)
												Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(325)
												Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(325)
												Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(325)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(325)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(325)
												Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(325)
												Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(325)
												Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(325)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(325)
												Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(325)
												Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(325)
												Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(325)
												_y = tmp61;
												HX_STACK_LINE(325)
												Float tmp62;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												{
													HX_STACK_LINE(325)
													Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(325)
													Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(325)
													Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(325)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(325)
													Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(325)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(325)
													Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(325)
													Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(325)
													Float value = tmp70;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(325)
													bool tmp71 = (value < (int)-1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp62 = (int)-1;
													}
													else{
														HX_STACK_LINE(325)
														bool tmp72 = (value > (int)1);		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(325)
														if ((tmp72)){
															HX_STACK_LINE(325)
															tmp62 = (int)1;
														}
														else{
															HX_STACK_LINE(325)
															tmp62 = value;
														}
													}
												}
												HX_STACK_LINE(325)
												Float tmp63 = ::Math_obj::asin(tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												_z = tmp63;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(325)
						{
							HX_STACK_LINE(325)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(325)
							_this->ignore_listeners = true;
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->x = _x;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->x;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_x != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_x(tmp32);
									}
									HX_STACK_LINE(325)
									_this->x;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->y = _y;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->y;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_y(tmp32);
									}
									HX_STACK_LINE(325)
									_this->y;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->z = _z;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->z;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_z != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _z;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_z(tmp32);
									}
									HX_STACK_LINE(325)
									_this->z;
								}
							}
							HX_STACK_LINE(325)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(325)
							bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								tmp30 = !(tmp32);
							}
							else{
								HX_STACK_LINE(325)
								tmp30 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp30)){
								HX_STACK_LINE(325)
								Float tmp31 = _this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_this->listen_x(tmp31);
							}
							HX_STACK_LINE(325)
							bool tmp31 = (_this->listen_y != null());		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							if ((tmp31)){
								HX_STACK_LINE(325)
								bool tmp33 = _this->ignore_listeners;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								tmp32 = !(tmp34);
							}
							else{
								HX_STACK_LINE(325)
								tmp32 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp32)){
								HX_STACK_LINE(325)
								Float tmp33 = _this->y;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								_this->listen_y(tmp33);
							}
							HX_STACK_LINE(325)
							bool tmp33 = (_this->listen_z != null());		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							if ((tmp33)){
								HX_STACK_LINE(325)
								bool tmp35 = _this->ignore_listeners;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								tmp34 = !(tmp36);
							}
							else{
								HX_STACK_LINE(325)
								tmp34 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp34)){
								HX_STACK_LINE(325)
								Float tmp35 = _this->z;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								_this->listen_z(tmp35);
							}
							HX_STACK_LINE(325)
							_this;
						}
						HX_STACK_LINE(325)
						_this;
					}
				}
				HX_STACK_LINE(325)
				Dynamic tmp8 = this->listen_z_dyn();		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(325)
				bool tmp9 = (tmp8 != null());		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(325)
				bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(325)
				if ((tmp9)){
					HX_STACK_LINE(325)
					bool tmp11 = this->ignore_listeners;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					tmp10 = !(tmp13);
				}
				else{
					HX_STACK_LINE(325)
					tmp10 = false;
				}
				HX_STACK_LINE(325)
				if ((tmp10)){
					HX_STACK_LINE(325)
					Float tmp11 = this->z;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					this->listen_z(tmp11);
				}
				HX_STACK_LINE(325)
				this->z;
			}
		}
		HX_STACK_LINE(325)
		{
			HX_STACK_LINE(328)
			Float tmp = (qaw * qbw);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(328)
			Float tmp1 = (qax * qbx);		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(328)
			Float tmp2 = (tmp - tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(328)
			Float tmp3 = (qay * qby);		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(328)
			Float tmp4 = (tmp2 - tmp3);		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(328)
			Float tmp5 = (qaz * qbz);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(328)
			Float tmp6 = (tmp4 - tmp5);		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(325)
			this->w = tmp6;
			HX_STACK_LINE(325)
			bool tmp7 = this->_construct;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(325)
			if ((tmp7)){
				HX_STACK_LINE(325)
				this->w;
			}
			else{
				HX_STACK_LINE(325)
				{
					HX_STACK_LINE(325)
					::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(325)
					bool tmp9 = (tmp8 == null());		HX_STACK_VAR(tmp9,"tmp9");
					HX_STACK_LINE(325)
					bool tmp10 = !(tmp9);		HX_STACK_VAR(tmp10,"tmp10");
					HX_STACK_LINE(325)
					bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					if ((tmp11)){
						HX_STACK_LINE(325)
						tmp12 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(325)
						tmp12 = true;
					}
					HX_STACK_LINE(325)
					bool tmp13 = !(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					bool tmp14;		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(325)
					if ((tmp13)){
						HX_STACK_LINE(325)
						tmp14 = this->_construct;
					}
					else{
						HX_STACK_LINE(325)
						tmp14 = true;
					}
					HX_STACK_LINE(325)
					if ((tmp14)){
						HX_STACK_LINE(325)
						Dynamic();
					}
					else{
						HX_STACK_LINE(325)
						::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(325)
						::phoenix::Vector _this = tmp15;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(325)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(325)
						Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(325)
						Float tmp17 = this->x;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(325)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(325)
						Float sqx = tmp18;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(325)
						Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(325)
						Float tmp20 = this->y;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(325)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(325)
						Float sqy = tmp21;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(325)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(325)
						Float tmp23 = this->z;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(325)
						Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(325)
						Float sqz = tmp24;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(325)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(325)
						Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(325)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(325)
						Float sqw = tmp27;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(325)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(325)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(325)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(325)
						bool tmp28 = (order == (int)0);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(325)
						if ((tmp28)){
							HX_STACK_LINE(325)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							Float tmp35 = (tmp31 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(325)
							Float tmp36 = ((int)2 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(325)
							Float tmp37 = (sqw - sqx);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(325)
							Float tmp38 = sqy;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(325)
							Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(325)
							Float tmp40 = sqz;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(325)
							Float tmp41 = (tmp39 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(325)
							Float tmp42 = ::Math_obj::atan2(tmp36,tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(325)
							_x = tmp42;
							HX_STACK_LINE(325)
							Float tmp43;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = (tmp46 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float value = tmp51;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(325)
								bool tmp52 = (value < (int)-1);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								if ((tmp52)){
									HX_STACK_LINE(325)
									tmp43 = (int)-1;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp53 = (value > (int)1);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									if ((tmp53)){
										HX_STACK_LINE(325)
										tmp43 = (int)1;
									}
									else{
										HX_STACK_LINE(325)
										tmp43 = value;
									}
								}
							}
							HX_STACK_LINE(325)
							Float tmp44 = ::Math_obj::asin(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(325)
							_y = tmp44;
							HX_STACK_LINE(325)
							Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(325)
							Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(325)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(325)
							Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(325)
							Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(325)
							Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(325)
							Float tmp51 = (tmp47 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(325)
							Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(325)
							Float tmp53 = (sqw + sqx);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(325)
							Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(325)
							Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(325)
							Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(325)
							Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(325)
							Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(325)
							_z = tmp58;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp29 = (order == (int)1);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								{
									HX_STACK_LINE(325)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = (tmp33 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float value = tmp38;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(325)
									bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									if ((tmp39)){
										HX_STACK_LINE(325)
										tmp30 = (int)-1;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp30 = (int)1;
										}
										else{
											HX_STACK_LINE(325)
											tmp30 = value;
										}
									}
								}
								HX_STACK_LINE(325)
								Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_x = tmp31;
								HX_STACK_LINE(325)
								Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								Float tmp33 = this->z;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(325)
								Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(325)
								Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(325)
								Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(325)
								Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(325)
								Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(325)
								Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(325)
								Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								_y = tmp45;
								HX_STACK_LINE(325)
								Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float tmp52 = (tmp48 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(325)
								Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(325)
								Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(325)
								Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(325)
								Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(325)
								Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(325)
								Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(325)
								_z = tmp59;
							}
							else{
								HX_STACK_LINE(325)
								bool tmp30 = (order == (int)2);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								if ((tmp30)){
									HX_STACK_LINE(325)
									Float tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									{
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->y;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float value = tmp39;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(325)
										bool tmp40 = (value < (int)-1);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										if ((tmp40)){
											HX_STACK_LINE(325)
											tmp31 = (int)-1;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp41 = (value > (int)1);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											if ((tmp41)){
												HX_STACK_LINE(325)
												tmp31 = (int)1;
											}
											else{
												HX_STACK_LINE(325)
												tmp31 = value;
											}
										}
									}
									HX_STACK_LINE(325)
									Float tmp32 = ::Math_obj::asin(tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									_x = tmp32;
									HX_STACK_LINE(325)
									Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(325)
									Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(325)
									Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(325)
									Float tmp43 = (tmp41 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(325)
									Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(325)
									Float tmp45 = (tmp43 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(325)
									Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(325)
									_y = tmp46;
									HX_STACK_LINE(325)
									Float tmp47 = this->z;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(325)
									Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(325)
									Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(325)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(325)
									Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(325)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(325)
									Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(325)
									Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(325)
									Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(325)
									Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(325)
									Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(325)
									Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(325)
									Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(325)
									_z = tmp60;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp31 = (order == (int)3);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp34 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										Float tmp40 = (sqw - sqx);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(325)
										Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(325)
										Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(325)
										Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(325)
										Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(325)
										_x = tmp45;
										HX_STACK_LINE(325)
										Float tmp46;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(325)
										{
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float value = tmp54;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(325)
											bool tmp55 = (value < (int)-1);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											if ((tmp55)){
												HX_STACK_LINE(325)
												tmp46 = (int)-1;
											}
											else{
												HX_STACK_LINE(325)
												bool tmp56 = (value > (int)1);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												if ((tmp56)){
													HX_STACK_LINE(325)
													tmp46 = (int)1;
												}
												else{
													HX_STACK_LINE(325)
													tmp46 = value;
												}
											}
										}
										HX_STACK_LINE(325)
										Float tmp47 = ::Math_obj::asin(tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(325)
										_y = tmp47;
										HX_STACK_LINE(325)
										Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(325)
										Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(325)
										Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(325)
										Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(325)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(325)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(325)
										Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(325)
										Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(325)
										Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(325)
										Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(325)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(325)
										Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(325)
										Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(325)
										Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(325)
										_z = tmp61;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp32 = (order == (int)4);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										if ((tmp32)){
											HX_STACK_LINE(325)
											Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											Float tmp34 = this->w;		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(325)
											Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(325)
											Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(325)
											Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(325)
											Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(325)
											Float tmp39 = (tmp35 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(325)
											Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(325)
											Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(325)
											Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(325)
											Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(325)
											Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(325)
											Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(325)
											Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(325)
											_x = tmp46;
											HX_STACK_LINE(325)
											Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(325)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(325)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(325)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(325)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(325)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(325)
											Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(325)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(325)
											Float tmp55 = (sqw + sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(325)
											Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(325)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(325)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(325)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(325)
											_y = tmp60;
											HX_STACK_LINE(325)
											Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(325)
											{
												HX_STACK_LINE(325)
												Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(325)
												Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(325)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(325)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(325)
												Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(325)
												Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(325)
												Float value = tmp69;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(325)
												bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(325)
												if ((tmp70)){
													HX_STACK_LINE(325)
													tmp61 = (int)-1;
												}
												else{
													HX_STACK_LINE(325)
													bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp61 = (int)1;
													}
													else{
														HX_STACK_LINE(325)
														tmp61 = value;
													}
												}
											}
											HX_STACK_LINE(325)
											Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(325)
											_z = tmp62;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp33 = (order == (int)5);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(325)
											if ((tmp33)){
												HX_STACK_LINE(325)
												Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(325)
												Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(325)
												Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(325)
												Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(325)
												Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(325)
												Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(325)
												Float tmp40 = (tmp36 + tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(325)
												Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(325)
												Float tmp42 = (sqw - sqx);		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(325)
												Float tmp43 = sqy;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(325)
												Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(325)
												Float tmp45 = sqz;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(325)
												Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(325)
												Float tmp47 = ::Math_obj::atan2(tmp41,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(325)
												_x = tmp47;
												HX_STACK_LINE(325)
												Float tmp48 = this->x;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(325)
												Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(325)
												Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(325)
												Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(325)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(325)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(325)
												Float tmp54 = (tmp50 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(325)
												Float tmp55 = ((int)2 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(325)
												Float tmp56 = (sqw + sqx);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(325)
												Float tmp57 = sqy;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(325)
												Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(325)
												Float tmp59 = sqz;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(325)
												Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(325)
												Float tmp61 = ::Math_obj::atan2(tmp55,tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(325)
												_y = tmp61;
												HX_STACK_LINE(325)
												Float tmp62;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(325)
												{
													HX_STACK_LINE(325)
													Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(325)
													Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(325)
													Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(325)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(325)
													Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(325)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(325)
													Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(325)
													Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(325)
													Float value = tmp70;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(325)
													bool tmp71 = (value < (int)-1);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(325)
													if ((tmp71)){
														HX_STACK_LINE(325)
														tmp62 = (int)-1;
													}
													else{
														HX_STACK_LINE(325)
														bool tmp72 = (value > (int)1);		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(325)
														if ((tmp72)){
															HX_STACK_LINE(325)
															tmp62 = (int)1;
														}
														else{
															HX_STACK_LINE(325)
															tmp62 = value;
														}
													}
												}
												HX_STACK_LINE(325)
												Float tmp63 = ::Math_obj::asin(tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(325)
												_z = tmp63;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(325)
						{
							HX_STACK_LINE(325)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(325)
							_this->ignore_listeners = true;
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->x = _x;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->x;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_x != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _x;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_x(tmp32);
									}
									HX_STACK_LINE(325)
									_this->x;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->y = _y;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->y;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_y != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _y;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_y(tmp32);
									}
									HX_STACK_LINE(325)
									_this->y;
								}
							}
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								_this->z = _z;
								HX_STACK_LINE(325)
								bool tmp29 = _this->_construct;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								if ((tmp29)){
									HX_STACK_LINE(325)
									_this->z;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp30 = (_this->listen_z != null());		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									bool tmp31;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									if ((tmp30)){
										HX_STACK_LINE(325)
										bool tmp32 = _this->ignore_listeners;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										bool tmp33 = tmp32;		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										tmp31 = !(tmp33);
									}
									else{
										HX_STACK_LINE(325)
										tmp31 = false;
									}
									HX_STACK_LINE(325)
									if ((tmp31)){
										HX_STACK_LINE(325)
										Float tmp32 = _z;		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										_this->listen_z(tmp32);
									}
									HX_STACK_LINE(325)
									_this->z;
								}
							}
							HX_STACK_LINE(325)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(325)
							bool tmp29 = (_this->listen_x != null());		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							if ((tmp29)){
								HX_STACK_LINE(325)
								bool tmp31 = _this->ignore_listeners;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								tmp30 = !(tmp32);
							}
							else{
								HX_STACK_LINE(325)
								tmp30 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp30)){
								HX_STACK_LINE(325)
								Float tmp31 = _this->x;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								_this->listen_x(tmp31);
							}
							HX_STACK_LINE(325)
							bool tmp31 = (_this->listen_y != null());		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							if ((tmp31)){
								HX_STACK_LINE(325)
								bool tmp33 = _this->ignore_listeners;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								tmp32 = !(tmp34);
							}
							else{
								HX_STACK_LINE(325)
								tmp32 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp32)){
								HX_STACK_LINE(325)
								Float tmp33 = _this->y;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								_this->listen_y(tmp33);
							}
							HX_STACK_LINE(325)
							bool tmp33 = (_this->listen_z != null());		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							bool tmp34;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							if ((tmp33)){
								HX_STACK_LINE(325)
								bool tmp35 = _this->ignore_listeners;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								tmp34 = !(tmp36);
							}
							else{
								HX_STACK_LINE(325)
								tmp34 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp34)){
								HX_STACK_LINE(325)
								Float tmp35 = _this->z;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								_this->listen_z(tmp35);
							}
							HX_STACK_LINE(325)
							_this;
						}
						HX_STACK_LINE(325)
						_this;
					}
				}
				HX_STACK_LINE(325)
				Dynamic tmp8 = this->listen_w_dyn();		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(325)
				bool tmp9 = (tmp8 != null());		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(325)
				bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(325)
				if ((tmp9)){
					HX_STACK_LINE(325)
					bool tmp11 = this->ignore_listeners;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
					HX_STACK_LINE(325)
					bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
					HX_STACK_LINE(325)
					tmp10 = !(tmp13);
				}
				else{
					HX_STACK_LINE(325)
					tmp10 = false;
				}
				HX_STACK_LINE(325)
				if ((tmp10)){
					HX_STACK_LINE(325)
					Float tmp11 = this->w;		HX_STACK_VAR(tmp11,"tmp11");
					HX_STACK_LINE(325)
					this->listen_w(tmp11);
				}
				HX_STACK_LINE(325)
				this->w;
			}
		}
		HX_STACK_LINE(325)
		this->ignore_euler = false;
		HX_STACK_LINE(325)
		{
			HX_STACK_LINE(325)
			::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(325)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(325)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(325)
			bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(325)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(325)
			if ((tmp3)){
				HX_STACK_LINE(325)
				tmp4 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(325)
				tmp4 = true;
			}
			HX_STACK_LINE(325)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(325)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(325)
			if ((tmp5)){
				HX_STACK_LINE(325)
				tmp6 = this->_construct;
			}
			else{
				HX_STACK_LINE(325)
				tmp6 = true;
			}
			HX_STACK_LINE(325)
			if ((tmp6)){
				HX_STACK_LINE(325)
				Dynamic();
			}
			else{
				HX_STACK_LINE(325)
				::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(325)
				::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(325)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(325)
				Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(325)
				Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(325)
				Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(325)
				Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(325)
				Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(325)
				Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(325)
				Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(325)
				Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(325)
				Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(325)
				Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(325)
				Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(325)
				Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(325)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(325)
				Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(325)
				Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(325)
				Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(325)
				Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
				HX_STACK_LINE(325)
				Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
				HX_STACK_LINE(325)
				Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
				HX_STACK_LINE(325)
				bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(325)
				if ((tmp20)){
					HX_STACK_LINE(325)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(325)
					Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(325)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(325)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(325)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(325)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(325)
					Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(325)
					Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(325)
					Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(325)
					Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(325)
					Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(325)
					Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(325)
					Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(325)
					Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(325)
					_x = tmp34;
					HX_STACK_LINE(325)
					Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(325)
					{
						HX_STACK_LINE(325)
						Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(325)
						Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(325)
						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(325)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(325)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(325)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(325)
						Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(325)
						Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(325)
						Float value = tmp43;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(325)
						bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(325)
						if ((tmp44)){
							HX_STACK_LINE(325)
							tmp35 = (int)-1;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(325)
							if ((tmp45)){
								HX_STACK_LINE(325)
								tmp35 = (int)1;
							}
							else{
								HX_STACK_LINE(325)
								tmp35 = value;
							}
						}
					}
					HX_STACK_LINE(325)
					Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(325)
					_y = tmp36;
					HX_STACK_LINE(325)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(325)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(325)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(325)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(325)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(325)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(325)
					Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(325)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(325)
					Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(325)
					Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(325)
					Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(325)
					Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(325)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(325)
					Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(325)
					_z = tmp50;
				}
				else{
					HX_STACK_LINE(325)
					bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(325)
					if ((tmp21)){
						HX_STACK_LINE(325)
						Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(325)
						{
							HX_STACK_LINE(325)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(325)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(325)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(325)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(325)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(325)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(325)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							Float value = tmp30;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(325)
							bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							if ((tmp31)){
								HX_STACK_LINE(325)
								tmp22 = (int)-1;
							}
							else{
								HX_STACK_LINE(325)
								bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								if ((tmp32)){
									HX_STACK_LINE(325)
									tmp22 = (int)1;
								}
								else{
									HX_STACK_LINE(325)
									tmp22 = value;
								}
							}
						}
						HX_STACK_LINE(325)
						Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(325)
						_x = tmp23;
						HX_STACK_LINE(325)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(325)
						Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(325)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(325)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(325)
						Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(325)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(325)
						Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(325)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(325)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(325)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(325)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(325)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(325)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(325)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(325)
						_y = tmp37;
						HX_STACK_LINE(325)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(325)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(325)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(325)
						Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(325)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(325)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(325)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(325)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(325)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(325)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(325)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(325)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(325)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(325)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(325)
						_z = tmp51;
					}
					else{
						HX_STACK_LINE(325)
						bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(325)
						if ((tmp22)){
							HX_STACK_LINE(325)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(325)
							{
								HX_STACK_LINE(325)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(325)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(325)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(325)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(325)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(325)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								if ((tmp32)){
									HX_STACK_LINE(325)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									if ((tmp33)){
										HX_STACK_LINE(325)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(325)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(325)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(325)
							_x = tmp24;
							HX_STACK_LINE(325)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(325)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(325)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(325)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(325)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(325)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(325)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(325)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(325)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(325)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(325)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(325)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(325)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(325)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(325)
							_y = tmp38;
							HX_STACK_LINE(325)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(325)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(325)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(325)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(325)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(325)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(325)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(325)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(325)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(325)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(325)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(325)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(325)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(325)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(325)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(325)
							if ((tmp23)){
								HX_STACK_LINE(325)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(325)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(325)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(325)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(325)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(325)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(325)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(325)
								Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(325)
								Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(325)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(325)
								Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(325)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(325)
								Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(325)
								_x = tmp37;
								HX_STACK_LINE(325)
								Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(325)
								{
									HX_STACK_LINE(325)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(325)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(325)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(325)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(325)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(325)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(325)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(325)
									Float value = tmp46;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(325)
									bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(325)
									if ((tmp47)){
										HX_STACK_LINE(325)
										tmp38 = (int)-1;
									}
									else{
										HX_STACK_LINE(325)
										bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(325)
										if ((tmp48)){
											HX_STACK_LINE(325)
											tmp38 = (int)1;
										}
										else{
											HX_STACK_LINE(325)
											tmp38 = value;
										}
									}
								}
								HX_STACK_LINE(325)
								Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(325)
								_y = tmp39;
								HX_STACK_LINE(325)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(325)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(325)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(325)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(325)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(325)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(325)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(325)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(325)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(325)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(325)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(325)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(325)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(325)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(325)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(325)
								bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								if ((tmp24)){
									HX_STACK_LINE(325)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(325)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(325)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(325)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(325)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(325)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(325)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(325)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(325)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(325)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(325)
									Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(325)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(325)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(325)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(325)
									_x = tmp38;
									HX_STACK_LINE(325)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(325)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(325)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(325)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(325)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(325)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(325)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(325)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(325)
									Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(325)
									Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(325)
									Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(325)
									Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(325)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(325)
									Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(325)
									_y = tmp52;
									HX_STACK_LINE(325)
									Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(325)
									{
										HX_STACK_LINE(325)
										Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(325)
										Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(325)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(325)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(325)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(325)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(325)
										Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(325)
										Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(325)
										Float value = tmp61;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(325)
										bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(325)
										if ((tmp62)){
											HX_STACK_LINE(325)
											tmp53 = (int)-1;
										}
										else{
											HX_STACK_LINE(325)
											bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(325)
											if ((tmp63)){
												HX_STACK_LINE(325)
												tmp53 = (int)1;
											}
											else{
												HX_STACK_LINE(325)
												tmp53 = value;
											}
										}
									}
									HX_STACK_LINE(325)
									Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(325)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(325)
									bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(325)
									if ((tmp25)){
										HX_STACK_LINE(325)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(325)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(325)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(325)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(325)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(325)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(325)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(325)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(325)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(325)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(325)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(325)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(325)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(325)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(325)
										_x = tmp39;
										HX_STACK_LINE(325)
										Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(325)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(325)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(325)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(325)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(325)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(325)
										Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(325)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(325)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(325)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(325)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(325)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(325)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(325)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(325)
										_y = tmp53;
										HX_STACK_LINE(325)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(325)
										{
											HX_STACK_LINE(325)
											Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(325)
											Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(325)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(325)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(325)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(325)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(325)
											Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(325)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(325)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(325)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(325)
											if ((tmp63)){
												HX_STACK_LINE(325)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(325)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(325)
												if ((tmp64)){
													HX_STACK_LINE(325)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(325)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(325)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(325)
										_z = tmp55;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(325)
				{
					HX_STACK_LINE(325)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(325)
					_this->ignore_listeners = true;
					HX_STACK_LINE(325)
					{
						HX_STACK_LINE(325)
						_this->x = _x;
						HX_STACK_LINE(325)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(325)
						if ((tmp21)){
							HX_STACK_LINE(325)
							_this->x;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(325)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(325)
							if ((tmp22)){
								HX_STACK_LINE(325)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(325)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(325)
								tmp23 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp23)){
								HX_STACK_LINE(325)
								Float tmp24 = _x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(325)
							_this->x;
						}
					}
					HX_STACK_LINE(325)
					{
						HX_STACK_LINE(325)
						_this->y = _y;
						HX_STACK_LINE(325)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(325)
						if ((tmp21)){
							HX_STACK_LINE(325)
							_this->y;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(325)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(325)
							if ((tmp22)){
								HX_STACK_LINE(325)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(325)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(325)
								tmp23 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp23)){
								HX_STACK_LINE(325)
								Float tmp24 = _y;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								_this->listen_y(tmp24);
							}
							HX_STACK_LINE(325)
							_this->y;
						}
					}
					HX_STACK_LINE(325)
					{
						HX_STACK_LINE(325)
						_this->z = _z;
						HX_STACK_LINE(325)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(325)
						if ((tmp21)){
							HX_STACK_LINE(325)
							_this->z;
						}
						else{
							HX_STACK_LINE(325)
							bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(325)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(325)
							if ((tmp22)){
								HX_STACK_LINE(325)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(325)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(325)
								tmp23 = false;
							}
							HX_STACK_LINE(325)
							if ((tmp23)){
								HX_STACK_LINE(325)
								Float tmp24 = _z;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(325)
								_this->listen_z(tmp24);
							}
							HX_STACK_LINE(325)
							_this->z;
						}
					}
					HX_STACK_LINE(325)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(325)
					bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(325)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(325)
					if ((tmp21)){
						HX_STACK_LINE(325)
						bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(325)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(325)
						tmp22 = !(tmp24);
					}
					else{
						HX_STACK_LINE(325)
						tmp22 = false;
					}
					HX_STACK_LINE(325)
					if ((tmp22)){
						HX_STACK_LINE(325)
						Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(325)
						_this->listen_x(tmp23);
					}
					HX_STACK_LINE(325)
					bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(325)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(325)
					if ((tmp23)){
						HX_STACK_LINE(325)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(325)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(325)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(325)
						tmp24 = false;
					}
					HX_STACK_LINE(325)
					if ((tmp24)){
						HX_STACK_LINE(325)
						Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(325)
						_this->listen_y(tmp25);
					}
					HX_STACK_LINE(325)
					bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(325)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(325)
					if ((tmp25)){
						HX_STACK_LINE(325)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(325)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(325)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(325)
						tmp26 = false;
					}
					HX_STACK_LINE(325)
					if ((tmp26)){
						HX_STACK_LINE(325)
						Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(325)
						_this->listen_z(tmp27);
					}
					HX_STACK_LINE(325)
					_this;
				}
				HX_STACK_LINE(325)
				_this;
			}
		}
		HX_STACK_LINE(325)
		Dynamic tmp = this->listen_x_dyn();		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(325)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(325)
		bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(325)
		if ((tmp1)){
			HX_STACK_LINE(325)
			bool tmp3 = this->ignore_listeners;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(325)
			bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(325)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(325)
			tmp2 = !(tmp5);
		}
		else{
			HX_STACK_LINE(325)
			tmp2 = false;
		}
		HX_STACK_LINE(325)
		if ((tmp2)){
			HX_STACK_LINE(325)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(325)
			this->listen_x(tmp3);
		}
		HX_STACK_LINE(325)
		Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(325)
		bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(325)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(325)
		if ((tmp4)){
			HX_STACK_LINE(325)
			bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(325)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(325)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(325)
			tmp5 = !(tmp8);
		}
		else{
			HX_STACK_LINE(325)
			tmp5 = false;
		}
		HX_STACK_LINE(325)
		if ((tmp5)){
			HX_STACK_LINE(325)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(325)
			this->listen_y(tmp6);
		}
		HX_STACK_LINE(325)
		Dynamic tmp6 = this->listen_z_dyn();		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(325)
		bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(325)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(325)
		if ((tmp7)){
			HX_STACK_LINE(325)
			bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(325)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(325)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(325)
			tmp8 = !(tmp11);
		}
		else{
			HX_STACK_LINE(325)
			tmp8 = false;
		}
		HX_STACK_LINE(325)
		if ((tmp8)){
			HX_STACK_LINE(325)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(325)
			this->listen_z(tmp9);
		}
		HX_STACK_LINE(325)
		Dynamic tmp9 = this->listen_w_dyn();		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(325)
		bool tmp10 = (tmp9 != null());		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(325)
		bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(325)
		if ((tmp10)){
			HX_STACK_LINE(325)
			bool tmp12 = this->ignore_listeners;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(325)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(325)
			bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(325)
			tmp11 = !(tmp14);
		}
		else{
			HX_STACK_LINE(325)
			tmp11 = false;
		}
		HX_STACK_LINE(325)
		if ((tmp11)){
			HX_STACK_LINE(325)
			Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(325)
			this->listen_w(tmp12);
		}
	}
	HX_STACK_LINE(330)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,multiplyQuaternions,return )

::phoenix::Quaternion Quaternion_obj::slerp( ::phoenix::Quaternion _qb,Float _t){
	HX_STACK_FRAME("phoenix.Quaternion","slerp",0x611900f9,"phoenix.Quaternion.slerp","phoenix/Quaternion.hx",335,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_qb,"_qb")
	HX_STACK_ARG(_t,"_t")
	HX_STACK_LINE(337)
	Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(337)
	Float _x = tmp;		HX_STACK_VAR(_x,"_x");
	HX_STACK_LINE(338)
	Float tmp1 = this->y;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(338)
	Float _y = tmp1;		HX_STACK_VAR(_y,"_y");
	HX_STACK_LINE(339)
	Float tmp2 = this->z;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(339)
	Float _z = tmp2;		HX_STACK_VAR(_z,"_z");
	HX_STACK_LINE(340)
	Float tmp3 = this->w;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(340)
	Float _w = tmp3;		HX_STACK_VAR(_w,"_w");
	HX_STACK_LINE(344)
	Float tmp4 = (_w * _qb->w);		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(344)
	Float tmp5 = (_x * _qb->x);		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(344)
	Float tmp6 = (tmp4 + tmp5);		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(344)
	Float tmp7 = (_y * _qb->y);		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(344)
	Float tmp8 = (tmp6 + tmp7);		HX_STACK_VAR(tmp8,"tmp8");
	HX_STACK_LINE(344)
	Float tmp9 = (_z * _qb->z);		HX_STACK_VAR(tmp9,"tmp9");
	HX_STACK_LINE(344)
	Float tmp10 = (tmp8 + tmp9);		HX_STACK_VAR(tmp10,"tmp10");
	HX_STACK_LINE(344)
	Float cosHalfTheta = tmp10;		HX_STACK_VAR(cosHalfTheta,"cosHalfTheta");
	HX_STACK_LINE(346)
	bool tmp11 = (cosHalfTheta < (int)0);		HX_STACK_VAR(tmp11,"tmp11");
	HX_STACK_LINE(346)
	if ((tmp11)){
		HX_STACK_LINE(348)
		{
			HX_STACK_LINE(348)
			Float tmp12 = _qb->w;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(348)
			Float tmp13 = -(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(348)
			this->w = tmp13;
			HX_STACK_LINE(348)
			bool tmp14 = this->_construct;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(348)
			if ((tmp14)){
				HX_STACK_LINE(348)
				this->w;
			}
			else{
				HX_STACK_LINE(348)
				{
					HX_STACK_LINE(348)
					::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(348)
					bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(348)
					bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(348)
					bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(348)
					bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(348)
					if ((tmp18)){
						HX_STACK_LINE(348)
						tmp19 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(348)
						tmp19 = true;
					}
					HX_STACK_LINE(348)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(348)
					bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(348)
					if ((tmp20)){
						HX_STACK_LINE(348)
						tmp21 = this->_construct;
					}
					else{
						HX_STACK_LINE(348)
						tmp21 = true;
					}
					HX_STACK_LINE(348)
					if ((tmp21)){
						HX_STACK_LINE(348)
						Dynamic();
					}
					else{
						HX_STACK_LINE(348)
						::phoenix::Vector tmp22 = this->euler;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(348)
						::phoenix::Vector _this = tmp22;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(348)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(348)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(348)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(348)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(348)
						Float sqx = tmp25;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(348)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(348)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(348)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(348)
						Float sqy = tmp28;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(348)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(348)
						Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(348)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(348)
						Float sqz = tmp31;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(348)
						Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(348)
						Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(348)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(348)
						Float sqw = tmp34;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(348)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(348)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(348)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(348)
						bool tmp35 = (order == (int)0);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(348)
						if ((tmp35)){
							HX_STACK_LINE(348)
							Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(348)
							Float tmp37 = this->w;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(348)
							Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(348)
							Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(348)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(348)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(348)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(348)
							Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(348)
							Float tmp44 = (sqw - sqx);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(348)
							Float tmp45 = sqy;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(348)
							Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(348)
							Float tmp47 = sqz;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(348)
							Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(348)
							Float tmp49 = ::Math_obj::atan2(tmp43,tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(348)
							_x1 = tmp49;
							HX_STACK_LINE(348)
							Float tmp50;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(348)
							{
								HX_STACK_LINE(348)
								Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(348)
								Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(348)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(348)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(348)
								Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(348)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(348)
								Float tmp57 = (tmp53 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(348)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(348)
								Float value = tmp58;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(348)
								bool tmp59 = (value < (int)-1);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(348)
								if ((tmp59)){
									HX_STACK_LINE(348)
									tmp50 = (int)-1;
								}
								else{
									HX_STACK_LINE(348)
									bool tmp60 = (value > (int)1);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(348)
									if ((tmp60)){
										HX_STACK_LINE(348)
										tmp50 = (int)1;
									}
									else{
										HX_STACK_LINE(348)
										tmp50 = value;
									}
								}
							}
							HX_STACK_LINE(348)
							Float tmp51 = ::Math_obj::asin(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(348)
							_y1 = tmp51;
							HX_STACK_LINE(348)
							Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(348)
							Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(348)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(348)
							Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(348)
							Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(348)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(348)
							Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(348)
							Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(348)
							Float tmp60 = (sqw + sqx);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(348)
							Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(348)
							Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(348)
							Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(348)
							Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(348)
							Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(348)
							_z1 = tmp65;
						}
						else{
							HX_STACK_LINE(348)
							bool tmp36 = (order == (int)1);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(348)
							if ((tmp36)){
								HX_STACK_LINE(348)
								Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(348)
								{
									HX_STACK_LINE(348)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(348)
									Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(348)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(348)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(348)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(348)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(348)
									Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(348)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(348)
									Float value = tmp45;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(348)
									bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(348)
									if ((tmp46)){
										HX_STACK_LINE(348)
										tmp37 = (int)-1;
									}
									else{
										HX_STACK_LINE(348)
										bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(348)
										if ((tmp47)){
											HX_STACK_LINE(348)
											tmp37 = (int)1;
										}
										else{
											HX_STACK_LINE(348)
											tmp37 = value;
										}
									}
								}
								HX_STACK_LINE(348)
								Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(348)
								_x1 = tmp38;
								HX_STACK_LINE(348)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(348)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(348)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(348)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(348)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(348)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(348)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(348)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(348)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(348)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(348)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(348)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(348)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(348)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(348)
								_y1 = tmp52;
								HX_STACK_LINE(348)
								Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(348)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(348)
								Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(348)
								Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(348)
								Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(348)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(348)
								Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(348)
								Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(348)
								Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(348)
								Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(348)
								Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(348)
								Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(348)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(348)
								Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(348)
								_z1 = tmp66;
							}
							else{
								HX_STACK_LINE(348)
								bool tmp37 = (order == (int)2);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(348)
								if ((tmp37)){
									HX_STACK_LINE(348)
									Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(348)
									{
										HX_STACK_LINE(348)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(348)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(348)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(348)
										Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(348)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(348)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(348)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(348)
										Float value = tmp46;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(348)
										bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(348)
										if ((tmp47)){
											HX_STACK_LINE(348)
											tmp38 = (int)-1;
										}
										else{
											HX_STACK_LINE(348)
											bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(348)
											if ((tmp48)){
												HX_STACK_LINE(348)
												tmp38 = (int)1;
											}
											else{
												HX_STACK_LINE(348)
												tmp38 = value;
											}
										}
									}
									HX_STACK_LINE(348)
									Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(348)
									_x1 = tmp39;
									HX_STACK_LINE(348)
									Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(348)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(348)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(348)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(348)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(348)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(348)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(348)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(348)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(348)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(348)
									Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(348)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(348)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(348)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(348)
									_y1 = tmp53;
									HX_STACK_LINE(348)
									Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(348)
									Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(348)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(348)
									Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(348)
									Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(348)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(348)
									Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(348)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(348)
									Float tmp62 = (sqw - sqx);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(348)
									Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(348)
									Float tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(348)
									Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(348)
									Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(348)
									Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(348)
									_z1 = tmp67;
								}
								else{
									HX_STACK_LINE(348)
									bool tmp38 = (order == (int)3);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(348)
									if ((tmp38)){
										HX_STACK_LINE(348)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(348)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(348)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(348)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(348)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(348)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(348)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(348)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(348)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(348)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(348)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(348)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(348)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(348)
										_x1 = tmp52;
										HX_STACK_LINE(348)
										Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(348)
										{
											HX_STACK_LINE(348)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(348)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(348)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(348)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(348)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(348)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(348)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(348)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(348)
											Float value = tmp61;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(348)
											bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(348)
											if ((tmp62)){
												HX_STACK_LINE(348)
												tmp53 = (int)-1;
											}
											else{
												HX_STACK_LINE(348)
												bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(348)
												if ((tmp63)){
													HX_STACK_LINE(348)
													tmp53 = (int)1;
												}
												else{
													HX_STACK_LINE(348)
													tmp53 = value;
												}
											}
										}
										HX_STACK_LINE(348)
										Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(348)
										_y1 = tmp54;
										HX_STACK_LINE(348)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(348)
										Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(348)
										Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(348)
										Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(348)
										Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(348)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(348)
										Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(348)
										Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(348)
										Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(348)
										Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(348)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(348)
										Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(348)
										Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(348)
										Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(348)
										_z1 = tmp68;
									}
									else{
										HX_STACK_LINE(348)
										bool tmp39 = (order == (int)4);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										if ((tmp39)){
											HX_STACK_LINE(348)
											Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(348)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(348)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(348)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(348)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(348)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(348)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(348)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(348)
											Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(348)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(348)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(348)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(348)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(348)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(348)
											_x1 = tmp53;
											HX_STACK_LINE(348)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(348)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(348)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(348)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(348)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(348)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(348)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(348)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(348)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(348)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(348)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(348)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(348)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(348)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(348)
											_y1 = tmp67;
											HX_STACK_LINE(348)
											Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(348)
											{
												HX_STACK_LINE(348)
												Float tmp69 = this->x;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(348)
												Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(348)
												Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(348)
												Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(348)
												Float tmp73 = this->w;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(348)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(348)
												Float tmp75 = (tmp71 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(348)
												Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(348)
												Float value = tmp76;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(348)
												bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(348)
												if ((tmp77)){
													HX_STACK_LINE(348)
													tmp68 = (int)-1;
												}
												else{
													HX_STACK_LINE(348)
													bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(348)
													if ((tmp78)){
														HX_STACK_LINE(348)
														tmp68 = (int)1;
													}
													else{
														HX_STACK_LINE(348)
														tmp68 = value;
													}
												}
											}
											HX_STACK_LINE(348)
											Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(348)
											_z1 = tmp69;
										}
										else{
											HX_STACK_LINE(348)
											bool tmp40 = (order == (int)5);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(348)
											if ((tmp40)){
												HX_STACK_LINE(348)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(348)
												Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(348)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(348)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(348)
												Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(348)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(348)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(348)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(348)
												Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(348)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(348)
												Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(348)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(348)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(348)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(348)
												_x1 = tmp54;
												HX_STACK_LINE(348)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(348)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(348)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(348)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(348)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(348)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(348)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(348)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(348)
												Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(348)
												Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(348)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(348)
												Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(348)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(348)
												Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(348)
												_y1 = tmp68;
												HX_STACK_LINE(348)
												Float tmp69;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(348)
												{
													HX_STACK_LINE(348)
													Float tmp70 = this->z;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(348)
													Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(348)
													Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(348)
													Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(348)
													Float tmp74 = this->y;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(348)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(348)
													Float tmp76 = (tmp72 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(348)
													Float tmp77 = ((int)2 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(348)
													Float value = tmp77;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(348)
													bool tmp78 = (value < (int)-1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(348)
													if ((tmp78)){
														HX_STACK_LINE(348)
														tmp69 = (int)-1;
													}
													else{
														HX_STACK_LINE(348)
														bool tmp79 = (value > (int)1);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(348)
														if ((tmp79)){
															HX_STACK_LINE(348)
															tmp69 = (int)1;
														}
														else{
															HX_STACK_LINE(348)
															tmp69 = value;
														}
													}
												}
												HX_STACK_LINE(348)
												Float tmp70 = ::Math_obj::asin(tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(348)
												_z1 = tmp70;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(348)
						{
							HX_STACK_LINE(348)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(348)
							_this->ignore_listeners = true;
							HX_STACK_LINE(348)
							{
								HX_STACK_LINE(348)
								_this->x = _x1;
								HX_STACK_LINE(348)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(348)
								if ((tmp36)){
									HX_STACK_LINE(348)
									_this->x;
								}
								else{
									HX_STACK_LINE(348)
									bool tmp37 = (_this->listen_x != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(348)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(348)
									if ((tmp37)){
										HX_STACK_LINE(348)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(348)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(348)
										tmp38 = false;
									}
									HX_STACK_LINE(348)
									if ((tmp38)){
										HX_STACK_LINE(348)
										Float tmp39 = _x1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										_this->listen_x(tmp39);
									}
									HX_STACK_LINE(348)
									_this->x;
								}
							}
							HX_STACK_LINE(348)
							{
								HX_STACK_LINE(348)
								_this->y = _y1;
								HX_STACK_LINE(348)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(348)
								if ((tmp36)){
									HX_STACK_LINE(348)
									_this->y;
								}
								else{
									HX_STACK_LINE(348)
									bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(348)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(348)
									if ((tmp37)){
										HX_STACK_LINE(348)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(348)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(348)
										tmp38 = false;
									}
									HX_STACK_LINE(348)
									if ((tmp38)){
										HX_STACK_LINE(348)
										Float tmp39 = _y1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										_this->listen_y(tmp39);
									}
									HX_STACK_LINE(348)
									_this->y;
								}
							}
							HX_STACK_LINE(348)
							{
								HX_STACK_LINE(348)
								_this->z = _z1;
								HX_STACK_LINE(348)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(348)
								if ((tmp36)){
									HX_STACK_LINE(348)
									_this->z;
								}
								else{
									HX_STACK_LINE(348)
									bool tmp37 = (_this->listen_z != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(348)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(348)
									if ((tmp37)){
										HX_STACK_LINE(348)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(348)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(348)
										tmp38 = false;
									}
									HX_STACK_LINE(348)
									if ((tmp38)){
										HX_STACK_LINE(348)
										Float tmp39 = _z1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(348)
										_this->listen_z(tmp39);
									}
									HX_STACK_LINE(348)
									_this->z;
								}
							}
							HX_STACK_LINE(348)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(348)
							bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(348)
							bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(348)
							if ((tmp36)){
								HX_STACK_LINE(348)
								bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(348)
								bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(348)
								tmp37 = !(tmp39);
							}
							else{
								HX_STACK_LINE(348)
								tmp37 = false;
							}
							HX_STACK_LINE(348)
							if ((tmp37)){
								HX_STACK_LINE(348)
								Float tmp38 = _this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(348)
								_this->listen_x(tmp38);
							}
							HX_STACK_LINE(348)
							bool tmp38 = (_this->listen_y != null());		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(348)
							bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(348)
							if ((tmp38)){
								HX_STACK_LINE(348)
								bool tmp40 = _this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(348)
								bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(348)
								tmp39 = !(tmp41);
							}
							else{
								HX_STACK_LINE(348)
								tmp39 = false;
							}
							HX_STACK_LINE(348)
							if ((tmp39)){
								HX_STACK_LINE(348)
								Float tmp40 = _this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(348)
								_this->listen_y(tmp40);
							}
							HX_STACK_LINE(348)
							bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(348)
							bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(348)
							if ((tmp40)){
								HX_STACK_LINE(348)
								bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(348)
								bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(348)
								tmp41 = !(tmp43);
							}
							else{
								HX_STACK_LINE(348)
								tmp41 = false;
							}
							HX_STACK_LINE(348)
							if ((tmp41)){
								HX_STACK_LINE(348)
								Float tmp42 = _this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(348)
								_this->listen_z(tmp42);
							}
							HX_STACK_LINE(348)
							_this;
						}
						HX_STACK_LINE(348)
						_this;
					}
				}
				HX_STACK_LINE(348)
				Dynamic tmp15 = this->listen_w_dyn();		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(348)
				bool tmp16 = (tmp15 != null());		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(348)
				bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(348)
				if ((tmp16)){
					HX_STACK_LINE(348)
					bool tmp18 = this->ignore_listeners;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(348)
					bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(348)
					bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(348)
					tmp17 = !(tmp20);
				}
				else{
					HX_STACK_LINE(348)
					tmp17 = false;
				}
				HX_STACK_LINE(348)
				if ((tmp17)){
					HX_STACK_LINE(348)
					Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(348)
					this->listen_w(tmp18);
				}
				HX_STACK_LINE(348)
				this->w;
			}
		}
		HX_STACK_LINE(349)
		{
			HX_STACK_LINE(349)
			Float tmp12 = _qb->x;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(349)
			Float tmp13 = -(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(349)
			this->x = tmp13;
			HX_STACK_LINE(349)
			bool tmp14 = this->_construct;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(349)
			if ((tmp14)){
				HX_STACK_LINE(349)
				this->x;
			}
			else{
				HX_STACK_LINE(349)
				{
					HX_STACK_LINE(349)
					::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(349)
					bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(349)
					bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(349)
					bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(349)
					bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(349)
					if ((tmp18)){
						HX_STACK_LINE(349)
						tmp19 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(349)
						tmp19 = true;
					}
					HX_STACK_LINE(349)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(349)
					bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(349)
					if ((tmp20)){
						HX_STACK_LINE(349)
						tmp21 = this->_construct;
					}
					else{
						HX_STACK_LINE(349)
						tmp21 = true;
					}
					HX_STACK_LINE(349)
					if ((tmp21)){
						HX_STACK_LINE(349)
						Dynamic();
					}
					else{
						HX_STACK_LINE(349)
						::phoenix::Vector tmp22 = this->euler;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(349)
						::phoenix::Vector _this = tmp22;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(349)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(349)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(349)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(349)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(349)
						Float sqx = tmp25;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(349)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(349)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(349)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(349)
						Float sqy = tmp28;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(349)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(349)
						Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(349)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(349)
						Float sqz = tmp31;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(349)
						Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(349)
						Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(349)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(349)
						Float sqw = tmp34;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(349)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(349)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(349)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(349)
						bool tmp35 = (order == (int)0);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(349)
						if ((tmp35)){
							HX_STACK_LINE(349)
							Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(349)
							Float tmp37 = this->w;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(349)
							Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(349)
							Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(349)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(349)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(349)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(349)
							Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(349)
							Float tmp44 = (sqw - sqx);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(349)
							Float tmp45 = sqy;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(349)
							Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(349)
							Float tmp47 = sqz;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(349)
							Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(349)
							Float tmp49 = ::Math_obj::atan2(tmp43,tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(349)
							_x1 = tmp49;
							HX_STACK_LINE(349)
							Float tmp50;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(349)
							{
								HX_STACK_LINE(349)
								Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(349)
								Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(349)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(349)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(349)
								Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(349)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(349)
								Float tmp57 = (tmp53 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(349)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(349)
								Float value = tmp58;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(349)
								bool tmp59 = (value < (int)-1);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(349)
								if ((tmp59)){
									HX_STACK_LINE(349)
									tmp50 = (int)-1;
								}
								else{
									HX_STACK_LINE(349)
									bool tmp60 = (value > (int)1);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(349)
									if ((tmp60)){
										HX_STACK_LINE(349)
										tmp50 = (int)1;
									}
									else{
										HX_STACK_LINE(349)
										tmp50 = value;
									}
								}
							}
							HX_STACK_LINE(349)
							Float tmp51 = ::Math_obj::asin(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(349)
							_y1 = tmp51;
							HX_STACK_LINE(349)
							Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(349)
							Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(349)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(349)
							Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(349)
							Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(349)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(349)
							Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(349)
							Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(349)
							Float tmp60 = (sqw + sqx);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(349)
							Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(349)
							Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(349)
							Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(349)
							Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(349)
							Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(349)
							_z1 = tmp65;
						}
						else{
							HX_STACK_LINE(349)
							bool tmp36 = (order == (int)1);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(349)
							if ((tmp36)){
								HX_STACK_LINE(349)
								Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(349)
								{
									HX_STACK_LINE(349)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(349)
									Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(349)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(349)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(349)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(349)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(349)
									Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(349)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(349)
									Float value = tmp45;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(349)
									bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(349)
									if ((tmp46)){
										HX_STACK_LINE(349)
										tmp37 = (int)-1;
									}
									else{
										HX_STACK_LINE(349)
										bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(349)
										if ((tmp47)){
											HX_STACK_LINE(349)
											tmp37 = (int)1;
										}
										else{
											HX_STACK_LINE(349)
											tmp37 = value;
										}
									}
								}
								HX_STACK_LINE(349)
								Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(349)
								_x1 = tmp38;
								HX_STACK_LINE(349)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(349)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(349)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(349)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(349)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(349)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(349)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(349)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(349)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(349)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(349)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(349)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(349)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(349)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(349)
								_y1 = tmp52;
								HX_STACK_LINE(349)
								Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(349)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(349)
								Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(349)
								Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(349)
								Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(349)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(349)
								Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(349)
								Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(349)
								Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(349)
								Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(349)
								Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(349)
								Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(349)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(349)
								Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(349)
								_z1 = tmp66;
							}
							else{
								HX_STACK_LINE(349)
								bool tmp37 = (order == (int)2);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(349)
								if ((tmp37)){
									HX_STACK_LINE(349)
									Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(349)
									{
										HX_STACK_LINE(349)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(349)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(349)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(349)
										Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(349)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(349)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(349)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(349)
										Float value = tmp46;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(349)
										bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(349)
										if ((tmp47)){
											HX_STACK_LINE(349)
											tmp38 = (int)-1;
										}
										else{
											HX_STACK_LINE(349)
											bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(349)
											if ((tmp48)){
												HX_STACK_LINE(349)
												tmp38 = (int)1;
											}
											else{
												HX_STACK_LINE(349)
												tmp38 = value;
											}
										}
									}
									HX_STACK_LINE(349)
									Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(349)
									_x1 = tmp39;
									HX_STACK_LINE(349)
									Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(349)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(349)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(349)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(349)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(349)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(349)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(349)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(349)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(349)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(349)
									Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(349)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(349)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(349)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(349)
									_y1 = tmp53;
									HX_STACK_LINE(349)
									Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(349)
									Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(349)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(349)
									Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(349)
									Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(349)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(349)
									Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(349)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(349)
									Float tmp62 = (sqw - sqx);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(349)
									Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(349)
									Float tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(349)
									Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(349)
									Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(349)
									Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(349)
									_z1 = tmp67;
								}
								else{
									HX_STACK_LINE(349)
									bool tmp38 = (order == (int)3);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(349)
									if ((tmp38)){
										HX_STACK_LINE(349)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(349)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(349)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(349)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(349)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(349)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(349)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(349)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(349)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(349)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(349)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(349)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(349)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(349)
										_x1 = tmp52;
										HX_STACK_LINE(349)
										Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(349)
										{
											HX_STACK_LINE(349)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(349)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(349)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(349)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(349)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(349)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(349)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(349)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(349)
											Float value = tmp61;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(349)
											bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(349)
											if ((tmp62)){
												HX_STACK_LINE(349)
												tmp53 = (int)-1;
											}
											else{
												HX_STACK_LINE(349)
												bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(349)
												if ((tmp63)){
													HX_STACK_LINE(349)
													tmp53 = (int)1;
												}
												else{
													HX_STACK_LINE(349)
													tmp53 = value;
												}
											}
										}
										HX_STACK_LINE(349)
										Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(349)
										_y1 = tmp54;
										HX_STACK_LINE(349)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(349)
										Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(349)
										Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(349)
										Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(349)
										Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(349)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(349)
										Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(349)
										Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(349)
										Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(349)
										Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(349)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(349)
										Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(349)
										Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(349)
										Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(349)
										_z1 = tmp68;
									}
									else{
										HX_STACK_LINE(349)
										bool tmp39 = (order == (int)4);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										if ((tmp39)){
											HX_STACK_LINE(349)
											Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(349)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(349)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(349)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(349)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(349)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(349)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(349)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(349)
											Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(349)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(349)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(349)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(349)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(349)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(349)
											_x1 = tmp53;
											HX_STACK_LINE(349)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(349)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(349)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(349)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(349)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(349)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(349)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(349)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(349)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(349)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(349)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(349)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(349)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(349)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(349)
											_y1 = tmp67;
											HX_STACK_LINE(349)
											Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(349)
											{
												HX_STACK_LINE(349)
												Float tmp69 = this->x;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(349)
												Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(349)
												Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(349)
												Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(349)
												Float tmp73 = this->w;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(349)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(349)
												Float tmp75 = (tmp71 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(349)
												Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(349)
												Float value = tmp76;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(349)
												bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(349)
												if ((tmp77)){
													HX_STACK_LINE(349)
													tmp68 = (int)-1;
												}
												else{
													HX_STACK_LINE(349)
													bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(349)
													if ((tmp78)){
														HX_STACK_LINE(349)
														tmp68 = (int)1;
													}
													else{
														HX_STACK_LINE(349)
														tmp68 = value;
													}
												}
											}
											HX_STACK_LINE(349)
											Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(349)
											_z1 = tmp69;
										}
										else{
											HX_STACK_LINE(349)
											bool tmp40 = (order == (int)5);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(349)
											if ((tmp40)){
												HX_STACK_LINE(349)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(349)
												Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(349)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(349)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(349)
												Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(349)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(349)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(349)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(349)
												Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(349)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(349)
												Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(349)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(349)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(349)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(349)
												_x1 = tmp54;
												HX_STACK_LINE(349)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(349)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(349)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(349)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(349)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(349)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(349)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(349)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(349)
												Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(349)
												Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(349)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(349)
												Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(349)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(349)
												Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(349)
												_y1 = tmp68;
												HX_STACK_LINE(349)
												Float tmp69;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(349)
												{
													HX_STACK_LINE(349)
													Float tmp70 = this->z;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(349)
													Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(349)
													Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(349)
													Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(349)
													Float tmp74 = this->y;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(349)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(349)
													Float tmp76 = (tmp72 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(349)
													Float tmp77 = ((int)2 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(349)
													Float value = tmp77;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(349)
													bool tmp78 = (value < (int)-1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(349)
													if ((tmp78)){
														HX_STACK_LINE(349)
														tmp69 = (int)-1;
													}
													else{
														HX_STACK_LINE(349)
														bool tmp79 = (value > (int)1);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(349)
														if ((tmp79)){
															HX_STACK_LINE(349)
															tmp69 = (int)1;
														}
														else{
															HX_STACK_LINE(349)
															tmp69 = value;
														}
													}
												}
												HX_STACK_LINE(349)
												Float tmp70 = ::Math_obj::asin(tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(349)
												_z1 = tmp70;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(349)
						{
							HX_STACK_LINE(349)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(349)
							_this->ignore_listeners = true;
							HX_STACK_LINE(349)
							{
								HX_STACK_LINE(349)
								_this->x = _x1;
								HX_STACK_LINE(349)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(349)
								if ((tmp36)){
									HX_STACK_LINE(349)
									_this->x;
								}
								else{
									HX_STACK_LINE(349)
									bool tmp37 = (_this->listen_x != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(349)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(349)
									if ((tmp37)){
										HX_STACK_LINE(349)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(349)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(349)
										tmp38 = false;
									}
									HX_STACK_LINE(349)
									if ((tmp38)){
										HX_STACK_LINE(349)
										Float tmp39 = _x1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										_this->listen_x(tmp39);
									}
									HX_STACK_LINE(349)
									_this->x;
								}
							}
							HX_STACK_LINE(349)
							{
								HX_STACK_LINE(349)
								_this->y = _y1;
								HX_STACK_LINE(349)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(349)
								if ((tmp36)){
									HX_STACK_LINE(349)
									_this->y;
								}
								else{
									HX_STACK_LINE(349)
									bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(349)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(349)
									if ((tmp37)){
										HX_STACK_LINE(349)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(349)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(349)
										tmp38 = false;
									}
									HX_STACK_LINE(349)
									if ((tmp38)){
										HX_STACK_LINE(349)
										Float tmp39 = _y1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										_this->listen_y(tmp39);
									}
									HX_STACK_LINE(349)
									_this->y;
								}
							}
							HX_STACK_LINE(349)
							{
								HX_STACK_LINE(349)
								_this->z = _z1;
								HX_STACK_LINE(349)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(349)
								if ((tmp36)){
									HX_STACK_LINE(349)
									_this->z;
								}
								else{
									HX_STACK_LINE(349)
									bool tmp37 = (_this->listen_z != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(349)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(349)
									if ((tmp37)){
										HX_STACK_LINE(349)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(349)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(349)
										tmp38 = false;
									}
									HX_STACK_LINE(349)
									if ((tmp38)){
										HX_STACK_LINE(349)
										Float tmp39 = _z1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(349)
										_this->listen_z(tmp39);
									}
									HX_STACK_LINE(349)
									_this->z;
								}
							}
							HX_STACK_LINE(349)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(349)
							bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(349)
							bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(349)
							if ((tmp36)){
								HX_STACK_LINE(349)
								bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(349)
								bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(349)
								tmp37 = !(tmp39);
							}
							else{
								HX_STACK_LINE(349)
								tmp37 = false;
							}
							HX_STACK_LINE(349)
							if ((tmp37)){
								HX_STACK_LINE(349)
								Float tmp38 = _this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(349)
								_this->listen_x(tmp38);
							}
							HX_STACK_LINE(349)
							bool tmp38 = (_this->listen_y != null());		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(349)
							bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(349)
							if ((tmp38)){
								HX_STACK_LINE(349)
								bool tmp40 = _this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(349)
								bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(349)
								tmp39 = !(tmp41);
							}
							else{
								HX_STACK_LINE(349)
								tmp39 = false;
							}
							HX_STACK_LINE(349)
							if ((tmp39)){
								HX_STACK_LINE(349)
								Float tmp40 = _this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(349)
								_this->listen_y(tmp40);
							}
							HX_STACK_LINE(349)
							bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(349)
							bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(349)
							if ((tmp40)){
								HX_STACK_LINE(349)
								bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(349)
								bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(349)
								tmp41 = !(tmp43);
							}
							else{
								HX_STACK_LINE(349)
								tmp41 = false;
							}
							HX_STACK_LINE(349)
							if ((tmp41)){
								HX_STACK_LINE(349)
								Float tmp42 = _this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(349)
								_this->listen_z(tmp42);
							}
							HX_STACK_LINE(349)
							_this;
						}
						HX_STACK_LINE(349)
						_this;
					}
				}
				HX_STACK_LINE(349)
				Dynamic tmp15 = this->listen_x_dyn();		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(349)
				bool tmp16 = (tmp15 != null());		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(349)
				bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(349)
				if ((tmp16)){
					HX_STACK_LINE(349)
					bool tmp18 = this->ignore_listeners;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(349)
					bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(349)
					bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(349)
					tmp17 = !(tmp20);
				}
				else{
					HX_STACK_LINE(349)
					tmp17 = false;
				}
				HX_STACK_LINE(349)
				if ((tmp17)){
					HX_STACK_LINE(349)
					Float tmp18 = this->x;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(349)
					this->listen_x(tmp18);
				}
				HX_STACK_LINE(349)
				this->x;
			}
		}
		HX_STACK_LINE(350)
		{
			HX_STACK_LINE(350)
			Float tmp12 = _qb->y;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(350)
			Float tmp13 = -(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(350)
			this->y = tmp13;
			HX_STACK_LINE(350)
			bool tmp14 = this->_construct;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(350)
			if ((tmp14)){
				HX_STACK_LINE(350)
				this->y;
			}
			else{
				HX_STACK_LINE(350)
				{
					HX_STACK_LINE(350)
					::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(350)
					bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(350)
					bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(350)
					bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(350)
					bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(350)
					if ((tmp18)){
						HX_STACK_LINE(350)
						tmp19 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(350)
						tmp19 = true;
					}
					HX_STACK_LINE(350)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(350)
					bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(350)
					if ((tmp20)){
						HX_STACK_LINE(350)
						tmp21 = this->_construct;
					}
					else{
						HX_STACK_LINE(350)
						tmp21 = true;
					}
					HX_STACK_LINE(350)
					if ((tmp21)){
						HX_STACK_LINE(350)
						Dynamic();
					}
					else{
						HX_STACK_LINE(350)
						::phoenix::Vector tmp22 = this->euler;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(350)
						::phoenix::Vector _this = tmp22;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(350)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(350)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(350)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(350)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(350)
						Float sqx = tmp25;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(350)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(350)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(350)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(350)
						Float sqy = tmp28;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(350)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(350)
						Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(350)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(350)
						Float sqz = tmp31;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(350)
						Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(350)
						Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(350)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(350)
						Float sqw = tmp34;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(350)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(350)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(350)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(350)
						bool tmp35 = (order == (int)0);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(350)
						if ((tmp35)){
							HX_STACK_LINE(350)
							Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(350)
							Float tmp37 = this->w;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(350)
							Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(350)
							Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(350)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(350)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(350)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(350)
							Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(350)
							Float tmp44 = (sqw - sqx);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(350)
							Float tmp45 = sqy;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(350)
							Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(350)
							Float tmp47 = sqz;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(350)
							Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(350)
							Float tmp49 = ::Math_obj::atan2(tmp43,tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(350)
							_x1 = tmp49;
							HX_STACK_LINE(350)
							Float tmp50;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(350)
							{
								HX_STACK_LINE(350)
								Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(350)
								Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(350)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(350)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(350)
								Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(350)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(350)
								Float tmp57 = (tmp53 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(350)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(350)
								Float value = tmp58;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(350)
								bool tmp59 = (value < (int)-1);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(350)
								if ((tmp59)){
									HX_STACK_LINE(350)
									tmp50 = (int)-1;
								}
								else{
									HX_STACK_LINE(350)
									bool tmp60 = (value > (int)1);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(350)
									if ((tmp60)){
										HX_STACK_LINE(350)
										tmp50 = (int)1;
									}
									else{
										HX_STACK_LINE(350)
										tmp50 = value;
									}
								}
							}
							HX_STACK_LINE(350)
							Float tmp51 = ::Math_obj::asin(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(350)
							_y1 = tmp51;
							HX_STACK_LINE(350)
							Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(350)
							Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(350)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(350)
							Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(350)
							Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(350)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(350)
							Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(350)
							Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(350)
							Float tmp60 = (sqw + sqx);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(350)
							Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(350)
							Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(350)
							Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(350)
							Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(350)
							Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(350)
							_z1 = tmp65;
						}
						else{
							HX_STACK_LINE(350)
							bool tmp36 = (order == (int)1);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(350)
							if ((tmp36)){
								HX_STACK_LINE(350)
								Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(350)
								{
									HX_STACK_LINE(350)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(350)
									Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(350)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(350)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(350)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(350)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(350)
									Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(350)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(350)
									Float value = tmp45;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(350)
									bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(350)
									if ((tmp46)){
										HX_STACK_LINE(350)
										tmp37 = (int)-1;
									}
									else{
										HX_STACK_LINE(350)
										bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(350)
										if ((tmp47)){
											HX_STACK_LINE(350)
											tmp37 = (int)1;
										}
										else{
											HX_STACK_LINE(350)
											tmp37 = value;
										}
									}
								}
								HX_STACK_LINE(350)
								Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(350)
								_x1 = tmp38;
								HX_STACK_LINE(350)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(350)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(350)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(350)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(350)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(350)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(350)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(350)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(350)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(350)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(350)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(350)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(350)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(350)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(350)
								_y1 = tmp52;
								HX_STACK_LINE(350)
								Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(350)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(350)
								Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(350)
								Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(350)
								Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(350)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(350)
								Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(350)
								Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(350)
								Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(350)
								Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(350)
								Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(350)
								Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(350)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(350)
								Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(350)
								_z1 = tmp66;
							}
							else{
								HX_STACK_LINE(350)
								bool tmp37 = (order == (int)2);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(350)
								if ((tmp37)){
									HX_STACK_LINE(350)
									Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(350)
									{
										HX_STACK_LINE(350)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(350)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(350)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(350)
										Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(350)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(350)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(350)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(350)
										Float value = tmp46;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(350)
										bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(350)
										if ((tmp47)){
											HX_STACK_LINE(350)
											tmp38 = (int)-1;
										}
										else{
											HX_STACK_LINE(350)
											bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(350)
											if ((tmp48)){
												HX_STACK_LINE(350)
												tmp38 = (int)1;
											}
											else{
												HX_STACK_LINE(350)
												tmp38 = value;
											}
										}
									}
									HX_STACK_LINE(350)
									Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(350)
									_x1 = tmp39;
									HX_STACK_LINE(350)
									Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(350)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(350)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(350)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(350)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(350)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(350)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(350)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(350)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(350)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(350)
									Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(350)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(350)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(350)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(350)
									_y1 = tmp53;
									HX_STACK_LINE(350)
									Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(350)
									Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(350)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(350)
									Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(350)
									Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(350)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(350)
									Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(350)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(350)
									Float tmp62 = (sqw - sqx);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(350)
									Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(350)
									Float tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(350)
									Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(350)
									Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(350)
									Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(350)
									_z1 = tmp67;
								}
								else{
									HX_STACK_LINE(350)
									bool tmp38 = (order == (int)3);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(350)
									if ((tmp38)){
										HX_STACK_LINE(350)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(350)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(350)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(350)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(350)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(350)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(350)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(350)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(350)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(350)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(350)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(350)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(350)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(350)
										_x1 = tmp52;
										HX_STACK_LINE(350)
										Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(350)
										{
											HX_STACK_LINE(350)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(350)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(350)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(350)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(350)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(350)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(350)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(350)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(350)
											Float value = tmp61;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(350)
											bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(350)
											if ((tmp62)){
												HX_STACK_LINE(350)
												tmp53 = (int)-1;
											}
											else{
												HX_STACK_LINE(350)
												bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(350)
												if ((tmp63)){
													HX_STACK_LINE(350)
													tmp53 = (int)1;
												}
												else{
													HX_STACK_LINE(350)
													tmp53 = value;
												}
											}
										}
										HX_STACK_LINE(350)
										Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(350)
										_y1 = tmp54;
										HX_STACK_LINE(350)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(350)
										Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(350)
										Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(350)
										Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(350)
										Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(350)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(350)
										Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(350)
										Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(350)
										Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(350)
										Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(350)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(350)
										Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(350)
										Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(350)
										Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(350)
										_z1 = tmp68;
									}
									else{
										HX_STACK_LINE(350)
										bool tmp39 = (order == (int)4);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										if ((tmp39)){
											HX_STACK_LINE(350)
											Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(350)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(350)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(350)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(350)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(350)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(350)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(350)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(350)
											Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(350)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(350)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(350)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(350)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(350)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(350)
											_x1 = tmp53;
											HX_STACK_LINE(350)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(350)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(350)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(350)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(350)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(350)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(350)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(350)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(350)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(350)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(350)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(350)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(350)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(350)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(350)
											_y1 = tmp67;
											HX_STACK_LINE(350)
											Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(350)
											{
												HX_STACK_LINE(350)
												Float tmp69 = this->x;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(350)
												Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(350)
												Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(350)
												Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(350)
												Float tmp73 = this->w;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(350)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(350)
												Float tmp75 = (tmp71 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(350)
												Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(350)
												Float value = tmp76;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(350)
												bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(350)
												if ((tmp77)){
													HX_STACK_LINE(350)
													tmp68 = (int)-1;
												}
												else{
													HX_STACK_LINE(350)
													bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(350)
													if ((tmp78)){
														HX_STACK_LINE(350)
														tmp68 = (int)1;
													}
													else{
														HX_STACK_LINE(350)
														tmp68 = value;
													}
												}
											}
											HX_STACK_LINE(350)
											Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(350)
											_z1 = tmp69;
										}
										else{
											HX_STACK_LINE(350)
											bool tmp40 = (order == (int)5);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(350)
											if ((tmp40)){
												HX_STACK_LINE(350)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(350)
												Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(350)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(350)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(350)
												Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(350)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(350)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(350)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(350)
												Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(350)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(350)
												Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(350)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(350)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(350)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(350)
												_x1 = tmp54;
												HX_STACK_LINE(350)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(350)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(350)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(350)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(350)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(350)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(350)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(350)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(350)
												Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(350)
												Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(350)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(350)
												Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(350)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(350)
												Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(350)
												_y1 = tmp68;
												HX_STACK_LINE(350)
												Float tmp69;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(350)
												{
													HX_STACK_LINE(350)
													Float tmp70 = this->z;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(350)
													Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(350)
													Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(350)
													Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(350)
													Float tmp74 = this->y;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(350)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(350)
													Float tmp76 = (tmp72 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(350)
													Float tmp77 = ((int)2 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(350)
													Float value = tmp77;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(350)
													bool tmp78 = (value < (int)-1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(350)
													if ((tmp78)){
														HX_STACK_LINE(350)
														tmp69 = (int)-1;
													}
													else{
														HX_STACK_LINE(350)
														bool tmp79 = (value > (int)1);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(350)
														if ((tmp79)){
															HX_STACK_LINE(350)
															tmp69 = (int)1;
														}
														else{
															HX_STACK_LINE(350)
															tmp69 = value;
														}
													}
												}
												HX_STACK_LINE(350)
												Float tmp70 = ::Math_obj::asin(tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(350)
												_z1 = tmp70;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(350)
						{
							HX_STACK_LINE(350)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(350)
							_this->ignore_listeners = true;
							HX_STACK_LINE(350)
							{
								HX_STACK_LINE(350)
								_this->x = _x1;
								HX_STACK_LINE(350)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(350)
								if ((tmp36)){
									HX_STACK_LINE(350)
									_this->x;
								}
								else{
									HX_STACK_LINE(350)
									bool tmp37 = (_this->listen_x != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(350)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(350)
									if ((tmp37)){
										HX_STACK_LINE(350)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(350)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(350)
										tmp38 = false;
									}
									HX_STACK_LINE(350)
									if ((tmp38)){
										HX_STACK_LINE(350)
										Float tmp39 = _x1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										_this->listen_x(tmp39);
									}
									HX_STACK_LINE(350)
									_this->x;
								}
							}
							HX_STACK_LINE(350)
							{
								HX_STACK_LINE(350)
								_this->y = _y1;
								HX_STACK_LINE(350)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(350)
								if ((tmp36)){
									HX_STACK_LINE(350)
									_this->y;
								}
								else{
									HX_STACK_LINE(350)
									bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(350)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(350)
									if ((tmp37)){
										HX_STACK_LINE(350)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(350)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(350)
										tmp38 = false;
									}
									HX_STACK_LINE(350)
									if ((tmp38)){
										HX_STACK_LINE(350)
										Float tmp39 = _y1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										_this->listen_y(tmp39);
									}
									HX_STACK_LINE(350)
									_this->y;
								}
							}
							HX_STACK_LINE(350)
							{
								HX_STACK_LINE(350)
								_this->z = _z1;
								HX_STACK_LINE(350)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(350)
								if ((tmp36)){
									HX_STACK_LINE(350)
									_this->z;
								}
								else{
									HX_STACK_LINE(350)
									bool tmp37 = (_this->listen_z != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(350)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(350)
									if ((tmp37)){
										HX_STACK_LINE(350)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(350)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(350)
										tmp38 = false;
									}
									HX_STACK_LINE(350)
									if ((tmp38)){
										HX_STACK_LINE(350)
										Float tmp39 = _z1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(350)
										_this->listen_z(tmp39);
									}
									HX_STACK_LINE(350)
									_this->z;
								}
							}
							HX_STACK_LINE(350)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(350)
							bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(350)
							bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(350)
							if ((tmp36)){
								HX_STACK_LINE(350)
								bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(350)
								bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(350)
								tmp37 = !(tmp39);
							}
							else{
								HX_STACK_LINE(350)
								tmp37 = false;
							}
							HX_STACK_LINE(350)
							if ((tmp37)){
								HX_STACK_LINE(350)
								Float tmp38 = _this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(350)
								_this->listen_x(tmp38);
							}
							HX_STACK_LINE(350)
							bool tmp38 = (_this->listen_y != null());		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(350)
							bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(350)
							if ((tmp38)){
								HX_STACK_LINE(350)
								bool tmp40 = _this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(350)
								bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(350)
								tmp39 = !(tmp41);
							}
							else{
								HX_STACK_LINE(350)
								tmp39 = false;
							}
							HX_STACK_LINE(350)
							if ((tmp39)){
								HX_STACK_LINE(350)
								Float tmp40 = _this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(350)
								_this->listen_y(tmp40);
							}
							HX_STACK_LINE(350)
							bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(350)
							bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(350)
							if ((tmp40)){
								HX_STACK_LINE(350)
								bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(350)
								bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(350)
								tmp41 = !(tmp43);
							}
							else{
								HX_STACK_LINE(350)
								tmp41 = false;
							}
							HX_STACK_LINE(350)
							if ((tmp41)){
								HX_STACK_LINE(350)
								Float tmp42 = _this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(350)
								_this->listen_z(tmp42);
							}
							HX_STACK_LINE(350)
							_this;
						}
						HX_STACK_LINE(350)
						_this;
					}
				}
				HX_STACK_LINE(350)
				Dynamic tmp15 = this->listen_y_dyn();		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(350)
				bool tmp16 = (tmp15 != null());		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(350)
				bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(350)
				if ((tmp16)){
					HX_STACK_LINE(350)
					bool tmp18 = this->ignore_listeners;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(350)
					bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(350)
					bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(350)
					tmp17 = !(tmp20);
				}
				else{
					HX_STACK_LINE(350)
					tmp17 = false;
				}
				HX_STACK_LINE(350)
				if ((tmp17)){
					HX_STACK_LINE(350)
					Float tmp18 = this->y;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(350)
					this->listen_y(tmp18);
				}
				HX_STACK_LINE(350)
				this->y;
			}
		}
		HX_STACK_LINE(351)
		{
			HX_STACK_LINE(351)
			Float tmp12 = _qb->z;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(351)
			Float tmp13 = -(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(351)
			this->z = tmp13;
			HX_STACK_LINE(351)
			bool tmp14 = this->_construct;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(351)
			if ((tmp14)){
				HX_STACK_LINE(351)
				this->z;
			}
			else{
				HX_STACK_LINE(351)
				{
					HX_STACK_LINE(351)
					::phoenix::Vector tmp15 = this->euler;		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(351)
					bool tmp16 = (tmp15 == null());		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(351)
					bool tmp17 = !(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(351)
					bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(351)
					bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(351)
					if ((tmp18)){
						HX_STACK_LINE(351)
						tmp19 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(351)
						tmp19 = true;
					}
					HX_STACK_LINE(351)
					bool tmp20 = !(tmp19);		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(351)
					bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(351)
					if ((tmp20)){
						HX_STACK_LINE(351)
						tmp21 = this->_construct;
					}
					else{
						HX_STACK_LINE(351)
						tmp21 = true;
					}
					HX_STACK_LINE(351)
					if ((tmp21)){
						HX_STACK_LINE(351)
						Dynamic();
					}
					else{
						HX_STACK_LINE(351)
						::phoenix::Vector tmp22 = this->euler;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(351)
						::phoenix::Vector _this = tmp22;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(351)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(351)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(351)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(351)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(351)
						Float sqx = tmp25;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(351)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(351)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(351)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(351)
						Float sqy = tmp28;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(351)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(351)
						Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(351)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(351)
						Float sqz = tmp31;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(351)
						Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(351)
						Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(351)
						Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(351)
						Float sqw = tmp34;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(351)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(351)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(351)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(351)
						bool tmp35 = (order == (int)0);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(351)
						if ((tmp35)){
							HX_STACK_LINE(351)
							Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(351)
							Float tmp37 = this->w;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(351)
							Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(351)
							Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(351)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(351)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(351)
							Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(351)
							Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(351)
							Float tmp44 = (sqw - sqx);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(351)
							Float tmp45 = sqy;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(351)
							Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(351)
							Float tmp47 = sqz;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(351)
							Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(351)
							Float tmp49 = ::Math_obj::atan2(tmp43,tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(351)
							_x1 = tmp49;
							HX_STACK_LINE(351)
							Float tmp50;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(351)
							{
								HX_STACK_LINE(351)
								Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(351)
								Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(351)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(351)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(351)
								Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(351)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(351)
								Float tmp57 = (tmp53 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(351)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(351)
								Float value = tmp58;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(351)
								bool tmp59 = (value < (int)-1);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(351)
								if ((tmp59)){
									HX_STACK_LINE(351)
									tmp50 = (int)-1;
								}
								else{
									HX_STACK_LINE(351)
									bool tmp60 = (value > (int)1);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(351)
									if ((tmp60)){
										HX_STACK_LINE(351)
										tmp50 = (int)1;
									}
									else{
										HX_STACK_LINE(351)
										tmp50 = value;
									}
								}
							}
							HX_STACK_LINE(351)
							Float tmp51 = ::Math_obj::asin(tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(351)
							_y1 = tmp51;
							HX_STACK_LINE(351)
							Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(351)
							Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(351)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(351)
							Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(351)
							Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(351)
							Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(351)
							Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(351)
							Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(351)
							Float tmp60 = (sqw + sqx);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(351)
							Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(351)
							Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(351)
							Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(351)
							Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(351)
							Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(351)
							_z1 = tmp65;
						}
						else{
							HX_STACK_LINE(351)
							bool tmp36 = (order == (int)1);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(351)
							if ((tmp36)){
								HX_STACK_LINE(351)
								Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(351)
								{
									HX_STACK_LINE(351)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(351)
									Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(351)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(351)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(351)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(351)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(351)
									Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(351)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(351)
									Float value = tmp45;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(351)
									bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(351)
									if ((tmp46)){
										HX_STACK_LINE(351)
										tmp37 = (int)-1;
									}
									else{
										HX_STACK_LINE(351)
										bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(351)
										if ((tmp47)){
											HX_STACK_LINE(351)
											tmp37 = (int)1;
										}
										else{
											HX_STACK_LINE(351)
											tmp37 = value;
										}
									}
								}
								HX_STACK_LINE(351)
								Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(351)
								_x1 = tmp38;
								HX_STACK_LINE(351)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(351)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(351)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(351)
								Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(351)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(351)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(351)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(351)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(351)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(351)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(351)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(351)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(351)
								Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(351)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(351)
								_y1 = tmp52;
								HX_STACK_LINE(351)
								Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(351)
								Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(351)
								Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(351)
								Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(351)
								Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(351)
								Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(351)
								Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(351)
								Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(351)
								Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(351)
								Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(351)
								Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(351)
								Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(351)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(351)
								Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(351)
								_z1 = tmp66;
							}
							else{
								HX_STACK_LINE(351)
								bool tmp37 = (order == (int)2);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(351)
								if ((tmp37)){
									HX_STACK_LINE(351)
									Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(351)
									{
										HX_STACK_LINE(351)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(351)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(351)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(351)
										Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(351)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(351)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(351)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(351)
										Float value = tmp46;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(351)
										bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(351)
										if ((tmp47)){
											HX_STACK_LINE(351)
											tmp38 = (int)-1;
										}
										else{
											HX_STACK_LINE(351)
											bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(351)
											if ((tmp48)){
												HX_STACK_LINE(351)
												tmp38 = (int)1;
											}
											else{
												HX_STACK_LINE(351)
												tmp38 = value;
											}
										}
									}
									HX_STACK_LINE(351)
									Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(351)
									_x1 = tmp39;
									HX_STACK_LINE(351)
									Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(351)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(351)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(351)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(351)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(351)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(351)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(351)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(351)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(351)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(351)
									Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(351)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(351)
									Float tmp52 = (tmp50 + tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(351)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(351)
									_y1 = tmp53;
									HX_STACK_LINE(351)
									Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(351)
									Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(351)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(351)
									Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(351)
									Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(351)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(351)
									Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(351)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(351)
									Float tmp62 = (sqw - sqx);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(351)
									Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(351)
									Float tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(351)
									Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(351)
									Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(351)
									Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(351)
									_z1 = tmp67;
								}
								else{
									HX_STACK_LINE(351)
									bool tmp38 = (order == (int)3);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(351)
									if ((tmp38)){
										HX_STACK_LINE(351)
										Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(351)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(351)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(351)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(351)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(351)
										Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(351)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(351)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(351)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(351)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(351)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(351)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(351)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(351)
										_x1 = tmp52;
										HX_STACK_LINE(351)
										Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(351)
										{
											HX_STACK_LINE(351)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(351)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(351)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(351)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(351)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(351)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(351)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(351)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(351)
											Float value = tmp61;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(351)
											bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(351)
											if ((tmp62)){
												HX_STACK_LINE(351)
												tmp53 = (int)-1;
											}
											else{
												HX_STACK_LINE(351)
												bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(351)
												if ((tmp63)){
													HX_STACK_LINE(351)
													tmp53 = (int)1;
												}
												else{
													HX_STACK_LINE(351)
													tmp53 = value;
												}
											}
										}
										HX_STACK_LINE(351)
										Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(351)
										_y1 = tmp54;
										HX_STACK_LINE(351)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(351)
										Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(351)
										Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(351)
										Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(351)
										Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(351)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(351)
										Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(351)
										Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(351)
										Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(351)
										Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(351)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(351)
										Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(351)
										Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(351)
										Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(351)
										_z1 = tmp68;
									}
									else{
										HX_STACK_LINE(351)
										bool tmp39 = (order == (int)4);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										if ((tmp39)){
											HX_STACK_LINE(351)
											Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(351)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(351)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(351)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(351)
											Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(351)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(351)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(351)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(351)
											Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(351)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(351)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(351)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(351)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(351)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(351)
											_x1 = tmp53;
											HX_STACK_LINE(351)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(351)
											Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(351)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(351)
											Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(351)
											Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(351)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(351)
											Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(351)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(351)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(351)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(351)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(351)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(351)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(351)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(351)
											_y1 = tmp67;
											HX_STACK_LINE(351)
											Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(351)
											{
												HX_STACK_LINE(351)
												Float tmp69 = this->x;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(351)
												Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(351)
												Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(351)
												Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(351)
												Float tmp73 = this->w;		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(351)
												Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(351)
												Float tmp75 = (tmp71 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(351)
												Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(351)
												Float value = tmp76;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(351)
												bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(351)
												if ((tmp77)){
													HX_STACK_LINE(351)
													tmp68 = (int)-1;
												}
												else{
													HX_STACK_LINE(351)
													bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(351)
													if ((tmp78)){
														HX_STACK_LINE(351)
														tmp68 = (int)1;
													}
													else{
														HX_STACK_LINE(351)
														tmp68 = value;
													}
												}
											}
											HX_STACK_LINE(351)
											Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(351)
											_z1 = tmp69;
										}
										else{
											HX_STACK_LINE(351)
											bool tmp40 = (order == (int)5);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(351)
											if ((tmp40)){
												HX_STACK_LINE(351)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(351)
												Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(351)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(351)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(351)
												Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(351)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(351)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(351)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(351)
												Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(351)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(351)
												Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(351)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(351)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(351)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(351)
												_x1 = tmp54;
												HX_STACK_LINE(351)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(351)
												Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(351)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(351)
												Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(351)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(351)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(351)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(351)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(351)
												Float tmp63 = (sqw + sqx);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(351)
												Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(351)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(351)
												Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(351)
												Float tmp67 = (tmp65 - tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(351)
												Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(351)
												_y1 = tmp68;
												HX_STACK_LINE(351)
												Float tmp69;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(351)
												{
													HX_STACK_LINE(351)
													Float tmp70 = this->z;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(351)
													Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(351)
													Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(351)
													Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(351)
													Float tmp74 = this->y;		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(351)
													Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(351)
													Float tmp76 = (tmp72 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(351)
													Float tmp77 = ((int)2 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(351)
													Float value = tmp77;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(351)
													bool tmp78 = (value < (int)-1);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(351)
													if ((tmp78)){
														HX_STACK_LINE(351)
														tmp69 = (int)-1;
													}
													else{
														HX_STACK_LINE(351)
														bool tmp79 = (value > (int)1);		HX_STACK_VAR(tmp79,"tmp79");
														HX_STACK_LINE(351)
														if ((tmp79)){
															HX_STACK_LINE(351)
															tmp69 = (int)1;
														}
														else{
															HX_STACK_LINE(351)
															tmp69 = value;
														}
													}
												}
												HX_STACK_LINE(351)
												Float tmp70 = ::Math_obj::asin(tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(351)
												_z1 = tmp70;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(351)
						{
							HX_STACK_LINE(351)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(351)
							_this->ignore_listeners = true;
							HX_STACK_LINE(351)
							{
								HX_STACK_LINE(351)
								_this->x = _x1;
								HX_STACK_LINE(351)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(351)
								if ((tmp36)){
									HX_STACK_LINE(351)
									_this->x;
								}
								else{
									HX_STACK_LINE(351)
									bool tmp37 = (_this->listen_x != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(351)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(351)
									if ((tmp37)){
										HX_STACK_LINE(351)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(351)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(351)
										tmp38 = false;
									}
									HX_STACK_LINE(351)
									if ((tmp38)){
										HX_STACK_LINE(351)
										Float tmp39 = _x1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										_this->listen_x(tmp39);
									}
									HX_STACK_LINE(351)
									_this->x;
								}
							}
							HX_STACK_LINE(351)
							{
								HX_STACK_LINE(351)
								_this->y = _y1;
								HX_STACK_LINE(351)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(351)
								if ((tmp36)){
									HX_STACK_LINE(351)
									_this->y;
								}
								else{
									HX_STACK_LINE(351)
									bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(351)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(351)
									if ((tmp37)){
										HX_STACK_LINE(351)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(351)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(351)
										tmp38 = false;
									}
									HX_STACK_LINE(351)
									if ((tmp38)){
										HX_STACK_LINE(351)
										Float tmp39 = _y1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										_this->listen_y(tmp39);
									}
									HX_STACK_LINE(351)
									_this->y;
								}
							}
							HX_STACK_LINE(351)
							{
								HX_STACK_LINE(351)
								_this->z = _z1;
								HX_STACK_LINE(351)
								bool tmp36 = _this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(351)
								if ((tmp36)){
									HX_STACK_LINE(351)
									_this->z;
								}
								else{
									HX_STACK_LINE(351)
									bool tmp37 = (_this->listen_z != null());		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(351)
									bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(351)
									if ((tmp37)){
										HX_STACK_LINE(351)
										bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(351)
										tmp38 = !(tmp40);
									}
									else{
										HX_STACK_LINE(351)
										tmp38 = false;
									}
									HX_STACK_LINE(351)
									if ((tmp38)){
										HX_STACK_LINE(351)
										Float tmp39 = _z1;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(351)
										_this->listen_z(tmp39);
									}
									HX_STACK_LINE(351)
									_this->z;
								}
							}
							HX_STACK_LINE(351)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(351)
							bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(351)
							bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(351)
							if ((tmp36)){
								HX_STACK_LINE(351)
								bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(351)
								bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(351)
								tmp37 = !(tmp39);
							}
							else{
								HX_STACK_LINE(351)
								tmp37 = false;
							}
							HX_STACK_LINE(351)
							if ((tmp37)){
								HX_STACK_LINE(351)
								Float tmp38 = _this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(351)
								_this->listen_x(tmp38);
							}
							HX_STACK_LINE(351)
							bool tmp38 = (_this->listen_y != null());		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(351)
							bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(351)
							if ((tmp38)){
								HX_STACK_LINE(351)
								bool tmp40 = _this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(351)
								bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(351)
								tmp39 = !(tmp41);
							}
							else{
								HX_STACK_LINE(351)
								tmp39 = false;
							}
							HX_STACK_LINE(351)
							if ((tmp39)){
								HX_STACK_LINE(351)
								Float tmp40 = _this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(351)
								_this->listen_y(tmp40);
							}
							HX_STACK_LINE(351)
							bool tmp40 = (_this->listen_z != null());		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(351)
							bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(351)
							if ((tmp40)){
								HX_STACK_LINE(351)
								bool tmp42 = _this->ignore_listeners;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(351)
								bool tmp43 = tmp42;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(351)
								tmp41 = !(tmp43);
							}
							else{
								HX_STACK_LINE(351)
								tmp41 = false;
							}
							HX_STACK_LINE(351)
							if ((tmp41)){
								HX_STACK_LINE(351)
								Float tmp42 = _this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(351)
								_this->listen_z(tmp42);
							}
							HX_STACK_LINE(351)
							_this;
						}
						HX_STACK_LINE(351)
						_this;
					}
				}
				HX_STACK_LINE(351)
				Dynamic tmp15 = this->listen_z_dyn();		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(351)
				bool tmp16 = (tmp15 != null());		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(351)
				bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(351)
				if ((tmp16)){
					HX_STACK_LINE(351)
					bool tmp18 = this->ignore_listeners;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(351)
					bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(351)
					bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(351)
					tmp17 = !(tmp20);
				}
				else{
					HX_STACK_LINE(351)
					tmp17 = false;
				}
				HX_STACK_LINE(351)
				if ((tmp17)){
					HX_STACK_LINE(351)
					Float tmp18 = this->z;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(351)
					this->listen_z(tmp18);
				}
				HX_STACK_LINE(351)
				this->z;
			}
		}
		HX_STACK_LINE(353)
		Float tmp12 = cosHalfTheta;		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(353)
		Float tmp13 = -(tmp12);		HX_STACK_VAR(tmp13,"tmp13");
		HX_STACK_LINE(353)
		cosHalfTheta = tmp13;
	}
	else{
		HX_STACK_LINE(357)
		::phoenix::Quaternion tmp12 = _qb;		HX_STACK_VAR(tmp12,"tmp12");
		HX_STACK_LINE(357)
		this->copy(tmp12);
	}
	HX_STACK_LINE(361)
	bool tmp12 = (cosHalfTheta >= ((Float)1.0));		HX_STACK_VAR(tmp12,"tmp12");
	HX_STACK_LINE(361)
	if ((tmp12)){
		HX_STACK_LINE(363)
		{
			HX_STACK_LINE(363)
			this->ignore_euler = true;
			HX_STACK_LINE(363)
			{
				HX_STACK_LINE(363)
				this->x = _x;
				HX_STACK_LINE(363)
				bool tmp13 = this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(363)
				if ((tmp13)){
					HX_STACK_LINE(363)
					this->x;
				}
				else{
					HX_STACK_LINE(363)
					{
						HX_STACK_LINE(363)
						::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(363)
						bool tmp15 = (tmp14 == null());		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(363)
						bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(363)
						bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						if ((tmp17)){
							HX_STACK_LINE(363)
							tmp18 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(363)
							tmp18 = true;
						}
						HX_STACK_LINE(363)
						bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(363)
						if ((tmp19)){
							HX_STACK_LINE(363)
							tmp20 = this->_construct;
						}
						else{
							HX_STACK_LINE(363)
							tmp20 = true;
						}
						HX_STACK_LINE(363)
						if ((tmp20)){
							HX_STACK_LINE(363)
							Dynamic();
						}
						else{
							HX_STACK_LINE(363)
							::phoenix::Vector tmp21 = this->euler;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(363)
							::phoenix::Vector _this = tmp21;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(363)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(363)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(363)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(363)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(363)
							Float sqx = tmp24;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(363)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(363)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(363)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(363)
							Float sqy = tmp27;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(363)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(363)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(363)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(363)
							Float sqz = tmp30;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(363)
							Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(363)
							Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(363)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(363)
							Float sqw = tmp33;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(363)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(363)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(363)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(363)
							bool tmp34 = (order == (int)0);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(363)
							if ((tmp34)){
								HX_STACK_LINE(363)
								Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(363)
								Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(363)
								Float tmp43 = (sqw - sqx);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(363)
								Float tmp44 = sqy;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(363)
								Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(363)
								Float tmp46 = sqz;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(363)
								Float tmp47 = (tmp45 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(363)
								Float tmp48 = ::Math_obj::atan2(tmp42,tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(363)
								_x1 = tmp48;
								HX_STACK_LINE(363)
								Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float value = tmp57;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(363)
									bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									if ((tmp58)){
										HX_STACK_LINE(363)
										tmp49 = (int)-1;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										if ((tmp59)){
											HX_STACK_LINE(363)
											tmp49 = (int)1;
										}
										else{
											HX_STACK_LINE(363)
											tmp49 = value;
										}
									}
								}
								HX_STACK_LINE(363)
								Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(363)
								_y1 = tmp50;
								HX_STACK_LINE(363)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(363)
								Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(363)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(363)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(363)
								Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(363)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(363)
								Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(363)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(363)
								Float tmp59 = (sqw + sqx);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(363)
								Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(363)
								Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(363)
								Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(363)
								Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(363)
								Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(363)
								_z1 = tmp64;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp35 = (order == (int)1);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									{
										HX_STACK_LINE(363)
										Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float value = tmp44;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(363)
										bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										if ((tmp45)){
											HX_STACK_LINE(363)
											tmp36 = (int)-1;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp36 = (int)1;
											}
											else{
												HX_STACK_LINE(363)
												tmp36 = value;
											}
										}
									}
									HX_STACK_LINE(363)
									Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_x1 = tmp37;
									HX_STACK_LINE(363)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(363)
									Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(363)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(363)
									Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(363)
									Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(363)
									Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(363)
									Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(363)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									_y1 = tmp51;
									HX_STACK_LINE(363)
									Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(363)
									Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(363)
									Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(363)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(363)
									Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(363)
									Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(363)
									Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(363)
									_z1 = tmp65;
								}
								else{
									HX_STACK_LINE(363)
									bool tmp36 = (order == (int)2);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									if ((tmp36)){
										HX_STACK_LINE(363)
										Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										{
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float value = tmp45;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(363)
											bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp37 = (int)-1;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												if ((tmp47)){
													HX_STACK_LINE(363)
													tmp37 = (int)1;
												}
												else{
													HX_STACK_LINE(363)
													tmp37 = value;
												}
											}
										}
										HX_STACK_LINE(363)
										Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										_x1 = tmp38;
										HX_STACK_LINE(363)
										Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(363)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(363)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(363)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(363)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(363)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(363)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(363)
										_y1 = tmp52;
										HX_STACK_LINE(363)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(363)
										Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(363)
										Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(363)
										Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(363)
										Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(363)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(363)
										Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(363)
										Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(363)
										Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(363)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(363)
										Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(363)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(363)
										Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(363)
										_z1 = tmp66;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp37 = (order == (int)3);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(363)
											Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(363)
											Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(363)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(363)
											Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(363)
											_x1 = tmp51;
											HX_STACK_LINE(363)
											Float tmp52;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(363)
											{
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float value = tmp60;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(363)
												bool tmp61 = (value < (int)-1);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												if ((tmp61)){
													HX_STACK_LINE(363)
													tmp52 = (int)-1;
												}
												else{
													HX_STACK_LINE(363)
													bool tmp62 = (value > (int)1);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													if ((tmp62)){
														HX_STACK_LINE(363)
														tmp52 = (int)1;
													}
													else{
														HX_STACK_LINE(363)
														tmp52 = value;
													}
												}
											}
											HX_STACK_LINE(363)
											Float tmp53 = ::Math_obj::asin(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(363)
											_y1 = tmp53;
											HX_STACK_LINE(363)
											Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(363)
											Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(363)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(363)
											Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(363)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(363)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(363)
											Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(363)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(363)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(363)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(363)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(363)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(363)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(363)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(363)
											_z1 = tmp67;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp38 = (order == (int)4);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											if ((tmp38)){
												HX_STACK_LINE(363)
												Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(363)
												Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(363)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(363)
												Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(363)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(363)
												Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(363)
												Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(363)
												Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(363)
												Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(363)
												Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(363)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(363)
												Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(363)
												_x1 = tmp52;
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float tmp61 = (sqw + sqx);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(363)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(363)
												Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(363)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(363)
												Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(363)
												_y1 = tmp66;
												HX_STACK_LINE(363)
												Float tmp67;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(363)
												{
													HX_STACK_LINE(363)
													Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(363)
													Float tmp71 = this->z;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(363)
													Float tmp72 = this->w;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(363)
													Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(363)
													Float tmp74 = (tmp70 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(363)
													Float tmp75 = ((int)2 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(363)
													Float value = tmp75;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(363)
													bool tmp76 = (value < (int)-1);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(363)
													if ((tmp76)){
														HX_STACK_LINE(363)
														tmp67 = (int)-1;
													}
													else{
														HX_STACK_LINE(363)
														bool tmp77 = (value > (int)1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp67 = (int)1;
														}
														else{
															HX_STACK_LINE(363)
															tmp67 = value;
														}
													}
												}
												HX_STACK_LINE(363)
												Float tmp68 = ::Math_obj::asin(tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(363)
												_z1 = tmp68;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp39 = (order == (int)5);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												if ((tmp39)){
													HX_STACK_LINE(363)
													Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(363)
													Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(363)
													Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(363)
													Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(363)
													Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(363)
													Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(363)
													Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(363)
													Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(363)
													Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(363)
													Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(363)
													Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(363)
													Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(363)
													Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(363)
													Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(363)
													_x1 = tmp53;
													HX_STACK_LINE(363)
													Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(363)
													Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(363)
													Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(363)
													Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(363)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(363)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(363)
													Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(363)
													Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(363)
													Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(363)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(363)
													Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(363)
													Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(363)
													Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(363)
													_y1 = tmp67;
													HX_STACK_LINE(363)
													Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													{
														HX_STACK_LINE(363)
														Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(363)
														Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(363)
														Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(363)
														Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(363)
														Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(363)
														Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(363)
														Float tmp75 = (tmp71 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(363)
														Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(363)
														Float value = tmp76;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(363)
														bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp68 = (int)-1;
														}
														else{
															HX_STACK_LINE(363)
															bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
															HX_STACK_LINE(363)
															if ((tmp78)){
																HX_STACK_LINE(363)
																tmp68 = (int)1;
															}
															else{
																HX_STACK_LINE(363)
																tmp68 = value;
															}
														}
													}
													HX_STACK_LINE(363)
													Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													_z1 = tmp69;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(363)
							{
								HX_STACK_LINE(363)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(363)
								_this->ignore_listeners = true;
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->x = _x1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->x;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _x1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_x(tmp38);
										}
										HX_STACK_LINE(363)
										_this->x;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->y = _y1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->y;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_y != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _y1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_y(tmp38);
										}
										HX_STACK_LINE(363)
										_this->y;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->z = _z1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->z;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_z != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _z1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_z(tmp38);
										}
										HX_STACK_LINE(363)
										_this->z;
									}
								}
								HX_STACK_LINE(363)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(363)
								bool tmp35 = (_this->listen_x != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									bool tmp37 = _this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									tmp36 = !(tmp38);
								}
								else{
									HX_STACK_LINE(363)
									tmp36 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = _this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_this->listen_x(tmp37);
								}
								HX_STACK_LINE(363)
								bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								if ((tmp37)){
									HX_STACK_LINE(363)
									bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									tmp38 = !(tmp40);
								}
								else{
									HX_STACK_LINE(363)
									tmp38 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp38)){
									HX_STACK_LINE(363)
									Float tmp39 = _this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									_this->listen_y(tmp39);
								}
								HX_STACK_LINE(363)
								bool tmp39 = (_this->listen_z != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								if ((tmp39)){
									HX_STACK_LINE(363)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(363)
									tmp40 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp40)){
									HX_STACK_LINE(363)
									Float tmp41 = _this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									_this->listen_z(tmp41);
								}
								HX_STACK_LINE(363)
								_this;
							}
							HX_STACK_LINE(363)
							_this;
						}
					}
					HX_STACK_LINE(363)
					Dynamic tmp14 = this->listen_x_dyn();		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(363)
					bool tmp15 = (tmp14 != null());		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(363)
					bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(363)
					if ((tmp15)){
						HX_STACK_LINE(363)
						bool tmp17 = this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						tmp16 = !(tmp19);
					}
					else{
						HX_STACK_LINE(363)
						tmp16 = false;
					}
					HX_STACK_LINE(363)
					if ((tmp16)){
						HX_STACK_LINE(363)
						Float tmp17 = this->x;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						this->listen_x(tmp17);
					}
					HX_STACK_LINE(363)
					this->x;
				}
			}
			HX_STACK_LINE(363)
			{
				HX_STACK_LINE(363)
				this->y = _y;
				HX_STACK_LINE(363)
				bool tmp13 = this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(363)
				if ((tmp13)){
					HX_STACK_LINE(363)
					this->y;
				}
				else{
					HX_STACK_LINE(363)
					{
						HX_STACK_LINE(363)
						::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(363)
						bool tmp15 = (tmp14 == null());		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(363)
						bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(363)
						bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						if ((tmp17)){
							HX_STACK_LINE(363)
							tmp18 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(363)
							tmp18 = true;
						}
						HX_STACK_LINE(363)
						bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(363)
						if ((tmp19)){
							HX_STACK_LINE(363)
							tmp20 = this->_construct;
						}
						else{
							HX_STACK_LINE(363)
							tmp20 = true;
						}
						HX_STACK_LINE(363)
						if ((tmp20)){
							HX_STACK_LINE(363)
							Dynamic();
						}
						else{
							HX_STACK_LINE(363)
							::phoenix::Vector tmp21 = this->euler;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(363)
							::phoenix::Vector _this = tmp21;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(363)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(363)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(363)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(363)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(363)
							Float sqx = tmp24;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(363)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(363)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(363)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(363)
							Float sqy = tmp27;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(363)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(363)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(363)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(363)
							Float sqz = tmp30;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(363)
							Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(363)
							Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(363)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(363)
							Float sqw = tmp33;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(363)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(363)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(363)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(363)
							bool tmp34 = (order == (int)0);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(363)
							if ((tmp34)){
								HX_STACK_LINE(363)
								Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(363)
								Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(363)
								Float tmp43 = (sqw - sqx);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(363)
								Float tmp44 = sqy;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(363)
								Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(363)
								Float tmp46 = sqz;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(363)
								Float tmp47 = (tmp45 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(363)
								Float tmp48 = ::Math_obj::atan2(tmp42,tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(363)
								_x1 = tmp48;
								HX_STACK_LINE(363)
								Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float value = tmp57;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(363)
									bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									if ((tmp58)){
										HX_STACK_LINE(363)
										tmp49 = (int)-1;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										if ((tmp59)){
											HX_STACK_LINE(363)
											tmp49 = (int)1;
										}
										else{
											HX_STACK_LINE(363)
											tmp49 = value;
										}
									}
								}
								HX_STACK_LINE(363)
								Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(363)
								_y1 = tmp50;
								HX_STACK_LINE(363)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(363)
								Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(363)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(363)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(363)
								Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(363)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(363)
								Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(363)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(363)
								Float tmp59 = (sqw + sqx);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(363)
								Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(363)
								Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(363)
								Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(363)
								Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(363)
								Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(363)
								_z1 = tmp64;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp35 = (order == (int)1);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									{
										HX_STACK_LINE(363)
										Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float value = tmp44;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(363)
										bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										if ((tmp45)){
											HX_STACK_LINE(363)
											tmp36 = (int)-1;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp36 = (int)1;
											}
											else{
												HX_STACK_LINE(363)
												tmp36 = value;
											}
										}
									}
									HX_STACK_LINE(363)
									Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_x1 = tmp37;
									HX_STACK_LINE(363)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(363)
									Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(363)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(363)
									Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(363)
									Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(363)
									Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(363)
									Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(363)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									_y1 = tmp51;
									HX_STACK_LINE(363)
									Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(363)
									Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(363)
									Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(363)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(363)
									Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(363)
									Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(363)
									Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(363)
									_z1 = tmp65;
								}
								else{
									HX_STACK_LINE(363)
									bool tmp36 = (order == (int)2);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									if ((tmp36)){
										HX_STACK_LINE(363)
										Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										{
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float value = tmp45;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(363)
											bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp37 = (int)-1;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												if ((tmp47)){
													HX_STACK_LINE(363)
													tmp37 = (int)1;
												}
												else{
													HX_STACK_LINE(363)
													tmp37 = value;
												}
											}
										}
										HX_STACK_LINE(363)
										Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										_x1 = tmp38;
										HX_STACK_LINE(363)
										Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(363)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(363)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(363)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(363)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(363)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(363)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(363)
										_y1 = tmp52;
										HX_STACK_LINE(363)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(363)
										Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(363)
										Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(363)
										Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(363)
										Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(363)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(363)
										Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(363)
										Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(363)
										Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(363)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(363)
										Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(363)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(363)
										Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(363)
										_z1 = tmp66;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp37 = (order == (int)3);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(363)
											Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(363)
											Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(363)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(363)
											Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(363)
											_x1 = tmp51;
											HX_STACK_LINE(363)
											Float tmp52;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(363)
											{
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float value = tmp60;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(363)
												bool tmp61 = (value < (int)-1);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												if ((tmp61)){
													HX_STACK_LINE(363)
													tmp52 = (int)-1;
												}
												else{
													HX_STACK_LINE(363)
													bool tmp62 = (value > (int)1);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													if ((tmp62)){
														HX_STACK_LINE(363)
														tmp52 = (int)1;
													}
													else{
														HX_STACK_LINE(363)
														tmp52 = value;
													}
												}
											}
											HX_STACK_LINE(363)
											Float tmp53 = ::Math_obj::asin(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(363)
											_y1 = tmp53;
											HX_STACK_LINE(363)
											Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(363)
											Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(363)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(363)
											Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(363)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(363)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(363)
											Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(363)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(363)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(363)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(363)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(363)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(363)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(363)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(363)
											_z1 = tmp67;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp38 = (order == (int)4);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											if ((tmp38)){
												HX_STACK_LINE(363)
												Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(363)
												Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(363)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(363)
												Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(363)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(363)
												Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(363)
												Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(363)
												Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(363)
												Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(363)
												Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(363)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(363)
												Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(363)
												_x1 = tmp52;
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float tmp61 = (sqw + sqx);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(363)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(363)
												Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(363)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(363)
												Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(363)
												_y1 = tmp66;
												HX_STACK_LINE(363)
												Float tmp67;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(363)
												{
													HX_STACK_LINE(363)
													Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(363)
													Float tmp71 = this->z;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(363)
													Float tmp72 = this->w;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(363)
													Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(363)
													Float tmp74 = (tmp70 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(363)
													Float tmp75 = ((int)2 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(363)
													Float value = tmp75;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(363)
													bool tmp76 = (value < (int)-1);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(363)
													if ((tmp76)){
														HX_STACK_LINE(363)
														tmp67 = (int)-1;
													}
													else{
														HX_STACK_LINE(363)
														bool tmp77 = (value > (int)1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp67 = (int)1;
														}
														else{
															HX_STACK_LINE(363)
															tmp67 = value;
														}
													}
												}
												HX_STACK_LINE(363)
												Float tmp68 = ::Math_obj::asin(tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(363)
												_z1 = tmp68;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp39 = (order == (int)5);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												if ((tmp39)){
													HX_STACK_LINE(363)
													Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(363)
													Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(363)
													Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(363)
													Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(363)
													Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(363)
													Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(363)
													Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(363)
													Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(363)
													Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(363)
													Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(363)
													Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(363)
													Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(363)
													Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(363)
													Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(363)
													_x1 = tmp53;
													HX_STACK_LINE(363)
													Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(363)
													Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(363)
													Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(363)
													Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(363)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(363)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(363)
													Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(363)
													Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(363)
													Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(363)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(363)
													Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(363)
													Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(363)
													Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(363)
													_y1 = tmp67;
													HX_STACK_LINE(363)
													Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													{
														HX_STACK_LINE(363)
														Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(363)
														Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(363)
														Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(363)
														Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(363)
														Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(363)
														Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(363)
														Float tmp75 = (tmp71 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(363)
														Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(363)
														Float value = tmp76;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(363)
														bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp68 = (int)-1;
														}
														else{
															HX_STACK_LINE(363)
															bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
															HX_STACK_LINE(363)
															if ((tmp78)){
																HX_STACK_LINE(363)
																tmp68 = (int)1;
															}
															else{
																HX_STACK_LINE(363)
																tmp68 = value;
															}
														}
													}
													HX_STACK_LINE(363)
													Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													_z1 = tmp69;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(363)
							{
								HX_STACK_LINE(363)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(363)
								_this->ignore_listeners = true;
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->x = _x1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->x;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _x1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_x(tmp38);
										}
										HX_STACK_LINE(363)
										_this->x;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->y = _y1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->y;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_y != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _y1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_y(tmp38);
										}
										HX_STACK_LINE(363)
										_this->y;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->z = _z1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->z;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_z != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _z1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_z(tmp38);
										}
										HX_STACK_LINE(363)
										_this->z;
									}
								}
								HX_STACK_LINE(363)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(363)
								bool tmp35 = (_this->listen_x != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									bool tmp37 = _this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									tmp36 = !(tmp38);
								}
								else{
									HX_STACK_LINE(363)
									tmp36 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = _this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_this->listen_x(tmp37);
								}
								HX_STACK_LINE(363)
								bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								if ((tmp37)){
									HX_STACK_LINE(363)
									bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									tmp38 = !(tmp40);
								}
								else{
									HX_STACK_LINE(363)
									tmp38 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp38)){
									HX_STACK_LINE(363)
									Float tmp39 = _this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									_this->listen_y(tmp39);
								}
								HX_STACK_LINE(363)
								bool tmp39 = (_this->listen_z != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								if ((tmp39)){
									HX_STACK_LINE(363)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(363)
									tmp40 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp40)){
									HX_STACK_LINE(363)
									Float tmp41 = _this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									_this->listen_z(tmp41);
								}
								HX_STACK_LINE(363)
								_this;
							}
							HX_STACK_LINE(363)
							_this;
						}
					}
					HX_STACK_LINE(363)
					Dynamic tmp14 = this->listen_y_dyn();		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(363)
					bool tmp15 = (tmp14 != null());		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(363)
					bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(363)
					if ((tmp15)){
						HX_STACK_LINE(363)
						bool tmp17 = this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						tmp16 = !(tmp19);
					}
					else{
						HX_STACK_LINE(363)
						tmp16 = false;
					}
					HX_STACK_LINE(363)
					if ((tmp16)){
						HX_STACK_LINE(363)
						Float tmp17 = this->y;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						this->listen_y(tmp17);
					}
					HX_STACK_LINE(363)
					this->y;
				}
			}
			HX_STACK_LINE(363)
			{
				HX_STACK_LINE(363)
				this->z = _z;
				HX_STACK_LINE(363)
				bool tmp13 = this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(363)
				if ((tmp13)){
					HX_STACK_LINE(363)
					this->z;
				}
				else{
					HX_STACK_LINE(363)
					{
						HX_STACK_LINE(363)
						::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(363)
						bool tmp15 = (tmp14 == null());		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(363)
						bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(363)
						bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						if ((tmp17)){
							HX_STACK_LINE(363)
							tmp18 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(363)
							tmp18 = true;
						}
						HX_STACK_LINE(363)
						bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(363)
						if ((tmp19)){
							HX_STACK_LINE(363)
							tmp20 = this->_construct;
						}
						else{
							HX_STACK_LINE(363)
							tmp20 = true;
						}
						HX_STACK_LINE(363)
						if ((tmp20)){
							HX_STACK_LINE(363)
							Dynamic();
						}
						else{
							HX_STACK_LINE(363)
							::phoenix::Vector tmp21 = this->euler;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(363)
							::phoenix::Vector _this = tmp21;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(363)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(363)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(363)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(363)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(363)
							Float sqx = tmp24;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(363)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(363)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(363)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(363)
							Float sqy = tmp27;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(363)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(363)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(363)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(363)
							Float sqz = tmp30;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(363)
							Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(363)
							Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(363)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(363)
							Float sqw = tmp33;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(363)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(363)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(363)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(363)
							bool tmp34 = (order == (int)0);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(363)
							if ((tmp34)){
								HX_STACK_LINE(363)
								Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(363)
								Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(363)
								Float tmp43 = (sqw - sqx);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(363)
								Float tmp44 = sqy;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(363)
								Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(363)
								Float tmp46 = sqz;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(363)
								Float tmp47 = (tmp45 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(363)
								Float tmp48 = ::Math_obj::atan2(tmp42,tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(363)
								_x1 = tmp48;
								HX_STACK_LINE(363)
								Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float value = tmp57;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(363)
									bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									if ((tmp58)){
										HX_STACK_LINE(363)
										tmp49 = (int)-1;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										if ((tmp59)){
											HX_STACK_LINE(363)
											tmp49 = (int)1;
										}
										else{
											HX_STACK_LINE(363)
											tmp49 = value;
										}
									}
								}
								HX_STACK_LINE(363)
								Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(363)
								_y1 = tmp50;
								HX_STACK_LINE(363)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(363)
								Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(363)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(363)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(363)
								Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(363)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(363)
								Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(363)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(363)
								Float tmp59 = (sqw + sqx);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(363)
								Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(363)
								Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(363)
								Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(363)
								Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(363)
								Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(363)
								_z1 = tmp64;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp35 = (order == (int)1);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									{
										HX_STACK_LINE(363)
										Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float value = tmp44;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(363)
										bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										if ((tmp45)){
											HX_STACK_LINE(363)
											tmp36 = (int)-1;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp36 = (int)1;
											}
											else{
												HX_STACK_LINE(363)
												tmp36 = value;
											}
										}
									}
									HX_STACK_LINE(363)
									Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_x1 = tmp37;
									HX_STACK_LINE(363)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(363)
									Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(363)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(363)
									Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(363)
									Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(363)
									Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(363)
									Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(363)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									_y1 = tmp51;
									HX_STACK_LINE(363)
									Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(363)
									Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(363)
									Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(363)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(363)
									Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(363)
									Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(363)
									Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(363)
									_z1 = tmp65;
								}
								else{
									HX_STACK_LINE(363)
									bool tmp36 = (order == (int)2);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									if ((tmp36)){
										HX_STACK_LINE(363)
										Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										{
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float value = tmp45;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(363)
											bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp37 = (int)-1;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												if ((tmp47)){
													HX_STACK_LINE(363)
													tmp37 = (int)1;
												}
												else{
													HX_STACK_LINE(363)
													tmp37 = value;
												}
											}
										}
										HX_STACK_LINE(363)
										Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										_x1 = tmp38;
										HX_STACK_LINE(363)
										Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(363)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(363)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(363)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(363)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(363)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(363)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(363)
										_y1 = tmp52;
										HX_STACK_LINE(363)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(363)
										Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(363)
										Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(363)
										Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(363)
										Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(363)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(363)
										Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(363)
										Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(363)
										Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(363)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(363)
										Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(363)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(363)
										Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(363)
										_z1 = tmp66;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp37 = (order == (int)3);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(363)
											Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(363)
											Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(363)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(363)
											Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(363)
											_x1 = tmp51;
											HX_STACK_LINE(363)
											Float tmp52;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(363)
											{
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float value = tmp60;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(363)
												bool tmp61 = (value < (int)-1);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												if ((tmp61)){
													HX_STACK_LINE(363)
													tmp52 = (int)-1;
												}
												else{
													HX_STACK_LINE(363)
													bool tmp62 = (value > (int)1);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													if ((tmp62)){
														HX_STACK_LINE(363)
														tmp52 = (int)1;
													}
													else{
														HX_STACK_LINE(363)
														tmp52 = value;
													}
												}
											}
											HX_STACK_LINE(363)
											Float tmp53 = ::Math_obj::asin(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(363)
											_y1 = tmp53;
											HX_STACK_LINE(363)
											Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(363)
											Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(363)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(363)
											Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(363)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(363)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(363)
											Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(363)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(363)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(363)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(363)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(363)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(363)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(363)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(363)
											_z1 = tmp67;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp38 = (order == (int)4);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											if ((tmp38)){
												HX_STACK_LINE(363)
												Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(363)
												Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(363)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(363)
												Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(363)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(363)
												Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(363)
												Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(363)
												Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(363)
												Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(363)
												Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(363)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(363)
												Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(363)
												_x1 = tmp52;
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float tmp61 = (sqw + sqx);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(363)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(363)
												Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(363)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(363)
												Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(363)
												_y1 = tmp66;
												HX_STACK_LINE(363)
												Float tmp67;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(363)
												{
													HX_STACK_LINE(363)
													Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(363)
													Float tmp71 = this->z;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(363)
													Float tmp72 = this->w;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(363)
													Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(363)
													Float tmp74 = (tmp70 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(363)
													Float tmp75 = ((int)2 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(363)
													Float value = tmp75;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(363)
													bool tmp76 = (value < (int)-1);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(363)
													if ((tmp76)){
														HX_STACK_LINE(363)
														tmp67 = (int)-1;
													}
													else{
														HX_STACK_LINE(363)
														bool tmp77 = (value > (int)1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp67 = (int)1;
														}
														else{
															HX_STACK_LINE(363)
															tmp67 = value;
														}
													}
												}
												HX_STACK_LINE(363)
												Float tmp68 = ::Math_obj::asin(tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(363)
												_z1 = tmp68;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp39 = (order == (int)5);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												if ((tmp39)){
													HX_STACK_LINE(363)
													Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(363)
													Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(363)
													Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(363)
													Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(363)
													Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(363)
													Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(363)
													Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(363)
													Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(363)
													Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(363)
													Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(363)
													Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(363)
													Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(363)
													Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(363)
													Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(363)
													_x1 = tmp53;
													HX_STACK_LINE(363)
													Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(363)
													Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(363)
													Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(363)
													Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(363)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(363)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(363)
													Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(363)
													Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(363)
													Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(363)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(363)
													Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(363)
													Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(363)
													Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(363)
													_y1 = tmp67;
													HX_STACK_LINE(363)
													Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													{
														HX_STACK_LINE(363)
														Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(363)
														Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(363)
														Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(363)
														Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(363)
														Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(363)
														Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(363)
														Float tmp75 = (tmp71 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(363)
														Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(363)
														Float value = tmp76;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(363)
														bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp68 = (int)-1;
														}
														else{
															HX_STACK_LINE(363)
															bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
															HX_STACK_LINE(363)
															if ((tmp78)){
																HX_STACK_LINE(363)
																tmp68 = (int)1;
															}
															else{
																HX_STACK_LINE(363)
																tmp68 = value;
															}
														}
													}
													HX_STACK_LINE(363)
													Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													_z1 = tmp69;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(363)
							{
								HX_STACK_LINE(363)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(363)
								_this->ignore_listeners = true;
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->x = _x1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->x;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _x1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_x(tmp38);
										}
										HX_STACK_LINE(363)
										_this->x;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->y = _y1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->y;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_y != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _y1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_y(tmp38);
										}
										HX_STACK_LINE(363)
										_this->y;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->z = _z1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->z;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_z != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _z1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_z(tmp38);
										}
										HX_STACK_LINE(363)
										_this->z;
									}
								}
								HX_STACK_LINE(363)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(363)
								bool tmp35 = (_this->listen_x != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									bool tmp37 = _this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									tmp36 = !(tmp38);
								}
								else{
									HX_STACK_LINE(363)
									tmp36 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = _this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_this->listen_x(tmp37);
								}
								HX_STACK_LINE(363)
								bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								if ((tmp37)){
									HX_STACK_LINE(363)
									bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									tmp38 = !(tmp40);
								}
								else{
									HX_STACK_LINE(363)
									tmp38 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp38)){
									HX_STACK_LINE(363)
									Float tmp39 = _this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									_this->listen_y(tmp39);
								}
								HX_STACK_LINE(363)
								bool tmp39 = (_this->listen_z != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								if ((tmp39)){
									HX_STACK_LINE(363)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(363)
									tmp40 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp40)){
									HX_STACK_LINE(363)
									Float tmp41 = _this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									_this->listen_z(tmp41);
								}
								HX_STACK_LINE(363)
								_this;
							}
							HX_STACK_LINE(363)
							_this;
						}
					}
					HX_STACK_LINE(363)
					Dynamic tmp14 = this->listen_z_dyn();		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(363)
					bool tmp15 = (tmp14 != null());		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(363)
					bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(363)
					if ((tmp15)){
						HX_STACK_LINE(363)
						bool tmp17 = this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						tmp16 = !(tmp19);
					}
					else{
						HX_STACK_LINE(363)
						tmp16 = false;
					}
					HX_STACK_LINE(363)
					if ((tmp16)){
						HX_STACK_LINE(363)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						this->listen_z(tmp17);
					}
					HX_STACK_LINE(363)
					this->z;
				}
			}
			HX_STACK_LINE(363)
			{
				HX_STACK_LINE(363)
				this->w = _w;
				HX_STACK_LINE(363)
				bool tmp13 = this->_construct;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(363)
				if ((tmp13)){
					HX_STACK_LINE(363)
					this->w;
				}
				else{
					HX_STACK_LINE(363)
					{
						HX_STACK_LINE(363)
						::phoenix::Vector tmp14 = this->euler;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(363)
						bool tmp15 = (tmp14 == null());		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(363)
						bool tmp16 = !(tmp15);		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(363)
						bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						if ((tmp17)){
							HX_STACK_LINE(363)
							tmp18 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(363)
							tmp18 = true;
						}
						HX_STACK_LINE(363)
						bool tmp19 = !(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						bool tmp20;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(363)
						if ((tmp19)){
							HX_STACK_LINE(363)
							tmp20 = this->_construct;
						}
						else{
							HX_STACK_LINE(363)
							tmp20 = true;
						}
						HX_STACK_LINE(363)
						if ((tmp20)){
							HX_STACK_LINE(363)
							Dynamic();
						}
						else{
							HX_STACK_LINE(363)
							::phoenix::Vector tmp21 = this->euler;		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(363)
							::phoenix::Vector _this = tmp21;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(363)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(363)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(363)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(363)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(363)
							Float sqx = tmp24;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(363)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(363)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(363)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(363)
							Float sqy = tmp27;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(363)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(363)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(363)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(363)
							Float sqz = tmp30;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(363)
							Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(363)
							Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(363)
							Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(363)
							Float sqw = tmp33;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(363)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(363)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(363)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(363)
							bool tmp34 = (order == (int)0);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(363)
							if ((tmp34)){
								HX_STACK_LINE(363)
								Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								Float tmp36 = this->w;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								Float tmp41 = (tmp37 - tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(363)
								Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(363)
								Float tmp43 = (sqw - sqx);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(363)
								Float tmp44 = sqy;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(363)
								Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(363)
								Float tmp46 = sqz;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(363)
								Float tmp47 = (tmp45 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(363)
								Float tmp48 = ::Math_obj::atan2(tmp42,tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(363)
								_x1 = tmp48;
								HX_STACK_LINE(363)
								Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float value = tmp57;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(363)
									bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									if ((tmp58)){
										HX_STACK_LINE(363)
										tmp49 = (int)-1;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										if ((tmp59)){
											HX_STACK_LINE(363)
											tmp49 = (int)1;
										}
										else{
											HX_STACK_LINE(363)
											tmp49 = value;
										}
									}
								}
								HX_STACK_LINE(363)
								Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(363)
								_y1 = tmp50;
								HX_STACK_LINE(363)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(363)
								Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(363)
								Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(363)
								Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(363)
								Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(363)
								Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(363)
								Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(363)
								Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(363)
								Float tmp59 = (sqw + sqx);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(363)
								Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(363)
								Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(363)
								Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(363)
								Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(363)
								Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(363)
								_z1 = tmp64;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp35 = (order == (int)1);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									{
										HX_STACK_LINE(363)
										Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float value = tmp44;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(363)
										bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										if ((tmp45)){
											HX_STACK_LINE(363)
											tmp36 = (int)-1;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp36 = (int)1;
											}
											else{
												HX_STACK_LINE(363)
												tmp36 = value;
											}
										}
									}
									HX_STACK_LINE(363)
									Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_x1 = tmp37;
									HX_STACK_LINE(363)
									Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(363)
									Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(363)
									Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(363)
									Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(363)
									Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(363)
									Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(363)
									Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(363)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									_y1 = tmp51;
									HX_STACK_LINE(363)
									Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(363)
									Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(363)
									Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(363)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(363)
									Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(363)
									Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(363)
									Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(363)
									_z1 = tmp65;
								}
								else{
									HX_STACK_LINE(363)
									bool tmp36 = (order == (int)2);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(363)
									if ((tmp36)){
										HX_STACK_LINE(363)
										Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										{
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float value = tmp45;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(363)
											bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											if ((tmp46)){
												HX_STACK_LINE(363)
												tmp37 = (int)-1;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												if ((tmp47)){
													HX_STACK_LINE(363)
													tmp37 = (int)1;
												}
												else{
													HX_STACK_LINE(363)
													tmp37 = value;
												}
											}
										}
										HX_STACK_LINE(363)
										Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										_x1 = tmp38;
										HX_STACK_LINE(363)
										Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(363)
										Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(363)
										Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(363)
										Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(363)
										Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(363)
										Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(363)
										Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(363)
										_y1 = tmp52;
										HX_STACK_LINE(363)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(363)
										Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(363)
										Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(363)
										Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(363)
										Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(363)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(363)
										Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(363)
										Float tmp61 = (sqw - sqx);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(363)
										Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(363)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(363)
										Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(363)
										Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(363)
										Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(363)
										_z1 = tmp66;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp37 = (order == (int)3);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(363)
											Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(363)
											Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(363)
											Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(363)
											Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(363)
											_x1 = tmp51;
											HX_STACK_LINE(363)
											Float tmp52;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(363)
											{
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float value = tmp60;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(363)
												bool tmp61 = (value < (int)-1);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												if ((tmp61)){
													HX_STACK_LINE(363)
													tmp52 = (int)-1;
												}
												else{
													HX_STACK_LINE(363)
													bool tmp62 = (value > (int)1);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													if ((tmp62)){
														HX_STACK_LINE(363)
														tmp52 = (int)1;
													}
													else{
														HX_STACK_LINE(363)
														tmp52 = value;
													}
												}
											}
											HX_STACK_LINE(363)
											Float tmp53 = ::Math_obj::asin(tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(363)
											_y1 = tmp53;
											HX_STACK_LINE(363)
											Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(363)
											Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(363)
											Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(363)
											Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(363)
											Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(363)
											Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(363)
											Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(363)
											Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(363)
											Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(363)
											Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(363)
											Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(363)
											Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(363)
											Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(363)
											Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(363)
											_z1 = tmp67;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp38 = (order == (int)4);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											if ((tmp38)){
												HX_STACK_LINE(363)
												Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(363)
												Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(363)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(363)
												Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(363)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(363)
												Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(363)
												Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(363)
												Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(363)
												Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(363)
												Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(363)
												Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(363)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(363)
												Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(363)
												_x1 = tmp52;
												HX_STACK_LINE(363)
												Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(363)
												Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(363)
												Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(363)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(363)
												Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(363)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(363)
												Float tmp59 = (tmp55 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(363)
												Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(363)
												Float tmp61 = (sqw + sqx);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(363)
												Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(363)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(363)
												Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(363)
												Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(363)
												Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(363)
												_y1 = tmp66;
												HX_STACK_LINE(363)
												Float tmp67;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(363)
												{
													HX_STACK_LINE(363)
													Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(363)
													Float tmp71 = this->z;		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(363)
													Float tmp72 = this->w;		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(363)
													Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(363)
													Float tmp74 = (tmp70 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(363)
													Float tmp75 = ((int)2 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(363)
													Float value = tmp75;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(363)
													bool tmp76 = (value < (int)-1);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(363)
													if ((tmp76)){
														HX_STACK_LINE(363)
														tmp67 = (int)-1;
													}
													else{
														HX_STACK_LINE(363)
														bool tmp77 = (value > (int)1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp67 = (int)1;
														}
														else{
															HX_STACK_LINE(363)
															tmp67 = value;
														}
													}
												}
												HX_STACK_LINE(363)
												Float tmp68 = ::Math_obj::asin(tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(363)
												_z1 = tmp68;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp39 = (order == (int)5);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(363)
												if ((tmp39)){
													HX_STACK_LINE(363)
													Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
													HX_STACK_LINE(363)
													Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
													HX_STACK_LINE(363)
													Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
													HX_STACK_LINE(363)
													Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
													HX_STACK_LINE(363)
													Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
													HX_STACK_LINE(363)
													Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
													HX_STACK_LINE(363)
													Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
													HX_STACK_LINE(363)
													Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
													HX_STACK_LINE(363)
													Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
													HX_STACK_LINE(363)
													Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
													HX_STACK_LINE(363)
													Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
													HX_STACK_LINE(363)
													Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
													HX_STACK_LINE(363)
													Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(363)
													Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(363)
													_x1 = tmp53;
													HX_STACK_LINE(363)
													Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(363)
													Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(363)
													Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(363)
													Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(363)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(363)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(363)
													Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(363)
													Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(363)
													Float tmp62 = (sqw + sqx);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(363)
													Float tmp63 = sqy;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(363)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(363)
													Float tmp65 = sqz;		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(363)
													Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(363)
													Float tmp67 = ::Math_obj::atan2(tmp61,tmp66);		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(363)
													_y1 = tmp67;
													HX_STACK_LINE(363)
													Float tmp68;		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(363)
													{
														HX_STACK_LINE(363)
														Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
														HX_STACK_LINE(363)
														Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
														HX_STACK_LINE(363)
														Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
														HX_STACK_LINE(363)
														Float tmp72 = this->x;		HX_STACK_VAR(tmp72,"tmp72");
														HX_STACK_LINE(363)
														Float tmp73 = this->y;		HX_STACK_VAR(tmp73,"tmp73");
														HX_STACK_LINE(363)
														Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
														HX_STACK_LINE(363)
														Float tmp75 = (tmp71 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
														HX_STACK_LINE(363)
														Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
														HX_STACK_LINE(363)
														Float value = tmp76;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(363)
														bool tmp77 = (value < (int)-1);		HX_STACK_VAR(tmp77,"tmp77");
														HX_STACK_LINE(363)
														if ((tmp77)){
															HX_STACK_LINE(363)
															tmp68 = (int)-1;
														}
														else{
															HX_STACK_LINE(363)
															bool tmp78 = (value > (int)1);		HX_STACK_VAR(tmp78,"tmp78");
															HX_STACK_LINE(363)
															if ((tmp78)){
																HX_STACK_LINE(363)
																tmp68 = (int)1;
															}
															else{
																HX_STACK_LINE(363)
																tmp68 = value;
															}
														}
													}
													HX_STACK_LINE(363)
													Float tmp69 = ::Math_obj::asin(tmp68);		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(363)
													_z1 = tmp69;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(363)
							{
								HX_STACK_LINE(363)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(363)
								_this->ignore_listeners = true;
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->x = _x1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->x;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_x != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _x1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_x(tmp38);
										}
										HX_STACK_LINE(363)
										_this->x;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->y = _y1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->y;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_y != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _y1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_y(tmp38);
										}
										HX_STACK_LINE(363)
										_this->y;
									}
								}
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									_this->z = _z1;
									HX_STACK_LINE(363)
									bool tmp35 = _this->_construct;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(363)
									if ((tmp35)){
										HX_STACK_LINE(363)
										_this->z;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp36 = (_this->listen_z != null());		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(363)
										bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(363)
										if ((tmp36)){
											HX_STACK_LINE(363)
											bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											tmp37 = !(tmp39);
										}
										else{
											HX_STACK_LINE(363)
											tmp37 = false;
										}
										HX_STACK_LINE(363)
										if ((tmp37)){
											HX_STACK_LINE(363)
											Float tmp38 = _z1;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(363)
											_this->listen_z(tmp38);
										}
										HX_STACK_LINE(363)
										_this->z;
									}
								}
								HX_STACK_LINE(363)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(363)
								bool tmp35 = (_this->listen_x != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									bool tmp37 = _this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									tmp36 = !(tmp38);
								}
								else{
									HX_STACK_LINE(363)
									tmp36 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = _this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_this->listen_x(tmp37);
								}
								HX_STACK_LINE(363)
								bool tmp37 = (_this->listen_y != null());		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								bool tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								if ((tmp37)){
									HX_STACK_LINE(363)
									bool tmp39 = _this->ignore_listeners;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									tmp38 = !(tmp40);
								}
								else{
									HX_STACK_LINE(363)
									tmp38 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp38)){
									HX_STACK_LINE(363)
									Float tmp39 = _this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									_this->listen_y(tmp39);
								}
								HX_STACK_LINE(363)
								bool tmp39 = (_this->listen_z != null());		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								bool tmp40;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								if ((tmp39)){
									HX_STACK_LINE(363)
									bool tmp41 = _this->ignore_listeners;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									tmp40 = !(tmp42);
								}
								else{
									HX_STACK_LINE(363)
									tmp40 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp40)){
									HX_STACK_LINE(363)
									Float tmp41 = _this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									_this->listen_z(tmp41);
								}
								HX_STACK_LINE(363)
								_this;
							}
							HX_STACK_LINE(363)
							_this;
						}
					}
					HX_STACK_LINE(363)
					Dynamic tmp14 = this->listen_w_dyn();		HX_STACK_VAR(tmp14,"tmp14");
					HX_STACK_LINE(363)
					bool tmp15 = (tmp14 != null());		HX_STACK_VAR(tmp15,"tmp15");
					HX_STACK_LINE(363)
					bool tmp16;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(363)
					if ((tmp15)){
						HX_STACK_LINE(363)
						bool tmp17 = this->ignore_listeners;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(363)
						bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(363)
						tmp16 = !(tmp19);
					}
					else{
						HX_STACK_LINE(363)
						tmp16 = false;
					}
					HX_STACK_LINE(363)
					if ((tmp16)){
						HX_STACK_LINE(363)
						Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(363)
						this->listen_w(tmp17);
					}
					HX_STACK_LINE(363)
					this->w;
				}
			}
			HX_STACK_LINE(363)
			this->ignore_euler = false;
			HX_STACK_LINE(363)
			{
				HX_STACK_LINE(363)
				::phoenix::Vector tmp13 = this->euler;		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(363)
				bool tmp14 = (tmp13 == null());		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(363)
				bool tmp15 = !(tmp14);		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(363)
				bool tmp16 = tmp15;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(363)
				bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(363)
				if ((tmp16)){
					HX_STACK_LINE(363)
					tmp17 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(363)
					tmp17 = true;
				}
				HX_STACK_LINE(363)
				bool tmp18 = !(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(363)
				bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(363)
				if ((tmp18)){
					HX_STACK_LINE(363)
					tmp19 = this->_construct;
				}
				else{
					HX_STACK_LINE(363)
					tmp19 = true;
				}
				HX_STACK_LINE(363)
				if ((tmp19)){
					HX_STACK_LINE(363)
					Dynamic();
				}
				else{
					HX_STACK_LINE(363)
					::phoenix::Vector tmp20 = this->euler;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(363)
					::phoenix::Vector _this = tmp20;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(363)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(363)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(363)
					Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(363)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(363)
					Float sqx = tmp23;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(363)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(363)
					Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(363)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(363)
					Float sqy = tmp26;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(363)
					Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(363)
					Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(363)
					Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(363)
					Float sqz = tmp29;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(363)
					Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(363)
					Float tmp31 = this->w;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(363)
					Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(363)
					Float sqw = tmp32;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(363)
					Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
					HX_STACK_LINE(363)
					Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
					HX_STACK_LINE(363)
					Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
					HX_STACK_LINE(363)
					bool tmp33 = (order == (int)0);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(363)
					if ((tmp33)){
						HX_STACK_LINE(363)
						Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(363)
						Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(363)
						Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(363)
						Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(363)
						Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(363)
						Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(363)
						Float tmp40 = (tmp36 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(363)
						Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(363)
						Float tmp42 = (sqw - sqx);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(363)
						Float tmp43 = sqy;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(363)
						Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(363)
						Float tmp45 = sqz;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(363)
						Float tmp46 = (tmp44 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(363)
						Float tmp47 = ::Math_obj::atan2(tmp41,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(363)
						_x1 = tmp47;
						HX_STACK_LINE(363)
						Float tmp48;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(363)
						{
							HX_STACK_LINE(363)
							Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(363)
							Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(363)
							Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(363)
							Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(363)
							Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(363)
							Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(363)
							Float tmp55 = (tmp51 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(363)
							Float tmp56 = ((int)2 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(363)
							Float value = tmp56;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(363)
							bool tmp57 = (value < (int)-1);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(363)
							if ((tmp57)){
								HX_STACK_LINE(363)
								tmp48 = (int)-1;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp58 = (value > (int)1);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(363)
								if ((tmp58)){
									HX_STACK_LINE(363)
									tmp48 = (int)1;
								}
								else{
									HX_STACK_LINE(363)
									tmp48 = value;
								}
							}
						}
						HX_STACK_LINE(363)
						Float tmp49 = ::Math_obj::asin(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(363)
						_y1 = tmp49;
						HX_STACK_LINE(363)
						Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(363)
						Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(363)
						Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(363)
						Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(363)
						Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(363)
						Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(363)
						Float tmp56 = (tmp52 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(363)
						Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(363)
						Float tmp58 = (sqw + sqx);		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(363)
						Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(363)
						Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(363)
						Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
						HX_STACK_LINE(363)
						Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
						HX_STACK_LINE(363)
						Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
						HX_STACK_LINE(363)
						_z1 = tmp63;
					}
					else{
						HX_STACK_LINE(363)
						bool tmp34 = (order == (int)1);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(363)
						if ((tmp34)){
							HX_STACK_LINE(363)
							Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(363)
							{
								HX_STACK_LINE(363)
								Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								Float tmp37 = this->w;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(363)
								Float tmp42 = (tmp38 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(363)
								Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(363)
								Float value = tmp43;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(363)
								bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(363)
								if ((tmp44)){
									HX_STACK_LINE(363)
									tmp35 = (int)-1;
								}
								else{
									HX_STACK_LINE(363)
									bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(363)
									if ((tmp45)){
										HX_STACK_LINE(363)
										tmp35 = (int)1;
									}
									else{
										HX_STACK_LINE(363)
										tmp35 = value;
									}
								}
							}
							HX_STACK_LINE(363)
							Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(363)
							_x1 = tmp36;
							HX_STACK_LINE(363)
							Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(363)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(363)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(363)
							Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(363)
							Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(363)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(363)
							Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(363)
							Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(363)
							Float tmp45 = (sqw - sqx);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(363)
							Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(363)
							Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(363)
							Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(363)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(363)
							Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(363)
							_y1 = tmp50;
							HX_STACK_LINE(363)
							Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(363)
							Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(363)
							Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(363)
							Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(363)
							Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(363)
							Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(363)
							Float tmp57 = (tmp53 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(363)
							Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(363)
							Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(363)
							Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(363)
							Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(363)
							Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(363)
							Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(363)
							Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(363)
							_z1 = tmp64;
						}
						else{
							HX_STACK_LINE(363)
							bool tmp35 = (order == (int)2);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(363)
							if ((tmp35)){
								HX_STACK_LINE(363)
								Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								{
									HX_STACK_LINE(363)
									Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(363)
									Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(363)
									Float value = tmp44;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(363)
									bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(363)
									if ((tmp45)){
										HX_STACK_LINE(363)
										tmp36 = (int)-1;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(363)
										if ((tmp46)){
											HX_STACK_LINE(363)
											tmp36 = (int)1;
										}
										else{
											HX_STACK_LINE(363)
											tmp36 = value;
										}
									}
								}
								HX_STACK_LINE(363)
								Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(363)
								_x1 = tmp37;
								HX_STACK_LINE(363)
								Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(363)
								Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(363)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(363)
								Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(363)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(363)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(363)
								Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(363)
								Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(363)
								Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(363)
								Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(363)
								Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(363)
								Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(363)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(363)
								Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(363)
								_y1 = tmp51;
								HX_STACK_LINE(363)
								Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(363)
								Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(363)
								Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(363)
								Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(363)
								Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(363)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(363)
								Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(363)
								Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(363)
								Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(363)
								Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(363)
								Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(363)
								Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(363)
								Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(363)
								Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(363)
								_z1 = tmp65;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp36 = (order == (int)3);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(363)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(363)
									Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(363)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(363)
									Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(363)
									Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(363)
									Float tmp45 = (sqw - sqx);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(363)
									Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(363)
									Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(363)
									Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(363)
									Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(363)
									Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(363)
									_x1 = tmp50;
									HX_STACK_LINE(363)
									Float tmp51;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(363)
									{
										HX_STACK_LINE(363)
										Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(363)
										Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(363)
										Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(363)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(363)
										Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(363)
										Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(363)
										Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(363)
										Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										Float value = tmp59;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(363)
										bool tmp60 = (value < (int)-1);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(363)
										if ((tmp60)){
											HX_STACK_LINE(363)
											tmp51 = (int)-1;
										}
										else{
											HX_STACK_LINE(363)
											bool tmp61 = (value > (int)1);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(363)
											if ((tmp61)){
												HX_STACK_LINE(363)
												tmp51 = (int)1;
											}
											else{
												HX_STACK_LINE(363)
												tmp51 = value;
											}
										}
									}
									HX_STACK_LINE(363)
									Float tmp52 = ::Math_obj::asin(tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(363)
									_y1 = tmp52;
									HX_STACK_LINE(363)
									Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(363)
									Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(363)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(363)
									Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(363)
									Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(363)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(363)
									Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(363)
									Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(363)
									Float tmp61 = (sqw + sqx);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(363)
									Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(363)
									Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(363)
									Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(363)
									Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(363)
									Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(363)
									_z1 = tmp66;
								}
								else{
									HX_STACK_LINE(363)
									bool tmp37 = (order == (int)4);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									if ((tmp37)){
										HX_STACK_LINE(363)
										Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(363)
										Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(363)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(363)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(363)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(363)
										Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(363)
										Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(363)
										Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(363)
										Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(363)
										Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(363)
										Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(363)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(363)
										Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(363)
										_x1 = tmp51;
										HX_STACK_LINE(363)
										Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(363)
										Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(363)
										Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(363)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(363)
										Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(363)
										Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(363)
										Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(363)
										Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(363)
										Float tmp60 = (sqw + sqx);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(363)
										Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(363)
										Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(363)
										Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(363)
										Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(363)
										Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(363)
										_y1 = tmp65;
										HX_STACK_LINE(363)
										Float tmp66;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(363)
										{
											HX_STACK_LINE(363)
											Float tmp67 = this->x;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(363)
											Float tmp68 = this->y;		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(363)
											Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(363)
											Float tmp70 = this->z;		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(363)
											Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(363)
											Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(363)
											Float tmp73 = (tmp69 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(363)
											Float tmp74 = ((int)2 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(363)
											Float value = tmp74;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(363)
											bool tmp75 = (value < (int)-1);		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(363)
											if ((tmp75)){
												HX_STACK_LINE(363)
												tmp66 = (int)-1;
											}
											else{
												HX_STACK_LINE(363)
												bool tmp76 = (value > (int)1);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(363)
												if ((tmp76)){
													HX_STACK_LINE(363)
													tmp66 = (int)1;
												}
												else{
													HX_STACK_LINE(363)
													tmp66 = value;
												}
											}
										}
										HX_STACK_LINE(363)
										Float tmp67 = ::Math_obj::asin(tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(363)
										_z1 = tmp67;
									}
									else{
										HX_STACK_LINE(363)
										bool tmp38 = (order == (int)5);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(363)
										if ((tmp38)){
											HX_STACK_LINE(363)
											Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(363)
											Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(363)
											Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(363)
											Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(363)
											Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(363)
											Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(363)
											Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(363)
											Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(363)
											Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(363)
											Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(363)
											Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(363)
											Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(363)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(363)
											Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(363)
											_x1 = tmp52;
											HX_STACK_LINE(363)
											Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(363)
											Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(363)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(363)
											Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(363)
											Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(363)
											Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(363)
											Float tmp59 = (tmp55 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(363)
											Float tmp60 = ((int)2 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(363)
											Float tmp61 = (sqw + sqx);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(363)
											Float tmp62 = sqy;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(363)
											Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(363)
											Float tmp64 = sqz;		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(363)
											Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(363)
											Float tmp66 = ::Math_obj::atan2(tmp60,tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(363)
											_y1 = tmp66;
											HX_STACK_LINE(363)
											Float tmp67;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(363)
											{
												HX_STACK_LINE(363)
												Float tmp68 = this->z;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(363)
												Float tmp69 = this->w;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(363)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(363)
												Float tmp71 = this->x;		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(363)
												Float tmp72 = this->y;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(363)
												Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(363)
												Float tmp74 = (tmp70 - tmp73);		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(363)
												Float tmp75 = ((int)2 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(363)
												Float value = tmp75;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(363)
												bool tmp76 = (value < (int)-1);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(363)
												if ((tmp76)){
													HX_STACK_LINE(363)
													tmp67 = (int)-1;
												}
												else{
													HX_STACK_LINE(363)
													bool tmp77 = (value > (int)1);		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(363)
													if ((tmp77)){
														HX_STACK_LINE(363)
														tmp67 = (int)1;
													}
													else{
														HX_STACK_LINE(363)
														tmp67 = value;
													}
												}
											}
											HX_STACK_LINE(363)
											Float tmp68 = ::Math_obj::asin(tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(363)
											_z1 = tmp68;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(363)
					{
						HX_STACK_LINE(363)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(363)
						_this->ignore_listeners = true;
						HX_STACK_LINE(363)
						{
							HX_STACK_LINE(363)
							_this->x = _x1;
							HX_STACK_LINE(363)
							bool tmp34 = _this->_construct;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(363)
							if ((tmp34)){
								HX_STACK_LINE(363)
								_this->x;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp35 = (_this->listen_x != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									bool tmp37 = _this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									tmp36 = !(tmp38);
								}
								else{
									HX_STACK_LINE(363)
									tmp36 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = _x1;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_this->listen_x(tmp37);
								}
								HX_STACK_LINE(363)
								_this->x;
							}
						}
						HX_STACK_LINE(363)
						{
							HX_STACK_LINE(363)
							_this->y = _y1;
							HX_STACK_LINE(363)
							bool tmp34 = _this->_construct;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(363)
							if ((tmp34)){
								HX_STACK_LINE(363)
								_this->y;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp35 = (_this->listen_y != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									bool tmp37 = _this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									tmp36 = !(tmp38);
								}
								else{
									HX_STACK_LINE(363)
									tmp36 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = _y1;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_this->listen_y(tmp37);
								}
								HX_STACK_LINE(363)
								_this->y;
							}
						}
						HX_STACK_LINE(363)
						{
							HX_STACK_LINE(363)
							_this->z = _z1;
							HX_STACK_LINE(363)
							bool tmp34 = _this->_construct;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(363)
							if ((tmp34)){
								HX_STACK_LINE(363)
								_this->z;
							}
							else{
								HX_STACK_LINE(363)
								bool tmp35 = (_this->listen_z != null());		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(363)
								bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(363)
								if ((tmp35)){
									HX_STACK_LINE(363)
									bool tmp37 = _this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(363)
									tmp36 = !(tmp38);
								}
								else{
									HX_STACK_LINE(363)
									tmp36 = false;
								}
								HX_STACK_LINE(363)
								if ((tmp36)){
									HX_STACK_LINE(363)
									Float tmp37 = _z1;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(363)
									_this->listen_z(tmp37);
								}
								HX_STACK_LINE(363)
								_this->z;
							}
						}
						HX_STACK_LINE(363)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(363)
						bool tmp34 = (_this->listen_x != null());		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(363)
						bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(363)
						if ((tmp34)){
							HX_STACK_LINE(363)
							bool tmp36 = _this->ignore_listeners;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(363)
							bool tmp37 = tmp36;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(363)
							tmp35 = !(tmp37);
						}
						else{
							HX_STACK_LINE(363)
							tmp35 = false;
						}
						HX_STACK_LINE(363)
						if ((tmp35)){
							HX_STACK_LINE(363)
							Float tmp36 = _this->x;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(363)
							_this->listen_x(tmp36);
						}
						HX_STACK_LINE(363)
						bool tmp36 = (_this->listen_y != null());		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(363)
						bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(363)
						if ((tmp36)){
							HX_STACK_LINE(363)
							bool tmp38 = _this->ignore_listeners;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(363)
							bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(363)
							tmp37 = !(tmp39);
						}
						else{
							HX_STACK_LINE(363)
							tmp37 = false;
						}
						HX_STACK_LINE(363)
						if ((tmp37)){
							HX_STACK_LINE(363)
							Float tmp38 = _this->y;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(363)
							_this->listen_y(tmp38);
						}
						HX_STACK_LINE(363)
						bool tmp38 = (_this->listen_z != null());		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(363)
						bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(363)
						if ((tmp38)){
							HX_STACK_LINE(363)
							bool tmp40 = _this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(363)
							bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(363)
							tmp39 = !(tmp41);
						}
						else{
							HX_STACK_LINE(363)
							tmp39 = false;
						}
						HX_STACK_LINE(363)
						if ((tmp39)){
							HX_STACK_LINE(363)
							Float tmp40 = _this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(363)
							_this->listen_z(tmp40);
						}
						HX_STACK_LINE(363)
						_this;
					}
					HX_STACK_LINE(363)
					_this;
				}
			}
			HX_STACK_LINE(363)
			Dynamic tmp13 = this->listen_x_dyn();		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(363)
			bool tmp14 = (tmp13 != null());		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(363)
			bool tmp15;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(363)
			if ((tmp14)){
				HX_STACK_LINE(363)
				bool tmp16 = this->ignore_listeners;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(363)
				bool tmp17 = tmp16;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(363)
				bool tmp18 = tmp17;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(363)
				tmp15 = !(tmp18);
			}
			else{
				HX_STACK_LINE(363)
				tmp15 = false;
			}
			HX_STACK_LINE(363)
			if ((tmp15)){
				HX_STACK_LINE(363)
				Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(363)
				this->listen_x(tmp16);
			}
			HX_STACK_LINE(363)
			Dynamic tmp16 = this->listen_y_dyn();		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(363)
			bool tmp17 = (tmp16 != null());		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(363)
			bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(363)
			if ((tmp17)){
				HX_STACK_LINE(363)
				bool tmp19 = this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(363)
				bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(363)
				bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(363)
				tmp18 = !(tmp21);
			}
			else{
				HX_STACK_LINE(363)
				tmp18 = false;
			}
			HX_STACK_LINE(363)
			if ((tmp18)){
				HX_STACK_LINE(363)
				Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(363)
				this->listen_y(tmp19);
			}
			HX_STACK_LINE(363)
			Dynamic tmp19 = this->listen_z_dyn();		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(363)
			bool tmp20 = (tmp19 != null());		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(363)
			bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(363)
			if ((tmp20)){
				HX_STACK_LINE(363)
				bool tmp22 = this->ignore_listeners;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(363)
				bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(363)
				bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(363)
				tmp21 = !(tmp24);
			}
			else{
				HX_STACK_LINE(363)
				tmp21 = false;
			}
			HX_STACK_LINE(363)
			if ((tmp21)){
				HX_STACK_LINE(363)
				Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(363)
				this->listen_z(tmp22);
			}
			HX_STACK_LINE(363)
			Dynamic tmp22 = this->listen_w_dyn();		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(363)
			bool tmp23 = (tmp22 != null());		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(363)
			bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(363)
			if ((tmp23)){
				HX_STACK_LINE(363)
				bool tmp25 = this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(363)
				bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(363)
				bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(363)
				tmp24 = !(tmp27);
			}
			else{
				HX_STACK_LINE(363)
				tmp24 = false;
			}
			HX_STACK_LINE(363)
			if ((tmp24)){
				HX_STACK_LINE(363)
				Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(363)
				this->listen_w(tmp25);
			}
		}
		HX_STACK_LINE(365)
		return hx::ObjectPtr<OBJ_>(this);
	}
	HX_STACK_LINE(369)
	Float tmp13 = cosHalfTheta;		HX_STACK_VAR(tmp13,"tmp13");
	HX_STACK_LINE(369)
	Float tmp14 = ::Math_obj::acos(tmp13);		HX_STACK_VAR(tmp14,"tmp14");
	HX_STACK_LINE(369)
	Float halfTheta = tmp14;		HX_STACK_VAR(halfTheta,"halfTheta");
	HX_STACK_LINE(370)
	Float tmp15 = (cosHalfTheta * cosHalfTheta);		HX_STACK_VAR(tmp15,"tmp15");
	HX_STACK_LINE(370)
	Float tmp16 = (((Float)1.0) - tmp15);		HX_STACK_VAR(tmp16,"tmp16");
	HX_STACK_LINE(370)
	Float tmp17 = ::Math_obj::sqrt(tmp16);		HX_STACK_VAR(tmp17,"tmp17");
	HX_STACK_LINE(370)
	Float sinHalfTheta = tmp17;		HX_STACK_VAR(sinHalfTheta,"sinHalfTheta");
	HX_STACK_LINE(372)
	Float tmp18 = sinHalfTheta;		HX_STACK_VAR(tmp18,"tmp18");
	HX_STACK_LINE(372)
	Float tmp19 = ::Math_obj::abs(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
	HX_STACK_LINE(372)
	bool tmp20 = (tmp19 < ((Float)0.001));		HX_STACK_VAR(tmp20,"tmp20");
	HX_STACK_LINE(372)
	if ((tmp20)){
		HX_STACK_LINE(374)
		{
			HX_STACK_LINE(374)
			this->ignore_euler = true;
			HX_STACK_LINE(374)
			{
				HX_STACK_LINE(374)
				Float tmp21 = _w;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(374)
				Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(374)
				Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(374)
				Float tmp24 = (((Float)0.5) * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(374)
				this->x = tmp24;
				HX_STACK_LINE(374)
				bool tmp25 = this->_construct;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(374)
				if ((tmp25)){
					HX_STACK_LINE(374)
					this->x;
				}
				else{
					HX_STACK_LINE(374)
					{
						HX_STACK_LINE(374)
						::phoenix::Vector tmp26 = this->euler;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(374)
						bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(374)
						bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(374)
						bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						if ((tmp29)){
							HX_STACK_LINE(374)
							tmp30 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(374)
							tmp30 = true;
						}
						HX_STACK_LINE(374)
						bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(374)
						if ((tmp31)){
							HX_STACK_LINE(374)
							tmp32 = this->_construct;
						}
						else{
							HX_STACK_LINE(374)
							tmp32 = true;
						}
						HX_STACK_LINE(374)
						if ((tmp32)){
							HX_STACK_LINE(374)
							Dynamic();
						}
						else{
							HX_STACK_LINE(374)
							::phoenix::Vector tmp33 = this->euler;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(374)
							::phoenix::Vector _this = tmp33;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(374)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(374)
							Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(374)
							Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(374)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(374)
							Float sqx = tmp36;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(374)
							Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(374)
							Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(374)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(374)
							Float sqy = tmp39;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(374)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(374)
							Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(374)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(374)
							Float sqz = tmp42;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(374)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(374)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(374)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(374)
							Float sqw = tmp45;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(374)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(374)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(374)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(374)
							bool tmp46 = (order == (int)0);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(374)
							if ((tmp46)){
								HX_STACK_LINE(374)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(374)
								Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(374)
								Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(374)
								Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(374)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(374)
								Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(374)
								Float tmp59 = (tmp57 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(374)
								Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(374)
								_x1 = tmp60;
								HX_STACK_LINE(374)
								Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float value = tmp69;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(374)
									bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									if ((tmp70)){
										HX_STACK_LINE(374)
										tmp61 = (int)-1;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										if ((tmp71)){
											HX_STACK_LINE(374)
											tmp61 = (int)1;
										}
										else{
											HX_STACK_LINE(374)
											tmp61 = value;
										}
									}
								}
								HX_STACK_LINE(374)
								Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(374)
								_y1 = tmp62;
								HX_STACK_LINE(374)
								Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(374)
								Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(374)
								Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(374)
								Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(374)
								Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(374)
								Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(374)
								Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(374)
								Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(374)
								Float tmp71 = (sqw + sqx);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(374)
								Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(374)
								Float tmp73 = (tmp71 - tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(374)
								Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(374)
								Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(374)
								Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(374)
								_z1 = tmp76;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp47 = (order == (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									Float tmp48;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									{
										HX_STACK_LINE(374)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = (tmp51 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = ((int)2 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float value = tmp56;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(374)
										bool tmp57 = (value < (int)-1);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										if ((tmp57)){
											HX_STACK_LINE(374)
											tmp48 = (int)-1;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp58 = (value > (int)1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp48 = (int)1;
											}
											else{
												HX_STACK_LINE(374)
												tmp48 = value;
											}
										}
									}
									HX_STACK_LINE(374)
									Float tmp49 = ::Math_obj::asin(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_x1 = tmp49;
									HX_STACK_LINE(374)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(374)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(374)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(374)
									Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(374)
									Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(374)
									Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(374)
									Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(374)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									_y1 = tmp63;
									HX_STACK_LINE(374)
									Float tmp64 = this->x;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = this->w;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float tmp70 = (tmp66 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									Float tmp71 = ((int)2 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(374)
									Float tmp72 = (sqw - sqx);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(374)
									Float tmp73 = sqy;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(374)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(374)
									Float tmp75 = sqz;		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(374)
									Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(374)
									Float tmp77 = ::Math_obj::atan2(tmp71,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(374)
									_z1 = tmp77;
								}
								else{
									HX_STACK_LINE(374)
									bool tmp48 = (order == (int)2);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									if ((tmp48)){
										HX_STACK_LINE(374)
										Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										{
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float value = tmp57;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(374)
											bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp49 = (int)-1;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												if ((tmp59)){
													HX_STACK_LINE(374)
													tmp49 = (int)1;
												}
												else{
													HX_STACK_LINE(374)
													tmp49 = value;
												}
											}
										}
										HX_STACK_LINE(374)
										Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										_x1 = tmp50;
										HX_STACK_LINE(374)
										Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(374)
										Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(374)
										Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(374)
										Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(374)
										Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(374)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(374)
										Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(374)
										_y1 = tmp64;
										HX_STACK_LINE(374)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(374)
										Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(374)
										Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(374)
										Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(374)
										Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(374)
										Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(374)
										Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(374)
										Float tmp73 = (sqw - sqx);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(374)
										Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(374)
										Float tmp75 = (tmp73 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(374)
										Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(374)
										Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(374)
										Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(374)
										_z1 = tmp78;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp49 = (order == (int)3);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(374)
											Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(374)
											Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(374)
											Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(374)
											Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(374)
											_x1 = tmp63;
											HX_STACK_LINE(374)
											Float tmp64;		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(374)
											{
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float value = tmp72;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(374)
												bool tmp73 = (value < (int)-1);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												if ((tmp73)){
													HX_STACK_LINE(374)
													tmp64 = (int)-1;
												}
												else{
													HX_STACK_LINE(374)
													bool tmp74 = (value > (int)1);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													if ((tmp74)){
														HX_STACK_LINE(374)
														tmp64 = (int)1;
													}
													else{
														HX_STACK_LINE(374)
														tmp64 = value;
													}
												}
											}
											HX_STACK_LINE(374)
											Float tmp65 = ::Math_obj::asin(tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(374)
											_y1 = tmp65;
											HX_STACK_LINE(374)
											Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(374)
											Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(374)
											Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(374)
											Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(374)
											Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(374)
											Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(374)
											Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(374)
											Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(374)
											Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(374)
											Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(374)
											Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(374)
											Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(374)
											Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(374)
											Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(374)
											_z1 = tmp79;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp50 = (order == (int)4);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											if ((tmp50)){
												HX_STACK_LINE(374)
												Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(374)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(374)
												Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(374)
												Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(374)
												Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(374)
												Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(374)
												Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(374)
												Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(374)
												Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(374)
												Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(374)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(374)
												Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(374)
												_x1 = tmp64;
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float tmp73 = (sqw + sqx);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(374)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(374)
												Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(374)
												Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(374)
												Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(374)
												_y1 = tmp78;
												HX_STACK_LINE(374)
												Float tmp79;		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(374)
												{
													HX_STACK_LINE(374)
													Float tmp80 = this->x;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													Float tmp81 = this->y;		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
													HX_STACK_LINE(374)
													Float tmp83 = this->z;		HX_STACK_VAR(tmp83,"tmp83");
													HX_STACK_LINE(374)
													Float tmp84 = this->w;		HX_STACK_VAR(tmp84,"tmp84");
													HX_STACK_LINE(374)
													Float tmp85 = (tmp83 * tmp84);		HX_STACK_VAR(tmp85,"tmp85");
													HX_STACK_LINE(374)
													Float tmp86 = (tmp82 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
													HX_STACK_LINE(374)
													Float tmp87 = ((int)2 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
													HX_STACK_LINE(374)
													Float value = tmp87;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(374)
													bool tmp88 = (value < (int)-1);		HX_STACK_VAR(tmp88,"tmp88");
													HX_STACK_LINE(374)
													if ((tmp88)){
														HX_STACK_LINE(374)
														tmp79 = (int)-1;
													}
													else{
														HX_STACK_LINE(374)
														bool tmp89 = (value > (int)1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp79 = (int)1;
														}
														else{
															HX_STACK_LINE(374)
															tmp79 = value;
														}
													}
												}
												HX_STACK_LINE(374)
												Float tmp80 = ::Math_obj::asin(tmp79);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(374)
												_z1 = tmp80;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp51 = (order == (int)5);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												if ((tmp51)){
													HX_STACK_LINE(374)
													Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(374)
													Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(374)
													Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(374)
													Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(374)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(374)
													Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(374)
													Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(374)
													Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(374)
													Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(374)
													Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(374)
													Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(374)
													Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(374)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(374)
													Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(374)
													_x1 = tmp65;
													HX_STACK_LINE(374)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(374)
													Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(374)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(374)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(374)
													Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(374)
													Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(374)
													Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(374)
													Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(374)
													Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(374)
													Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(374)
													Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(374)
													Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(374)
													Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(374)
													_y1 = tmp79;
													HX_STACK_LINE(374)
													Float tmp80;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													{
														HX_STACK_LINE(374)
														Float tmp81 = this->z;		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(374)
														Float tmp82 = this->w;		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(374)
														Float tmp83 = (tmp81 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
														HX_STACK_LINE(374)
														Float tmp84 = this->x;		HX_STACK_VAR(tmp84,"tmp84");
														HX_STACK_LINE(374)
														Float tmp85 = this->y;		HX_STACK_VAR(tmp85,"tmp85");
														HX_STACK_LINE(374)
														Float tmp86 = (tmp84 * tmp85);		HX_STACK_VAR(tmp86,"tmp86");
														HX_STACK_LINE(374)
														Float tmp87 = (tmp83 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
														HX_STACK_LINE(374)
														Float tmp88 = ((int)2 * tmp87);		HX_STACK_VAR(tmp88,"tmp88");
														HX_STACK_LINE(374)
														Float value = tmp88;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(374)
														bool tmp89 = (value < (int)-1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp80 = (int)-1;
														}
														else{
															HX_STACK_LINE(374)
															bool tmp90 = (value > (int)1);		HX_STACK_VAR(tmp90,"tmp90");
															HX_STACK_LINE(374)
															if ((tmp90)){
																HX_STACK_LINE(374)
																tmp80 = (int)1;
															}
															else{
																HX_STACK_LINE(374)
																tmp80 = value;
															}
														}
													}
													HX_STACK_LINE(374)
													Float tmp81 = ::Math_obj::asin(tmp80);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													_z1 = tmp81;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(374)
							{
								HX_STACK_LINE(374)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(374)
								_this->ignore_listeners = true;
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->x = _x1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->x;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_x != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _x1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_x(tmp50);
										}
										HX_STACK_LINE(374)
										_this->x;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->y = _y1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->y;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_y != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _y1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_y(tmp50);
										}
										HX_STACK_LINE(374)
										_this->y;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->z = _z1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->z;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_z != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _z1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_z(tmp50);
										}
										HX_STACK_LINE(374)
										_this->z;
									}
								}
								HX_STACK_LINE(374)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(374)
								bool tmp47 = (_this->listen_x != null());		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									bool tmp49 = _this->ignore_listeners;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									tmp48 = !(tmp50);
								}
								else{
									HX_STACK_LINE(374)
									tmp48 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp48)){
									HX_STACK_LINE(374)
									Float tmp49 = _this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_this->listen_x(tmp49);
								}
								HX_STACK_LINE(374)
								bool tmp49 = (_this->listen_y != null());		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								bool tmp50;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								if ((tmp49)){
									HX_STACK_LINE(374)
									bool tmp51 = _this->ignore_listeners;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									bool tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									tmp50 = !(tmp52);
								}
								else{
									HX_STACK_LINE(374)
									tmp50 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp50)){
									HX_STACK_LINE(374)
									Float tmp51 = _this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									_this->listen_y(tmp51);
								}
								HX_STACK_LINE(374)
								bool tmp51 = (_this->listen_z != null());		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								if ((tmp51)){
									HX_STACK_LINE(374)
									bool tmp53 = _this->ignore_listeners;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									tmp52 = !(tmp54);
								}
								else{
									HX_STACK_LINE(374)
									tmp52 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp52)){
									HX_STACK_LINE(374)
									Float tmp53 = _this->z;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									_this->listen_z(tmp53);
								}
								HX_STACK_LINE(374)
								_this;
							}
							HX_STACK_LINE(374)
							_this;
						}
					}
					HX_STACK_LINE(374)
					Dynamic tmp26 = this->listen_x_dyn();		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(374)
					bool tmp27 = (tmp26 != null());		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(374)
					bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(374)
					if ((tmp27)){
						HX_STACK_LINE(374)
						bool tmp29 = this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						tmp28 = !(tmp31);
					}
					else{
						HX_STACK_LINE(374)
						tmp28 = false;
					}
					HX_STACK_LINE(374)
					if ((tmp28)){
						HX_STACK_LINE(374)
						Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						this->listen_x(tmp29);
					}
					HX_STACK_LINE(374)
					this->x;
				}
			}
			HX_STACK_LINE(374)
			{
				HX_STACK_LINE(375)
				Float tmp21 = _x;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(375)
				Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(375)
				Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(375)
				Float tmp24 = (((Float)0.5) * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(374)
				this->y = tmp24;
				HX_STACK_LINE(374)
				bool tmp25 = this->_construct;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(374)
				if ((tmp25)){
					HX_STACK_LINE(374)
					this->y;
				}
				else{
					HX_STACK_LINE(374)
					{
						HX_STACK_LINE(374)
						::phoenix::Vector tmp26 = this->euler;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(374)
						bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(374)
						bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(374)
						bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						if ((tmp29)){
							HX_STACK_LINE(374)
							tmp30 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(374)
							tmp30 = true;
						}
						HX_STACK_LINE(374)
						bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(374)
						if ((tmp31)){
							HX_STACK_LINE(374)
							tmp32 = this->_construct;
						}
						else{
							HX_STACK_LINE(374)
							tmp32 = true;
						}
						HX_STACK_LINE(374)
						if ((tmp32)){
							HX_STACK_LINE(374)
							Dynamic();
						}
						else{
							HX_STACK_LINE(374)
							::phoenix::Vector tmp33 = this->euler;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(374)
							::phoenix::Vector _this = tmp33;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(374)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(374)
							Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(374)
							Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(374)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(374)
							Float sqx = tmp36;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(374)
							Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(374)
							Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(374)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(374)
							Float sqy = tmp39;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(374)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(374)
							Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(374)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(374)
							Float sqz = tmp42;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(374)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(374)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(374)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(374)
							Float sqw = tmp45;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(374)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(374)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(374)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(374)
							bool tmp46 = (order == (int)0);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(374)
							if ((tmp46)){
								HX_STACK_LINE(374)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(374)
								Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(374)
								Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(374)
								Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(374)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(374)
								Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(374)
								Float tmp59 = (tmp57 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(374)
								Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(374)
								_x1 = tmp60;
								HX_STACK_LINE(374)
								Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float value = tmp69;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(374)
									bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									if ((tmp70)){
										HX_STACK_LINE(374)
										tmp61 = (int)-1;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										if ((tmp71)){
											HX_STACK_LINE(374)
											tmp61 = (int)1;
										}
										else{
											HX_STACK_LINE(374)
											tmp61 = value;
										}
									}
								}
								HX_STACK_LINE(374)
								Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(374)
								_y1 = tmp62;
								HX_STACK_LINE(374)
								Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(374)
								Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(374)
								Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(374)
								Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(374)
								Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(374)
								Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(374)
								Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(374)
								Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(374)
								Float tmp71 = (sqw + sqx);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(374)
								Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(374)
								Float tmp73 = (tmp71 - tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(374)
								Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(374)
								Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(374)
								Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(374)
								_z1 = tmp76;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp47 = (order == (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									Float tmp48;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									{
										HX_STACK_LINE(374)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = (tmp51 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = ((int)2 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float value = tmp56;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(374)
										bool tmp57 = (value < (int)-1);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										if ((tmp57)){
											HX_STACK_LINE(374)
											tmp48 = (int)-1;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp58 = (value > (int)1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp48 = (int)1;
											}
											else{
												HX_STACK_LINE(374)
												tmp48 = value;
											}
										}
									}
									HX_STACK_LINE(374)
									Float tmp49 = ::Math_obj::asin(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_x1 = tmp49;
									HX_STACK_LINE(374)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(374)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(374)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(374)
									Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(374)
									Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(374)
									Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(374)
									Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(374)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									_y1 = tmp63;
									HX_STACK_LINE(374)
									Float tmp64 = this->x;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = this->w;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float tmp70 = (tmp66 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									Float tmp71 = ((int)2 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(374)
									Float tmp72 = (sqw - sqx);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(374)
									Float tmp73 = sqy;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(374)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(374)
									Float tmp75 = sqz;		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(374)
									Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(374)
									Float tmp77 = ::Math_obj::atan2(tmp71,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(374)
									_z1 = tmp77;
								}
								else{
									HX_STACK_LINE(374)
									bool tmp48 = (order == (int)2);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									if ((tmp48)){
										HX_STACK_LINE(374)
										Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										{
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float value = tmp57;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(374)
											bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp49 = (int)-1;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												if ((tmp59)){
													HX_STACK_LINE(374)
													tmp49 = (int)1;
												}
												else{
													HX_STACK_LINE(374)
													tmp49 = value;
												}
											}
										}
										HX_STACK_LINE(374)
										Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										_x1 = tmp50;
										HX_STACK_LINE(374)
										Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(374)
										Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(374)
										Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(374)
										Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(374)
										Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(374)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(374)
										Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(374)
										_y1 = tmp64;
										HX_STACK_LINE(374)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(374)
										Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(374)
										Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(374)
										Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(374)
										Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(374)
										Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(374)
										Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(374)
										Float tmp73 = (sqw - sqx);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(374)
										Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(374)
										Float tmp75 = (tmp73 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(374)
										Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(374)
										Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(374)
										Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(374)
										_z1 = tmp78;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp49 = (order == (int)3);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(374)
											Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(374)
											Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(374)
											Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(374)
											Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(374)
											_x1 = tmp63;
											HX_STACK_LINE(374)
											Float tmp64;		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(374)
											{
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float value = tmp72;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(374)
												bool tmp73 = (value < (int)-1);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												if ((tmp73)){
													HX_STACK_LINE(374)
													tmp64 = (int)-1;
												}
												else{
													HX_STACK_LINE(374)
													bool tmp74 = (value > (int)1);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													if ((tmp74)){
														HX_STACK_LINE(374)
														tmp64 = (int)1;
													}
													else{
														HX_STACK_LINE(374)
														tmp64 = value;
													}
												}
											}
											HX_STACK_LINE(374)
											Float tmp65 = ::Math_obj::asin(tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(374)
											_y1 = tmp65;
											HX_STACK_LINE(374)
											Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(374)
											Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(374)
											Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(374)
											Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(374)
											Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(374)
											Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(374)
											Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(374)
											Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(374)
											Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(374)
											Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(374)
											Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(374)
											Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(374)
											Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(374)
											Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(374)
											_z1 = tmp79;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp50 = (order == (int)4);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											if ((tmp50)){
												HX_STACK_LINE(374)
												Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(374)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(374)
												Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(374)
												Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(374)
												Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(374)
												Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(374)
												Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(374)
												Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(374)
												Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(374)
												Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(374)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(374)
												Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(374)
												_x1 = tmp64;
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float tmp73 = (sqw + sqx);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(374)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(374)
												Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(374)
												Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(374)
												Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(374)
												_y1 = tmp78;
												HX_STACK_LINE(374)
												Float tmp79;		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(374)
												{
													HX_STACK_LINE(374)
													Float tmp80 = this->x;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													Float tmp81 = this->y;		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
													HX_STACK_LINE(374)
													Float tmp83 = this->z;		HX_STACK_VAR(tmp83,"tmp83");
													HX_STACK_LINE(374)
													Float tmp84 = this->w;		HX_STACK_VAR(tmp84,"tmp84");
													HX_STACK_LINE(374)
													Float tmp85 = (tmp83 * tmp84);		HX_STACK_VAR(tmp85,"tmp85");
													HX_STACK_LINE(374)
													Float tmp86 = (tmp82 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
													HX_STACK_LINE(374)
													Float tmp87 = ((int)2 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
													HX_STACK_LINE(374)
													Float value = tmp87;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(374)
													bool tmp88 = (value < (int)-1);		HX_STACK_VAR(tmp88,"tmp88");
													HX_STACK_LINE(374)
													if ((tmp88)){
														HX_STACK_LINE(374)
														tmp79 = (int)-1;
													}
													else{
														HX_STACK_LINE(374)
														bool tmp89 = (value > (int)1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp79 = (int)1;
														}
														else{
															HX_STACK_LINE(374)
															tmp79 = value;
														}
													}
												}
												HX_STACK_LINE(374)
												Float tmp80 = ::Math_obj::asin(tmp79);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(374)
												_z1 = tmp80;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp51 = (order == (int)5);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												if ((tmp51)){
													HX_STACK_LINE(374)
													Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(374)
													Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(374)
													Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(374)
													Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(374)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(374)
													Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(374)
													Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(374)
													Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(374)
													Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(374)
													Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(374)
													Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(374)
													Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(374)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(374)
													Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(374)
													_x1 = tmp65;
													HX_STACK_LINE(374)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(374)
													Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(374)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(374)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(374)
													Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(374)
													Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(374)
													Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(374)
													Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(374)
													Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(374)
													Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(374)
													Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(374)
													Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(374)
													Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(374)
													_y1 = tmp79;
													HX_STACK_LINE(374)
													Float tmp80;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													{
														HX_STACK_LINE(374)
														Float tmp81 = this->z;		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(374)
														Float tmp82 = this->w;		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(374)
														Float tmp83 = (tmp81 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
														HX_STACK_LINE(374)
														Float tmp84 = this->x;		HX_STACK_VAR(tmp84,"tmp84");
														HX_STACK_LINE(374)
														Float tmp85 = this->y;		HX_STACK_VAR(tmp85,"tmp85");
														HX_STACK_LINE(374)
														Float tmp86 = (tmp84 * tmp85);		HX_STACK_VAR(tmp86,"tmp86");
														HX_STACK_LINE(374)
														Float tmp87 = (tmp83 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
														HX_STACK_LINE(374)
														Float tmp88 = ((int)2 * tmp87);		HX_STACK_VAR(tmp88,"tmp88");
														HX_STACK_LINE(374)
														Float value = tmp88;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(374)
														bool tmp89 = (value < (int)-1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp80 = (int)-1;
														}
														else{
															HX_STACK_LINE(374)
															bool tmp90 = (value > (int)1);		HX_STACK_VAR(tmp90,"tmp90");
															HX_STACK_LINE(374)
															if ((tmp90)){
																HX_STACK_LINE(374)
																tmp80 = (int)1;
															}
															else{
																HX_STACK_LINE(374)
																tmp80 = value;
															}
														}
													}
													HX_STACK_LINE(374)
													Float tmp81 = ::Math_obj::asin(tmp80);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													_z1 = tmp81;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(374)
							{
								HX_STACK_LINE(374)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(374)
								_this->ignore_listeners = true;
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->x = _x1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->x;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_x != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _x1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_x(tmp50);
										}
										HX_STACK_LINE(374)
										_this->x;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->y = _y1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->y;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_y != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _y1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_y(tmp50);
										}
										HX_STACK_LINE(374)
										_this->y;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->z = _z1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->z;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_z != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _z1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_z(tmp50);
										}
										HX_STACK_LINE(374)
										_this->z;
									}
								}
								HX_STACK_LINE(374)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(374)
								bool tmp47 = (_this->listen_x != null());		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									bool tmp49 = _this->ignore_listeners;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									tmp48 = !(tmp50);
								}
								else{
									HX_STACK_LINE(374)
									tmp48 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp48)){
									HX_STACK_LINE(374)
									Float tmp49 = _this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_this->listen_x(tmp49);
								}
								HX_STACK_LINE(374)
								bool tmp49 = (_this->listen_y != null());		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								bool tmp50;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								if ((tmp49)){
									HX_STACK_LINE(374)
									bool tmp51 = _this->ignore_listeners;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									bool tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									tmp50 = !(tmp52);
								}
								else{
									HX_STACK_LINE(374)
									tmp50 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp50)){
									HX_STACK_LINE(374)
									Float tmp51 = _this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									_this->listen_y(tmp51);
								}
								HX_STACK_LINE(374)
								bool tmp51 = (_this->listen_z != null());		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								if ((tmp51)){
									HX_STACK_LINE(374)
									bool tmp53 = _this->ignore_listeners;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									tmp52 = !(tmp54);
								}
								else{
									HX_STACK_LINE(374)
									tmp52 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp52)){
									HX_STACK_LINE(374)
									Float tmp53 = _this->z;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									_this->listen_z(tmp53);
								}
								HX_STACK_LINE(374)
								_this;
							}
							HX_STACK_LINE(374)
							_this;
						}
					}
					HX_STACK_LINE(374)
					Dynamic tmp26 = this->listen_y_dyn();		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(374)
					bool tmp27 = (tmp26 != null());		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(374)
					bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(374)
					if ((tmp27)){
						HX_STACK_LINE(374)
						bool tmp29 = this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						tmp28 = !(tmp31);
					}
					else{
						HX_STACK_LINE(374)
						tmp28 = false;
					}
					HX_STACK_LINE(374)
					if ((tmp28)){
						HX_STACK_LINE(374)
						Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						this->listen_y(tmp29);
					}
					HX_STACK_LINE(374)
					this->y;
				}
			}
			HX_STACK_LINE(374)
			{
				HX_STACK_LINE(376)
				Float tmp21 = _y;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(376)
				Float tmp22 = this->y;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(376)
				Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(376)
				Float tmp24 = (((Float)0.5) * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(374)
				this->z = tmp24;
				HX_STACK_LINE(374)
				bool tmp25 = this->_construct;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(374)
				if ((tmp25)){
					HX_STACK_LINE(374)
					this->z;
				}
				else{
					HX_STACK_LINE(374)
					{
						HX_STACK_LINE(374)
						::phoenix::Vector tmp26 = this->euler;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(374)
						bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(374)
						bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(374)
						bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						if ((tmp29)){
							HX_STACK_LINE(374)
							tmp30 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(374)
							tmp30 = true;
						}
						HX_STACK_LINE(374)
						bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(374)
						if ((tmp31)){
							HX_STACK_LINE(374)
							tmp32 = this->_construct;
						}
						else{
							HX_STACK_LINE(374)
							tmp32 = true;
						}
						HX_STACK_LINE(374)
						if ((tmp32)){
							HX_STACK_LINE(374)
							Dynamic();
						}
						else{
							HX_STACK_LINE(374)
							::phoenix::Vector tmp33 = this->euler;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(374)
							::phoenix::Vector _this = tmp33;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(374)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(374)
							Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(374)
							Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(374)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(374)
							Float sqx = tmp36;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(374)
							Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(374)
							Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(374)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(374)
							Float sqy = tmp39;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(374)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(374)
							Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(374)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(374)
							Float sqz = tmp42;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(374)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(374)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(374)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(374)
							Float sqw = tmp45;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(374)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(374)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(374)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(374)
							bool tmp46 = (order == (int)0);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(374)
							if ((tmp46)){
								HX_STACK_LINE(374)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(374)
								Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(374)
								Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(374)
								Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(374)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(374)
								Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(374)
								Float tmp59 = (tmp57 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(374)
								Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(374)
								_x1 = tmp60;
								HX_STACK_LINE(374)
								Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float value = tmp69;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(374)
									bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									if ((tmp70)){
										HX_STACK_LINE(374)
										tmp61 = (int)-1;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										if ((tmp71)){
											HX_STACK_LINE(374)
											tmp61 = (int)1;
										}
										else{
											HX_STACK_LINE(374)
											tmp61 = value;
										}
									}
								}
								HX_STACK_LINE(374)
								Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(374)
								_y1 = tmp62;
								HX_STACK_LINE(374)
								Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(374)
								Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(374)
								Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(374)
								Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(374)
								Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(374)
								Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(374)
								Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(374)
								Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(374)
								Float tmp71 = (sqw + sqx);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(374)
								Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(374)
								Float tmp73 = (tmp71 - tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(374)
								Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(374)
								Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(374)
								Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(374)
								_z1 = tmp76;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp47 = (order == (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									Float tmp48;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									{
										HX_STACK_LINE(374)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = (tmp51 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = ((int)2 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float value = tmp56;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(374)
										bool tmp57 = (value < (int)-1);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										if ((tmp57)){
											HX_STACK_LINE(374)
											tmp48 = (int)-1;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp58 = (value > (int)1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp48 = (int)1;
											}
											else{
												HX_STACK_LINE(374)
												tmp48 = value;
											}
										}
									}
									HX_STACK_LINE(374)
									Float tmp49 = ::Math_obj::asin(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_x1 = tmp49;
									HX_STACK_LINE(374)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(374)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(374)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(374)
									Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(374)
									Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(374)
									Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(374)
									Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(374)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									_y1 = tmp63;
									HX_STACK_LINE(374)
									Float tmp64 = this->x;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = this->w;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float tmp70 = (tmp66 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									Float tmp71 = ((int)2 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(374)
									Float tmp72 = (sqw - sqx);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(374)
									Float tmp73 = sqy;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(374)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(374)
									Float tmp75 = sqz;		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(374)
									Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(374)
									Float tmp77 = ::Math_obj::atan2(tmp71,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(374)
									_z1 = tmp77;
								}
								else{
									HX_STACK_LINE(374)
									bool tmp48 = (order == (int)2);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									if ((tmp48)){
										HX_STACK_LINE(374)
										Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										{
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float value = tmp57;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(374)
											bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp49 = (int)-1;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												if ((tmp59)){
													HX_STACK_LINE(374)
													tmp49 = (int)1;
												}
												else{
													HX_STACK_LINE(374)
													tmp49 = value;
												}
											}
										}
										HX_STACK_LINE(374)
										Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										_x1 = tmp50;
										HX_STACK_LINE(374)
										Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(374)
										Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(374)
										Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(374)
										Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(374)
										Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(374)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(374)
										Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(374)
										_y1 = tmp64;
										HX_STACK_LINE(374)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(374)
										Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(374)
										Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(374)
										Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(374)
										Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(374)
										Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(374)
										Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(374)
										Float tmp73 = (sqw - sqx);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(374)
										Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(374)
										Float tmp75 = (tmp73 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(374)
										Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(374)
										Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(374)
										Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(374)
										_z1 = tmp78;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp49 = (order == (int)3);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(374)
											Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(374)
											Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(374)
											Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(374)
											Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(374)
											_x1 = tmp63;
											HX_STACK_LINE(374)
											Float tmp64;		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(374)
											{
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float value = tmp72;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(374)
												bool tmp73 = (value < (int)-1);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												if ((tmp73)){
													HX_STACK_LINE(374)
													tmp64 = (int)-1;
												}
												else{
													HX_STACK_LINE(374)
													bool tmp74 = (value > (int)1);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													if ((tmp74)){
														HX_STACK_LINE(374)
														tmp64 = (int)1;
													}
													else{
														HX_STACK_LINE(374)
														tmp64 = value;
													}
												}
											}
											HX_STACK_LINE(374)
											Float tmp65 = ::Math_obj::asin(tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(374)
											_y1 = tmp65;
											HX_STACK_LINE(374)
											Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(374)
											Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(374)
											Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(374)
											Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(374)
											Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(374)
											Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(374)
											Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(374)
											Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(374)
											Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(374)
											Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(374)
											Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(374)
											Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(374)
											Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(374)
											Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(374)
											_z1 = tmp79;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp50 = (order == (int)4);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											if ((tmp50)){
												HX_STACK_LINE(374)
												Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(374)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(374)
												Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(374)
												Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(374)
												Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(374)
												Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(374)
												Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(374)
												Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(374)
												Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(374)
												Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(374)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(374)
												Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(374)
												_x1 = tmp64;
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float tmp73 = (sqw + sqx);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(374)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(374)
												Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(374)
												Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(374)
												Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(374)
												_y1 = tmp78;
												HX_STACK_LINE(374)
												Float tmp79;		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(374)
												{
													HX_STACK_LINE(374)
													Float tmp80 = this->x;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													Float tmp81 = this->y;		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
													HX_STACK_LINE(374)
													Float tmp83 = this->z;		HX_STACK_VAR(tmp83,"tmp83");
													HX_STACK_LINE(374)
													Float tmp84 = this->w;		HX_STACK_VAR(tmp84,"tmp84");
													HX_STACK_LINE(374)
													Float tmp85 = (tmp83 * tmp84);		HX_STACK_VAR(tmp85,"tmp85");
													HX_STACK_LINE(374)
													Float tmp86 = (tmp82 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
													HX_STACK_LINE(374)
													Float tmp87 = ((int)2 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
													HX_STACK_LINE(374)
													Float value = tmp87;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(374)
													bool tmp88 = (value < (int)-1);		HX_STACK_VAR(tmp88,"tmp88");
													HX_STACK_LINE(374)
													if ((tmp88)){
														HX_STACK_LINE(374)
														tmp79 = (int)-1;
													}
													else{
														HX_STACK_LINE(374)
														bool tmp89 = (value > (int)1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp79 = (int)1;
														}
														else{
															HX_STACK_LINE(374)
															tmp79 = value;
														}
													}
												}
												HX_STACK_LINE(374)
												Float tmp80 = ::Math_obj::asin(tmp79);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(374)
												_z1 = tmp80;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp51 = (order == (int)5);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												if ((tmp51)){
													HX_STACK_LINE(374)
													Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(374)
													Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(374)
													Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(374)
													Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(374)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(374)
													Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(374)
													Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(374)
													Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(374)
													Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(374)
													Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(374)
													Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(374)
													Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(374)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(374)
													Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(374)
													_x1 = tmp65;
													HX_STACK_LINE(374)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(374)
													Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(374)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(374)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(374)
													Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(374)
													Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(374)
													Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(374)
													Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(374)
													Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(374)
													Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(374)
													Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(374)
													Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(374)
													Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(374)
													_y1 = tmp79;
													HX_STACK_LINE(374)
													Float tmp80;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													{
														HX_STACK_LINE(374)
														Float tmp81 = this->z;		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(374)
														Float tmp82 = this->w;		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(374)
														Float tmp83 = (tmp81 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
														HX_STACK_LINE(374)
														Float tmp84 = this->x;		HX_STACK_VAR(tmp84,"tmp84");
														HX_STACK_LINE(374)
														Float tmp85 = this->y;		HX_STACK_VAR(tmp85,"tmp85");
														HX_STACK_LINE(374)
														Float tmp86 = (tmp84 * tmp85);		HX_STACK_VAR(tmp86,"tmp86");
														HX_STACK_LINE(374)
														Float tmp87 = (tmp83 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
														HX_STACK_LINE(374)
														Float tmp88 = ((int)2 * tmp87);		HX_STACK_VAR(tmp88,"tmp88");
														HX_STACK_LINE(374)
														Float value = tmp88;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(374)
														bool tmp89 = (value < (int)-1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp80 = (int)-1;
														}
														else{
															HX_STACK_LINE(374)
															bool tmp90 = (value > (int)1);		HX_STACK_VAR(tmp90,"tmp90");
															HX_STACK_LINE(374)
															if ((tmp90)){
																HX_STACK_LINE(374)
																tmp80 = (int)1;
															}
															else{
																HX_STACK_LINE(374)
																tmp80 = value;
															}
														}
													}
													HX_STACK_LINE(374)
													Float tmp81 = ::Math_obj::asin(tmp80);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													_z1 = tmp81;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(374)
							{
								HX_STACK_LINE(374)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(374)
								_this->ignore_listeners = true;
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->x = _x1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->x;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_x != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _x1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_x(tmp50);
										}
										HX_STACK_LINE(374)
										_this->x;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->y = _y1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->y;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_y != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _y1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_y(tmp50);
										}
										HX_STACK_LINE(374)
										_this->y;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->z = _z1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->z;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_z != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _z1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_z(tmp50);
										}
										HX_STACK_LINE(374)
										_this->z;
									}
								}
								HX_STACK_LINE(374)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(374)
								bool tmp47 = (_this->listen_x != null());		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									bool tmp49 = _this->ignore_listeners;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									tmp48 = !(tmp50);
								}
								else{
									HX_STACK_LINE(374)
									tmp48 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp48)){
									HX_STACK_LINE(374)
									Float tmp49 = _this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_this->listen_x(tmp49);
								}
								HX_STACK_LINE(374)
								bool tmp49 = (_this->listen_y != null());		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								bool tmp50;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								if ((tmp49)){
									HX_STACK_LINE(374)
									bool tmp51 = _this->ignore_listeners;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									bool tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									tmp50 = !(tmp52);
								}
								else{
									HX_STACK_LINE(374)
									tmp50 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp50)){
									HX_STACK_LINE(374)
									Float tmp51 = _this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									_this->listen_y(tmp51);
								}
								HX_STACK_LINE(374)
								bool tmp51 = (_this->listen_z != null());		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								if ((tmp51)){
									HX_STACK_LINE(374)
									bool tmp53 = _this->ignore_listeners;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									tmp52 = !(tmp54);
								}
								else{
									HX_STACK_LINE(374)
									tmp52 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp52)){
									HX_STACK_LINE(374)
									Float tmp53 = _this->z;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									_this->listen_z(tmp53);
								}
								HX_STACK_LINE(374)
								_this;
							}
							HX_STACK_LINE(374)
							_this;
						}
					}
					HX_STACK_LINE(374)
					Dynamic tmp26 = this->listen_z_dyn();		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(374)
					bool tmp27 = (tmp26 != null());		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(374)
					bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(374)
					if ((tmp27)){
						HX_STACK_LINE(374)
						bool tmp29 = this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						tmp28 = !(tmp31);
					}
					else{
						HX_STACK_LINE(374)
						tmp28 = false;
					}
					HX_STACK_LINE(374)
					if ((tmp28)){
						HX_STACK_LINE(374)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						this->listen_z(tmp29);
					}
					HX_STACK_LINE(374)
					this->z;
				}
			}
			HX_STACK_LINE(374)
			{
				HX_STACK_LINE(377)
				Float tmp21 = _z;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(377)
				Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(377)
				Float tmp23 = (tmp21 + tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(377)
				Float tmp24 = (((Float)0.5) * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(374)
				this->w = tmp24;
				HX_STACK_LINE(374)
				bool tmp25 = this->_construct;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(374)
				if ((tmp25)){
					HX_STACK_LINE(374)
					this->w;
				}
				else{
					HX_STACK_LINE(374)
					{
						HX_STACK_LINE(374)
						::phoenix::Vector tmp26 = this->euler;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(374)
						bool tmp27 = (tmp26 == null());		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(374)
						bool tmp28 = !(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(374)
						bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						if ((tmp29)){
							HX_STACK_LINE(374)
							tmp30 = this->ignore_euler;
						}
						else{
							HX_STACK_LINE(374)
							tmp30 = true;
						}
						HX_STACK_LINE(374)
						bool tmp31 = !(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(374)
						if ((tmp31)){
							HX_STACK_LINE(374)
							tmp32 = this->_construct;
						}
						else{
							HX_STACK_LINE(374)
							tmp32 = true;
						}
						HX_STACK_LINE(374)
						if ((tmp32)){
							HX_STACK_LINE(374)
							Dynamic();
						}
						else{
							HX_STACK_LINE(374)
							::phoenix::Vector tmp33 = this->euler;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(374)
							::phoenix::Vector _this = tmp33;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(374)
							int order = (int)0;		HX_STACK_VAR(order,"order");
							HX_STACK_LINE(374)
							Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(374)
							Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(374)
							Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(374)
							Float sqx = tmp36;		HX_STACK_VAR(sqx,"sqx");
							HX_STACK_LINE(374)
							Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(374)
							Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(374)
							Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(374)
							Float sqy = tmp39;		HX_STACK_VAR(sqy,"sqy");
							HX_STACK_LINE(374)
							Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(374)
							Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(374)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(374)
							Float sqz = tmp42;		HX_STACK_VAR(sqz,"sqz");
							HX_STACK_LINE(374)
							Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(374)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(374)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(374)
							Float sqw = tmp45;		HX_STACK_VAR(sqw,"sqw");
							HX_STACK_LINE(374)
							Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
							HX_STACK_LINE(374)
							Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
							HX_STACK_LINE(374)
							Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
							HX_STACK_LINE(374)
							bool tmp46 = (order == (int)0);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(374)
							if ((tmp46)){
								HX_STACK_LINE(374)
								Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								Float tmp53 = (tmp49 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(374)
								Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(374)
								Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(374)
								Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(374)
								Float tmp57 = (tmp55 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(374)
								Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(374)
								Float tmp59 = (tmp57 + tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(374)
								Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(374)
								_x1 = tmp60;
								HX_STACK_LINE(374)
								Float tmp61;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = (tmp64 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float value = tmp69;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(374)
									bool tmp70 = (value < (int)-1);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									if ((tmp70)){
										HX_STACK_LINE(374)
										tmp61 = (int)-1;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp71 = (value > (int)1);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										if ((tmp71)){
											HX_STACK_LINE(374)
											tmp61 = (int)1;
										}
										else{
											HX_STACK_LINE(374)
											tmp61 = value;
										}
									}
								}
								HX_STACK_LINE(374)
								Float tmp62 = ::Math_obj::asin(tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(374)
								_y1 = tmp62;
								HX_STACK_LINE(374)
								Float tmp63 = this->z;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(374)
								Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(374)
								Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(374)
								Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(374)
								Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(374)
								Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(374)
								Float tmp69 = (tmp65 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(374)
								Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(374)
								Float tmp71 = (sqw + sqx);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(374)
								Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(374)
								Float tmp73 = (tmp71 - tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(374)
								Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(374)
								Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(374)
								Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(374)
								_z1 = tmp76;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp47 = (order == (int)1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									Float tmp48;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									{
										HX_STACK_LINE(374)
										Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										Float tmp50 = this->w;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->y;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = (tmp51 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = ((int)2 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float value = tmp56;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(374)
										bool tmp57 = (value < (int)-1);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										if ((tmp57)){
											HX_STACK_LINE(374)
											tmp48 = (int)-1;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp58 = (value > (int)1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp48 = (int)1;
											}
											else{
												HX_STACK_LINE(374)
												tmp48 = value;
											}
										}
									}
									HX_STACK_LINE(374)
									Float tmp49 = ::Math_obj::asin(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_x1 = tmp49;
									HX_STACK_LINE(374)
									Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(374)
									Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(374)
									Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(374)
									Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(374)
									Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(374)
									Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(374)
									Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(374)
									Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									_y1 = tmp63;
									HX_STACK_LINE(374)
									Float tmp64 = this->x;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = this->w;		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float tmp70 = (tmp66 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									Float tmp71 = ((int)2 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(374)
									Float tmp72 = (sqw - sqx);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(374)
									Float tmp73 = sqy;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(374)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(374)
									Float tmp75 = sqz;		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(374)
									Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(374)
									Float tmp77 = ::Math_obj::atan2(tmp71,tmp76);		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(374)
									_z1 = tmp77;
								}
								else{
									HX_STACK_LINE(374)
									bool tmp48 = (order == (int)2);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									if ((tmp48)){
										HX_STACK_LINE(374)
										Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										{
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->y;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float value = tmp57;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(374)
											bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											if ((tmp58)){
												HX_STACK_LINE(374)
												tmp49 = (int)-1;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												if ((tmp59)){
													HX_STACK_LINE(374)
													tmp49 = (int)1;
												}
												else{
													HX_STACK_LINE(374)
													tmp49 = value;
												}
											}
										}
										HX_STACK_LINE(374)
										Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										_x1 = tmp50;
										HX_STACK_LINE(374)
										Float tmp51 = this->y;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(374)
										Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(374)
										Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(374)
										Float tmp61 = (tmp59 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(374)
										Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(374)
										Float tmp63 = (tmp61 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(374)
										Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(374)
										_y1 = tmp64;
										HX_STACK_LINE(374)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(374)
										Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(374)
										Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(374)
										Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(374)
										Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(374)
										Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(374)
										Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(374)
										Float tmp73 = (sqw - sqx);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(374)
										Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(374)
										Float tmp75 = (tmp73 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(374)
										Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(374)
										Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(374)
										Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(374)
										_z1 = tmp78;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp49 = (order == (int)3);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = this->z;		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = (tmp52 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float tmp58 = (sqw - sqx);		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											Float tmp59 = sqy;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(374)
											Float tmp60 = (tmp58 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(374)
											Float tmp61 = sqz;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(374)
											Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(374)
											Float tmp63 = ::Math_obj::atan2(tmp57,tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(374)
											_x1 = tmp63;
											HX_STACK_LINE(374)
											Float tmp64;		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(374)
											{
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float value = tmp72;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(374)
												bool tmp73 = (value < (int)-1);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												if ((tmp73)){
													HX_STACK_LINE(374)
													tmp64 = (int)-1;
												}
												else{
													HX_STACK_LINE(374)
													bool tmp74 = (value > (int)1);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													if ((tmp74)){
														HX_STACK_LINE(374)
														tmp64 = (int)1;
													}
													else{
														HX_STACK_LINE(374)
														tmp64 = value;
													}
												}
											}
											HX_STACK_LINE(374)
											Float tmp65 = ::Math_obj::asin(tmp64);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(374)
											_y1 = tmp65;
											HX_STACK_LINE(374)
											Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(374)
											Float tmp67 = this->y;		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(374)
											Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(374)
											Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(374)
											Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(374)
											Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(374)
											Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(374)
											Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(374)
											Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(374)
											Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(374)
											Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(374)
											Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(374)
											Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(374)
											Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(374)
											_z1 = tmp79;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp50 = (order == (int)4);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											if ((tmp50)){
												HX_STACK_LINE(374)
												Float tmp51 = this->x;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												Float tmp52 = this->w;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(374)
												Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(374)
												Float tmp54 = this->z;		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(374)
												Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(374)
												Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(374)
												Float tmp57 = (tmp53 - tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(374)
												Float tmp58 = ((int)2 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(374)
												Float tmp59 = (sqw - sqx);		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(374)
												Float tmp60 = sqy;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(374)
												Float tmp61 = (tmp59 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(374)
												Float tmp62 = sqz;		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(374)
												Float tmp63 = (tmp61 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(374)
												Float tmp64 = ::Math_obj::atan2(tmp58,tmp63);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(374)
												_x1 = tmp64;
												HX_STACK_LINE(374)
												Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(374)
												Float tmp66 = this->w;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(374)
												Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(374)
												Float tmp68 = this->x;		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(374)
												Float tmp69 = this->z;		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(374)
												Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(374)
												Float tmp71 = (tmp67 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(374)
												Float tmp72 = ((int)2 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(374)
												Float tmp73 = (sqw + sqx);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(374)
												Float tmp74 = sqy;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(374)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(374)
												Float tmp76 = sqz;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(374)
												Float tmp77 = (tmp75 - tmp76);		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(374)
												Float tmp78 = ::Math_obj::atan2(tmp72,tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(374)
												_y1 = tmp78;
												HX_STACK_LINE(374)
												Float tmp79;		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(374)
												{
													HX_STACK_LINE(374)
													Float tmp80 = this->x;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													Float tmp81 = this->y;		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
													HX_STACK_LINE(374)
													Float tmp83 = this->z;		HX_STACK_VAR(tmp83,"tmp83");
													HX_STACK_LINE(374)
													Float tmp84 = this->w;		HX_STACK_VAR(tmp84,"tmp84");
													HX_STACK_LINE(374)
													Float tmp85 = (tmp83 * tmp84);		HX_STACK_VAR(tmp85,"tmp85");
													HX_STACK_LINE(374)
													Float tmp86 = (tmp82 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
													HX_STACK_LINE(374)
													Float tmp87 = ((int)2 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
													HX_STACK_LINE(374)
													Float value = tmp87;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(374)
													bool tmp88 = (value < (int)-1);		HX_STACK_VAR(tmp88,"tmp88");
													HX_STACK_LINE(374)
													if ((tmp88)){
														HX_STACK_LINE(374)
														tmp79 = (int)-1;
													}
													else{
														HX_STACK_LINE(374)
														bool tmp89 = (value > (int)1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp79 = (int)1;
														}
														else{
															HX_STACK_LINE(374)
															tmp79 = value;
														}
													}
												}
												HX_STACK_LINE(374)
												Float tmp80 = ::Math_obj::asin(tmp79);		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(374)
												_z1 = tmp80;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp51 = (order == (int)5);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(374)
												if ((tmp51)){
													HX_STACK_LINE(374)
													Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
													HX_STACK_LINE(374)
													Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
													HX_STACK_LINE(374)
													Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
													HX_STACK_LINE(374)
													Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
													HX_STACK_LINE(374)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(374)
													Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(374)
													Float tmp58 = (tmp54 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(374)
													Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(374)
													Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(374)
													Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(374)
													Float tmp62 = (tmp60 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(374)
													Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(374)
													Float tmp64 = (tmp62 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(374)
													Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(374)
													_x1 = tmp65;
													HX_STACK_LINE(374)
													Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
													HX_STACK_LINE(374)
													Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
													HX_STACK_LINE(374)
													Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
													HX_STACK_LINE(374)
													Float tmp69 = this->y;		HX_STACK_VAR(tmp69,"tmp69");
													HX_STACK_LINE(374)
													Float tmp70 = this->w;		HX_STACK_VAR(tmp70,"tmp70");
													HX_STACK_LINE(374)
													Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
													HX_STACK_LINE(374)
													Float tmp72 = (tmp68 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
													HX_STACK_LINE(374)
													Float tmp73 = ((int)2 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
													HX_STACK_LINE(374)
													Float tmp74 = (sqw + sqx);		HX_STACK_VAR(tmp74,"tmp74");
													HX_STACK_LINE(374)
													Float tmp75 = sqy;		HX_STACK_VAR(tmp75,"tmp75");
													HX_STACK_LINE(374)
													Float tmp76 = (tmp74 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
													HX_STACK_LINE(374)
													Float tmp77 = sqz;		HX_STACK_VAR(tmp77,"tmp77");
													HX_STACK_LINE(374)
													Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
													HX_STACK_LINE(374)
													Float tmp79 = ::Math_obj::atan2(tmp73,tmp78);		HX_STACK_VAR(tmp79,"tmp79");
													HX_STACK_LINE(374)
													_y1 = tmp79;
													HX_STACK_LINE(374)
													Float tmp80;		HX_STACK_VAR(tmp80,"tmp80");
													HX_STACK_LINE(374)
													{
														HX_STACK_LINE(374)
														Float tmp81 = this->z;		HX_STACK_VAR(tmp81,"tmp81");
														HX_STACK_LINE(374)
														Float tmp82 = this->w;		HX_STACK_VAR(tmp82,"tmp82");
														HX_STACK_LINE(374)
														Float tmp83 = (tmp81 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
														HX_STACK_LINE(374)
														Float tmp84 = this->x;		HX_STACK_VAR(tmp84,"tmp84");
														HX_STACK_LINE(374)
														Float tmp85 = this->y;		HX_STACK_VAR(tmp85,"tmp85");
														HX_STACK_LINE(374)
														Float tmp86 = (tmp84 * tmp85);		HX_STACK_VAR(tmp86,"tmp86");
														HX_STACK_LINE(374)
														Float tmp87 = (tmp83 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
														HX_STACK_LINE(374)
														Float tmp88 = ((int)2 * tmp87);		HX_STACK_VAR(tmp88,"tmp88");
														HX_STACK_LINE(374)
														Float value = tmp88;		HX_STACK_VAR(value,"value");
														HX_STACK_LINE(374)
														bool tmp89 = (value < (int)-1);		HX_STACK_VAR(tmp89,"tmp89");
														HX_STACK_LINE(374)
														if ((tmp89)){
															HX_STACK_LINE(374)
															tmp80 = (int)-1;
														}
														else{
															HX_STACK_LINE(374)
															bool tmp90 = (value > (int)1);		HX_STACK_VAR(tmp90,"tmp90");
															HX_STACK_LINE(374)
															if ((tmp90)){
																HX_STACK_LINE(374)
																tmp80 = (int)1;
															}
															else{
																HX_STACK_LINE(374)
																tmp80 = value;
															}
														}
													}
													HX_STACK_LINE(374)
													Float tmp81 = ::Math_obj::asin(tmp80);		HX_STACK_VAR(tmp81,"tmp81");
													HX_STACK_LINE(374)
													_z1 = tmp81;
												}
											}
										}
									}
								}
							}
							HX_STACK_LINE(374)
							{
								HX_STACK_LINE(374)
								bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
								HX_STACK_LINE(374)
								_this->ignore_listeners = true;
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->x = _x1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->x;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_x != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _x1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_x(tmp50);
										}
										HX_STACK_LINE(374)
										_this->x;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->y = _y1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->y;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_y != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _y1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_y(tmp50);
										}
										HX_STACK_LINE(374)
										_this->y;
									}
								}
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									_this->z = _z1;
									HX_STACK_LINE(374)
									bool tmp47 = _this->_construct;		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									if ((tmp47)){
										HX_STACK_LINE(374)
										_this->z;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp48 = (_this->listen_z != null());		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										bool tmp49;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										if ((tmp48)){
											HX_STACK_LINE(374)
											bool tmp50 = _this->ignore_listeners;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											bool tmp51 = tmp50;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											tmp49 = !(tmp51);
										}
										else{
											HX_STACK_LINE(374)
											tmp49 = false;
										}
										HX_STACK_LINE(374)
										if ((tmp49)){
											HX_STACK_LINE(374)
											Float tmp50 = _z1;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											_this->listen_z(tmp50);
										}
										HX_STACK_LINE(374)
										_this->z;
									}
								}
								HX_STACK_LINE(374)
								_this->ignore_listeners = prev;
								HX_STACK_LINE(374)
								bool tmp47 = (_this->listen_x != null());		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								bool tmp48;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								if ((tmp47)){
									HX_STACK_LINE(374)
									bool tmp49 = _this->ignore_listeners;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									bool tmp50 = tmp49;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									tmp48 = !(tmp50);
								}
								else{
									HX_STACK_LINE(374)
									tmp48 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp48)){
									HX_STACK_LINE(374)
									Float tmp49 = _this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									_this->listen_x(tmp49);
								}
								HX_STACK_LINE(374)
								bool tmp49 = (_this->listen_y != null());		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								bool tmp50;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								if ((tmp49)){
									HX_STACK_LINE(374)
									bool tmp51 = _this->ignore_listeners;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									bool tmp52 = tmp51;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									tmp50 = !(tmp52);
								}
								else{
									HX_STACK_LINE(374)
									tmp50 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp50)){
									HX_STACK_LINE(374)
									Float tmp51 = _this->y;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									_this->listen_y(tmp51);
								}
								HX_STACK_LINE(374)
								bool tmp51 = (_this->listen_z != null());		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								bool tmp52;		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								if ((tmp51)){
									HX_STACK_LINE(374)
									bool tmp53 = _this->ignore_listeners;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									bool tmp54 = tmp53;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									tmp52 = !(tmp54);
								}
								else{
									HX_STACK_LINE(374)
									tmp52 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp52)){
									HX_STACK_LINE(374)
									Float tmp53 = _this->z;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									_this->listen_z(tmp53);
								}
								HX_STACK_LINE(374)
								_this;
							}
							HX_STACK_LINE(374)
							_this;
						}
					}
					HX_STACK_LINE(374)
					Dynamic tmp26 = this->listen_w_dyn();		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(374)
					bool tmp27 = (tmp26 != null());		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(374)
					bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(374)
					if ((tmp27)){
						HX_STACK_LINE(374)
						bool tmp29 = this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(374)
						bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(374)
						tmp28 = !(tmp31);
					}
					else{
						HX_STACK_LINE(374)
						tmp28 = false;
					}
					HX_STACK_LINE(374)
					if ((tmp28)){
						HX_STACK_LINE(374)
						Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(374)
						this->listen_w(tmp29);
					}
					HX_STACK_LINE(374)
					this->w;
				}
			}
			HX_STACK_LINE(374)
			this->ignore_euler = false;
			HX_STACK_LINE(374)
			{
				HX_STACK_LINE(374)
				::phoenix::Vector tmp21 = this->euler;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(374)
				bool tmp22 = (tmp21 == null());		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(374)
				bool tmp23 = !(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(374)
				bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(374)
				bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(374)
				if ((tmp24)){
					HX_STACK_LINE(374)
					tmp25 = this->ignore_euler;
				}
				else{
					HX_STACK_LINE(374)
					tmp25 = true;
				}
				HX_STACK_LINE(374)
				bool tmp26 = !(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(374)
				bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(374)
				if ((tmp26)){
					HX_STACK_LINE(374)
					tmp27 = this->_construct;
				}
				else{
					HX_STACK_LINE(374)
					tmp27 = true;
				}
				HX_STACK_LINE(374)
				if ((tmp27)){
					HX_STACK_LINE(374)
					Dynamic();
				}
				else{
					HX_STACK_LINE(374)
					::phoenix::Vector tmp28 = this->euler;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(374)
					::phoenix::Vector _this = tmp28;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(374)
					int order = (int)0;		HX_STACK_VAR(order,"order");
					HX_STACK_LINE(374)
					Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(374)
					Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(374)
					Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(374)
					Float sqx = tmp31;		HX_STACK_VAR(sqx,"sqx");
					HX_STACK_LINE(374)
					Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(374)
					Float tmp33 = this->y;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(374)
					Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(374)
					Float sqy = tmp34;		HX_STACK_VAR(sqy,"sqy");
					HX_STACK_LINE(374)
					Float tmp35 = this->z;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(374)
					Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(374)
					Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(374)
					Float sqz = tmp37;		HX_STACK_VAR(sqz,"sqz");
					HX_STACK_LINE(374)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(374)
					Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(374)
					Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(374)
					Float sqw = tmp40;		HX_STACK_VAR(sqw,"sqw");
					HX_STACK_LINE(374)
					Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
					HX_STACK_LINE(374)
					Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
					HX_STACK_LINE(374)
					Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
					HX_STACK_LINE(374)
					bool tmp41 = (order == (int)0);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(374)
					if ((tmp41)){
						HX_STACK_LINE(374)
						Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(374)
						Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(374)
						Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(374)
						Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(374)
						Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(374)
						Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(374)
						Float tmp48 = (tmp44 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(374)
						Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(374)
						Float tmp50 = (sqw - sqx);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(374)
						Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(374)
						Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(374)
						Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(374)
						Float tmp54 = (tmp52 + tmp53);		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(374)
						Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(374)
						_x1 = tmp55;
						HX_STACK_LINE(374)
						Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(374)
						{
							HX_STACK_LINE(374)
							Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(374)
							Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(374)
							Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(374)
							Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(374)
							Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(374)
							Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(374)
							Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(374)
							Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(374)
							Float value = tmp64;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(374)
							bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(374)
							if ((tmp65)){
								HX_STACK_LINE(374)
								tmp56 = (int)-1;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(374)
								if ((tmp66)){
									HX_STACK_LINE(374)
									tmp56 = (int)1;
								}
								else{
									HX_STACK_LINE(374)
									tmp56 = value;
								}
							}
						}
						HX_STACK_LINE(374)
						Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(374)
						_y1 = tmp57;
						HX_STACK_LINE(374)
						Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(374)
						Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(374)
						Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(374)
						Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
						HX_STACK_LINE(374)
						Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
						HX_STACK_LINE(374)
						Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
						HX_STACK_LINE(374)
						Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
						HX_STACK_LINE(374)
						Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
						HX_STACK_LINE(374)
						Float tmp66 = (sqw + sqx);		HX_STACK_VAR(tmp66,"tmp66");
						HX_STACK_LINE(374)
						Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
						HX_STACK_LINE(374)
						Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
						HX_STACK_LINE(374)
						Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
						HX_STACK_LINE(374)
						Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
						HX_STACK_LINE(374)
						Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
						HX_STACK_LINE(374)
						_z1 = tmp71;
					}
					else{
						HX_STACK_LINE(374)
						bool tmp42 = (order == (int)1);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(374)
						if ((tmp42)){
							HX_STACK_LINE(374)
							Float tmp43;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(374)
							{
								HX_STACK_LINE(374)
								Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(374)
								Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(374)
								Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(374)
								Float tmp47 = this->y;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								Float tmp50 = (tmp46 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								Float tmp51 = ((int)2 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								Float value = tmp51;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(374)
								bool tmp52 = (value < (int)-1);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								if ((tmp52)){
									HX_STACK_LINE(374)
									tmp43 = (int)-1;
								}
								else{
									HX_STACK_LINE(374)
									bool tmp53 = (value > (int)1);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									if ((tmp53)){
										HX_STACK_LINE(374)
										tmp43 = (int)1;
									}
									else{
										HX_STACK_LINE(374)
										tmp43 = value;
									}
								}
							}
							HX_STACK_LINE(374)
							Float tmp44 = ::Math_obj::asin(tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(374)
							_x1 = tmp44;
							HX_STACK_LINE(374)
							Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(374)
							Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(374)
							Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(374)
							Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(374)
							Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(374)
							Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(374)
							Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(374)
							Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(374)
							Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(374)
							Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(374)
							Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(374)
							Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(374)
							Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(374)
							Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(374)
							_y1 = tmp58;
							HX_STACK_LINE(374)
							Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(374)
							Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(374)
							Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(374)
							Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(374)
							Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(374)
							Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(374)
							Float tmp65 = (tmp61 + tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(374)
							Float tmp66 = ((int)2 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(374)
							Float tmp67 = (sqw - sqx);		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(374)
							Float tmp68 = sqy;		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(374)
							Float tmp69 = (tmp67 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(374)
							Float tmp70 = sqz;		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(374)
							Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(374)
							Float tmp72 = ::Math_obj::atan2(tmp66,tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(374)
							_z1 = tmp72;
						}
						else{
							HX_STACK_LINE(374)
							bool tmp43 = (order == (int)2);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(374)
							if ((tmp43)){
								HX_STACK_LINE(374)
								Float tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(374)
								{
									HX_STACK_LINE(374)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(374)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									Float value = tmp52;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(374)
									bool tmp53 = (value < (int)-1);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									if ((tmp53)){
										HX_STACK_LINE(374)
										tmp44 = (int)-1;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp54 = (value > (int)1);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										if ((tmp54)){
											HX_STACK_LINE(374)
											tmp44 = (int)1;
										}
										else{
											HX_STACK_LINE(374)
											tmp44 = value;
										}
									}
								}
								HX_STACK_LINE(374)
								Float tmp45 = ::Math_obj::asin(tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(374)
								_x1 = tmp45;
								HX_STACK_LINE(374)
								Float tmp46 = this->y;		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(374)
								Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(374)
								Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(374)
								Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(374)
								Float tmp50 = this->x;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(374)
								Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(374)
								Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(374)
								Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(374)
								Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(374)
								Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(374)
								Float tmp56 = (tmp54 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(374)
								Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(374)
								Float tmp58 = (tmp56 + tmp57);		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(374)
								Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(374)
								_y1 = tmp59;
								HX_STACK_LINE(374)
								Float tmp60 = this->z;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(374)
								Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(374)
								Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(374)
								Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(374)
								Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(374)
								Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(374)
								Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(374)
								Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(374)
								Float tmp68 = (sqw - sqx);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(374)
								Float tmp69 = sqy;		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(374)
								Float tmp70 = (tmp68 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(374)
								Float tmp71 = sqz;		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(374)
								Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(374)
								Float tmp73 = ::Math_obj::atan2(tmp67,tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(374)
								_z1 = tmp73;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp44 = (order == (int)3);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(374)
								if ((tmp44)){
									HX_STACK_LINE(374)
									Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(374)
									Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(374)
									Float tmp48 = this->z;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(374)
									Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(374)
									Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(374)
									Float tmp51 = (tmp47 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(374)
									Float tmp52 = ((int)2 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(374)
									Float tmp53 = (sqw - sqx);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(374)
									Float tmp54 = sqy;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(374)
									Float tmp55 = (tmp53 - tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(374)
									Float tmp56 = sqz;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(374)
									Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(374)
									Float tmp58 = ::Math_obj::atan2(tmp52,tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(374)
									_x1 = tmp58;
									HX_STACK_LINE(374)
									Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(374)
									{
										HX_STACK_LINE(374)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(374)
										Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(374)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(374)
										Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(374)
										Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(374)
										Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(374)
										Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(374)
										Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(374)
										Float value = tmp67;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(374)
										bool tmp68 = (value < (int)-1);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(374)
										if ((tmp68)){
											HX_STACK_LINE(374)
											tmp59 = (int)-1;
										}
										else{
											HX_STACK_LINE(374)
											bool tmp69 = (value > (int)1);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(374)
											if ((tmp69)){
												HX_STACK_LINE(374)
												tmp59 = (int)1;
											}
											else{
												HX_STACK_LINE(374)
												tmp59 = value;
											}
										}
									}
									HX_STACK_LINE(374)
									Float tmp60 = ::Math_obj::asin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(374)
									_y1 = tmp60;
									HX_STACK_LINE(374)
									Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(374)
									Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(374)
									Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(374)
									Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(374)
									Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(374)
									Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(374)
									Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(374)
									Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(374)
									Float tmp69 = (sqw + sqx);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(374)
									Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(374)
									Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(374)
									Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(374)
									Float tmp73 = (tmp71 - tmp72);		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(374)
									Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(374)
									_z1 = tmp74;
								}
								else{
									HX_STACK_LINE(374)
									bool tmp45 = (order == (int)4);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									if ((tmp45)){
										HX_STACK_LINE(374)
										Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(374)
										Float tmp47 = this->w;		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(374)
										Float tmp48 = (tmp46 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(374)
										Float tmp49 = this->z;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(374)
										Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(374)
										Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(374)
										Float tmp52 = (tmp48 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(374)
										Float tmp53 = ((int)2 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(374)
										Float tmp54 = (sqw - sqx);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(374)
										Float tmp55 = sqy;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(374)
										Float tmp56 = (tmp54 + tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(374)
										Float tmp57 = sqz;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(374)
										Float tmp58 = (tmp56 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(374)
										Float tmp59 = ::Math_obj::atan2(tmp53,tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(374)
										_x1 = tmp59;
										HX_STACK_LINE(374)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(374)
										Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(374)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(374)
										Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(374)
										Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(374)
										Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(374)
										Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(374)
										Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(374)
										Float tmp68 = (sqw + sqx);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(374)
										Float tmp69 = sqy;		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(374)
										Float tmp70 = (tmp68 - tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(374)
										Float tmp71 = sqz;		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(374)
										Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(374)
										Float tmp73 = ::Math_obj::atan2(tmp67,tmp72);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(374)
										_y1 = tmp73;
										HX_STACK_LINE(374)
										Float tmp74;		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(374)
										{
											HX_STACK_LINE(374)
											Float tmp75 = this->x;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(374)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(374)
											Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(374)
											Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(374)
											Float tmp79 = this->w;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(374)
											Float tmp80 = (tmp78 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(374)
											Float tmp81 = (tmp77 + tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(374)
											Float tmp82 = ((int)2 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(374)
											Float value = tmp82;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(374)
											bool tmp83 = (value < (int)-1);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(374)
											if ((tmp83)){
												HX_STACK_LINE(374)
												tmp74 = (int)-1;
											}
											else{
												HX_STACK_LINE(374)
												bool tmp84 = (value > (int)1);		HX_STACK_VAR(tmp84,"tmp84");
												HX_STACK_LINE(374)
												if ((tmp84)){
													HX_STACK_LINE(374)
													tmp74 = (int)1;
												}
												else{
													HX_STACK_LINE(374)
													tmp74 = value;
												}
											}
										}
										HX_STACK_LINE(374)
										Float tmp75 = ::Math_obj::asin(tmp74);		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(374)
										_z1 = tmp75;
									}
									else{
										HX_STACK_LINE(374)
										bool tmp46 = (order == (int)5);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(374)
										if ((tmp46)){
											HX_STACK_LINE(374)
											Float tmp47 = this->x;		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(374)
											Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(374)
											Float tmp49 = (tmp47 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(374)
											Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(374)
											Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(374)
											Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(374)
											Float tmp53 = (tmp49 + tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(374)
											Float tmp54 = ((int)2 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(374)
											Float tmp55 = (sqw - sqx);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(374)
											Float tmp56 = sqy;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(374)
											Float tmp57 = (tmp55 + tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(374)
											Float tmp58 = sqz;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(374)
											Float tmp59 = (tmp57 - tmp58);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(374)
											Float tmp60 = ::Math_obj::atan2(tmp54,tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(374)
											_x1 = tmp60;
											HX_STACK_LINE(374)
											Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(374)
											Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(374)
											Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(374)
											Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(374)
											Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(374)
											Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(374)
											Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(374)
											Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(374)
											Float tmp69 = (sqw + sqx);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(374)
											Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(374)
											Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(374)
											Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(374)
											Float tmp73 = (tmp71 - tmp72);		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(374)
											Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(374)
											_y1 = tmp74;
											HX_STACK_LINE(374)
											Float tmp75;		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(374)
											{
												HX_STACK_LINE(374)
												Float tmp76 = this->z;		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(374)
												Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(374)
												Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(374)
												Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(374)
												Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(374)
												Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
												HX_STACK_LINE(374)
												Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
												HX_STACK_LINE(374)
												Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
												HX_STACK_LINE(374)
												Float value = tmp83;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(374)
												bool tmp84 = (value < (int)-1);		HX_STACK_VAR(tmp84,"tmp84");
												HX_STACK_LINE(374)
												if ((tmp84)){
													HX_STACK_LINE(374)
													tmp75 = (int)-1;
												}
												else{
													HX_STACK_LINE(374)
													bool tmp85 = (value > (int)1);		HX_STACK_VAR(tmp85,"tmp85");
													HX_STACK_LINE(374)
													if ((tmp85)){
														HX_STACK_LINE(374)
														tmp75 = (int)1;
													}
													else{
														HX_STACK_LINE(374)
														tmp75 = value;
													}
												}
											}
											HX_STACK_LINE(374)
											Float tmp76 = ::Math_obj::asin(tmp75);		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(374)
											_z1 = tmp76;
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(374)
					{
						HX_STACK_LINE(374)
						bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
						HX_STACK_LINE(374)
						_this->ignore_listeners = true;
						HX_STACK_LINE(374)
						{
							HX_STACK_LINE(374)
							_this->x = _x1;
							HX_STACK_LINE(374)
							bool tmp42 = _this->_construct;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(374)
							if ((tmp42)){
								HX_STACK_LINE(374)
								_this->x;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp43 = (_this->listen_x != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(374)
								bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(374)
								if ((tmp43)){
									HX_STACK_LINE(374)
									bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(374)
									tmp44 = !(tmp46);
								}
								else{
									HX_STACK_LINE(374)
									tmp44 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp44)){
									HX_STACK_LINE(374)
									Float tmp45 = _x1;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									_this->listen_x(tmp45);
								}
								HX_STACK_LINE(374)
								_this->x;
							}
						}
						HX_STACK_LINE(374)
						{
							HX_STACK_LINE(374)
							_this->y = _y1;
							HX_STACK_LINE(374)
							bool tmp42 = _this->_construct;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(374)
							if ((tmp42)){
								HX_STACK_LINE(374)
								_this->y;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp43 = (_this->listen_y != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(374)
								bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(374)
								if ((tmp43)){
									HX_STACK_LINE(374)
									bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(374)
									tmp44 = !(tmp46);
								}
								else{
									HX_STACK_LINE(374)
									tmp44 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp44)){
									HX_STACK_LINE(374)
									Float tmp45 = _y1;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									_this->listen_y(tmp45);
								}
								HX_STACK_LINE(374)
								_this->y;
							}
						}
						HX_STACK_LINE(374)
						{
							HX_STACK_LINE(374)
							_this->z = _z1;
							HX_STACK_LINE(374)
							bool tmp42 = _this->_construct;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(374)
							if ((tmp42)){
								HX_STACK_LINE(374)
								_this->z;
							}
							else{
								HX_STACK_LINE(374)
								bool tmp43 = (_this->listen_z != null());		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(374)
								bool tmp44;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(374)
								if ((tmp43)){
									HX_STACK_LINE(374)
									bool tmp45 = _this->ignore_listeners;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									bool tmp46 = tmp45;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(374)
									tmp44 = !(tmp46);
								}
								else{
									HX_STACK_LINE(374)
									tmp44 = false;
								}
								HX_STACK_LINE(374)
								if ((tmp44)){
									HX_STACK_LINE(374)
									Float tmp45 = _z1;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(374)
									_this->listen_z(tmp45);
								}
								HX_STACK_LINE(374)
								_this->z;
							}
						}
						HX_STACK_LINE(374)
						_this->ignore_listeners = prev;
						HX_STACK_LINE(374)
						bool tmp42 = (_this->listen_x != null());		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(374)
						bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(374)
						if ((tmp42)){
							HX_STACK_LINE(374)
							bool tmp44 = _this->ignore_listeners;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(374)
							bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(374)
							tmp43 = !(tmp45);
						}
						else{
							HX_STACK_LINE(374)
							tmp43 = false;
						}
						HX_STACK_LINE(374)
						if ((tmp43)){
							HX_STACK_LINE(374)
							Float tmp44 = _this->x;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(374)
							_this->listen_x(tmp44);
						}
						HX_STACK_LINE(374)
						bool tmp44 = (_this->listen_y != null());		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(374)
						bool tmp45;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(374)
						if ((tmp44)){
							HX_STACK_LINE(374)
							bool tmp46 = _this->ignore_listeners;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(374)
							bool tmp47 = tmp46;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(374)
							tmp45 = !(tmp47);
						}
						else{
							HX_STACK_LINE(374)
							tmp45 = false;
						}
						HX_STACK_LINE(374)
						if ((tmp45)){
							HX_STACK_LINE(374)
							Float tmp46 = _this->y;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(374)
							_this->listen_y(tmp46);
						}
						HX_STACK_LINE(374)
						bool tmp46 = (_this->listen_z != null());		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(374)
						bool tmp47;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(374)
						if ((tmp46)){
							HX_STACK_LINE(374)
							bool tmp48 = _this->ignore_listeners;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(374)
							bool tmp49 = tmp48;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(374)
							tmp47 = !(tmp49);
						}
						else{
							HX_STACK_LINE(374)
							tmp47 = false;
						}
						HX_STACK_LINE(374)
						if ((tmp47)){
							HX_STACK_LINE(374)
							Float tmp48 = _this->z;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(374)
							_this->listen_z(tmp48);
						}
						HX_STACK_LINE(374)
						_this;
					}
					HX_STACK_LINE(374)
					_this;
				}
			}
			HX_STACK_LINE(374)
			Dynamic tmp21 = this->listen_x_dyn();		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(374)
			bool tmp22 = (tmp21 != null());		HX_STACK_VAR(tmp22,"tmp22");
			HX_STACK_LINE(374)
			bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
			HX_STACK_LINE(374)
			if ((tmp22)){
				HX_STACK_LINE(374)
				bool tmp24 = this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(374)
				bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(374)
				bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(374)
				tmp23 = !(tmp26);
			}
			else{
				HX_STACK_LINE(374)
				tmp23 = false;
			}
			HX_STACK_LINE(374)
			if ((tmp23)){
				HX_STACK_LINE(374)
				Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(374)
				this->listen_x(tmp24);
			}
			HX_STACK_LINE(374)
			Dynamic tmp24 = this->listen_y_dyn();		HX_STACK_VAR(tmp24,"tmp24");
			HX_STACK_LINE(374)
			bool tmp25 = (tmp24 != null());		HX_STACK_VAR(tmp25,"tmp25");
			HX_STACK_LINE(374)
			bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
			HX_STACK_LINE(374)
			if ((tmp25)){
				HX_STACK_LINE(374)
				bool tmp27 = this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(374)
				bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(374)
				bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(374)
				tmp26 = !(tmp29);
			}
			else{
				HX_STACK_LINE(374)
				tmp26 = false;
			}
			HX_STACK_LINE(374)
			if ((tmp26)){
				HX_STACK_LINE(374)
				Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(374)
				this->listen_y(tmp27);
			}
			HX_STACK_LINE(374)
			Dynamic tmp27 = this->listen_z_dyn();		HX_STACK_VAR(tmp27,"tmp27");
			HX_STACK_LINE(374)
			bool tmp28 = (tmp27 != null());		HX_STACK_VAR(tmp28,"tmp28");
			HX_STACK_LINE(374)
			bool tmp29;		HX_STACK_VAR(tmp29,"tmp29");
			HX_STACK_LINE(374)
			if ((tmp28)){
				HX_STACK_LINE(374)
				bool tmp30 = this->ignore_listeners;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(374)
				bool tmp31 = tmp30;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(374)
				bool tmp32 = tmp31;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(374)
				tmp29 = !(tmp32);
			}
			else{
				HX_STACK_LINE(374)
				tmp29 = false;
			}
			HX_STACK_LINE(374)
			if ((tmp29)){
				HX_STACK_LINE(374)
				Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(374)
				this->listen_z(tmp30);
			}
			HX_STACK_LINE(374)
			Dynamic tmp30 = this->listen_w_dyn();		HX_STACK_VAR(tmp30,"tmp30");
			HX_STACK_LINE(374)
			bool tmp31 = (tmp30 != null());		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(374)
			bool tmp32;		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(374)
			if ((tmp31)){
				HX_STACK_LINE(374)
				bool tmp33 = this->ignore_listeners;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(374)
				bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(374)
				bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(374)
				tmp32 = !(tmp35);
			}
			else{
				HX_STACK_LINE(374)
				tmp32 = false;
			}
			HX_STACK_LINE(374)
			if ((tmp32)){
				HX_STACK_LINE(374)
				Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(374)
				this->listen_w(tmp33);
			}
		}
		HX_STACK_LINE(379)
		return hx::ObjectPtr<OBJ_>(this);
	}
	HX_STACK_LINE(383)
	Float tmp21 = ((int)1 - _t);		HX_STACK_VAR(tmp21,"tmp21");
	HX_STACK_LINE(383)
	Float tmp22 = halfTheta;		HX_STACK_VAR(tmp22,"tmp22");
	HX_STACK_LINE(383)
	Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
	HX_STACK_LINE(383)
	Float tmp24 = ::Math_obj::sin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
	HX_STACK_LINE(383)
	Float tmp25 = sinHalfTheta;		HX_STACK_VAR(tmp25,"tmp25");
	HX_STACK_LINE(383)
	Float tmp26 = (Float(tmp24) / Float(tmp25));		HX_STACK_VAR(tmp26,"tmp26");
	HX_STACK_LINE(383)
	Float ratioA = tmp26;		HX_STACK_VAR(ratioA,"ratioA");
	HX_STACK_LINE(384)
	Float tmp27 = (_t * halfTheta);		HX_STACK_VAR(tmp27,"tmp27");
	HX_STACK_LINE(384)
	Float tmp28 = ::Math_obj::sin(tmp27);		HX_STACK_VAR(tmp28,"tmp28");
	HX_STACK_LINE(384)
	Float tmp29 = sinHalfTheta;		HX_STACK_VAR(tmp29,"tmp29");
	HX_STACK_LINE(384)
	Float tmp30 = (Float(tmp28) / Float(tmp29));		HX_STACK_VAR(tmp30,"tmp30");
	HX_STACK_LINE(384)
	Float ratioB = tmp30;		HX_STACK_VAR(ratioB,"ratioB");
	HX_STACK_LINE(386)
	{
		HX_STACK_LINE(386)
		this->ignore_euler = true;
		HX_STACK_LINE(386)
		{
			HX_STACK_LINE(386)
			Float tmp31 = (_w * ratioA);		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(386)
			Float tmp32 = this->w;		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(386)
			Float tmp33 = ratioB;		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(386)
			Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(386)
			Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(386)
			this->x = tmp35;
			HX_STACK_LINE(386)
			bool tmp36 = this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(386)
			if ((tmp36)){
				HX_STACK_LINE(386)
				this->x;
			}
			else{
				HX_STACK_LINE(386)
				{
					HX_STACK_LINE(386)
					::phoenix::Vector tmp37 = this->euler;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(386)
					bool tmp38 = (tmp37 == null());		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(386)
					bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(386)
					bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					if ((tmp40)){
						HX_STACK_LINE(386)
						tmp41 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(386)
						tmp41 = true;
					}
					HX_STACK_LINE(386)
					bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(386)
					if ((tmp42)){
						HX_STACK_LINE(386)
						tmp43 = this->_construct;
					}
					else{
						HX_STACK_LINE(386)
						tmp43 = true;
					}
					HX_STACK_LINE(386)
					if ((tmp43)){
						HX_STACK_LINE(386)
						Dynamic();
					}
					else{
						HX_STACK_LINE(386)
						::phoenix::Vector tmp44 = this->euler;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(386)
						::phoenix::Vector _this = tmp44;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(386)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(386)
						Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(386)
						Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(386)
						Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(386)
						Float sqx = tmp47;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(386)
						Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(386)
						Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(386)
						Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(386)
						Float sqy = tmp50;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(386)
						Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(386)
						Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(386)
						Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(386)
						Float sqz = tmp53;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(386)
						Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(386)
						Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(386)
						Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(386)
						Float sqw = tmp56;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(386)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(386)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(386)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(386)
						bool tmp57 = (order == (int)0);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(386)
						if ((tmp57)){
							HX_STACK_LINE(386)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(386)
							Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(386)
							Float tmp66 = (sqw - sqx);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(386)
							Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(386)
							Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(386)
							Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(386)
							Float tmp70 = (tmp68 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(386)
							Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(386)
							_x1 = tmp71;
							HX_STACK_LINE(386)
							Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = (tmp75 + tmp78);		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float value = tmp80;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(386)
								bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								if ((tmp81)){
									HX_STACK_LINE(386)
									tmp72 = (int)-1;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									if ((tmp82)){
										HX_STACK_LINE(386)
										tmp72 = (int)1;
									}
									else{
										HX_STACK_LINE(386)
										tmp72 = value;
									}
								}
							}
							HX_STACK_LINE(386)
							Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(386)
							_y1 = tmp73;
							HX_STACK_LINE(386)
							Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(386)
							Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(386)
							Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(386)
							Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(386)
							Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(386)
							Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(386)
							Float tmp80 = (tmp76 - tmp79);		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(386)
							Float tmp81 = ((int)2 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(386)
							Float tmp82 = (sqw + sqx);		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(386)
							Float tmp83 = sqy;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(386)
							Float tmp84 = (tmp82 - tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(386)
							Float tmp85 = sqz;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(386)
							Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(386)
							Float tmp87 = ::Math_obj::atan2(tmp81,tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(386)
							_z1 = tmp87;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp58 = (order == (int)1);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								{
									HX_STACK_LINE(386)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float value = tmp67;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(386)
									bool tmp68 = (value < (int)-1);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									if ((tmp68)){
										HX_STACK_LINE(386)
										tmp59 = (int)-1;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp69 = (value > (int)1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp59 = (int)1;
										}
										else{
											HX_STACK_LINE(386)
											tmp59 = value;
										}
									}
								}
								HX_STACK_LINE(386)
								Float tmp60 = ::Math_obj::asin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_x1 = tmp60;
								HX_STACK_LINE(386)
								Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(386)
								Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(386)
								Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(386)
								Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(386)
								Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(386)
								Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(386)
								Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(386)
								Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								_y1 = tmp74;
								HX_STACK_LINE(386)
								Float tmp75 = this->x;		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = this->w;		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = (tmp78 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float tmp81 = (tmp77 + tmp80);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								Float tmp82 = ((int)2 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
								HX_STACK_LINE(386)
								Float tmp83 = (sqw - sqx);		HX_STACK_VAR(tmp83,"tmp83");
								HX_STACK_LINE(386)
								Float tmp84 = sqy;		HX_STACK_VAR(tmp84,"tmp84");
								HX_STACK_LINE(386)
								Float tmp85 = (tmp83 + tmp84);		HX_STACK_VAR(tmp85,"tmp85");
								HX_STACK_LINE(386)
								Float tmp86 = sqz;		HX_STACK_VAR(tmp86,"tmp86");
								HX_STACK_LINE(386)
								Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
								HX_STACK_LINE(386)
								Float tmp88 = ::Math_obj::atan2(tmp82,tmp87);		HX_STACK_VAR(tmp88,"tmp88");
								HX_STACK_LINE(386)
								_z1 = tmp88;
							}
							else{
								HX_STACK_LINE(386)
								bool tmp59 = (order == (int)2);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								if ((tmp59)){
									HX_STACK_LINE(386)
									Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									{
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float value = tmp68;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(386)
										bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp60 = (int)-1;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											if ((tmp70)){
												HX_STACK_LINE(386)
												tmp60 = (int)1;
											}
											else{
												HX_STACK_LINE(386)
												tmp60 = value;
											}
										}
									}
									HX_STACK_LINE(386)
									Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									_x1 = tmp61;
									HX_STACK_LINE(386)
									Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(386)
									Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(386)
									Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(386)
									Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(386)
									Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(386)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(386)
									Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(386)
									_y1 = tmp75;
									HX_STACK_LINE(386)
									Float tmp76 = this->z;		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(386)
									Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(386)
									Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
									HX_STACK_LINE(386)
									Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
									HX_STACK_LINE(386)
									Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
									HX_STACK_LINE(386)
									Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
									HX_STACK_LINE(386)
									Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
									HX_STACK_LINE(386)
									Float tmp84 = (sqw - sqx);		HX_STACK_VAR(tmp84,"tmp84");
									HX_STACK_LINE(386)
									Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
									HX_STACK_LINE(386)
									Float tmp86 = (tmp84 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
									HX_STACK_LINE(386)
									Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
									HX_STACK_LINE(386)
									Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
									HX_STACK_LINE(386)
									Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
									HX_STACK_LINE(386)
									_z1 = tmp89;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp60 = (order == (int)3);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(386)
										Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(386)
										Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(386)
										Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(386)
										Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(386)
										_x1 = tmp74;
										HX_STACK_LINE(386)
										Float tmp75;		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(386)
										{
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float value = tmp83;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(386)
											bool tmp84 = (value < (int)-1);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											if ((tmp84)){
												HX_STACK_LINE(386)
												tmp75 = (int)-1;
											}
											else{
												HX_STACK_LINE(386)
												bool tmp85 = (value > (int)1);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												if ((tmp85)){
													HX_STACK_LINE(386)
													tmp75 = (int)1;
												}
												else{
													HX_STACK_LINE(386)
													tmp75 = value;
												}
											}
										}
										HX_STACK_LINE(386)
										Float tmp76 = ::Math_obj::asin(tmp75);		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(386)
										_y1 = tmp76;
										HX_STACK_LINE(386)
										Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(386)
										Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(386)
										Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(386)
										Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
										HX_STACK_LINE(386)
										Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
										HX_STACK_LINE(386)
										Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
										HX_STACK_LINE(386)
										Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
										HX_STACK_LINE(386)
										Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
										HX_STACK_LINE(386)
										Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(386)
										Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
										HX_STACK_LINE(386)
										Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
										HX_STACK_LINE(386)
										Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
										HX_STACK_LINE(386)
										Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
										HX_STACK_LINE(386)
										Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
										HX_STACK_LINE(386)
										_z1 = tmp90;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp61 = (order == (int)4);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										if ((tmp61)){
											HX_STACK_LINE(386)
											Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(386)
											Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(386)
											Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(386)
											Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(386)
											Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(386)
											Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(386)
											Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(386)
											Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(386)
											Float tmp72 = (tmp70 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(386)
											Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(386)
											Float tmp74 = (tmp72 - tmp73);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(386)
											Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(386)
											_x1 = tmp75;
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float tmp84 = (sqw + sqx);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
											HX_STACK_LINE(386)
											Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
											HX_STACK_LINE(386)
											Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
											HX_STACK_LINE(386)
											Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
											HX_STACK_LINE(386)
											Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
											HX_STACK_LINE(386)
											_y1 = tmp89;
											HX_STACK_LINE(386)
											Float tmp90;		HX_STACK_VAR(tmp90,"tmp90");
											HX_STACK_LINE(386)
											{
												HX_STACK_LINE(386)
												Float tmp91 = this->x;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												Float tmp92 = this->y;		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
												HX_STACK_LINE(386)
												Float tmp94 = this->z;		HX_STACK_VAR(tmp94,"tmp94");
												HX_STACK_LINE(386)
												Float tmp95 = this->w;		HX_STACK_VAR(tmp95,"tmp95");
												HX_STACK_LINE(386)
												Float tmp96 = (tmp94 * tmp95);		HX_STACK_VAR(tmp96,"tmp96");
												HX_STACK_LINE(386)
												Float tmp97 = (tmp93 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
												HX_STACK_LINE(386)
												Float tmp98 = ((int)2 * tmp97);		HX_STACK_VAR(tmp98,"tmp98");
												HX_STACK_LINE(386)
												Float value = tmp98;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(386)
												bool tmp99 = (value < (int)-1);		HX_STACK_VAR(tmp99,"tmp99");
												HX_STACK_LINE(386)
												if ((tmp99)){
													HX_STACK_LINE(386)
													tmp90 = (int)-1;
												}
												else{
													HX_STACK_LINE(386)
													bool tmp100 = (value > (int)1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp90 = (int)1;
													}
													else{
														HX_STACK_LINE(386)
														tmp90 = value;
													}
												}
											}
											HX_STACK_LINE(386)
											Float tmp91 = ::Math_obj::asin(tmp90);		HX_STACK_VAR(tmp91,"tmp91");
											HX_STACK_LINE(386)
											_z1 = tmp91;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp62 = (order == (int)5);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											if ((tmp62)){
												HX_STACK_LINE(386)
												Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(386)
												Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(386)
												Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(386)
												Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(386)
												Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(386)
												Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(386)
												Float tmp69 = (tmp65 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(386)
												Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(386)
												Float tmp71 = (sqw - sqx);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(386)
												Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(386)
												Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(386)
												Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(386)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(386)
												Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(386)
												_x1 = tmp76;
												HX_STACK_LINE(386)
												Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(386)
												Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(386)
												Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(386)
												Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(386)
												Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
												HX_STACK_LINE(386)
												Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
												HX_STACK_LINE(386)
												Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
												HX_STACK_LINE(386)
												Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
												HX_STACK_LINE(386)
												Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
												HX_STACK_LINE(386)
												Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
												HX_STACK_LINE(386)
												Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
												HX_STACK_LINE(386)
												Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
												HX_STACK_LINE(386)
												Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
												HX_STACK_LINE(386)
												_y1 = tmp90;
												HX_STACK_LINE(386)
												Float tmp91;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												{
													HX_STACK_LINE(386)
													Float tmp92 = this->z;		HX_STACK_VAR(tmp92,"tmp92");
													HX_STACK_LINE(386)
													Float tmp93 = this->w;		HX_STACK_VAR(tmp93,"tmp93");
													HX_STACK_LINE(386)
													Float tmp94 = (tmp92 * tmp93);		HX_STACK_VAR(tmp94,"tmp94");
													HX_STACK_LINE(386)
													Float tmp95 = this->x;		HX_STACK_VAR(tmp95,"tmp95");
													HX_STACK_LINE(386)
													Float tmp96 = this->y;		HX_STACK_VAR(tmp96,"tmp96");
													HX_STACK_LINE(386)
													Float tmp97 = (tmp95 * tmp96);		HX_STACK_VAR(tmp97,"tmp97");
													HX_STACK_LINE(386)
													Float tmp98 = (tmp94 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
													HX_STACK_LINE(386)
													Float tmp99 = ((int)2 * tmp98);		HX_STACK_VAR(tmp99,"tmp99");
													HX_STACK_LINE(386)
													Float value = tmp99;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(386)
													bool tmp100 = (value < (int)-1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp91 = (int)-1;
													}
													else{
														HX_STACK_LINE(386)
														bool tmp101 = (value > (int)1);		HX_STACK_VAR(tmp101,"tmp101");
														HX_STACK_LINE(386)
														if ((tmp101)){
															HX_STACK_LINE(386)
															tmp91 = (int)1;
														}
														else{
															HX_STACK_LINE(386)
															tmp91 = value;
														}
													}
												}
												HX_STACK_LINE(386)
												Float tmp92 = ::Math_obj::asin(tmp91);		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												_z1 = tmp92;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(386)
						{
							HX_STACK_LINE(386)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(386)
							_this->ignore_listeners = true;
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->x = _x1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->x;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_x != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _x1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_x(tmp61);
									}
									HX_STACK_LINE(386)
									_this->x;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->y = _y1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->y;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_y != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _y1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_y(tmp61);
									}
									HX_STACK_LINE(386)
									_this->y;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->z = _z1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->z;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_z != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _z1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_z(tmp61);
									}
									HX_STACK_LINE(386)
									_this->z;
								}
							}
							HX_STACK_LINE(386)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(386)
							bool tmp58 = (_this->listen_x != null());		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							bool tmp59;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								bool tmp60 = _this->ignore_listeners;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								bool tmp61 = tmp60;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								tmp59 = !(tmp61);
							}
							else{
								HX_STACK_LINE(386)
								tmp59 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp59)){
								HX_STACK_LINE(386)
								Float tmp60 = _this->x;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_this->listen_x(tmp60);
							}
							HX_STACK_LINE(386)
							bool tmp60 = (_this->listen_y != null());		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							if ((tmp60)){
								HX_STACK_LINE(386)
								bool tmp62 = _this->ignore_listeners;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								bool tmp63 = tmp62;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								tmp61 = !(tmp63);
							}
							else{
								HX_STACK_LINE(386)
								tmp61 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp61)){
								HX_STACK_LINE(386)
								Float tmp62 = _this->y;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								_this->listen_y(tmp62);
							}
							HX_STACK_LINE(386)
							bool tmp62 = (_this->listen_z != null());		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							bool tmp63;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							if ((tmp62)){
								HX_STACK_LINE(386)
								bool tmp64 = _this->ignore_listeners;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								bool tmp65 = tmp64;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								tmp63 = !(tmp65);
							}
							else{
								HX_STACK_LINE(386)
								tmp63 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp63)){
								HX_STACK_LINE(386)
								Float tmp64 = _this->z;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								_this->listen_z(tmp64);
							}
							HX_STACK_LINE(386)
							_this;
						}
						HX_STACK_LINE(386)
						_this;
					}
				}
				HX_STACK_LINE(386)
				Dynamic tmp37 = this->listen_x_dyn();		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(386)
				bool tmp38 = (tmp37 != null());		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(386)
				bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(386)
				if ((tmp38)){
					HX_STACK_LINE(386)
					bool tmp40 = this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					tmp39 = !(tmp42);
				}
				else{
					HX_STACK_LINE(386)
					tmp39 = false;
				}
				HX_STACK_LINE(386)
				if ((tmp39)){
					HX_STACK_LINE(386)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					this->listen_x(tmp40);
				}
				HX_STACK_LINE(386)
				this->x;
			}
		}
		HX_STACK_LINE(386)
		{
			HX_STACK_LINE(387)
			Float tmp31 = (_x * ratioA);		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(387)
			Float tmp32 = this->x;		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(387)
			Float tmp33 = ratioB;		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(387)
			Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(387)
			Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(386)
			this->y = tmp35;
			HX_STACK_LINE(386)
			bool tmp36 = this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(386)
			if ((tmp36)){
				HX_STACK_LINE(386)
				this->y;
			}
			else{
				HX_STACK_LINE(386)
				{
					HX_STACK_LINE(386)
					::phoenix::Vector tmp37 = this->euler;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(386)
					bool tmp38 = (tmp37 == null());		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(386)
					bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(386)
					bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					if ((tmp40)){
						HX_STACK_LINE(386)
						tmp41 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(386)
						tmp41 = true;
					}
					HX_STACK_LINE(386)
					bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(386)
					if ((tmp42)){
						HX_STACK_LINE(386)
						tmp43 = this->_construct;
					}
					else{
						HX_STACK_LINE(386)
						tmp43 = true;
					}
					HX_STACK_LINE(386)
					if ((tmp43)){
						HX_STACK_LINE(386)
						Dynamic();
					}
					else{
						HX_STACK_LINE(386)
						::phoenix::Vector tmp44 = this->euler;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(386)
						::phoenix::Vector _this = tmp44;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(386)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(386)
						Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(386)
						Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(386)
						Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(386)
						Float sqx = tmp47;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(386)
						Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(386)
						Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(386)
						Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(386)
						Float sqy = tmp50;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(386)
						Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(386)
						Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(386)
						Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(386)
						Float sqz = tmp53;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(386)
						Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(386)
						Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(386)
						Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(386)
						Float sqw = tmp56;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(386)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(386)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(386)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(386)
						bool tmp57 = (order == (int)0);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(386)
						if ((tmp57)){
							HX_STACK_LINE(386)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(386)
							Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(386)
							Float tmp66 = (sqw - sqx);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(386)
							Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(386)
							Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(386)
							Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(386)
							Float tmp70 = (tmp68 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(386)
							Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(386)
							_x1 = tmp71;
							HX_STACK_LINE(386)
							Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = (tmp75 + tmp78);		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float value = tmp80;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(386)
								bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								if ((tmp81)){
									HX_STACK_LINE(386)
									tmp72 = (int)-1;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									if ((tmp82)){
										HX_STACK_LINE(386)
										tmp72 = (int)1;
									}
									else{
										HX_STACK_LINE(386)
										tmp72 = value;
									}
								}
							}
							HX_STACK_LINE(386)
							Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(386)
							_y1 = tmp73;
							HX_STACK_LINE(386)
							Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(386)
							Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(386)
							Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(386)
							Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(386)
							Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(386)
							Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(386)
							Float tmp80 = (tmp76 - tmp79);		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(386)
							Float tmp81 = ((int)2 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(386)
							Float tmp82 = (sqw + sqx);		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(386)
							Float tmp83 = sqy;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(386)
							Float tmp84 = (tmp82 - tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(386)
							Float tmp85 = sqz;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(386)
							Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(386)
							Float tmp87 = ::Math_obj::atan2(tmp81,tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(386)
							_z1 = tmp87;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp58 = (order == (int)1);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								{
									HX_STACK_LINE(386)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float value = tmp67;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(386)
									bool tmp68 = (value < (int)-1);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									if ((tmp68)){
										HX_STACK_LINE(386)
										tmp59 = (int)-1;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp69 = (value > (int)1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp59 = (int)1;
										}
										else{
											HX_STACK_LINE(386)
											tmp59 = value;
										}
									}
								}
								HX_STACK_LINE(386)
								Float tmp60 = ::Math_obj::asin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_x1 = tmp60;
								HX_STACK_LINE(386)
								Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(386)
								Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(386)
								Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(386)
								Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(386)
								Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(386)
								Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(386)
								Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(386)
								Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								_y1 = tmp74;
								HX_STACK_LINE(386)
								Float tmp75 = this->x;		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = this->w;		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = (tmp78 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float tmp81 = (tmp77 + tmp80);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								Float tmp82 = ((int)2 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
								HX_STACK_LINE(386)
								Float tmp83 = (sqw - sqx);		HX_STACK_VAR(tmp83,"tmp83");
								HX_STACK_LINE(386)
								Float tmp84 = sqy;		HX_STACK_VAR(tmp84,"tmp84");
								HX_STACK_LINE(386)
								Float tmp85 = (tmp83 + tmp84);		HX_STACK_VAR(tmp85,"tmp85");
								HX_STACK_LINE(386)
								Float tmp86 = sqz;		HX_STACK_VAR(tmp86,"tmp86");
								HX_STACK_LINE(386)
								Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
								HX_STACK_LINE(386)
								Float tmp88 = ::Math_obj::atan2(tmp82,tmp87);		HX_STACK_VAR(tmp88,"tmp88");
								HX_STACK_LINE(386)
								_z1 = tmp88;
							}
							else{
								HX_STACK_LINE(386)
								bool tmp59 = (order == (int)2);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								if ((tmp59)){
									HX_STACK_LINE(386)
									Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									{
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float value = tmp68;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(386)
										bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp60 = (int)-1;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											if ((tmp70)){
												HX_STACK_LINE(386)
												tmp60 = (int)1;
											}
											else{
												HX_STACK_LINE(386)
												tmp60 = value;
											}
										}
									}
									HX_STACK_LINE(386)
									Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									_x1 = tmp61;
									HX_STACK_LINE(386)
									Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(386)
									Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(386)
									Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(386)
									Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(386)
									Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(386)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(386)
									Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(386)
									_y1 = tmp75;
									HX_STACK_LINE(386)
									Float tmp76 = this->z;		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(386)
									Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(386)
									Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
									HX_STACK_LINE(386)
									Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
									HX_STACK_LINE(386)
									Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
									HX_STACK_LINE(386)
									Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
									HX_STACK_LINE(386)
									Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
									HX_STACK_LINE(386)
									Float tmp84 = (sqw - sqx);		HX_STACK_VAR(tmp84,"tmp84");
									HX_STACK_LINE(386)
									Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
									HX_STACK_LINE(386)
									Float tmp86 = (tmp84 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
									HX_STACK_LINE(386)
									Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
									HX_STACK_LINE(386)
									Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
									HX_STACK_LINE(386)
									Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
									HX_STACK_LINE(386)
									_z1 = tmp89;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp60 = (order == (int)3);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(386)
										Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(386)
										Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(386)
										Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(386)
										Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(386)
										_x1 = tmp74;
										HX_STACK_LINE(386)
										Float tmp75;		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(386)
										{
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float value = tmp83;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(386)
											bool tmp84 = (value < (int)-1);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											if ((tmp84)){
												HX_STACK_LINE(386)
												tmp75 = (int)-1;
											}
											else{
												HX_STACK_LINE(386)
												bool tmp85 = (value > (int)1);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												if ((tmp85)){
													HX_STACK_LINE(386)
													tmp75 = (int)1;
												}
												else{
													HX_STACK_LINE(386)
													tmp75 = value;
												}
											}
										}
										HX_STACK_LINE(386)
										Float tmp76 = ::Math_obj::asin(tmp75);		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(386)
										_y1 = tmp76;
										HX_STACK_LINE(386)
										Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(386)
										Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(386)
										Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(386)
										Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
										HX_STACK_LINE(386)
										Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
										HX_STACK_LINE(386)
										Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
										HX_STACK_LINE(386)
										Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
										HX_STACK_LINE(386)
										Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
										HX_STACK_LINE(386)
										Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(386)
										Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
										HX_STACK_LINE(386)
										Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
										HX_STACK_LINE(386)
										Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
										HX_STACK_LINE(386)
										Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
										HX_STACK_LINE(386)
										Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
										HX_STACK_LINE(386)
										_z1 = tmp90;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp61 = (order == (int)4);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										if ((tmp61)){
											HX_STACK_LINE(386)
											Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(386)
											Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(386)
											Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(386)
											Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(386)
											Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(386)
											Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(386)
											Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(386)
											Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(386)
											Float tmp72 = (tmp70 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(386)
											Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(386)
											Float tmp74 = (tmp72 - tmp73);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(386)
											Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(386)
											_x1 = tmp75;
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float tmp84 = (sqw + sqx);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
											HX_STACK_LINE(386)
											Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
											HX_STACK_LINE(386)
											Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
											HX_STACK_LINE(386)
											Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
											HX_STACK_LINE(386)
											Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
											HX_STACK_LINE(386)
											_y1 = tmp89;
											HX_STACK_LINE(386)
											Float tmp90;		HX_STACK_VAR(tmp90,"tmp90");
											HX_STACK_LINE(386)
											{
												HX_STACK_LINE(386)
												Float tmp91 = this->x;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												Float tmp92 = this->y;		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
												HX_STACK_LINE(386)
												Float tmp94 = this->z;		HX_STACK_VAR(tmp94,"tmp94");
												HX_STACK_LINE(386)
												Float tmp95 = this->w;		HX_STACK_VAR(tmp95,"tmp95");
												HX_STACK_LINE(386)
												Float tmp96 = (tmp94 * tmp95);		HX_STACK_VAR(tmp96,"tmp96");
												HX_STACK_LINE(386)
												Float tmp97 = (tmp93 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
												HX_STACK_LINE(386)
												Float tmp98 = ((int)2 * tmp97);		HX_STACK_VAR(tmp98,"tmp98");
												HX_STACK_LINE(386)
												Float value = tmp98;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(386)
												bool tmp99 = (value < (int)-1);		HX_STACK_VAR(tmp99,"tmp99");
												HX_STACK_LINE(386)
												if ((tmp99)){
													HX_STACK_LINE(386)
													tmp90 = (int)-1;
												}
												else{
													HX_STACK_LINE(386)
													bool tmp100 = (value > (int)1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp90 = (int)1;
													}
													else{
														HX_STACK_LINE(386)
														tmp90 = value;
													}
												}
											}
											HX_STACK_LINE(386)
											Float tmp91 = ::Math_obj::asin(tmp90);		HX_STACK_VAR(tmp91,"tmp91");
											HX_STACK_LINE(386)
											_z1 = tmp91;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp62 = (order == (int)5);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											if ((tmp62)){
												HX_STACK_LINE(386)
												Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(386)
												Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(386)
												Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(386)
												Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(386)
												Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(386)
												Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(386)
												Float tmp69 = (tmp65 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(386)
												Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(386)
												Float tmp71 = (sqw - sqx);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(386)
												Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(386)
												Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(386)
												Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(386)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(386)
												Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(386)
												_x1 = tmp76;
												HX_STACK_LINE(386)
												Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(386)
												Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(386)
												Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(386)
												Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(386)
												Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
												HX_STACK_LINE(386)
												Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
												HX_STACK_LINE(386)
												Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
												HX_STACK_LINE(386)
												Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
												HX_STACK_LINE(386)
												Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
												HX_STACK_LINE(386)
												Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
												HX_STACK_LINE(386)
												Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
												HX_STACK_LINE(386)
												Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
												HX_STACK_LINE(386)
												Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
												HX_STACK_LINE(386)
												_y1 = tmp90;
												HX_STACK_LINE(386)
												Float tmp91;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												{
													HX_STACK_LINE(386)
													Float tmp92 = this->z;		HX_STACK_VAR(tmp92,"tmp92");
													HX_STACK_LINE(386)
													Float tmp93 = this->w;		HX_STACK_VAR(tmp93,"tmp93");
													HX_STACK_LINE(386)
													Float tmp94 = (tmp92 * tmp93);		HX_STACK_VAR(tmp94,"tmp94");
													HX_STACK_LINE(386)
													Float tmp95 = this->x;		HX_STACK_VAR(tmp95,"tmp95");
													HX_STACK_LINE(386)
													Float tmp96 = this->y;		HX_STACK_VAR(tmp96,"tmp96");
													HX_STACK_LINE(386)
													Float tmp97 = (tmp95 * tmp96);		HX_STACK_VAR(tmp97,"tmp97");
													HX_STACK_LINE(386)
													Float tmp98 = (tmp94 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
													HX_STACK_LINE(386)
													Float tmp99 = ((int)2 * tmp98);		HX_STACK_VAR(tmp99,"tmp99");
													HX_STACK_LINE(386)
													Float value = tmp99;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(386)
													bool tmp100 = (value < (int)-1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp91 = (int)-1;
													}
													else{
														HX_STACK_LINE(386)
														bool tmp101 = (value > (int)1);		HX_STACK_VAR(tmp101,"tmp101");
														HX_STACK_LINE(386)
														if ((tmp101)){
															HX_STACK_LINE(386)
															tmp91 = (int)1;
														}
														else{
															HX_STACK_LINE(386)
															tmp91 = value;
														}
													}
												}
												HX_STACK_LINE(386)
												Float tmp92 = ::Math_obj::asin(tmp91);		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												_z1 = tmp92;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(386)
						{
							HX_STACK_LINE(386)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(386)
							_this->ignore_listeners = true;
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->x = _x1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->x;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_x != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _x1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_x(tmp61);
									}
									HX_STACK_LINE(386)
									_this->x;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->y = _y1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->y;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_y != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _y1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_y(tmp61);
									}
									HX_STACK_LINE(386)
									_this->y;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->z = _z1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->z;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_z != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _z1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_z(tmp61);
									}
									HX_STACK_LINE(386)
									_this->z;
								}
							}
							HX_STACK_LINE(386)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(386)
							bool tmp58 = (_this->listen_x != null());		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							bool tmp59;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								bool tmp60 = _this->ignore_listeners;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								bool tmp61 = tmp60;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								tmp59 = !(tmp61);
							}
							else{
								HX_STACK_LINE(386)
								tmp59 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp59)){
								HX_STACK_LINE(386)
								Float tmp60 = _this->x;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_this->listen_x(tmp60);
							}
							HX_STACK_LINE(386)
							bool tmp60 = (_this->listen_y != null());		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							if ((tmp60)){
								HX_STACK_LINE(386)
								bool tmp62 = _this->ignore_listeners;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								bool tmp63 = tmp62;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								tmp61 = !(tmp63);
							}
							else{
								HX_STACK_LINE(386)
								tmp61 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp61)){
								HX_STACK_LINE(386)
								Float tmp62 = _this->y;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								_this->listen_y(tmp62);
							}
							HX_STACK_LINE(386)
							bool tmp62 = (_this->listen_z != null());		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							bool tmp63;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							if ((tmp62)){
								HX_STACK_LINE(386)
								bool tmp64 = _this->ignore_listeners;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								bool tmp65 = tmp64;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								tmp63 = !(tmp65);
							}
							else{
								HX_STACK_LINE(386)
								tmp63 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp63)){
								HX_STACK_LINE(386)
								Float tmp64 = _this->z;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								_this->listen_z(tmp64);
							}
							HX_STACK_LINE(386)
							_this;
						}
						HX_STACK_LINE(386)
						_this;
					}
				}
				HX_STACK_LINE(386)
				Dynamic tmp37 = this->listen_y_dyn();		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(386)
				bool tmp38 = (tmp37 != null());		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(386)
				bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(386)
				if ((tmp38)){
					HX_STACK_LINE(386)
					bool tmp40 = this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					tmp39 = !(tmp42);
				}
				else{
					HX_STACK_LINE(386)
					tmp39 = false;
				}
				HX_STACK_LINE(386)
				if ((tmp39)){
					HX_STACK_LINE(386)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					this->listen_y(tmp40);
				}
				HX_STACK_LINE(386)
				this->y;
			}
		}
		HX_STACK_LINE(386)
		{
			HX_STACK_LINE(388)
			Float tmp31 = (_y * ratioA);		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(388)
			Float tmp32 = this->y;		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(388)
			Float tmp33 = ratioB;		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(388)
			Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(388)
			Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(386)
			this->z = tmp35;
			HX_STACK_LINE(386)
			bool tmp36 = this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(386)
			if ((tmp36)){
				HX_STACK_LINE(386)
				this->z;
			}
			else{
				HX_STACK_LINE(386)
				{
					HX_STACK_LINE(386)
					::phoenix::Vector tmp37 = this->euler;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(386)
					bool tmp38 = (tmp37 == null());		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(386)
					bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(386)
					bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					if ((tmp40)){
						HX_STACK_LINE(386)
						tmp41 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(386)
						tmp41 = true;
					}
					HX_STACK_LINE(386)
					bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(386)
					if ((tmp42)){
						HX_STACK_LINE(386)
						tmp43 = this->_construct;
					}
					else{
						HX_STACK_LINE(386)
						tmp43 = true;
					}
					HX_STACK_LINE(386)
					if ((tmp43)){
						HX_STACK_LINE(386)
						Dynamic();
					}
					else{
						HX_STACK_LINE(386)
						::phoenix::Vector tmp44 = this->euler;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(386)
						::phoenix::Vector _this = tmp44;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(386)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(386)
						Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(386)
						Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(386)
						Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(386)
						Float sqx = tmp47;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(386)
						Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(386)
						Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(386)
						Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(386)
						Float sqy = tmp50;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(386)
						Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(386)
						Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(386)
						Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(386)
						Float sqz = tmp53;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(386)
						Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(386)
						Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(386)
						Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(386)
						Float sqw = tmp56;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(386)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(386)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(386)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(386)
						bool tmp57 = (order == (int)0);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(386)
						if ((tmp57)){
							HX_STACK_LINE(386)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(386)
							Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(386)
							Float tmp66 = (sqw - sqx);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(386)
							Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(386)
							Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(386)
							Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(386)
							Float tmp70 = (tmp68 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(386)
							Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(386)
							_x1 = tmp71;
							HX_STACK_LINE(386)
							Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = (tmp75 + tmp78);		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float value = tmp80;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(386)
								bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								if ((tmp81)){
									HX_STACK_LINE(386)
									tmp72 = (int)-1;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									if ((tmp82)){
										HX_STACK_LINE(386)
										tmp72 = (int)1;
									}
									else{
										HX_STACK_LINE(386)
										tmp72 = value;
									}
								}
							}
							HX_STACK_LINE(386)
							Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(386)
							_y1 = tmp73;
							HX_STACK_LINE(386)
							Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(386)
							Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(386)
							Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(386)
							Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(386)
							Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(386)
							Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(386)
							Float tmp80 = (tmp76 - tmp79);		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(386)
							Float tmp81 = ((int)2 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(386)
							Float tmp82 = (sqw + sqx);		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(386)
							Float tmp83 = sqy;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(386)
							Float tmp84 = (tmp82 - tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(386)
							Float tmp85 = sqz;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(386)
							Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(386)
							Float tmp87 = ::Math_obj::atan2(tmp81,tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(386)
							_z1 = tmp87;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp58 = (order == (int)1);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								{
									HX_STACK_LINE(386)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float value = tmp67;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(386)
									bool tmp68 = (value < (int)-1);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									if ((tmp68)){
										HX_STACK_LINE(386)
										tmp59 = (int)-1;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp69 = (value > (int)1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp59 = (int)1;
										}
										else{
											HX_STACK_LINE(386)
											tmp59 = value;
										}
									}
								}
								HX_STACK_LINE(386)
								Float tmp60 = ::Math_obj::asin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_x1 = tmp60;
								HX_STACK_LINE(386)
								Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(386)
								Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(386)
								Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(386)
								Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(386)
								Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(386)
								Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(386)
								Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(386)
								Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								_y1 = tmp74;
								HX_STACK_LINE(386)
								Float tmp75 = this->x;		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = this->w;		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = (tmp78 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float tmp81 = (tmp77 + tmp80);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								Float tmp82 = ((int)2 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
								HX_STACK_LINE(386)
								Float tmp83 = (sqw - sqx);		HX_STACK_VAR(tmp83,"tmp83");
								HX_STACK_LINE(386)
								Float tmp84 = sqy;		HX_STACK_VAR(tmp84,"tmp84");
								HX_STACK_LINE(386)
								Float tmp85 = (tmp83 + tmp84);		HX_STACK_VAR(tmp85,"tmp85");
								HX_STACK_LINE(386)
								Float tmp86 = sqz;		HX_STACK_VAR(tmp86,"tmp86");
								HX_STACK_LINE(386)
								Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
								HX_STACK_LINE(386)
								Float tmp88 = ::Math_obj::atan2(tmp82,tmp87);		HX_STACK_VAR(tmp88,"tmp88");
								HX_STACK_LINE(386)
								_z1 = tmp88;
							}
							else{
								HX_STACK_LINE(386)
								bool tmp59 = (order == (int)2);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								if ((tmp59)){
									HX_STACK_LINE(386)
									Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									{
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float value = tmp68;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(386)
										bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp60 = (int)-1;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											if ((tmp70)){
												HX_STACK_LINE(386)
												tmp60 = (int)1;
											}
											else{
												HX_STACK_LINE(386)
												tmp60 = value;
											}
										}
									}
									HX_STACK_LINE(386)
									Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									_x1 = tmp61;
									HX_STACK_LINE(386)
									Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(386)
									Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(386)
									Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(386)
									Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(386)
									Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(386)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(386)
									Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(386)
									_y1 = tmp75;
									HX_STACK_LINE(386)
									Float tmp76 = this->z;		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(386)
									Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(386)
									Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
									HX_STACK_LINE(386)
									Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
									HX_STACK_LINE(386)
									Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
									HX_STACK_LINE(386)
									Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
									HX_STACK_LINE(386)
									Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
									HX_STACK_LINE(386)
									Float tmp84 = (sqw - sqx);		HX_STACK_VAR(tmp84,"tmp84");
									HX_STACK_LINE(386)
									Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
									HX_STACK_LINE(386)
									Float tmp86 = (tmp84 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
									HX_STACK_LINE(386)
									Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
									HX_STACK_LINE(386)
									Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
									HX_STACK_LINE(386)
									Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
									HX_STACK_LINE(386)
									_z1 = tmp89;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp60 = (order == (int)3);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(386)
										Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(386)
										Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(386)
										Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(386)
										Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(386)
										_x1 = tmp74;
										HX_STACK_LINE(386)
										Float tmp75;		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(386)
										{
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float value = tmp83;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(386)
											bool tmp84 = (value < (int)-1);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											if ((tmp84)){
												HX_STACK_LINE(386)
												tmp75 = (int)-1;
											}
											else{
												HX_STACK_LINE(386)
												bool tmp85 = (value > (int)1);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												if ((tmp85)){
													HX_STACK_LINE(386)
													tmp75 = (int)1;
												}
												else{
													HX_STACK_LINE(386)
													tmp75 = value;
												}
											}
										}
										HX_STACK_LINE(386)
										Float tmp76 = ::Math_obj::asin(tmp75);		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(386)
										_y1 = tmp76;
										HX_STACK_LINE(386)
										Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(386)
										Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(386)
										Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(386)
										Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
										HX_STACK_LINE(386)
										Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
										HX_STACK_LINE(386)
										Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
										HX_STACK_LINE(386)
										Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
										HX_STACK_LINE(386)
										Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
										HX_STACK_LINE(386)
										Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(386)
										Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
										HX_STACK_LINE(386)
										Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
										HX_STACK_LINE(386)
										Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
										HX_STACK_LINE(386)
										Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
										HX_STACK_LINE(386)
										Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
										HX_STACK_LINE(386)
										_z1 = tmp90;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp61 = (order == (int)4);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										if ((tmp61)){
											HX_STACK_LINE(386)
											Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(386)
											Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(386)
											Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(386)
											Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(386)
											Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(386)
											Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(386)
											Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(386)
											Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(386)
											Float tmp72 = (tmp70 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(386)
											Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(386)
											Float tmp74 = (tmp72 - tmp73);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(386)
											Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(386)
											_x1 = tmp75;
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float tmp84 = (sqw + sqx);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
											HX_STACK_LINE(386)
											Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
											HX_STACK_LINE(386)
											Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
											HX_STACK_LINE(386)
											Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
											HX_STACK_LINE(386)
											Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
											HX_STACK_LINE(386)
											_y1 = tmp89;
											HX_STACK_LINE(386)
											Float tmp90;		HX_STACK_VAR(tmp90,"tmp90");
											HX_STACK_LINE(386)
											{
												HX_STACK_LINE(386)
												Float tmp91 = this->x;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												Float tmp92 = this->y;		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
												HX_STACK_LINE(386)
												Float tmp94 = this->z;		HX_STACK_VAR(tmp94,"tmp94");
												HX_STACK_LINE(386)
												Float tmp95 = this->w;		HX_STACK_VAR(tmp95,"tmp95");
												HX_STACK_LINE(386)
												Float tmp96 = (tmp94 * tmp95);		HX_STACK_VAR(tmp96,"tmp96");
												HX_STACK_LINE(386)
												Float tmp97 = (tmp93 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
												HX_STACK_LINE(386)
												Float tmp98 = ((int)2 * tmp97);		HX_STACK_VAR(tmp98,"tmp98");
												HX_STACK_LINE(386)
												Float value = tmp98;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(386)
												bool tmp99 = (value < (int)-1);		HX_STACK_VAR(tmp99,"tmp99");
												HX_STACK_LINE(386)
												if ((tmp99)){
													HX_STACK_LINE(386)
													tmp90 = (int)-1;
												}
												else{
													HX_STACK_LINE(386)
													bool tmp100 = (value > (int)1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp90 = (int)1;
													}
													else{
														HX_STACK_LINE(386)
														tmp90 = value;
													}
												}
											}
											HX_STACK_LINE(386)
											Float tmp91 = ::Math_obj::asin(tmp90);		HX_STACK_VAR(tmp91,"tmp91");
											HX_STACK_LINE(386)
											_z1 = tmp91;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp62 = (order == (int)5);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											if ((tmp62)){
												HX_STACK_LINE(386)
												Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(386)
												Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(386)
												Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(386)
												Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(386)
												Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(386)
												Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(386)
												Float tmp69 = (tmp65 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(386)
												Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(386)
												Float tmp71 = (sqw - sqx);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(386)
												Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(386)
												Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(386)
												Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(386)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(386)
												Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(386)
												_x1 = tmp76;
												HX_STACK_LINE(386)
												Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(386)
												Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(386)
												Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(386)
												Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(386)
												Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
												HX_STACK_LINE(386)
												Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
												HX_STACK_LINE(386)
												Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
												HX_STACK_LINE(386)
												Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
												HX_STACK_LINE(386)
												Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
												HX_STACK_LINE(386)
												Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
												HX_STACK_LINE(386)
												Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
												HX_STACK_LINE(386)
												Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
												HX_STACK_LINE(386)
												Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
												HX_STACK_LINE(386)
												_y1 = tmp90;
												HX_STACK_LINE(386)
												Float tmp91;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												{
													HX_STACK_LINE(386)
													Float tmp92 = this->z;		HX_STACK_VAR(tmp92,"tmp92");
													HX_STACK_LINE(386)
													Float tmp93 = this->w;		HX_STACK_VAR(tmp93,"tmp93");
													HX_STACK_LINE(386)
													Float tmp94 = (tmp92 * tmp93);		HX_STACK_VAR(tmp94,"tmp94");
													HX_STACK_LINE(386)
													Float tmp95 = this->x;		HX_STACK_VAR(tmp95,"tmp95");
													HX_STACK_LINE(386)
													Float tmp96 = this->y;		HX_STACK_VAR(tmp96,"tmp96");
													HX_STACK_LINE(386)
													Float tmp97 = (tmp95 * tmp96);		HX_STACK_VAR(tmp97,"tmp97");
													HX_STACK_LINE(386)
													Float tmp98 = (tmp94 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
													HX_STACK_LINE(386)
													Float tmp99 = ((int)2 * tmp98);		HX_STACK_VAR(tmp99,"tmp99");
													HX_STACK_LINE(386)
													Float value = tmp99;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(386)
													bool tmp100 = (value < (int)-1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp91 = (int)-1;
													}
													else{
														HX_STACK_LINE(386)
														bool tmp101 = (value > (int)1);		HX_STACK_VAR(tmp101,"tmp101");
														HX_STACK_LINE(386)
														if ((tmp101)){
															HX_STACK_LINE(386)
															tmp91 = (int)1;
														}
														else{
															HX_STACK_LINE(386)
															tmp91 = value;
														}
													}
												}
												HX_STACK_LINE(386)
												Float tmp92 = ::Math_obj::asin(tmp91);		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												_z1 = tmp92;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(386)
						{
							HX_STACK_LINE(386)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(386)
							_this->ignore_listeners = true;
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->x = _x1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->x;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_x != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _x1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_x(tmp61);
									}
									HX_STACK_LINE(386)
									_this->x;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->y = _y1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->y;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_y != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _y1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_y(tmp61);
									}
									HX_STACK_LINE(386)
									_this->y;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->z = _z1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->z;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_z != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _z1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_z(tmp61);
									}
									HX_STACK_LINE(386)
									_this->z;
								}
							}
							HX_STACK_LINE(386)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(386)
							bool tmp58 = (_this->listen_x != null());		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							bool tmp59;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								bool tmp60 = _this->ignore_listeners;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								bool tmp61 = tmp60;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								tmp59 = !(tmp61);
							}
							else{
								HX_STACK_LINE(386)
								tmp59 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp59)){
								HX_STACK_LINE(386)
								Float tmp60 = _this->x;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_this->listen_x(tmp60);
							}
							HX_STACK_LINE(386)
							bool tmp60 = (_this->listen_y != null());		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							if ((tmp60)){
								HX_STACK_LINE(386)
								bool tmp62 = _this->ignore_listeners;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								bool tmp63 = tmp62;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								tmp61 = !(tmp63);
							}
							else{
								HX_STACK_LINE(386)
								tmp61 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp61)){
								HX_STACK_LINE(386)
								Float tmp62 = _this->y;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								_this->listen_y(tmp62);
							}
							HX_STACK_LINE(386)
							bool tmp62 = (_this->listen_z != null());		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							bool tmp63;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							if ((tmp62)){
								HX_STACK_LINE(386)
								bool tmp64 = _this->ignore_listeners;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								bool tmp65 = tmp64;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								tmp63 = !(tmp65);
							}
							else{
								HX_STACK_LINE(386)
								tmp63 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp63)){
								HX_STACK_LINE(386)
								Float tmp64 = _this->z;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								_this->listen_z(tmp64);
							}
							HX_STACK_LINE(386)
							_this;
						}
						HX_STACK_LINE(386)
						_this;
					}
				}
				HX_STACK_LINE(386)
				Dynamic tmp37 = this->listen_z_dyn();		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(386)
				bool tmp38 = (tmp37 != null());		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(386)
				bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(386)
				if ((tmp38)){
					HX_STACK_LINE(386)
					bool tmp40 = this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					tmp39 = !(tmp42);
				}
				else{
					HX_STACK_LINE(386)
					tmp39 = false;
				}
				HX_STACK_LINE(386)
				if ((tmp39)){
					HX_STACK_LINE(386)
					Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					this->listen_z(tmp40);
				}
				HX_STACK_LINE(386)
				this->z;
			}
		}
		HX_STACK_LINE(386)
		{
			HX_STACK_LINE(389)
			Float tmp31 = (_z * ratioA);		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(389)
			Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(389)
			Float tmp33 = ratioB;		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(389)
			Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(389)
			Float tmp35 = (tmp31 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(386)
			this->w = tmp35;
			HX_STACK_LINE(386)
			bool tmp36 = this->_construct;		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(386)
			if ((tmp36)){
				HX_STACK_LINE(386)
				this->w;
			}
			else{
				HX_STACK_LINE(386)
				{
					HX_STACK_LINE(386)
					::phoenix::Vector tmp37 = this->euler;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(386)
					bool tmp38 = (tmp37 == null());		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(386)
					bool tmp39 = !(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(386)
					bool tmp40 = tmp39;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					if ((tmp40)){
						HX_STACK_LINE(386)
						tmp41 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(386)
						tmp41 = true;
					}
					HX_STACK_LINE(386)
					bool tmp42 = !(tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					bool tmp43;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(386)
					if ((tmp42)){
						HX_STACK_LINE(386)
						tmp43 = this->_construct;
					}
					else{
						HX_STACK_LINE(386)
						tmp43 = true;
					}
					HX_STACK_LINE(386)
					if ((tmp43)){
						HX_STACK_LINE(386)
						Dynamic();
					}
					else{
						HX_STACK_LINE(386)
						::phoenix::Vector tmp44 = this->euler;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(386)
						::phoenix::Vector _this = tmp44;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(386)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(386)
						Float tmp45 = this->x;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(386)
						Float tmp46 = this->x;		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(386)
						Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(386)
						Float sqx = tmp47;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(386)
						Float tmp48 = this->y;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(386)
						Float tmp49 = this->y;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(386)
						Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(386)
						Float sqy = tmp50;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(386)
						Float tmp51 = this->z;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(386)
						Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(386)
						Float tmp53 = (tmp51 * tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(386)
						Float sqz = tmp53;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(386)
						Float tmp54 = this->w;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(386)
						Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(386)
						Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(386)
						Float sqw = tmp56;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(386)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(386)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(386)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(386)
						bool tmp57 = (order == (int)0);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(386)
						if ((tmp57)){
							HX_STACK_LINE(386)
							Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							Float tmp64 = (tmp60 - tmp63);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(386)
							Float tmp65 = ((int)2 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(386)
							Float tmp66 = (sqw - sqx);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(386)
							Float tmp67 = sqy;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(386)
							Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(386)
							Float tmp69 = sqz;		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(386)
							Float tmp70 = (tmp68 + tmp69);		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(386)
							Float tmp71 = ::Math_obj::atan2(tmp65,tmp70);		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(386)
							_x1 = tmp71;
							HX_STACK_LINE(386)
							Float tmp72;		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = (tmp75 + tmp78);		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = ((int)2 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float value = tmp80;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(386)
								bool tmp81 = (value < (int)-1);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								if ((tmp81)){
									HX_STACK_LINE(386)
									tmp72 = (int)-1;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp82 = (value > (int)1);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									if ((tmp82)){
										HX_STACK_LINE(386)
										tmp72 = (int)1;
									}
									else{
										HX_STACK_LINE(386)
										tmp72 = value;
									}
								}
							}
							HX_STACK_LINE(386)
							Float tmp73 = ::Math_obj::asin(tmp72);		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(386)
							_y1 = tmp73;
							HX_STACK_LINE(386)
							Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(386)
							Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(386)
							Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(386)
							Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(386)
							Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(386)
							Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(386)
							Float tmp80 = (tmp76 - tmp79);		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(386)
							Float tmp81 = ((int)2 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(386)
							Float tmp82 = (sqw + sqx);		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(386)
							Float tmp83 = sqy;		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(386)
							Float tmp84 = (tmp82 - tmp83);		HX_STACK_VAR(tmp84,"tmp84");
							HX_STACK_LINE(386)
							Float tmp85 = sqz;		HX_STACK_VAR(tmp85,"tmp85");
							HX_STACK_LINE(386)
							Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
							HX_STACK_LINE(386)
							Float tmp87 = ::Math_obj::atan2(tmp81,tmp86);		HX_STACK_VAR(tmp87,"tmp87");
							HX_STACK_LINE(386)
							_z1 = tmp87;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp58 = (order == (int)1);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								Float tmp59;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								{
									HX_STACK_LINE(386)
									Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									Float tmp61 = this->w;		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->y;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = (tmp62 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = ((int)2 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float value = tmp67;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(386)
									bool tmp68 = (value < (int)-1);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									if ((tmp68)){
										HX_STACK_LINE(386)
										tmp59 = (int)-1;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp69 = (value > (int)1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp59 = (int)1;
										}
										else{
											HX_STACK_LINE(386)
											tmp59 = value;
										}
									}
								}
								HX_STACK_LINE(386)
								Float tmp60 = ::Math_obj::asin(tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_x1 = tmp60;
								HX_STACK_LINE(386)
								Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								Float tmp62 = this->z;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								Float tmp65 = this->w;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(386)
								Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(386)
								Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(386)
								Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(386)
								Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(386)
								Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(386)
								Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(386)
								Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								_y1 = tmp74;
								HX_STACK_LINE(386)
								Float tmp75 = this->x;		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = (tmp75 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = this->w;		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = (tmp78 * tmp79);		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float tmp81 = (tmp77 + tmp80);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								Float tmp82 = ((int)2 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
								HX_STACK_LINE(386)
								Float tmp83 = (sqw - sqx);		HX_STACK_VAR(tmp83,"tmp83");
								HX_STACK_LINE(386)
								Float tmp84 = sqy;		HX_STACK_VAR(tmp84,"tmp84");
								HX_STACK_LINE(386)
								Float tmp85 = (tmp83 + tmp84);		HX_STACK_VAR(tmp85,"tmp85");
								HX_STACK_LINE(386)
								Float tmp86 = sqz;		HX_STACK_VAR(tmp86,"tmp86");
								HX_STACK_LINE(386)
								Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
								HX_STACK_LINE(386)
								Float tmp88 = ::Math_obj::atan2(tmp82,tmp87);		HX_STACK_VAR(tmp88,"tmp88");
								HX_STACK_LINE(386)
								_z1 = tmp88;
							}
							else{
								HX_STACK_LINE(386)
								bool tmp59 = (order == (int)2);		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								if ((tmp59)){
									HX_STACK_LINE(386)
									Float tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									{
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->y;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float value = tmp68;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(386)
										bool tmp69 = (value < (int)-1);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										if ((tmp69)){
											HX_STACK_LINE(386)
											tmp60 = (int)-1;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp70 = (value > (int)1);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											if ((tmp70)){
												HX_STACK_LINE(386)
												tmp60 = (int)1;
											}
											else{
												HX_STACK_LINE(386)
												tmp60 = value;
											}
										}
									}
									HX_STACK_LINE(386)
									Float tmp61 = ::Math_obj::asin(tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									_x1 = tmp61;
									HX_STACK_LINE(386)
									Float tmp62 = this->y;		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = this->x;		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(386)
									Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(386)
									Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(386)
									Float tmp72 = (tmp70 - tmp71);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(386)
									Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(386)
									Float tmp74 = (tmp72 + tmp73);		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(386)
									Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(386)
									_y1 = tmp75;
									HX_STACK_LINE(386)
									Float tmp76 = this->z;		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(386)
									Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(386)
									Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
									HX_STACK_LINE(386)
									Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
									HX_STACK_LINE(386)
									Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
									HX_STACK_LINE(386)
									Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
									HX_STACK_LINE(386)
									Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
									HX_STACK_LINE(386)
									Float tmp84 = (sqw - sqx);		HX_STACK_VAR(tmp84,"tmp84");
									HX_STACK_LINE(386)
									Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
									HX_STACK_LINE(386)
									Float tmp86 = (tmp84 + tmp85);		HX_STACK_VAR(tmp86,"tmp86");
									HX_STACK_LINE(386)
									Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
									HX_STACK_LINE(386)
									Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
									HX_STACK_LINE(386)
									Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
									HX_STACK_LINE(386)
									_z1 = tmp89;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp60 = (order == (int)3);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = this->x;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = this->w;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp61 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = this->z;		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = this->y;		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = (tmp64 * tmp65);		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp63 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = ((int)2 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float tmp69 = (sqw - sqx);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										Float tmp70 = sqy;		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(386)
										Float tmp71 = (tmp69 - tmp70);		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(386)
										Float tmp72 = sqz;		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(386)
										Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(386)
										Float tmp74 = ::Math_obj::atan2(tmp68,tmp73);		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(386)
										_x1 = tmp74;
										HX_STACK_LINE(386)
										Float tmp75;		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(386)
										{
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float value = tmp83;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(386)
											bool tmp84 = (value < (int)-1);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											if ((tmp84)){
												HX_STACK_LINE(386)
												tmp75 = (int)-1;
											}
											else{
												HX_STACK_LINE(386)
												bool tmp85 = (value > (int)1);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												if ((tmp85)){
													HX_STACK_LINE(386)
													tmp75 = (int)1;
												}
												else{
													HX_STACK_LINE(386)
													tmp75 = value;
												}
											}
										}
										HX_STACK_LINE(386)
										Float tmp76 = ::Math_obj::asin(tmp75);		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(386)
										_y1 = tmp76;
										HX_STACK_LINE(386)
										Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(386)
										Float tmp78 = this->y;		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(386)
										Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(386)
										Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
										HX_STACK_LINE(386)
										Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
										HX_STACK_LINE(386)
										Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
										HX_STACK_LINE(386)
										Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
										HX_STACK_LINE(386)
										Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
										HX_STACK_LINE(386)
										Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(386)
										Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
										HX_STACK_LINE(386)
										Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
										HX_STACK_LINE(386)
										Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
										HX_STACK_LINE(386)
										Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
										HX_STACK_LINE(386)
										Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
										HX_STACK_LINE(386)
										_z1 = tmp90;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp61 = (order == (int)4);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										if ((tmp61)){
											HX_STACK_LINE(386)
											Float tmp62 = this->x;		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											Float tmp63 = this->w;		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(386)
											Float tmp64 = (tmp62 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(386)
											Float tmp65 = this->z;		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(386)
											Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
											HX_STACK_LINE(386)
											Float tmp67 = (tmp65 * tmp66);		HX_STACK_VAR(tmp67,"tmp67");
											HX_STACK_LINE(386)
											Float tmp68 = (tmp64 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
											HX_STACK_LINE(386)
											Float tmp69 = ((int)2 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
											HX_STACK_LINE(386)
											Float tmp70 = (sqw - sqx);		HX_STACK_VAR(tmp70,"tmp70");
											HX_STACK_LINE(386)
											Float tmp71 = sqy;		HX_STACK_VAR(tmp71,"tmp71");
											HX_STACK_LINE(386)
											Float tmp72 = (tmp70 + tmp71);		HX_STACK_VAR(tmp72,"tmp72");
											HX_STACK_LINE(386)
											Float tmp73 = sqz;		HX_STACK_VAR(tmp73,"tmp73");
											HX_STACK_LINE(386)
											Float tmp74 = (tmp72 - tmp73);		HX_STACK_VAR(tmp74,"tmp74");
											HX_STACK_LINE(386)
											Float tmp75 = ::Math_obj::atan2(tmp69,tmp74);		HX_STACK_VAR(tmp75,"tmp75");
											HX_STACK_LINE(386)
											_x1 = tmp75;
											HX_STACK_LINE(386)
											Float tmp76 = this->y;		HX_STACK_VAR(tmp76,"tmp76");
											HX_STACK_LINE(386)
											Float tmp77 = this->w;		HX_STACK_VAR(tmp77,"tmp77");
											HX_STACK_LINE(386)
											Float tmp78 = (tmp76 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
											HX_STACK_LINE(386)
											Float tmp79 = this->x;		HX_STACK_VAR(tmp79,"tmp79");
											HX_STACK_LINE(386)
											Float tmp80 = this->z;		HX_STACK_VAR(tmp80,"tmp80");
											HX_STACK_LINE(386)
											Float tmp81 = (tmp79 * tmp80);		HX_STACK_VAR(tmp81,"tmp81");
											HX_STACK_LINE(386)
											Float tmp82 = (tmp78 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
											HX_STACK_LINE(386)
											Float tmp83 = ((int)2 * tmp82);		HX_STACK_VAR(tmp83,"tmp83");
											HX_STACK_LINE(386)
											Float tmp84 = (sqw + sqx);		HX_STACK_VAR(tmp84,"tmp84");
											HX_STACK_LINE(386)
											Float tmp85 = sqy;		HX_STACK_VAR(tmp85,"tmp85");
											HX_STACK_LINE(386)
											Float tmp86 = (tmp84 - tmp85);		HX_STACK_VAR(tmp86,"tmp86");
											HX_STACK_LINE(386)
											Float tmp87 = sqz;		HX_STACK_VAR(tmp87,"tmp87");
											HX_STACK_LINE(386)
											Float tmp88 = (tmp86 - tmp87);		HX_STACK_VAR(tmp88,"tmp88");
											HX_STACK_LINE(386)
											Float tmp89 = ::Math_obj::atan2(tmp83,tmp88);		HX_STACK_VAR(tmp89,"tmp89");
											HX_STACK_LINE(386)
											_y1 = tmp89;
											HX_STACK_LINE(386)
											Float tmp90;		HX_STACK_VAR(tmp90,"tmp90");
											HX_STACK_LINE(386)
											{
												HX_STACK_LINE(386)
												Float tmp91 = this->x;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												Float tmp92 = this->y;		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												Float tmp93 = (tmp91 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
												HX_STACK_LINE(386)
												Float tmp94 = this->z;		HX_STACK_VAR(tmp94,"tmp94");
												HX_STACK_LINE(386)
												Float tmp95 = this->w;		HX_STACK_VAR(tmp95,"tmp95");
												HX_STACK_LINE(386)
												Float tmp96 = (tmp94 * tmp95);		HX_STACK_VAR(tmp96,"tmp96");
												HX_STACK_LINE(386)
												Float tmp97 = (tmp93 + tmp96);		HX_STACK_VAR(tmp97,"tmp97");
												HX_STACK_LINE(386)
												Float tmp98 = ((int)2 * tmp97);		HX_STACK_VAR(tmp98,"tmp98");
												HX_STACK_LINE(386)
												Float value = tmp98;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(386)
												bool tmp99 = (value < (int)-1);		HX_STACK_VAR(tmp99,"tmp99");
												HX_STACK_LINE(386)
												if ((tmp99)){
													HX_STACK_LINE(386)
													tmp90 = (int)-1;
												}
												else{
													HX_STACK_LINE(386)
													bool tmp100 = (value > (int)1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp90 = (int)1;
													}
													else{
														HX_STACK_LINE(386)
														tmp90 = value;
													}
												}
											}
											HX_STACK_LINE(386)
											Float tmp91 = ::Math_obj::asin(tmp90);		HX_STACK_VAR(tmp91,"tmp91");
											HX_STACK_LINE(386)
											_z1 = tmp91;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp62 = (order == (int)5);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(386)
											if ((tmp62)){
												HX_STACK_LINE(386)
												Float tmp63 = this->x;		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(386)
												Float tmp64 = this->w;		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(386)
												Float tmp65 = (tmp63 * tmp64);		HX_STACK_VAR(tmp65,"tmp65");
												HX_STACK_LINE(386)
												Float tmp66 = this->y;		HX_STACK_VAR(tmp66,"tmp66");
												HX_STACK_LINE(386)
												Float tmp67 = this->z;		HX_STACK_VAR(tmp67,"tmp67");
												HX_STACK_LINE(386)
												Float tmp68 = (tmp66 * tmp67);		HX_STACK_VAR(tmp68,"tmp68");
												HX_STACK_LINE(386)
												Float tmp69 = (tmp65 + tmp68);		HX_STACK_VAR(tmp69,"tmp69");
												HX_STACK_LINE(386)
												Float tmp70 = ((int)2 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
												HX_STACK_LINE(386)
												Float tmp71 = (sqw - sqx);		HX_STACK_VAR(tmp71,"tmp71");
												HX_STACK_LINE(386)
												Float tmp72 = sqy;		HX_STACK_VAR(tmp72,"tmp72");
												HX_STACK_LINE(386)
												Float tmp73 = (tmp71 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
												HX_STACK_LINE(386)
												Float tmp74 = sqz;		HX_STACK_VAR(tmp74,"tmp74");
												HX_STACK_LINE(386)
												Float tmp75 = (tmp73 - tmp74);		HX_STACK_VAR(tmp75,"tmp75");
												HX_STACK_LINE(386)
												Float tmp76 = ::Math_obj::atan2(tmp70,tmp75);		HX_STACK_VAR(tmp76,"tmp76");
												HX_STACK_LINE(386)
												_x1 = tmp76;
												HX_STACK_LINE(386)
												Float tmp77 = this->x;		HX_STACK_VAR(tmp77,"tmp77");
												HX_STACK_LINE(386)
												Float tmp78 = this->z;		HX_STACK_VAR(tmp78,"tmp78");
												HX_STACK_LINE(386)
												Float tmp79 = (tmp77 * tmp78);		HX_STACK_VAR(tmp79,"tmp79");
												HX_STACK_LINE(386)
												Float tmp80 = this->y;		HX_STACK_VAR(tmp80,"tmp80");
												HX_STACK_LINE(386)
												Float tmp81 = this->w;		HX_STACK_VAR(tmp81,"tmp81");
												HX_STACK_LINE(386)
												Float tmp82 = (tmp80 * tmp81);		HX_STACK_VAR(tmp82,"tmp82");
												HX_STACK_LINE(386)
												Float tmp83 = (tmp79 + tmp82);		HX_STACK_VAR(tmp83,"tmp83");
												HX_STACK_LINE(386)
												Float tmp84 = ((int)2 * tmp83);		HX_STACK_VAR(tmp84,"tmp84");
												HX_STACK_LINE(386)
												Float tmp85 = (sqw + sqx);		HX_STACK_VAR(tmp85,"tmp85");
												HX_STACK_LINE(386)
												Float tmp86 = sqy;		HX_STACK_VAR(tmp86,"tmp86");
												HX_STACK_LINE(386)
												Float tmp87 = (tmp85 - tmp86);		HX_STACK_VAR(tmp87,"tmp87");
												HX_STACK_LINE(386)
												Float tmp88 = sqz;		HX_STACK_VAR(tmp88,"tmp88");
												HX_STACK_LINE(386)
												Float tmp89 = (tmp87 - tmp88);		HX_STACK_VAR(tmp89,"tmp89");
												HX_STACK_LINE(386)
												Float tmp90 = ::Math_obj::atan2(tmp84,tmp89);		HX_STACK_VAR(tmp90,"tmp90");
												HX_STACK_LINE(386)
												_y1 = tmp90;
												HX_STACK_LINE(386)
												Float tmp91;		HX_STACK_VAR(tmp91,"tmp91");
												HX_STACK_LINE(386)
												{
													HX_STACK_LINE(386)
													Float tmp92 = this->z;		HX_STACK_VAR(tmp92,"tmp92");
													HX_STACK_LINE(386)
													Float tmp93 = this->w;		HX_STACK_VAR(tmp93,"tmp93");
													HX_STACK_LINE(386)
													Float tmp94 = (tmp92 * tmp93);		HX_STACK_VAR(tmp94,"tmp94");
													HX_STACK_LINE(386)
													Float tmp95 = this->x;		HX_STACK_VAR(tmp95,"tmp95");
													HX_STACK_LINE(386)
													Float tmp96 = this->y;		HX_STACK_VAR(tmp96,"tmp96");
													HX_STACK_LINE(386)
													Float tmp97 = (tmp95 * tmp96);		HX_STACK_VAR(tmp97,"tmp97");
													HX_STACK_LINE(386)
													Float tmp98 = (tmp94 - tmp97);		HX_STACK_VAR(tmp98,"tmp98");
													HX_STACK_LINE(386)
													Float tmp99 = ((int)2 * tmp98);		HX_STACK_VAR(tmp99,"tmp99");
													HX_STACK_LINE(386)
													Float value = tmp99;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(386)
													bool tmp100 = (value < (int)-1);		HX_STACK_VAR(tmp100,"tmp100");
													HX_STACK_LINE(386)
													if ((tmp100)){
														HX_STACK_LINE(386)
														tmp91 = (int)-1;
													}
													else{
														HX_STACK_LINE(386)
														bool tmp101 = (value > (int)1);		HX_STACK_VAR(tmp101,"tmp101");
														HX_STACK_LINE(386)
														if ((tmp101)){
															HX_STACK_LINE(386)
															tmp91 = (int)1;
														}
														else{
															HX_STACK_LINE(386)
															tmp91 = value;
														}
													}
												}
												HX_STACK_LINE(386)
												Float tmp92 = ::Math_obj::asin(tmp91);		HX_STACK_VAR(tmp92,"tmp92");
												HX_STACK_LINE(386)
												_z1 = tmp92;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(386)
						{
							HX_STACK_LINE(386)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(386)
							_this->ignore_listeners = true;
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->x = _x1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->x;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_x != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _x1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_x(tmp61);
									}
									HX_STACK_LINE(386)
									_this->x;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->y = _y1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->y;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_y != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _y1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_y(tmp61);
									}
									HX_STACK_LINE(386)
									_this->y;
								}
							}
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								_this->z = _z1;
								HX_STACK_LINE(386)
								bool tmp58 = _this->_construct;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								if ((tmp58)){
									HX_STACK_LINE(386)
									_this->z;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp59 = (_this->listen_z != null());		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									bool tmp60;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									if ((tmp59)){
										HX_STACK_LINE(386)
										bool tmp61 = _this->ignore_listeners;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										bool tmp62 = tmp61;		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										tmp60 = !(tmp62);
									}
									else{
										HX_STACK_LINE(386)
										tmp60 = false;
									}
									HX_STACK_LINE(386)
									if ((tmp60)){
										HX_STACK_LINE(386)
										Float tmp61 = _z1;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										_this->listen_z(tmp61);
									}
									HX_STACK_LINE(386)
									_this->z;
								}
							}
							HX_STACK_LINE(386)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(386)
							bool tmp58 = (_this->listen_x != null());		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							bool tmp59;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							if ((tmp58)){
								HX_STACK_LINE(386)
								bool tmp60 = _this->ignore_listeners;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								bool tmp61 = tmp60;		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								tmp59 = !(tmp61);
							}
							else{
								HX_STACK_LINE(386)
								tmp59 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp59)){
								HX_STACK_LINE(386)
								Float tmp60 = _this->x;		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								_this->listen_x(tmp60);
							}
							HX_STACK_LINE(386)
							bool tmp60 = (_this->listen_y != null());		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							bool tmp61;		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							if ((tmp60)){
								HX_STACK_LINE(386)
								bool tmp62 = _this->ignore_listeners;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								bool tmp63 = tmp62;		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								tmp61 = !(tmp63);
							}
							else{
								HX_STACK_LINE(386)
								tmp61 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp61)){
								HX_STACK_LINE(386)
								Float tmp62 = _this->y;		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								_this->listen_y(tmp62);
							}
							HX_STACK_LINE(386)
							bool tmp62 = (_this->listen_z != null());		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							bool tmp63;		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							if ((tmp62)){
								HX_STACK_LINE(386)
								bool tmp64 = _this->ignore_listeners;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								bool tmp65 = tmp64;		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								tmp63 = !(tmp65);
							}
							else{
								HX_STACK_LINE(386)
								tmp63 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp63)){
								HX_STACK_LINE(386)
								Float tmp64 = _this->z;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								_this->listen_z(tmp64);
							}
							HX_STACK_LINE(386)
							_this;
						}
						HX_STACK_LINE(386)
						_this;
					}
				}
				HX_STACK_LINE(386)
				Dynamic tmp37 = this->listen_w_dyn();		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(386)
				bool tmp38 = (tmp37 != null());		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(386)
				bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(386)
				if ((tmp38)){
					HX_STACK_LINE(386)
					bool tmp40 = this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(386)
					bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(386)
					tmp39 = !(tmp42);
				}
				else{
					HX_STACK_LINE(386)
					tmp39 = false;
				}
				HX_STACK_LINE(386)
				if ((tmp39)){
					HX_STACK_LINE(386)
					Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(386)
					this->listen_w(tmp40);
				}
				HX_STACK_LINE(386)
				this->w;
			}
		}
		HX_STACK_LINE(386)
		this->ignore_euler = false;
		HX_STACK_LINE(386)
		{
			HX_STACK_LINE(386)
			::phoenix::Vector tmp31 = this->euler;		HX_STACK_VAR(tmp31,"tmp31");
			HX_STACK_LINE(386)
			bool tmp32 = (tmp31 == null());		HX_STACK_VAR(tmp32,"tmp32");
			HX_STACK_LINE(386)
			bool tmp33 = !(tmp32);		HX_STACK_VAR(tmp33,"tmp33");
			HX_STACK_LINE(386)
			bool tmp34 = tmp33;		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(386)
			bool tmp35;		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(386)
			if ((tmp34)){
				HX_STACK_LINE(386)
				tmp35 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(386)
				tmp35 = true;
			}
			HX_STACK_LINE(386)
			bool tmp36 = !(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(386)
			bool tmp37;		HX_STACK_VAR(tmp37,"tmp37");
			HX_STACK_LINE(386)
			if ((tmp36)){
				HX_STACK_LINE(386)
				tmp37 = this->_construct;
			}
			else{
				HX_STACK_LINE(386)
				tmp37 = true;
			}
			HX_STACK_LINE(386)
			if ((tmp37)){
				HX_STACK_LINE(386)
				Dynamic();
			}
			else{
				HX_STACK_LINE(386)
				::phoenix::Vector tmp38 = this->euler;		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(386)
				::phoenix::Vector _this = tmp38;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(386)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(386)
				Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(386)
				Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(386)
				Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(386)
				Float sqx = tmp41;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(386)
				Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(386)
				Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(386)
				Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(386)
				Float sqy = tmp44;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(386)
				Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(386)
				Float tmp46 = this->z;		HX_STACK_VAR(tmp46,"tmp46");
				HX_STACK_LINE(386)
				Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
				HX_STACK_LINE(386)
				Float sqz = tmp47;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(386)
				Float tmp48 = this->w;		HX_STACK_VAR(tmp48,"tmp48");
				HX_STACK_LINE(386)
				Float tmp49 = this->w;		HX_STACK_VAR(tmp49,"tmp49");
				HX_STACK_LINE(386)
				Float tmp50 = (tmp48 * tmp49);		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(386)
				Float sqw = tmp50;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(386)
				Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
				HX_STACK_LINE(386)
				Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
				HX_STACK_LINE(386)
				Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
				HX_STACK_LINE(386)
				bool tmp51 = (order == (int)0);		HX_STACK_VAR(tmp51,"tmp51");
				HX_STACK_LINE(386)
				if ((tmp51)){
					HX_STACK_LINE(386)
					Float tmp52 = this->x;		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(386)
					Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
					HX_STACK_LINE(386)
					Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
					HX_STACK_LINE(386)
					Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
					HX_STACK_LINE(386)
					Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
					HX_STACK_LINE(386)
					Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
					HX_STACK_LINE(386)
					Float tmp58 = (tmp54 - tmp57);		HX_STACK_VAR(tmp58,"tmp58");
					HX_STACK_LINE(386)
					Float tmp59 = ((int)2 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
					HX_STACK_LINE(386)
					Float tmp60 = (sqw - sqx);		HX_STACK_VAR(tmp60,"tmp60");
					HX_STACK_LINE(386)
					Float tmp61 = sqy;		HX_STACK_VAR(tmp61,"tmp61");
					HX_STACK_LINE(386)
					Float tmp62 = (tmp60 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
					HX_STACK_LINE(386)
					Float tmp63 = sqz;		HX_STACK_VAR(tmp63,"tmp63");
					HX_STACK_LINE(386)
					Float tmp64 = (tmp62 + tmp63);		HX_STACK_VAR(tmp64,"tmp64");
					HX_STACK_LINE(386)
					Float tmp65 = ::Math_obj::atan2(tmp59,tmp64);		HX_STACK_VAR(tmp65,"tmp65");
					HX_STACK_LINE(386)
					_x1 = tmp65;
					HX_STACK_LINE(386)
					Float tmp66;		HX_STACK_VAR(tmp66,"tmp66");
					HX_STACK_LINE(386)
					{
						HX_STACK_LINE(386)
						Float tmp67 = this->x;		HX_STACK_VAR(tmp67,"tmp67");
						HX_STACK_LINE(386)
						Float tmp68 = this->z;		HX_STACK_VAR(tmp68,"tmp68");
						HX_STACK_LINE(386)
						Float tmp69 = (tmp67 * tmp68);		HX_STACK_VAR(tmp69,"tmp69");
						HX_STACK_LINE(386)
						Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
						HX_STACK_LINE(386)
						Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
						HX_STACK_LINE(386)
						Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
						HX_STACK_LINE(386)
						Float tmp73 = (tmp69 + tmp72);		HX_STACK_VAR(tmp73,"tmp73");
						HX_STACK_LINE(386)
						Float tmp74 = ((int)2 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
						HX_STACK_LINE(386)
						Float value = tmp74;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(386)
						bool tmp75 = (value < (int)-1);		HX_STACK_VAR(tmp75,"tmp75");
						HX_STACK_LINE(386)
						if ((tmp75)){
							HX_STACK_LINE(386)
							tmp66 = (int)-1;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp76 = (value > (int)1);		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(386)
							if ((tmp76)){
								HX_STACK_LINE(386)
								tmp66 = (int)1;
							}
							else{
								HX_STACK_LINE(386)
								tmp66 = value;
							}
						}
					}
					HX_STACK_LINE(386)
					Float tmp67 = ::Math_obj::asin(tmp66);		HX_STACK_VAR(tmp67,"tmp67");
					HX_STACK_LINE(386)
					_y1 = tmp67;
					HX_STACK_LINE(386)
					Float tmp68 = this->z;		HX_STACK_VAR(tmp68,"tmp68");
					HX_STACK_LINE(386)
					Float tmp69 = this->w;		HX_STACK_VAR(tmp69,"tmp69");
					HX_STACK_LINE(386)
					Float tmp70 = (tmp68 * tmp69);		HX_STACK_VAR(tmp70,"tmp70");
					HX_STACK_LINE(386)
					Float tmp71 = this->x;		HX_STACK_VAR(tmp71,"tmp71");
					HX_STACK_LINE(386)
					Float tmp72 = this->y;		HX_STACK_VAR(tmp72,"tmp72");
					HX_STACK_LINE(386)
					Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
					HX_STACK_LINE(386)
					Float tmp74 = (tmp70 - tmp73);		HX_STACK_VAR(tmp74,"tmp74");
					HX_STACK_LINE(386)
					Float tmp75 = ((int)2 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
					HX_STACK_LINE(386)
					Float tmp76 = (sqw + sqx);		HX_STACK_VAR(tmp76,"tmp76");
					HX_STACK_LINE(386)
					Float tmp77 = sqy;		HX_STACK_VAR(tmp77,"tmp77");
					HX_STACK_LINE(386)
					Float tmp78 = (tmp76 - tmp77);		HX_STACK_VAR(tmp78,"tmp78");
					HX_STACK_LINE(386)
					Float tmp79 = sqz;		HX_STACK_VAR(tmp79,"tmp79");
					HX_STACK_LINE(386)
					Float tmp80 = (tmp78 - tmp79);		HX_STACK_VAR(tmp80,"tmp80");
					HX_STACK_LINE(386)
					Float tmp81 = ::Math_obj::atan2(tmp75,tmp80);		HX_STACK_VAR(tmp81,"tmp81");
					HX_STACK_LINE(386)
					_z1 = tmp81;
				}
				else{
					HX_STACK_LINE(386)
					bool tmp52 = (order == (int)1);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(386)
					if ((tmp52)){
						HX_STACK_LINE(386)
						Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(386)
						{
							HX_STACK_LINE(386)
							Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(386)
							Float tmp55 = this->w;		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(386)
							Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(386)
							Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(386)
							Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							Float tmp60 = (tmp56 - tmp59);		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							Float value = tmp61;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(386)
							bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							if ((tmp62)){
								HX_STACK_LINE(386)
								tmp53 = (int)-1;
							}
							else{
								HX_STACK_LINE(386)
								bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								if ((tmp63)){
									HX_STACK_LINE(386)
									tmp53 = (int)1;
								}
								else{
									HX_STACK_LINE(386)
									tmp53 = value;
								}
							}
						}
						HX_STACK_LINE(386)
						Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(386)
						_x1 = tmp54;
						HX_STACK_LINE(386)
						Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(386)
						Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(386)
						Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(386)
						Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(386)
						Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(386)
						Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
						HX_STACK_LINE(386)
						Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
						HX_STACK_LINE(386)
						Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
						HX_STACK_LINE(386)
						Float tmp63 = (sqw - sqx);		HX_STACK_VAR(tmp63,"tmp63");
						HX_STACK_LINE(386)
						Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
						HX_STACK_LINE(386)
						Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
						HX_STACK_LINE(386)
						Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
						HX_STACK_LINE(386)
						Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
						HX_STACK_LINE(386)
						Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
						HX_STACK_LINE(386)
						_y1 = tmp68;
						HX_STACK_LINE(386)
						Float tmp69 = this->x;		HX_STACK_VAR(tmp69,"tmp69");
						HX_STACK_LINE(386)
						Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
						HX_STACK_LINE(386)
						Float tmp71 = (tmp69 * tmp70);		HX_STACK_VAR(tmp71,"tmp71");
						HX_STACK_LINE(386)
						Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
						HX_STACK_LINE(386)
						Float tmp73 = this->w;		HX_STACK_VAR(tmp73,"tmp73");
						HX_STACK_LINE(386)
						Float tmp74 = (tmp72 * tmp73);		HX_STACK_VAR(tmp74,"tmp74");
						HX_STACK_LINE(386)
						Float tmp75 = (tmp71 + tmp74);		HX_STACK_VAR(tmp75,"tmp75");
						HX_STACK_LINE(386)
						Float tmp76 = ((int)2 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
						HX_STACK_LINE(386)
						Float tmp77 = (sqw - sqx);		HX_STACK_VAR(tmp77,"tmp77");
						HX_STACK_LINE(386)
						Float tmp78 = sqy;		HX_STACK_VAR(tmp78,"tmp78");
						HX_STACK_LINE(386)
						Float tmp79 = (tmp77 + tmp78);		HX_STACK_VAR(tmp79,"tmp79");
						HX_STACK_LINE(386)
						Float tmp80 = sqz;		HX_STACK_VAR(tmp80,"tmp80");
						HX_STACK_LINE(386)
						Float tmp81 = (tmp79 - tmp80);		HX_STACK_VAR(tmp81,"tmp81");
						HX_STACK_LINE(386)
						Float tmp82 = ::Math_obj::atan2(tmp76,tmp81);		HX_STACK_VAR(tmp82,"tmp82");
						HX_STACK_LINE(386)
						_z1 = tmp82;
					}
					else{
						HX_STACK_LINE(386)
						bool tmp53 = (order == (int)2);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(386)
						if ((tmp53)){
							HX_STACK_LINE(386)
							Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(386)
							{
								HX_STACK_LINE(386)
								Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(386)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(386)
								Float tmp58 = this->y;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								Float value = tmp62;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(386)
								bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								if ((tmp63)){
									HX_STACK_LINE(386)
									tmp54 = (int)-1;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									if ((tmp64)){
										HX_STACK_LINE(386)
										tmp54 = (int)1;
									}
									else{
										HX_STACK_LINE(386)
										tmp54 = value;
									}
								}
							}
							HX_STACK_LINE(386)
							Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
							HX_STACK_LINE(386)
							_x1 = tmp55;
							HX_STACK_LINE(386)
							Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
							HX_STACK_LINE(386)
							Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
							HX_STACK_LINE(386)
							Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
							HX_STACK_LINE(386)
							Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
							HX_STACK_LINE(386)
							Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
							HX_STACK_LINE(386)
							Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
							HX_STACK_LINE(386)
							Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
							HX_STACK_LINE(386)
							Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
							HX_STACK_LINE(386)
							Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
							HX_STACK_LINE(386)
							Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
							HX_STACK_LINE(386)
							Float tmp66 = (tmp64 - tmp65);		HX_STACK_VAR(tmp66,"tmp66");
							HX_STACK_LINE(386)
							Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
							HX_STACK_LINE(386)
							Float tmp68 = (tmp66 + tmp67);		HX_STACK_VAR(tmp68,"tmp68");
							HX_STACK_LINE(386)
							Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
							HX_STACK_LINE(386)
							_y1 = tmp69;
							HX_STACK_LINE(386)
							Float tmp70 = this->z;		HX_STACK_VAR(tmp70,"tmp70");
							HX_STACK_LINE(386)
							Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
							HX_STACK_LINE(386)
							Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
							HX_STACK_LINE(386)
							Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
							HX_STACK_LINE(386)
							Float tmp74 = this->y;		HX_STACK_VAR(tmp74,"tmp74");
							HX_STACK_LINE(386)
							Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
							HX_STACK_LINE(386)
							Float tmp76 = (tmp72 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
							HX_STACK_LINE(386)
							Float tmp77 = ((int)2 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
							HX_STACK_LINE(386)
							Float tmp78 = (sqw - sqx);		HX_STACK_VAR(tmp78,"tmp78");
							HX_STACK_LINE(386)
							Float tmp79 = sqy;		HX_STACK_VAR(tmp79,"tmp79");
							HX_STACK_LINE(386)
							Float tmp80 = (tmp78 + tmp79);		HX_STACK_VAR(tmp80,"tmp80");
							HX_STACK_LINE(386)
							Float tmp81 = sqz;		HX_STACK_VAR(tmp81,"tmp81");
							HX_STACK_LINE(386)
							Float tmp82 = (tmp80 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
							HX_STACK_LINE(386)
							Float tmp83 = ::Math_obj::atan2(tmp77,tmp82);		HX_STACK_VAR(tmp83,"tmp83");
							HX_STACK_LINE(386)
							_z1 = tmp83;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp54 = (order == (int)3);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(386)
							if ((tmp54)){
								HX_STACK_LINE(386)
								Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(386)
								Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
								HX_STACK_LINE(386)
								Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
								HX_STACK_LINE(386)
								Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
								HX_STACK_LINE(386)
								Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
								HX_STACK_LINE(386)
								Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
								HX_STACK_LINE(386)
								Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
								HX_STACK_LINE(386)
								Float tmp63 = (sqw - sqx);		HX_STACK_VAR(tmp63,"tmp63");
								HX_STACK_LINE(386)
								Float tmp64 = sqy;		HX_STACK_VAR(tmp64,"tmp64");
								HX_STACK_LINE(386)
								Float tmp65 = (tmp63 - tmp64);		HX_STACK_VAR(tmp65,"tmp65");
								HX_STACK_LINE(386)
								Float tmp66 = sqz;		HX_STACK_VAR(tmp66,"tmp66");
								HX_STACK_LINE(386)
								Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
								HX_STACK_LINE(386)
								Float tmp68 = ::Math_obj::atan2(tmp62,tmp67);		HX_STACK_VAR(tmp68,"tmp68");
								HX_STACK_LINE(386)
								_x1 = tmp68;
								HX_STACK_LINE(386)
								Float tmp69;		HX_STACK_VAR(tmp69,"tmp69");
								HX_STACK_LINE(386)
								{
									HX_STACK_LINE(386)
									Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(386)
									Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(386)
									Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(386)
									Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(386)
									Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(386)
									Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(386)
									Float tmp76 = (tmp72 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(386)
									Float tmp77 = ((int)2 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(386)
									Float value = tmp77;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(386)
									bool tmp78 = (value < (int)-1);		HX_STACK_VAR(tmp78,"tmp78");
									HX_STACK_LINE(386)
									if ((tmp78)){
										HX_STACK_LINE(386)
										tmp69 = (int)-1;
									}
									else{
										HX_STACK_LINE(386)
										bool tmp79 = (value > (int)1);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(386)
										if ((tmp79)){
											HX_STACK_LINE(386)
											tmp69 = (int)1;
										}
										else{
											HX_STACK_LINE(386)
											tmp69 = value;
										}
									}
								}
								HX_STACK_LINE(386)
								Float tmp70 = ::Math_obj::asin(tmp69);		HX_STACK_VAR(tmp70,"tmp70");
								HX_STACK_LINE(386)
								_y1 = tmp70;
								HX_STACK_LINE(386)
								Float tmp71 = this->x;		HX_STACK_VAR(tmp71,"tmp71");
								HX_STACK_LINE(386)
								Float tmp72 = this->y;		HX_STACK_VAR(tmp72,"tmp72");
								HX_STACK_LINE(386)
								Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
								HX_STACK_LINE(386)
								Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
								HX_STACK_LINE(386)
								Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
								HX_STACK_LINE(386)
								Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
								HX_STACK_LINE(386)
								Float tmp77 = (tmp73 + tmp76);		HX_STACK_VAR(tmp77,"tmp77");
								HX_STACK_LINE(386)
								Float tmp78 = ((int)2 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
								HX_STACK_LINE(386)
								Float tmp79 = (sqw + sqx);		HX_STACK_VAR(tmp79,"tmp79");
								HX_STACK_LINE(386)
								Float tmp80 = sqy;		HX_STACK_VAR(tmp80,"tmp80");
								HX_STACK_LINE(386)
								Float tmp81 = (tmp79 - tmp80);		HX_STACK_VAR(tmp81,"tmp81");
								HX_STACK_LINE(386)
								Float tmp82 = sqz;		HX_STACK_VAR(tmp82,"tmp82");
								HX_STACK_LINE(386)
								Float tmp83 = (tmp81 - tmp82);		HX_STACK_VAR(tmp83,"tmp83");
								HX_STACK_LINE(386)
								Float tmp84 = ::Math_obj::atan2(tmp78,tmp83);		HX_STACK_VAR(tmp84,"tmp84");
								HX_STACK_LINE(386)
								_z1 = tmp84;
							}
							else{
								HX_STACK_LINE(386)
								bool tmp55 = (order == (int)4);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								if ((tmp55)){
									HX_STACK_LINE(386)
									Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(386)
									Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(386)
									Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(386)
									Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(386)
									Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(386)
									Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(386)
									Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(386)
									Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(386)
									Float tmp64 = (sqw - sqx);		HX_STACK_VAR(tmp64,"tmp64");
									HX_STACK_LINE(386)
									Float tmp65 = sqy;		HX_STACK_VAR(tmp65,"tmp65");
									HX_STACK_LINE(386)
									Float tmp66 = (tmp64 + tmp65);		HX_STACK_VAR(tmp66,"tmp66");
									HX_STACK_LINE(386)
									Float tmp67 = sqz;		HX_STACK_VAR(tmp67,"tmp67");
									HX_STACK_LINE(386)
									Float tmp68 = (tmp66 - tmp67);		HX_STACK_VAR(tmp68,"tmp68");
									HX_STACK_LINE(386)
									Float tmp69 = ::Math_obj::atan2(tmp63,tmp68);		HX_STACK_VAR(tmp69,"tmp69");
									HX_STACK_LINE(386)
									_x1 = tmp69;
									HX_STACK_LINE(386)
									Float tmp70 = this->y;		HX_STACK_VAR(tmp70,"tmp70");
									HX_STACK_LINE(386)
									Float tmp71 = this->w;		HX_STACK_VAR(tmp71,"tmp71");
									HX_STACK_LINE(386)
									Float tmp72 = (tmp70 * tmp71);		HX_STACK_VAR(tmp72,"tmp72");
									HX_STACK_LINE(386)
									Float tmp73 = this->x;		HX_STACK_VAR(tmp73,"tmp73");
									HX_STACK_LINE(386)
									Float tmp74 = this->z;		HX_STACK_VAR(tmp74,"tmp74");
									HX_STACK_LINE(386)
									Float tmp75 = (tmp73 * tmp74);		HX_STACK_VAR(tmp75,"tmp75");
									HX_STACK_LINE(386)
									Float tmp76 = (tmp72 - tmp75);		HX_STACK_VAR(tmp76,"tmp76");
									HX_STACK_LINE(386)
									Float tmp77 = ((int)2 * tmp76);		HX_STACK_VAR(tmp77,"tmp77");
									HX_STACK_LINE(386)
									Float tmp78 = (sqw + sqx);		HX_STACK_VAR(tmp78,"tmp78");
									HX_STACK_LINE(386)
									Float tmp79 = sqy;		HX_STACK_VAR(tmp79,"tmp79");
									HX_STACK_LINE(386)
									Float tmp80 = (tmp78 - tmp79);		HX_STACK_VAR(tmp80,"tmp80");
									HX_STACK_LINE(386)
									Float tmp81 = sqz;		HX_STACK_VAR(tmp81,"tmp81");
									HX_STACK_LINE(386)
									Float tmp82 = (tmp80 - tmp81);		HX_STACK_VAR(tmp82,"tmp82");
									HX_STACK_LINE(386)
									Float tmp83 = ::Math_obj::atan2(tmp77,tmp82);		HX_STACK_VAR(tmp83,"tmp83");
									HX_STACK_LINE(386)
									_y1 = tmp83;
									HX_STACK_LINE(386)
									Float tmp84;		HX_STACK_VAR(tmp84,"tmp84");
									HX_STACK_LINE(386)
									{
										HX_STACK_LINE(386)
										Float tmp85 = this->x;		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(386)
										Float tmp86 = this->y;		HX_STACK_VAR(tmp86,"tmp86");
										HX_STACK_LINE(386)
										Float tmp87 = (tmp85 * tmp86);		HX_STACK_VAR(tmp87,"tmp87");
										HX_STACK_LINE(386)
										Float tmp88 = this->z;		HX_STACK_VAR(tmp88,"tmp88");
										HX_STACK_LINE(386)
										Float tmp89 = this->w;		HX_STACK_VAR(tmp89,"tmp89");
										HX_STACK_LINE(386)
										Float tmp90 = (tmp88 * tmp89);		HX_STACK_VAR(tmp90,"tmp90");
										HX_STACK_LINE(386)
										Float tmp91 = (tmp87 + tmp90);		HX_STACK_VAR(tmp91,"tmp91");
										HX_STACK_LINE(386)
										Float tmp92 = ((int)2 * tmp91);		HX_STACK_VAR(tmp92,"tmp92");
										HX_STACK_LINE(386)
										Float value = tmp92;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(386)
										bool tmp93 = (value < (int)-1);		HX_STACK_VAR(tmp93,"tmp93");
										HX_STACK_LINE(386)
										if ((tmp93)){
											HX_STACK_LINE(386)
											tmp84 = (int)-1;
										}
										else{
											HX_STACK_LINE(386)
											bool tmp94 = (value > (int)1);		HX_STACK_VAR(tmp94,"tmp94");
											HX_STACK_LINE(386)
											if ((tmp94)){
												HX_STACK_LINE(386)
												tmp84 = (int)1;
											}
											else{
												HX_STACK_LINE(386)
												tmp84 = value;
											}
										}
									}
									HX_STACK_LINE(386)
									Float tmp85 = ::Math_obj::asin(tmp84);		HX_STACK_VAR(tmp85,"tmp85");
									HX_STACK_LINE(386)
									_z1 = tmp85;
								}
								else{
									HX_STACK_LINE(386)
									bool tmp56 = (order == (int)5);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(386)
									if ((tmp56)){
										HX_STACK_LINE(386)
										Float tmp57 = this->x;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(386)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(386)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(386)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(386)
										Float tmp61 = this->z;		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(386)
										Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(386)
										Float tmp63 = (tmp59 + tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(386)
										Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(386)
										Float tmp65 = (sqw - sqx);		HX_STACK_VAR(tmp65,"tmp65");
										HX_STACK_LINE(386)
										Float tmp66 = sqy;		HX_STACK_VAR(tmp66,"tmp66");
										HX_STACK_LINE(386)
										Float tmp67 = (tmp65 + tmp66);		HX_STACK_VAR(tmp67,"tmp67");
										HX_STACK_LINE(386)
										Float tmp68 = sqz;		HX_STACK_VAR(tmp68,"tmp68");
										HX_STACK_LINE(386)
										Float tmp69 = (tmp67 - tmp68);		HX_STACK_VAR(tmp69,"tmp69");
										HX_STACK_LINE(386)
										Float tmp70 = ::Math_obj::atan2(tmp64,tmp69);		HX_STACK_VAR(tmp70,"tmp70");
										HX_STACK_LINE(386)
										_x1 = tmp70;
										HX_STACK_LINE(386)
										Float tmp71 = this->x;		HX_STACK_VAR(tmp71,"tmp71");
										HX_STACK_LINE(386)
										Float tmp72 = this->z;		HX_STACK_VAR(tmp72,"tmp72");
										HX_STACK_LINE(386)
										Float tmp73 = (tmp71 * tmp72);		HX_STACK_VAR(tmp73,"tmp73");
										HX_STACK_LINE(386)
										Float tmp74 = this->y;		HX_STACK_VAR(tmp74,"tmp74");
										HX_STACK_LINE(386)
										Float tmp75 = this->w;		HX_STACK_VAR(tmp75,"tmp75");
										HX_STACK_LINE(386)
										Float tmp76 = (tmp74 * tmp75);		HX_STACK_VAR(tmp76,"tmp76");
										HX_STACK_LINE(386)
										Float tmp77 = (tmp73 + tmp76);		HX_STACK_VAR(tmp77,"tmp77");
										HX_STACK_LINE(386)
										Float tmp78 = ((int)2 * tmp77);		HX_STACK_VAR(tmp78,"tmp78");
										HX_STACK_LINE(386)
										Float tmp79 = (sqw + sqx);		HX_STACK_VAR(tmp79,"tmp79");
										HX_STACK_LINE(386)
										Float tmp80 = sqy;		HX_STACK_VAR(tmp80,"tmp80");
										HX_STACK_LINE(386)
										Float tmp81 = (tmp79 - tmp80);		HX_STACK_VAR(tmp81,"tmp81");
										HX_STACK_LINE(386)
										Float tmp82 = sqz;		HX_STACK_VAR(tmp82,"tmp82");
										HX_STACK_LINE(386)
										Float tmp83 = (tmp81 - tmp82);		HX_STACK_VAR(tmp83,"tmp83");
										HX_STACK_LINE(386)
										Float tmp84 = ::Math_obj::atan2(tmp78,tmp83);		HX_STACK_VAR(tmp84,"tmp84");
										HX_STACK_LINE(386)
										_y1 = tmp84;
										HX_STACK_LINE(386)
										Float tmp85;		HX_STACK_VAR(tmp85,"tmp85");
										HX_STACK_LINE(386)
										{
											HX_STACK_LINE(386)
											Float tmp86 = this->z;		HX_STACK_VAR(tmp86,"tmp86");
											HX_STACK_LINE(386)
											Float tmp87 = this->w;		HX_STACK_VAR(tmp87,"tmp87");
											HX_STACK_LINE(386)
											Float tmp88 = (tmp86 * tmp87);		HX_STACK_VAR(tmp88,"tmp88");
											HX_STACK_LINE(386)
											Float tmp89 = this->x;		HX_STACK_VAR(tmp89,"tmp89");
											HX_STACK_LINE(386)
											Float tmp90 = this->y;		HX_STACK_VAR(tmp90,"tmp90");
											HX_STACK_LINE(386)
											Float tmp91 = (tmp89 * tmp90);		HX_STACK_VAR(tmp91,"tmp91");
											HX_STACK_LINE(386)
											Float tmp92 = (tmp88 - tmp91);		HX_STACK_VAR(tmp92,"tmp92");
											HX_STACK_LINE(386)
											Float tmp93 = ((int)2 * tmp92);		HX_STACK_VAR(tmp93,"tmp93");
											HX_STACK_LINE(386)
											Float value = tmp93;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(386)
											bool tmp94 = (value < (int)-1);		HX_STACK_VAR(tmp94,"tmp94");
											HX_STACK_LINE(386)
											if ((tmp94)){
												HX_STACK_LINE(386)
												tmp85 = (int)-1;
											}
											else{
												HX_STACK_LINE(386)
												bool tmp95 = (value > (int)1);		HX_STACK_VAR(tmp95,"tmp95");
												HX_STACK_LINE(386)
												if ((tmp95)){
													HX_STACK_LINE(386)
													tmp85 = (int)1;
												}
												else{
													HX_STACK_LINE(386)
													tmp85 = value;
												}
											}
										}
										HX_STACK_LINE(386)
										Float tmp86 = ::Math_obj::asin(tmp85);		HX_STACK_VAR(tmp86,"tmp86");
										HX_STACK_LINE(386)
										_z1 = tmp86;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(386)
				{
					HX_STACK_LINE(386)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(386)
					_this->ignore_listeners = true;
					HX_STACK_LINE(386)
					{
						HX_STACK_LINE(386)
						_this->x = _x1;
						HX_STACK_LINE(386)
						bool tmp52 = _this->_construct;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(386)
						if ((tmp52)){
							HX_STACK_LINE(386)
							_this->x;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp53 = (_this->listen_x != null());		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(386)
							bool tmp54;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(386)
							if ((tmp53)){
								HX_STACK_LINE(386)
								bool tmp55 = _this->ignore_listeners;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(386)
								tmp54 = !(tmp56);
							}
							else{
								HX_STACK_LINE(386)
								tmp54 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp54)){
								HX_STACK_LINE(386)
								Float tmp55 = _x1;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								_this->listen_x(tmp55);
							}
							HX_STACK_LINE(386)
							_this->x;
						}
					}
					HX_STACK_LINE(386)
					{
						HX_STACK_LINE(386)
						_this->y = _y1;
						HX_STACK_LINE(386)
						bool tmp52 = _this->_construct;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(386)
						if ((tmp52)){
							HX_STACK_LINE(386)
							_this->y;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp53 = (_this->listen_y != null());		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(386)
							bool tmp54;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(386)
							if ((tmp53)){
								HX_STACK_LINE(386)
								bool tmp55 = _this->ignore_listeners;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(386)
								tmp54 = !(tmp56);
							}
							else{
								HX_STACK_LINE(386)
								tmp54 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp54)){
								HX_STACK_LINE(386)
								Float tmp55 = _y1;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								_this->listen_y(tmp55);
							}
							HX_STACK_LINE(386)
							_this->y;
						}
					}
					HX_STACK_LINE(386)
					{
						HX_STACK_LINE(386)
						_this->z = _z1;
						HX_STACK_LINE(386)
						bool tmp52 = _this->_construct;		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(386)
						if ((tmp52)){
							HX_STACK_LINE(386)
							_this->z;
						}
						else{
							HX_STACK_LINE(386)
							bool tmp53 = (_this->listen_z != null());		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(386)
							bool tmp54;		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(386)
							if ((tmp53)){
								HX_STACK_LINE(386)
								bool tmp55 = _this->ignore_listeners;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								bool tmp56 = tmp55;		HX_STACK_VAR(tmp56,"tmp56");
								HX_STACK_LINE(386)
								tmp54 = !(tmp56);
							}
							else{
								HX_STACK_LINE(386)
								tmp54 = false;
							}
							HX_STACK_LINE(386)
							if ((tmp54)){
								HX_STACK_LINE(386)
								Float tmp55 = _z1;		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(386)
								_this->listen_z(tmp55);
							}
							HX_STACK_LINE(386)
							_this->z;
						}
					}
					HX_STACK_LINE(386)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(386)
					bool tmp52 = (_this->listen_x != null());		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(386)
					bool tmp53;		HX_STACK_VAR(tmp53,"tmp53");
					HX_STACK_LINE(386)
					if ((tmp52)){
						HX_STACK_LINE(386)
						bool tmp54 = _this->ignore_listeners;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(386)
						bool tmp55 = tmp54;		HX_STACK_VAR(tmp55,"tmp55");
						HX_STACK_LINE(386)
						tmp53 = !(tmp55);
					}
					else{
						HX_STACK_LINE(386)
						tmp53 = false;
					}
					HX_STACK_LINE(386)
					if ((tmp53)){
						HX_STACK_LINE(386)
						Float tmp54 = _this->x;		HX_STACK_VAR(tmp54,"tmp54");
						HX_STACK_LINE(386)
						_this->listen_x(tmp54);
					}
					HX_STACK_LINE(386)
					bool tmp54 = (_this->listen_y != null());		HX_STACK_VAR(tmp54,"tmp54");
					HX_STACK_LINE(386)
					bool tmp55;		HX_STACK_VAR(tmp55,"tmp55");
					HX_STACK_LINE(386)
					if ((tmp54)){
						HX_STACK_LINE(386)
						bool tmp56 = _this->ignore_listeners;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(386)
						bool tmp57 = tmp56;		HX_STACK_VAR(tmp57,"tmp57");
						HX_STACK_LINE(386)
						tmp55 = !(tmp57);
					}
					else{
						HX_STACK_LINE(386)
						tmp55 = false;
					}
					HX_STACK_LINE(386)
					if ((tmp55)){
						HX_STACK_LINE(386)
						Float tmp56 = _this->y;		HX_STACK_VAR(tmp56,"tmp56");
						HX_STACK_LINE(386)
						_this->listen_y(tmp56);
					}
					HX_STACK_LINE(386)
					bool tmp56 = (_this->listen_z != null());		HX_STACK_VAR(tmp56,"tmp56");
					HX_STACK_LINE(386)
					bool tmp57;		HX_STACK_VAR(tmp57,"tmp57");
					HX_STACK_LINE(386)
					if ((tmp56)){
						HX_STACK_LINE(386)
						bool tmp58 = _this->ignore_listeners;		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(386)
						bool tmp59 = tmp58;		HX_STACK_VAR(tmp59,"tmp59");
						HX_STACK_LINE(386)
						tmp57 = !(tmp59);
					}
					else{
						HX_STACK_LINE(386)
						tmp57 = false;
					}
					HX_STACK_LINE(386)
					if ((tmp57)){
						HX_STACK_LINE(386)
						Float tmp58 = _this->z;		HX_STACK_VAR(tmp58,"tmp58");
						HX_STACK_LINE(386)
						_this->listen_z(tmp58);
					}
					HX_STACK_LINE(386)
					_this;
				}
				HX_STACK_LINE(386)
				_this;
			}
		}
		HX_STACK_LINE(386)
		Dynamic tmp31 = this->listen_x_dyn();		HX_STACK_VAR(tmp31,"tmp31");
		HX_STACK_LINE(386)
		bool tmp32 = (tmp31 != null());		HX_STACK_VAR(tmp32,"tmp32");
		HX_STACK_LINE(386)
		bool tmp33;		HX_STACK_VAR(tmp33,"tmp33");
		HX_STACK_LINE(386)
		if ((tmp32)){
			HX_STACK_LINE(386)
			bool tmp34 = this->ignore_listeners;		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(386)
			bool tmp35 = tmp34;		HX_STACK_VAR(tmp35,"tmp35");
			HX_STACK_LINE(386)
			bool tmp36 = tmp35;		HX_STACK_VAR(tmp36,"tmp36");
			HX_STACK_LINE(386)
			tmp33 = !(tmp36);
		}
		else{
			HX_STACK_LINE(386)
			tmp33 = false;
		}
		HX_STACK_LINE(386)
		if ((tmp33)){
			HX_STACK_LINE(386)
			Float tmp34 = this->x;		HX_STACK_VAR(tmp34,"tmp34");
			HX_STACK_LINE(386)
			this->listen_x(tmp34);
		}
		HX_STACK_LINE(386)
		Dynamic tmp34 = this->listen_y_dyn();		HX_STACK_VAR(tmp34,"tmp34");
		HX_STACK_LINE(386)
		bool tmp35 = (tmp34 != null());		HX_STACK_VAR(tmp35,"tmp35");
		HX_STACK_LINE(386)
		bool tmp36;		HX_STACK_VAR(tmp36,"tmp36");
		HX_STACK_LINE(386)
		if ((tmp35)){
			HX_STACK_LINE(386)
			bool tmp37 = this->ignore_listeners;		HX_STACK_VAR(tmp37,"tmp37");
			HX_STACK_LINE(386)
			bool tmp38 = tmp37;		HX_STACK_VAR(tmp38,"tmp38");
			HX_STACK_LINE(386)
			bool tmp39 = tmp38;		HX_STACK_VAR(tmp39,"tmp39");
			HX_STACK_LINE(386)
			tmp36 = !(tmp39);
		}
		else{
			HX_STACK_LINE(386)
			tmp36 = false;
		}
		HX_STACK_LINE(386)
		if ((tmp36)){
			HX_STACK_LINE(386)
			Float tmp37 = this->y;		HX_STACK_VAR(tmp37,"tmp37");
			HX_STACK_LINE(386)
			this->listen_y(tmp37);
		}
		HX_STACK_LINE(386)
		Dynamic tmp37 = this->listen_z_dyn();		HX_STACK_VAR(tmp37,"tmp37");
		HX_STACK_LINE(386)
		bool tmp38 = (tmp37 != null());		HX_STACK_VAR(tmp38,"tmp38");
		HX_STACK_LINE(386)
		bool tmp39;		HX_STACK_VAR(tmp39,"tmp39");
		HX_STACK_LINE(386)
		if ((tmp38)){
			HX_STACK_LINE(386)
			bool tmp40 = this->ignore_listeners;		HX_STACK_VAR(tmp40,"tmp40");
			HX_STACK_LINE(386)
			bool tmp41 = tmp40;		HX_STACK_VAR(tmp41,"tmp41");
			HX_STACK_LINE(386)
			bool tmp42 = tmp41;		HX_STACK_VAR(tmp42,"tmp42");
			HX_STACK_LINE(386)
			tmp39 = !(tmp42);
		}
		else{
			HX_STACK_LINE(386)
			tmp39 = false;
		}
		HX_STACK_LINE(386)
		if ((tmp39)){
			HX_STACK_LINE(386)
			Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
			HX_STACK_LINE(386)
			this->listen_z(tmp40);
		}
		HX_STACK_LINE(386)
		Dynamic tmp40 = this->listen_w_dyn();		HX_STACK_VAR(tmp40,"tmp40");
		HX_STACK_LINE(386)
		bool tmp41 = (tmp40 != null());		HX_STACK_VAR(tmp41,"tmp41");
		HX_STACK_LINE(386)
		bool tmp42;		HX_STACK_VAR(tmp42,"tmp42");
		HX_STACK_LINE(386)
		if ((tmp41)){
			HX_STACK_LINE(386)
			bool tmp43 = this->ignore_listeners;		HX_STACK_VAR(tmp43,"tmp43");
			HX_STACK_LINE(386)
			bool tmp44 = tmp43;		HX_STACK_VAR(tmp44,"tmp44");
			HX_STACK_LINE(386)
			bool tmp45 = tmp44;		HX_STACK_VAR(tmp45,"tmp45");
			HX_STACK_LINE(386)
			tmp42 = !(tmp45);
		}
		else{
			HX_STACK_LINE(386)
			tmp42 = false;
		}
		HX_STACK_LINE(386)
		if ((tmp42)){
			HX_STACK_LINE(386)
			Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
			HX_STACK_LINE(386)
			this->listen_w(tmp43);
		}
	}
	HX_STACK_LINE(391)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,slerp,return )

bool Quaternion_obj::equals( ::phoenix::Quaternion _q){
	HX_STACK_FRAME("phoenix.Quaternion","equals",0xe75032d0,"phoenix.Quaternion.equals","phoenix/Quaternion.hx",396,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_q,"_q")
	HX_STACK_LINE(398)
	Float tmp = _q->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(398)
	Float tmp1 = this->x;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(398)
	bool tmp2 = (tmp == tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(398)
	bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(398)
	bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(398)
	if ((tmp3)){
		HX_STACK_LINE(398)
		Float tmp5 = _q->y;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(398)
		Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(398)
		Float tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(398)
		Float tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(398)
		tmp4 = (tmp5 == tmp8);
	}
	else{
		HX_STACK_LINE(398)
		tmp4 = false;
	}
	HX_STACK_LINE(398)
	bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
	HX_STACK_LINE(398)
	bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
	HX_STACK_LINE(398)
	if ((tmp5)){
		HX_STACK_LINE(398)
		Float tmp7 = _q->z;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(398)
		Float tmp8 = this->z;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(398)
		Float tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(398)
		Float tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(398)
		tmp6 = (tmp7 == tmp10);
	}
	else{
		HX_STACK_LINE(398)
		tmp6 = false;
	}
	HX_STACK_LINE(398)
	bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
	HX_STACK_LINE(398)
	if ((tmp6)){
		HX_STACK_LINE(398)
		Float tmp8 = _q->w;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(398)
		Float tmp9 = this->w;		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(398)
		Float tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(398)
		tmp7 = (tmp8 == tmp10);
	}
	else{
		HX_STACK_LINE(398)
		tmp7 = false;
	}
	HX_STACK_LINE(398)
	return tmp7;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,equals,return )

::phoenix::Quaternion Quaternion_obj::fromArray( Array< Float > _a){
	HX_STACK_FRAME("phoenix.Quaternion","fromArray",0x3d3583de,"phoenix.Quaternion.fromArray","phoenix/Quaternion.hx",403,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_a,"_a")
	HX_STACK_LINE(405)
	{
		HX_STACK_LINE(405)
		this->ignore_euler = true;
		HX_STACK_LINE(405)
		{
			HX_STACK_LINE(405)
			Float tmp = _a->__get((int)0);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(405)
			this->x = tmp;
			HX_STACK_LINE(405)
			bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(405)
			if ((tmp1)){
				HX_STACK_LINE(405)
				this->x;
			}
			else{
				HX_STACK_LINE(405)
				{
					HX_STACK_LINE(405)
					::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(405)
					bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(405)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(405)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					if ((tmp5)){
						HX_STACK_LINE(405)
						tmp6 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(405)
						tmp6 = true;
					}
					HX_STACK_LINE(405)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(405)
					if ((tmp7)){
						HX_STACK_LINE(405)
						tmp8 = this->_construct;
					}
					else{
						HX_STACK_LINE(405)
						tmp8 = true;
					}
					HX_STACK_LINE(405)
					if ((tmp8)){
						HX_STACK_LINE(405)
						Dynamic();
					}
					else{
						HX_STACK_LINE(405)
						::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(405)
						::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(405)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(405)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(405)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(405)
						Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(405)
						Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(405)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(405)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(405)
						Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(405)
						Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(405)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(405)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(405)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(405)
						Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(405)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(405)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(405)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(405)
						Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(405)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(405)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(405)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(405)
						bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(405)
						if ((tmp22)){
							HX_STACK_LINE(405)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(405)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(405)
							Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(405)
							Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(405)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(405)
							Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(405)
							Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(405)
							Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(405)
							_x = tmp36;
							HX_STACK_LINE(405)
							Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float value = tmp45;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(405)
								bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								if ((tmp46)){
									HX_STACK_LINE(405)
									tmp37 = (int)-1;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									if ((tmp47)){
										HX_STACK_LINE(405)
										tmp37 = (int)1;
									}
									else{
										HX_STACK_LINE(405)
										tmp37 = value;
									}
								}
							}
							HX_STACK_LINE(405)
							Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(405)
							_y = tmp38;
							HX_STACK_LINE(405)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(405)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(405)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(405)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(405)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(405)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(405)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(405)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(405)
							Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(405)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(405)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(405)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(405)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(405)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(405)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								{
									HX_STACK_LINE(405)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(405)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									if ((tmp33)){
										HX_STACK_LINE(405)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(405)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(405)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_x = tmp25;
								HX_STACK_LINE(405)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(405)
								Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(405)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(405)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(405)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(405)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(405)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(405)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								_y = tmp39;
								HX_STACK_LINE(405)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(405)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(405)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(405)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(405)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(405)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(405)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(405)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(405)
								bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								if ((tmp24)){
									HX_STACK_LINE(405)
									Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									{
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float value = tmp33;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(405)
										bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp25 = (int)-1;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											if ((tmp35)){
												HX_STACK_LINE(405)
												tmp25 = (int)1;
											}
											else{
												HX_STACK_LINE(405)
												tmp25 = value;
											}
										}
									}
									HX_STACK_LINE(405)
									Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									_x = tmp26;
									HX_STACK_LINE(405)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(405)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(405)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(405)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(405)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(405)
									Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(405)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(405)
									_y = tmp40;
									HX_STACK_LINE(405)
									Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(405)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(405)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(405)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(405)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(405)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(405)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(405)
									Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(405)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(405)
									Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(405)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(405)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(405)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(405)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(405)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(405)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(405)
										Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(405)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(405)
										_x = tmp39;
										HX_STACK_LINE(405)
										Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(405)
										{
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float value = tmp48;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(405)
											bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											if ((tmp49)){
												HX_STACK_LINE(405)
												tmp40 = (int)-1;
											}
											else{
												HX_STACK_LINE(405)
												bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												if ((tmp50)){
													HX_STACK_LINE(405)
													tmp40 = (int)1;
												}
												else{
													HX_STACK_LINE(405)
													tmp40 = value;
												}
											}
										}
										HX_STACK_LINE(405)
										Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(405)
										_y = tmp41;
										HX_STACK_LINE(405)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(405)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(405)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(405)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(405)
										Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(405)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(405)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(405)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(405)
										Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(405)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(405)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(405)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(405)
										Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(405)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(405)
										_z = tmp55;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										if ((tmp26)){
											HX_STACK_LINE(405)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(405)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(405)
											Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(405)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(405)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(405)
											Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(405)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(405)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(405)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(405)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(405)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(405)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(405)
											_x = tmp40;
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(405)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(405)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(405)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(405)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(405)
											_y = tmp54;
											HX_STACK_LINE(405)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(405)
											{
												HX_STACK_LINE(405)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(405)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(405)
												Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(405)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(405)
												Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(405)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(405)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(405)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(405)
												if ((tmp64)){
													HX_STACK_LINE(405)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(405)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(405)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(405)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(405)
											_z = tmp56;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											if ((tmp27)){
												HX_STACK_LINE(405)
												Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(405)
												Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(405)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(405)
												Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(405)
												Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(405)
												Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(405)
												Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(405)
												Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(405)
												Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(405)
												Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(405)
												Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(405)
												Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(405)
												Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(405)
												Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(405)
												_x = tmp41;
												HX_STACK_LINE(405)
												Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(405)
												Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(405)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(405)
												Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(405)
												Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(405)
												Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(405)
												Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(405)
												Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(405)
												Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(405)
												Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(405)
												Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(405)
												Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(405)
												Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(405)
												_y = tmp55;
												HX_STACK_LINE(405)
												Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												{
													HX_STACK_LINE(405)
													Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(405)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(405)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(405)
													Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(405)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(405)
													Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(405)
													Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(405)
													Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(405)
													Float value = tmp64;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(405)
													bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp56 = (int)-1;
													}
													else{
														HX_STACK_LINE(405)
														bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(405)
														if ((tmp66)){
															HX_STACK_LINE(405)
															tmp56 = (int)1;
														}
														else{
															HX_STACK_LINE(405)
															tmp56 = value;
														}
													}
												}
												HX_STACK_LINE(405)
												Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												_z = tmp57;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(405)
						{
							HX_STACK_LINE(405)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(405)
							_this->ignore_listeners = true;
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->x = _x;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->x;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_x(tmp26);
									}
									HX_STACK_LINE(405)
									_this->x;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->y = _y;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->y;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_y(tmp26);
									}
									HX_STACK_LINE(405)
									_this->y;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->z = _z;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->z;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_z(tmp26);
									}
									HX_STACK_LINE(405)
									_this->z;
								}
							}
							HX_STACK_LINE(405)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(405)
							bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								tmp24 = !(tmp26);
							}
							else{
								HX_STACK_LINE(405)
								tmp24 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp24)){
								HX_STACK_LINE(405)
								Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_this->listen_x(tmp25);
							}
							HX_STACK_LINE(405)
							bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							if ((tmp25)){
								HX_STACK_LINE(405)
								bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								tmp26 = !(tmp28);
							}
							else{
								HX_STACK_LINE(405)
								tmp26 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp26)){
								HX_STACK_LINE(405)
								Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								_this->listen_y(tmp27);
							}
							HX_STACK_LINE(405)
							bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							if ((tmp27)){
								HX_STACK_LINE(405)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(405)
								tmp28 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp28)){
								HX_STACK_LINE(405)
								Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								_this->listen_z(tmp29);
							}
							HX_STACK_LINE(405)
							_this;
						}
						HX_STACK_LINE(405)
						_this;
					}
				}
				HX_STACK_LINE(405)
				Dynamic tmp2 = this->listen_x_dyn();		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(405)
				bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(405)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(405)
				if ((tmp3)){
					HX_STACK_LINE(405)
					bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					tmp4 = !(tmp7);
				}
				else{
					HX_STACK_LINE(405)
					tmp4 = false;
				}
				HX_STACK_LINE(405)
				if ((tmp4)){
					HX_STACK_LINE(405)
					Float tmp5 = this->x;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					this->listen_x(tmp5);
				}
				HX_STACK_LINE(405)
				this->x;
			}
		}
		HX_STACK_LINE(405)
		{
			HX_STACK_LINE(405)
			Float tmp = _a->__get((int)1);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(405)
			this->y = tmp;
			HX_STACK_LINE(405)
			bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(405)
			if ((tmp1)){
				HX_STACK_LINE(405)
				this->y;
			}
			else{
				HX_STACK_LINE(405)
				{
					HX_STACK_LINE(405)
					::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(405)
					bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(405)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(405)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					if ((tmp5)){
						HX_STACK_LINE(405)
						tmp6 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(405)
						tmp6 = true;
					}
					HX_STACK_LINE(405)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(405)
					if ((tmp7)){
						HX_STACK_LINE(405)
						tmp8 = this->_construct;
					}
					else{
						HX_STACK_LINE(405)
						tmp8 = true;
					}
					HX_STACK_LINE(405)
					if ((tmp8)){
						HX_STACK_LINE(405)
						Dynamic();
					}
					else{
						HX_STACK_LINE(405)
						::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(405)
						::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(405)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(405)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(405)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(405)
						Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(405)
						Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(405)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(405)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(405)
						Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(405)
						Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(405)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(405)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(405)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(405)
						Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(405)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(405)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(405)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(405)
						Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(405)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(405)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(405)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(405)
						bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(405)
						if ((tmp22)){
							HX_STACK_LINE(405)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(405)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(405)
							Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(405)
							Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(405)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(405)
							Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(405)
							Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(405)
							Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(405)
							_x = tmp36;
							HX_STACK_LINE(405)
							Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float value = tmp45;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(405)
								bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								if ((tmp46)){
									HX_STACK_LINE(405)
									tmp37 = (int)-1;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									if ((tmp47)){
										HX_STACK_LINE(405)
										tmp37 = (int)1;
									}
									else{
										HX_STACK_LINE(405)
										tmp37 = value;
									}
								}
							}
							HX_STACK_LINE(405)
							Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(405)
							_y = tmp38;
							HX_STACK_LINE(405)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(405)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(405)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(405)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(405)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(405)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(405)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(405)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(405)
							Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(405)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(405)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(405)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(405)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(405)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(405)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								{
									HX_STACK_LINE(405)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(405)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									if ((tmp33)){
										HX_STACK_LINE(405)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(405)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(405)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_x = tmp25;
								HX_STACK_LINE(405)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(405)
								Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(405)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(405)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(405)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(405)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(405)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(405)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								_y = tmp39;
								HX_STACK_LINE(405)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(405)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(405)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(405)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(405)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(405)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(405)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(405)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(405)
								bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								if ((tmp24)){
									HX_STACK_LINE(405)
									Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									{
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float value = tmp33;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(405)
										bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp25 = (int)-1;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											if ((tmp35)){
												HX_STACK_LINE(405)
												tmp25 = (int)1;
											}
											else{
												HX_STACK_LINE(405)
												tmp25 = value;
											}
										}
									}
									HX_STACK_LINE(405)
									Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									_x = tmp26;
									HX_STACK_LINE(405)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(405)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(405)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(405)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(405)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(405)
									Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(405)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(405)
									_y = tmp40;
									HX_STACK_LINE(405)
									Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(405)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(405)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(405)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(405)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(405)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(405)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(405)
									Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(405)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(405)
									Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(405)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(405)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(405)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(405)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(405)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(405)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(405)
										Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(405)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(405)
										_x = tmp39;
										HX_STACK_LINE(405)
										Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(405)
										{
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float value = tmp48;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(405)
											bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											if ((tmp49)){
												HX_STACK_LINE(405)
												tmp40 = (int)-1;
											}
											else{
												HX_STACK_LINE(405)
												bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												if ((tmp50)){
													HX_STACK_LINE(405)
													tmp40 = (int)1;
												}
												else{
													HX_STACK_LINE(405)
													tmp40 = value;
												}
											}
										}
										HX_STACK_LINE(405)
										Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(405)
										_y = tmp41;
										HX_STACK_LINE(405)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(405)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(405)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(405)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(405)
										Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(405)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(405)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(405)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(405)
										Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(405)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(405)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(405)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(405)
										Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(405)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(405)
										_z = tmp55;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										if ((tmp26)){
											HX_STACK_LINE(405)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(405)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(405)
											Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(405)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(405)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(405)
											Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(405)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(405)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(405)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(405)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(405)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(405)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(405)
											_x = tmp40;
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(405)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(405)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(405)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(405)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(405)
											_y = tmp54;
											HX_STACK_LINE(405)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(405)
											{
												HX_STACK_LINE(405)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(405)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(405)
												Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(405)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(405)
												Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(405)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(405)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(405)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(405)
												if ((tmp64)){
													HX_STACK_LINE(405)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(405)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(405)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(405)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(405)
											_z = tmp56;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											if ((tmp27)){
												HX_STACK_LINE(405)
												Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(405)
												Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(405)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(405)
												Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(405)
												Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(405)
												Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(405)
												Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(405)
												Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(405)
												Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(405)
												Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(405)
												Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(405)
												Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(405)
												Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(405)
												Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(405)
												_x = tmp41;
												HX_STACK_LINE(405)
												Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(405)
												Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(405)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(405)
												Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(405)
												Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(405)
												Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(405)
												Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(405)
												Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(405)
												Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(405)
												Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(405)
												Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(405)
												Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(405)
												Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(405)
												_y = tmp55;
												HX_STACK_LINE(405)
												Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												{
													HX_STACK_LINE(405)
													Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(405)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(405)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(405)
													Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(405)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(405)
													Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(405)
													Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(405)
													Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(405)
													Float value = tmp64;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(405)
													bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp56 = (int)-1;
													}
													else{
														HX_STACK_LINE(405)
														bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(405)
														if ((tmp66)){
															HX_STACK_LINE(405)
															tmp56 = (int)1;
														}
														else{
															HX_STACK_LINE(405)
															tmp56 = value;
														}
													}
												}
												HX_STACK_LINE(405)
												Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												_z = tmp57;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(405)
						{
							HX_STACK_LINE(405)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(405)
							_this->ignore_listeners = true;
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->x = _x;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->x;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_x(tmp26);
									}
									HX_STACK_LINE(405)
									_this->x;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->y = _y;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->y;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_y(tmp26);
									}
									HX_STACK_LINE(405)
									_this->y;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->z = _z;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->z;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_z(tmp26);
									}
									HX_STACK_LINE(405)
									_this->z;
								}
							}
							HX_STACK_LINE(405)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(405)
							bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								tmp24 = !(tmp26);
							}
							else{
								HX_STACK_LINE(405)
								tmp24 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp24)){
								HX_STACK_LINE(405)
								Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_this->listen_x(tmp25);
							}
							HX_STACK_LINE(405)
							bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							if ((tmp25)){
								HX_STACK_LINE(405)
								bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								tmp26 = !(tmp28);
							}
							else{
								HX_STACK_LINE(405)
								tmp26 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp26)){
								HX_STACK_LINE(405)
								Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								_this->listen_y(tmp27);
							}
							HX_STACK_LINE(405)
							bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							if ((tmp27)){
								HX_STACK_LINE(405)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(405)
								tmp28 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp28)){
								HX_STACK_LINE(405)
								Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								_this->listen_z(tmp29);
							}
							HX_STACK_LINE(405)
							_this;
						}
						HX_STACK_LINE(405)
						_this;
					}
				}
				HX_STACK_LINE(405)
				Dynamic tmp2 = this->listen_y_dyn();		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(405)
				bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(405)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(405)
				if ((tmp3)){
					HX_STACK_LINE(405)
					bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					tmp4 = !(tmp7);
				}
				else{
					HX_STACK_LINE(405)
					tmp4 = false;
				}
				HX_STACK_LINE(405)
				if ((tmp4)){
					HX_STACK_LINE(405)
					Float tmp5 = this->y;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					this->listen_y(tmp5);
				}
				HX_STACK_LINE(405)
				this->y;
			}
		}
		HX_STACK_LINE(405)
		{
			HX_STACK_LINE(405)
			Float tmp = _a->__get((int)2);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(405)
			this->z = tmp;
			HX_STACK_LINE(405)
			bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(405)
			if ((tmp1)){
				HX_STACK_LINE(405)
				this->z;
			}
			else{
				HX_STACK_LINE(405)
				{
					HX_STACK_LINE(405)
					::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(405)
					bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(405)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(405)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					if ((tmp5)){
						HX_STACK_LINE(405)
						tmp6 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(405)
						tmp6 = true;
					}
					HX_STACK_LINE(405)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(405)
					if ((tmp7)){
						HX_STACK_LINE(405)
						tmp8 = this->_construct;
					}
					else{
						HX_STACK_LINE(405)
						tmp8 = true;
					}
					HX_STACK_LINE(405)
					if ((tmp8)){
						HX_STACK_LINE(405)
						Dynamic();
					}
					else{
						HX_STACK_LINE(405)
						::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(405)
						::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(405)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(405)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(405)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(405)
						Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(405)
						Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(405)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(405)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(405)
						Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(405)
						Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(405)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(405)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(405)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(405)
						Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(405)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(405)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(405)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(405)
						Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(405)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(405)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(405)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(405)
						bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(405)
						if ((tmp22)){
							HX_STACK_LINE(405)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(405)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(405)
							Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(405)
							Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(405)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(405)
							Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(405)
							Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(405)
							Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(405)
							_x = tmp36;
							HX_STACK_LINE(405)
							Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float value = tmp45;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(405)
								bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								if ((tmp46)){
									HX_STACK_LINE(405)
									tmp37 = (int)-1;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									if ((tmp47)){
										HX_STACK_LINE(405)
										tmp37 = (int)1;
									}
									else{
										HX_STACK_LINE(405)
										tmp37 = value;
									}
								}
							}
							HX_STACK_LINE(405)
							Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(405)
							_y = tmp38;
							HX_STACK_LINE(405)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(405)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(405)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(405)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(405)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(405)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(405)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(405)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(405)
							Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(405)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(405)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(405)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(405)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(405)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(405)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								{
									HX_STACK_LINE(405)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(405)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									if ((tmp33)){
										HX_STACK_LINE(405)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(405)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(405)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_x = tmp25;
								HX_STACK_LINE(405)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(405)
								Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(405)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(405)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(405)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(405)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(405)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(405)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								_y = tmp39;
								HX_STACK_LINE(405)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(405)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(405)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(405)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(405)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(405)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(405)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(405)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(405)
								bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								if ((tmp24)){
									HX_STACK_LINE(405)
									Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									{
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float value = tmp33;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(405)
										bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp25 = (int)-1;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											if ((tmp35)){
												HX_STACK_LINE(405)
												tmp25 = (int)1;
											}
											else{
												HX_STACK_LINE(405)
												tmp25 = value;
											}
										}
									}
									HX_STACK_LINE(405)
									Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									_x = tmp26;
									HX_STACK_LINE(405)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(405)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(405)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(405)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(405)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(405)
									Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(405)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(405)
									_y = tmp40;
									HX_STACK_LINE(405)
									Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(405)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(405)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(405)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(405)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(405)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(405)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(405)
									Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(405)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(405)
									Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(405)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(405)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(405)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(405)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(405)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(405)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(405)
										Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(405)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(405)
										_x = tmp39;
										HX_STACK_LINE(405)
										Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(405)
										{
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float value = tmp48;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(405)
											bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											if ((tmp49)){
												HX_STACK_LINE(405)
												tmp40 = (int)-1;
											}
											else{
												HX_STACK_LINE(405)
												bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												if ((tmp50)){
													HX_STACK_LINE(405)
													tmp40 = (int)1;
												}
												else{
													HX_STACK_LINE(405)
													tmp40 = value;
												}
											}
										}
										HX_STACK_LINE(405)
										Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(405)
										_y = tmp41;
										HX_STACK_LINE(405)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(405)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(405)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(405)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(405)
										Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(405)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(405)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(405)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(405)
										Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(405)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(405)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(405)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(405)
										Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(405)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(405)
										_z = tmp55;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										if ((tmp26)){
											HX_STACK_LINE(405)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(405)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(405)
											Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(405)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(405)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(405)
											Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(405)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(405)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(405)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(405)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(405)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(405)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(405)
											_x = tmp40;
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(405)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(405)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(405)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(405)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(405)
											_y = tmp54;
											HX_STACK_LINE(405)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(405)
											{
												HX_STACK_LINE(405)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(405)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(405)
												Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(405)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(405)
												Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(405)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(405)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(405)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(405)
												if ((tmp64)){
													HX_STACK_LINE(405)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(405)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(405)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(405)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(405)
											_z = tmp56;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											if ((tmp27)){
												HX_STACK_LINE(405)
												Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(405)
												Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(405)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(405)
												Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(405)
												Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(405)
												Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(405)
												Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(405)
												Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(405)
												Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(405)
												Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(405)
												Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(405)
												Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(405)
												Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(405)
												Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(405)
												_x = tmp41;
												HX_STACK_LINE(405)
												Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(405)
												Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(405)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(405)
												Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(405)
												Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(405)
												Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(405)
												Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(405)
												Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(405)
												Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(405)
												Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(405)
												Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(405)
												Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(405)
												Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(405)
												_y = tmp55;
												HX_STACK_LINE(405)
												Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												{
													HX_STACK_LINE(405)
													Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(405)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(405)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(405)
													Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(405)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(405)
													Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(405)
													Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(405)
													Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(405)
													Float value = tmp64;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(405)
													bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp56 = (int)-1;
													}
													else{
														HX_STACK_LINE(405)
														bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(405)
														if ((tmp66)){
															HX_STACK_LINE(405)
															tmp56 = (int)1;
														}
														else{
															HX_STACK_LINE(405)
															tmp56 = value;
														}
													}
												}
												HX_STACK_LINE(405)
												Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												_z = tmp57;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(405)
						{
							HX_STACK_LINE(405)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(405)
							_this->ignore_listeners = true;
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->x = _x;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->x;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_x(tmp26);
									}
									HX_STACK_LINE(405)
									_this->x;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->y = _y;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->y;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_y(tmp26);
									}
									HX_STACK_LINE(405)
									_this->y;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->z = _z;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->z;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_z(tmp26);
									}
									HX_STACK_LINE(405)
									_this->z;
								}
							}
							HX_STACK_LINE(405)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(405)
							bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								tmp24 = !(tmp26);
							}
							else{
								HX_STACK_LINE(405)
								tmp24 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp24)){
								HX_STACK_LINE(405)
								Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_this->listen_x(tmp25);
							}
							HX_STACK_LINE(405)
							bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							if ((tmp25)){
								HX_STACK_LINE(405)
								bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								tmp26 = !(tmp28);
							}
							else{
								HX_STACK_LINE(405)
								tmp26 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp26)){
								HX_STACK_LINE(405)
								Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								_this->listen_y(tmp27);
							}
							HX_STACK_LINE(405)
							bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							if ((tmp27)){
								HX_STACK_LINE(405)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(405)
								tmp28 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp28)){
								HX_STACK_LINE(405)
								Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								_this->listen_z(tmp29);
							}
							HX_STACK_LINE(405)
							_this;
						}
						HX_STACK_LINE(405)
						_this;
					}
				}
				HX_STACK_LINE(405)
				Dynamic tmp2 = this->listen_z_dyn();		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(405)
				bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(405)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(405)
				if ((tmp3)){
					HX_STACK_LINE(405)
					bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					tmp4 = !(tmp7);
				}
				else{
					HX_STACK_LINE(405)
					tmp4 = false;
				}
				HX_STACK_LINE(405)
				if ((tmp4)){
					HX_STACK_LINE(405)
					Float tmp5 = this->z;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					this->listen_z(tmp5);
				}
				HX_STACK_LINE(405)
				this->z;
			}
		}
		HX_STACK_LINE(405)
		{
			HX_STACK_LINE(405)
			Float tmp = _a->__get((int)3);		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(405)
			this->w = tmp;
			HX_STACK_LINE(405)
			bool tmp1 = this->_construct;		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(405)
			if ((tmp1)){
				HX_STACK_LINE(405)
				this->w;
			}
			else{
				HX_STACK_LINE(405)
				{
					HX_STACK_LINE(405)
					::phoenix::Vector tmp2 = this->euler;		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(405)
					bool tmp3 = (tmp2 == null());		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(405)
					bool tmp4 = !(tmp3);		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(405)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					if ((tmp5)){
						HX_STACK_LINE(405)
						tmp6 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(405)
						tmp6 = true;
					}
					HX_STACK_LINE(405)
					bool tmp7 = !(tmp6);		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
					HX_STACK_LINE(405)
					if ((tmp7)){
						HX_STACK_LINE(405)
						tmp8 = this->_construct;
					}
					else{
						HX_STACK_LINE(405)
						tmp8 = true;
					}
					HX_STACK_LINE(405)
					if ((tmp8)){
						HX_STACK_LINE(405)
						Dynamic();
					}
					else{
						HX_STACK_LINE(405)
						::phoenix::Vector tmp9 = this->euler;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(405)
						::phoenix::Vector _this = tmp9;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(405)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(405)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(405)
						Float tmp11 = this->x;		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(405)
						Float tmp12 = (tmp10 * tmp11);		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(405)
						Float sqx = tmp12;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(405)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(405)
						Float tmp14 = this->y;		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(405)
						Float tmp15 = (tmp13 * tmp14);		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(405)
						Float sqy = tmp15;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(405)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(405)
						Float tmp17 = this->z;		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(405)
						Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(405)
						Float sqz = tmp18;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(405)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(405)
						Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(405)
						Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(405)
						Float sqw = tmp21;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(405)
						Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
						HX_STACK_LINE(405)
						Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
						HX_STACK_LINE(405)
						Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
						HX_STACK_LINE(405)
						bool tmp22 = (order == (int)0);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(405)
						if ((tmp22)){
							HX_STACK_LINE(405)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(405)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(405)
							Float tmp31 = (sqw - sqx);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(405)
							Float tmp32 = sqy;		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(405)
							Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(405)
							Float tmp34 = sqz;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(405)
							Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(405)
							Float tmp36 = ::Math_obj::atan2(tmp30,tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(405)
							_x = tmp36;
							HX_STACK_LINE(405)
							Float tmp37;		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float value = tmp45;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(405)
								bool tmp46 = (value < (int)-1);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								if ((tmp46)){
									HX_STACK_LINE(405)
									tmp37 = (int)-1;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp47 = (value > (int)1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									if ((tmp47)){
										HX_STACK_LINE(405)
										tmp37 = (int)1;
									}
									else{
										HX_STACK_LINE(405)
										tmp37 = value;
									}
								}
							}
							HX_STACK_LINE(405)
							Float tmp38 = ::Math_obj::asin(tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(405)
							_y = tmp38;
							HX_STACK_LINE(405)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(405)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(405)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(405)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(405)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(405)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(405)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(405)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(405)
							Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(405)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(405)
							Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(405)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(405)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(405)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(405)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp23 = (order == (int)1);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								{
									HX_STACK_LINE(405)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float value = tmp32;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(405)
									bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									if ((tmp33)){
										HX_STACK_LINE(405)
										tmp24 = (int)-1;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp24 = (int)1;
										}
										else{
											HX_STACK_LINE(405)
											tmp24 = value;
										}
									}
								}
								HX_STACK_LINE(405)
								Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_x = tmp25;
								HX_STACK_LINE(405)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								Float tmp30 = this->w;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(405)
								Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(405)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(405)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(405)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(405)
								Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(405)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(405)
								Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								_y = tmp39;
								HX_STACK_LINE(405)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(405)
								Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(405)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(405)
								Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(405)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(405)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(405)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(405)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(405)
								bool tmp24 = (order == (int)2);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								if ((tmp24)){
									HX_STACK_LINE(405)
									Float tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									{
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float value = tmp33;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(405)
										bool tmp34 = (value < (int)-1);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										if ((tmp34)){
											HX_STACK_LINE(405)
											tmp25 = (int)-1;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp35 = (value > (int)1);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											if ((tmp35)){
												HX_STACK_LINE(405)
												tmp25 = (int)1;
											}
											else{
												HX_STACK_LINE(405)
												tmp25 = value;
											}
										}
									}
									HX_STACK_LINE(405)
									Float tmp26 = ::Math_obj::asin(tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									_x = tmp26;
									HX_STACK_LINE(405)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(405)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(405)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(405)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(405)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(405)
									Float tmp39 = (tmp37 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(405)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(405)
									_y = tmp40;
									HX_STACK_LINE(405)
									Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(405)
									Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(405)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(405)
									Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(405)
									Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(405)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(405)
									Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(405)
									Float tmp49 = (sqw - sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(405)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(405)
									Float tmp51 = (tmp49 + tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(405)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(405)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(405)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(405)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp25 = (order == (int)3);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(405)
										Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(405)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(405)
										Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(405)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(405)
										_x = tmp39;
										HX_STACK_LINE(405)
										Float tmp40;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(405)
										{
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float value = tmp48;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(405)
											bool tmp49 = (value < (int)-1);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											if ((tmp49)){
												HX_STACK_LINE(405)
												tmp40 = (int)-1;
											}
											else{
												HX_STACK_LINE(405)
												bool tmp50 = (value > (int)1);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												if ((tmp50)){
													HX_STACK_LINE(405)
													tmp40 = (int)1;
												}
												else{
													HX_STACK_LINE(405)
													tmp40 = value;
												}
											}
										}
										HX_STACK_LINE(405)
										Float tmp41 = ::Math_obj::asin(tmp40);		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(405)
										_y = tmp41;
										HX_STACK_LINE(405)
										Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(405)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(405)
										Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(405)
										Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(405)
										Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(405)
										Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(405)
										Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(405)
										Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(405)
										Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(405)
										Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(405)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(405)
										Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(405)
										Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(405)
										Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(405)
										_z = tmp55;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp26 = (order == (int)4);		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										if ((tmp26)){
											HX_STACK_LINE(405)
											Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(405)
											Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(405)
											Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(405)
											Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(405)
											Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(405)
											Float tmp33 = (tmp29 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(405)
											Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(405)
											Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(405)
											Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(405)
											Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(405)
											Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(405)
											Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(405)
											Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(405)
											_x = tmp40;
											HX_STACK_LINE(405)
											Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(405)
											Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(405)
											Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(405)
											Float tmp44 = this->x;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(405)
											Float tmp45 = this->z;		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(405)
											Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(405)
											Float tmp47 = (tmp43 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(405)
											Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(405)
											Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(405)
											Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(405)
											Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(405)
											Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(405)
											Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(405)
											Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(405)
											_y = tmp54;
											HX_STACK_LINE(405)
											Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(405)
											{
												HX_STACK_LINE(405)
												Float tmp56 = this->x;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												Float tmp57 = this->y;		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(405)
												Float tmp59 = this->z;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(405)
												Float tmp60 = this->w;		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(405)
												Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(405)
												Float tmp62 = (tmp58 + tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(405)
												Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(405)
												Float value = tmp63;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(405)
												bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(405)
												if ((tmp64)){
													HX_STACK_LINE(405)
													tmp55 = (int)-1;
												}
												else{
													HX_STACK_LINE(405)
													bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp55 = (int)1;
													}
													else{
														HX_STACK_LINE(405)
														tmp55 = value;
													}
												}
											}
											HX_STACK_LINE(405)
											Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(405)
											_z = tmp56;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp27 = (order == (int)5);		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(405)
											if ((tmp27)){
												HX_STACK_LINE(405)
												Float tmp28 = this->x;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(405)
												Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(405)
												Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(405)
												Float tmp31 = this->y;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(405)
												Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(405)
												Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(405)
												Float tmp34 = (tmp30 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(405)
												Float tmp35 = ((int)2 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(405)
												Float tmp36 = (sqw - sqx);		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(405)
												Float tmp37 = sqy;		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(405)
												Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(405)
												Float tmp39 = sqz;		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(405)
												Float tmp40 = (tmp38 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(405)
												Float tmp41 = ::Math_obj::atan2(tmp35,tmp40);		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(405)
												_x = tmp41;
												HX_STACK_LINE(405)
												Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(405)
												Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(405)
												Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(405)
												Float tmp45 = this->y;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(405)
												Float tmp46 = this->w;		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(405)
												Float tmp47 = (tmp45 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(405)
												Float tmp48 = (tmp44 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(405)
												Float tmp49 = ((int)2 * tmp48);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(405)
												Float tmp50 = (sqw + sqx);		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(405)
												Float tmp51 = sqy;		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(405)
												Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(405)
												Float tmp53 = sqz;		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(405)
												Float tmp54 = (tmp52 - tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(405)
												Float tmp55 = ::Math_obj::atan2(tmp49,tmp54);		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(405)
												_y = tmp55;
												HX_STACK_LINE(405)
												Float tmp56;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(405)
												{
													HX_STACK_LINE(405)
													Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(405)
													Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(405)
													Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(405)
													Float tmp60 = this->x;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(405)
													Float tmp61 = this->y;		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(405)
													Float tmp62 = (tmp60 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(405)
													Float tmp63 = (tmp59 - tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(405)
													Float tmp64 = ((int)2 * tmp63);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(405)
													Float value = tmp64;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(405)
													bool tmp65 = (value < (int)-1);		HX_STACK_VAR(tmp65,"tmp65");
													HX_STACK_LINE(405)
													if ((tmp65)){
														HX_STACK_LINE(405)
														tmp56 = (int)-1;
													}
													else{
														HX_STACK_LINE(405)
														bool tmp66 = (value > (int)1);		HX_STACK_VAR(tmp66,"tmp66");
														HX_STACK_LINE(405)
														if ((tmp66)){
															HX_STACK_LINE(405)
															tmp56 = (int)1;
														}
														else{
															HX_STACK_LINE(405)
															tmp56 = value;
														}
													}
												}
												HX_STACK_LINE(405)
												Float tmp57 = ::Math_obj::asin(tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(405)
												_z = tmp57;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(405)
						{
							HX_STACK_LINE(405)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(405)
							_this->ignore_listeners = true;
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->x = _x;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->x;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_x != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_x(tmp26);
									}
									HX_STACK_LINE(405)
									_this->x;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->y = _y;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->y;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _y;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_y(tmp26);
									}
									HX_STACK_LINE(405)
									_this->y;
								}
							}
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								_this->z = _z;
								HX_STACK_LINE(405)
								bool tmp23 = _this->_construct;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(405)
								if ((tmp23)){
									HX_STACK_LINE(405)
									_this->z;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp24 = (_this->listen_z != null());		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(405)
									bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp24)){
										HX_STACK_LINE(405)
										bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										tmp25 = !(tmp27);
									}
									else{
										HX_STACK_LINE(405)
										tmp25 = false;
									}
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = _z;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										_this->listen_z(tmp26);
									}
									HX_STACK_LINE(405)
									_this->z;
								}
							}
							HX_STACK_LINE(405)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(405)
							bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								tmp24 = !(tmp26);
							}
							else{
								HX_STACK_LINE(405)
								tmp24 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp24)){
								HX_STACK_LINE(405)
								Float tmp25 = _this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								_this->listen_x(tmp25);
							}
							HX_STACK_LINE(405)
							bool tmp25 = (_this->listen_y != null());		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							if ((tmp25)){
								HX_STACK_LINE(405)
								bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								tmp26 = !(tmp28);
							}
							else{
								HX_STACK_LINE(405)
								tmp26 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp26)){
								HX_STACK_LINE(405)
								Float tmp27 = _this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								_this->listen_y(tmp27);
							}
							HX_STACK_LINE(405)
							bool tmp27 = (_this->listen_z != null());		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							bool tmp28;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							if ((tmp27)){
								HX_STACK_LINE(405)
								bool tmp29 = _this->ignore_listeners;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								bool tmp30 = tmp29;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								tmp28 = !(tmp30);
							}
							else{
								HX_STACK_LINE(405)
								tmp28 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp28)){
								HX_STACK_LINE(405)
								Float tmp29 = _this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								_this->listen_z(tmp29);
							}
							HX_STACK_LINE(405)
							_this;
						}
						HX_STACK_LINE(405)
						_this;
					}
				}
				HX_STACK_LINE(405)
				Dynamic tmp2 = this->listen_w_dyn();		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(405)
				bool tmp3 = (tmp2 != null());		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(405)
				bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
				HX_STACK_LINE(405)
				if ((tmp3)){
					HX_STACK_LINE(405)
					bool tmp5 = this->ignore_listeners;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(405)
					bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(405)
					tmp4 = !(tmp7);
				}
				else{
					HX_STACK_LINE(405)
					tmp4 = false;
				}
				HX_STACK_LINE(405)
				if ((tmp4)){
					HX_STACK_LINE(405)
					Float tmp5 = this->w;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(405)
					this->listen_w(tmp5);
				}
				HX_STACK_LINE(405)
				this->w;
			}
		}
		HX_STACK_LINE(405)
		this->ignore_euler = false;
		HX_STACK_LINE(405)
		{
			HX_STACK_LINE(405)
			::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(405)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(405)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(405)
			bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(405)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(405)
			if ((tmp3)){
				HX_STACK_LINE(405)
				tmp4 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(405)
				tmp4 = true;
			}
			HX_STACK_LINE(405)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(405)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(405)
			if ((tmp5)){
				HX_STACK_LINE(405)
				tmp6 = this->_construct;
			}
			else{
				HX_STACK_LINE(405)
				tmp6 = true;
			}
			HX_STACK_LINE(405)
			if ((tmp6)){
				HX_STACK_LINE(405)
				Dynamic();
			}
			else{
				HX_STACK_LINE(405)
				::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(405)
				::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(405)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(405)
				Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(405)
				Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(405)
				Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(405)
				Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(405)
				Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(405)
				Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(405)
				Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(405)
				Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(405)
				Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(405)
				Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(405)
				Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(405)
				Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(405)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(405)
				Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(405)
				Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(405)
				Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(405)
				Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
				HX_STACK_LINE(405)
				Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
				HX_STACK_LINE(405)
				Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
				HX_STACK_LINE(405)
				bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(405)
				if ((tmp20)){
					HX_STACK_LINE(405)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(405)
					Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(405)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(405)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(405)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(405)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(405)
					Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(405)
					Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(405)
					Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(405)
					Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(405)
					Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(405)
					Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(405)
					Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(405)
					Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(405)
					_x = tmp34;
					HX_STACK_LINE(405)
					Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(405)
					{
						HX_STACK_LINE(405)
						Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(405)
						Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(405)
						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(405)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(405)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(405)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(405)
						Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(405)
						Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(405)
						Float value = tmp43;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(405)
						bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(405)
						if ((tmp44)){
							HX_STACK_LINE(405)
							tmp35 = (int)-1;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(405)
							if ((tmp45)){
								HX_STACK_LINE(405)
								tmp35 = (int)1;
							}
							else{
								HX_STACK_LINE(405)
								tmp35 = value;
							}
						}
					}
					HX_STACK_LINE(405)
					Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(405)
					_y = tmp36;
					HX_STACK_LINE(405)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(405)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(405)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(405)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(405)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(405)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(405)
					Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(405)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(405)
					Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(405)
					Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(405)
					Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(405)
					Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(405)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(405)
					Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(405)
					_z = tmp50;
				}
				else{
					HX_STACK_LINE(405)
					bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(405)
					if ((tmp21)){
						HX_STACK_LINE(405)
						Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(405)
						{
							HX_STACK_LINE(405)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(405)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(405)
							Float value = tmp30;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(405)
							bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(405)
							if ((tmp31)){
								HX_STACK_LINE(405)
								tmp22 = (int)-1;
							}
							else{
								HX_STACK_LINE(405)
								bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(405)
								if ((tmp32)){
									HX_STACK_LINE(405)
									tmp22 = (int)1;
								}
								else{
									HX_STACK_LINE(405)
									tmp22 = value;
								}
							}
						}
						HX_STACK_LINE(405)
						Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(405)
						_x = tmp23;
						HX_STACK_LINE(405)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(405)
						Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(405)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(405)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(405)
						Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(405)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(405)
						Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(405)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(405)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(405)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(405)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(405)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(405)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(405)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(405)
						_y = tmp37;
						HX_STACK_LINE(405)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(405)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(405)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(405)
						Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(405)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(405)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(405)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(405)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(405)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(405)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(405)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(405)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(405)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(405)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(405)
						_z = tmp51;
					}
					else{
						HX_STACK_LINE(405)
						bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(405)
						if ((tmp22)){
							HX_STACK_LINE(405)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							{
								HX_STACK_LINE(405)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(405)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(405)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(405)
								if ((tmp32)){
									HX_STACK_LINE(405)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									if ((tmp33)){
										HX_STACK_LINE(405)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(405)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(405)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(405)
							_x = tmp24;
							HX_STACK_LINE(405)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(405)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(405)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(405)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(405)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(405)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(405)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(405)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(405)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(405)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(405)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(405)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(405)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(405)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(405)
							_y = tmp38;
							HX_STACK_LINE(405)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(405)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(405)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(405)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(405)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(405)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(405)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(405)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(405)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(405)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(405)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(405)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(405)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(405)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(405)
							_z = tmp52;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(405)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(405)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(405)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(405)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(405)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(405)
								Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(405)
								Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(405)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(405)
								Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(405)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(405)
								Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(405)
								_x = tmp37;
								HX_STACK_LINE(405)
								Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(405)
								{
									HX_STACK_LINE(405)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(405)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(405)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(405)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(405)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(405)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(405)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(405)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(405)
									Float value = tmp46;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(405)
									bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									if ((tmp47)){
										HX_STACK_LINE(405)
										tmp38 = (int)-1;
									}
									else{
										HX_STACK_LINE(405)
										bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(405)
										if ((tmp48)){
											HX_STACK_LINE(405)
											tmp38 = (int)1;
										}
										else{
											HX_STACK_LINE(405)
											tmp38 = value;
										}
									}
								}
								HX_STACK_LINE(405)
								Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(405)
								_y = tmp39;
								HX_STACK_LINE(405)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(405)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(405)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(405)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(405)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(405)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(405)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(405)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(405)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(405)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(405)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(405)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(405)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(405)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(405)
								_z = tmp53;
							}
							else{
								HX_STACK_LINE(405)
								bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								if ((tmp24)){
									HX_STACK_LINE(405)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(405)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(405)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(405)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(405)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(405)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(405)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(405)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(405)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(405)
									Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(405)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(405)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(405)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(405)
									_x = tmp38;
									HX_STACK_LINE(405)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(405)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(405)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(405)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(405)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(405)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(405)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(405)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(405)
									Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(405)
									Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(405)
									Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(405)
									Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(405)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(405)
									Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(405)
									_y = tmp52;
									HX_STACK_LINE(405)
									Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(405)
									{
										HX_STACK_LINE(405)
										Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(405)
										Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(405)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(405)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(405)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(405)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(405)
										Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(405)
										Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(405)
										Float value = tmp61;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(405)
										bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(405)
										if ((tmp62)){
											HX_STACK_LINE(405)
											tmp53 = (int)-1;
										}
										else{
											HX_STACK_LINE(405)
											bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(405)
											if ((tmp63)){
												HX_STACK_LINE(405)
												tmp53 = (int)1;
											}
											else{
												HX_STACK_LINE(405)
												tmp53 = value;
											}
										}
									}
									HX_STACK_LINE(405)
									Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(405)
									_z = tmp54;
								}
								else{
									HX_STACK_LINE(405)
									bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(405)
									if ((tmp25)){
										HX_STACK_LINE(405)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(405)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(405)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(405)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(405)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(405)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(405)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(405)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(405)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(405)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(405)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(405)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(405)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(405)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(405)
										_x = tmp39;
										HX_STACK_LINE(405)
										Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(405)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(405)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(405)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(405)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(405)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(405)
										Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(405)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(405)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(405)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(405)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(405)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(405)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(405)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(405)
										_y = tmp53;
										HX_STACK_LINE(405)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(405)
										{
											HX_STACK_LINE(405)
											Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(405)
											Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(405)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(405)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(405)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(405)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(405)
											Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(405)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(405)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(405)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(405)
											if ((tmp63)){
												HX_STACK_LINE(405)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(405)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(405)
												if ((tmp64)){
													HX_STACK_LINE(405)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(405)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(405)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(405)
										_z = tmp55;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(405)
				{
					HX_STACK_LINE(405)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(405)
					_this->ignore_listeners = true;
					HX_STACK_LINE(405)
					{
						HX_STACK_LINE(405)
						_this->x = _x;
						HX_STACK_LINE(405)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(405)
						if ((tmp21)){
							HX_STACK_LINE(405)
							_this->x;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(405)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp22)){
								HX_STACK_LINE(405)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(405)
								tmp23 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24 = _x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(405)
							_this->x;
						}
					}
					HX_STACK_LINE(405)
					{
						HX_STACK_LINE(405)
						_this->y = _y;
						HX_STACK_LINE(405)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(405)
						if ((tmp21)){
							HX_STACK_LINE(405)
							_this->y;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(405)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp22)){
								HX_STACK_LINE(405)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(405)
								tmp23 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24 = _y;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								_this->listen_y(tmp24);
							}
							HX_STACK_LINE(405)
							_this->y;
						}
					}
					HX_STACK_LINE(405)
					{
						HX_STACK_LINE(405)
						_this->z = _z;
						HX_STACK_LINE(405)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(405)
						if ((tmp21)){
							HX_STACK_LINE(405)
							_this->z;
						}
						else{
							HX_STACK_LINE(405)
							bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(405)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(405)
							if ((tmp22)){
								HX_STACK_LINE(405)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(405)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(405)
								tmp23 = false;
							}
							HX_STACK_LINE(405)
							if ((tmp23)){
								HX_STACK_LINE(405)
								Float tmp24 = _z;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(405)
								_this->listen_z(tmp24);
							}
							HX_STACK_LINE(405)
							_this->z;
						}
					}
					HX_STACK_LINE(405)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(405)
					bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(405)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(405)
					if ((tmp21)){
						HX_STACK_LINE(405)
						bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(405)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(405)
						tmp22 = !(tmp24);
					}
					else{
						HX_STACK_LINE(405)
						tmp22 = false;
					}
					HX_STACK_LINE(405)
					if ((tmp22)){
						HX_STACK_LINE(405)
						Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(405)
						_this->listen_x(tmp23);
					}
					HX_STACK_LINE(405)
					bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(405)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(405)
					if ((tmp23)){
						HX_STACK_LINE(405)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(405)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(405)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(405)
						tmp24 = false;
					}
					HX_STACK_LINE(405)
					if ((tmp24)){
						HX_STACK_LINE(405)
						Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(405)
						_this->listen_y(tmp25);
					}
					HX_STACK_LINE(405)
					bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(405)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(405)
					if ((tmp25)){
						HX_STACK_LINE(405)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(405)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(405)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(405)
						tmp26 = false;
					}
					HX_STACK_LINE(405)
					if ((tmp26)){
						HX_STACK_LINE(405)
						Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(405)
						_this->listen_z(tmp27);
					}
					HX_STACK_LINE(405)
					_this;
				}
				HX_STACK_LINE(405)
				_this;
			}
		}
		HX_STACK_LINE(405)
		Dynamic tmp = this->listen_x_dyn();		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(405)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(405)
		bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(405)
		if ((tmp1)){
			HX_STACK_LINE(405)
			bool tmp3 = this->ignore_listeners;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(405)
			bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(405)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(405)
			tmp2 = !(tmp5);
		}
		else{
			HX_STACK_LINE(405)
			tmp2 = false;
		}
		HX_STACK_LINE(405)
		if ((tmp2)){
			HX_STACK_LINE(405)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(405)
			this->listen_x(tmp3);
		}
		HX_STACK_LINE(405)
		Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(405)
		bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(405)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(405)
		if ((tmp4)){
			HX_STACK_LINE(405)
			bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(405)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(405)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(405)
			tmp5 = !(tmp8);
		}
		else{
			HX_STACK_LINE(405)
			tmp5 = false;
		}
		HX_STACK_LINE(405)
		if ((tmp5)){
			HX_STACK_LINE(405)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(405)
			this->listen_y(tmp6);
		}
		HX_STACK_LINE(405)
		Dynamic tmp6 = this->listen_z_dyn();		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(405)
		bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(405)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(405)
		if ((tmp7)){
			HX_STACK_LINE(405)
			bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(405)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(405)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(405)
			tmp8 = !(tmp11);
		}
		else{
			HX_STACK_LINE(405)
			tmp8 = false;
		}
		HX_STACK_LINE(405)
		if ((tmp8)){
			HX_STACK_LINE(405)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(405)
			this->listen_z(tmp9);
		}
		HX_STACK_LINE(405)
		Dynamic tmp9 = this->listen_w_dyn();		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(405)
		bool tmp10 = (tmp9 != null());		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(405)
		bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(405)
		if ((tmp10)){
			HX_STACK_LINE(405)
			bool tmp12 = this->ignore_listeners;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(405)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(405)
			bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(405)
			tmp11 = !(tmp14);
		}
		else{
			HX_STACK_LINE(405)
			tmp11 = false;
		}
		HX_STACK_LINE(405)
		if ((tmp11)){
			HX_STACK_LINE(405)
			Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(405)
			this->listen_w(tmp12);
		}
	}
	HX_STACK_LINE(407)
	return hx::ObjectPtr<OBJ_>(this);
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,fromArray,return )

Array< Float > Quaternion_obj::toArray( ){
	HX_STACK_FRAME("phoenix.Quaternion","toArray",0x3c52746d,"phoenix.Quaternion.toArray","phoenix/Quaternion.hx",412,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(414)
	Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(414)
	Float tmp1 = this->y;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(414)
	Float tmp2 = this->z;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(414)
	Float tmp3 = this->w;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(414)
	return Array_obj< Float >::__new().Add(tmp).Add(tmp1).Add(tmp2).Add(tmp3);
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,toArray,return )

::phoenix::Quaternion Quaternion_obj::clone( ){
	HX_STACK_FRAME("phoenix.Quaternion","clone",0x2ab74bec,"phoenix.Quaternion.clone","phoenix/Quaternion.hx",418,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(420)
	Float tmp = this->x;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(420)
	Float tmp1 = this->y;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(420)
	Float tmp2 = this->z;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(420)
	Float tmp3 = this->w;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(420)
	::phoenix::Quaternion tmp4 = ::phoenix::Quaternion_obj::__new(tmp,tmp1,tmp2,tmp3);		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(420)
	return tmp4;
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,clone,return )

::phoenix::Vector Quaternion_obj::toeuler( ){
	HX_STACK_FRAME("phoenix.Quaternion","toeuler",0xf8b6705d,"phoenix.Quaternion.toeuler","phoenix/Quaternion.hx",424,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_LINE(425)
	::phoenix::Vector tmp;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(425)
	{
		HX_STACK_LINE(425)
		::phoenix::Vector tmp1;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(425)
		{
			HX_STACK_LINE(425)
			::phoenix::Vector tmp2 = ::phoenix::Vector_obj::__new(null(),null(),null(),null());		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(425)
			::phoenix::Vector _this = tmp2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(425)
			int order = (int)0;		HX_STACK_VAR(order,"order");
			HX_STACK_LINE(425)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(425)
			Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(425)
			Float tmp5 = (tmp3 * tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(425)
			Float sqx = tmp5;		HX_STACK_VAR(sqx,"sqx");
			HX_STACK_LINE(425)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(425)
			Float tmp7 = this->y;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(425)
			Float tmp8 = (tmp6 * tmp7);		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(425)
			Float sqy = tmp8;		HX_STACK_VAR(sqy,"sqy");
			HX_STACK_LINE(425)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(425)
			Float tmp10 = this->z;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(425)
			Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(425)
			Float sqz = tmp11;		HX_STACK_VAR(sqz,"sqz");
			HX_STACK_LINE(425)
			Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(425)
			Float tmp13 = this->w;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(425)
			Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(425)
			Float sqw = tmp14;		HX_STACK_VAR(sqw,"sqw");
			HX_STACK_LINE(425)
			Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
			HX_STACK_LINE(425)
			Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
			HX_STACK_LINE(425)
			Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
			HX_STACK_LINE(425)
			bool tmp15 = (order == (int)0);		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(425)
			if ((tmp15)){
				HX_STACK_LINE(425)
				Float tmp16 = this->x;		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(425)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(425)
				Float tmp18 = (tmp16 * tmp17);		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(425)
				Float tmp19 = this->y;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(425)
				Float tmp20 = this->z;		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(425)
				Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(425)
				Float tmp22 = (tmp18 - tmp21);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(425)
				Float tmp23 = ((int)2 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(425)
				Float tmp24 = (sqw - sqx);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(425)
				Float tmp25 = sqy;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(425)
				Float tmp26 = (tmp24 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(425)
				Float tmp27 = sqz;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(425)
				Float tmp28 = (tmp26 + tmp27);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(425)
				Float tmp29 = ::Math_obj::atan2(tmp23,tmp28);		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(425)
				_x = tmp29;
				HX_STACK_LINE(425)
				Float tmp30;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(425)
				{
					HX_STACK_LINE(425)
					Float tmp31 = this->x;		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(425)
					Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(425)
					Float tmp33 = (tmp31 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(425)
					Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(425)
					Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(425)
					Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(425)
					Float tmp37 = (tmp33 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(425)
					Float tmp38 = ((int)2 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(425)
					Float value = tmp38;		HX_STACK_VAR(value,"value");
					HX_STACK_LINE(425)
					bool tmp39 = (value < (int)-1);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(425)
					if ((tmp39)){
						HX_STACK_LINE(425)
						tmp30 = (int)-1;
					}
					else{
						HX_STACK_LINE(425)
						bool tmp40 = (value > (int)1);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(425)
						if ((tmp40)){
							HX_STACK_LINE(425)
							tmp30 = (int)1;
						}
						else{
							HX_STACK_LINE(425)
							tmp30 = value;
						}
					}
				}
				HX_STACK_LINE(425)
				Float tmp31 = ::Math_obj::asin(tmp30);		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(425)
				_y = tmp31;
				HX_STACK_LINE(425)
				Float tmp32 = this->z;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(425)
				Float tmp33 = this->w;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(425)
				Float tmp34 = (tmp32 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(425)
				Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(425)
				Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(425)
				Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(425)
				Float tmp38 = (tmp34 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(425)
				Float tmp39 = ((int)2 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(425)
				Float tmp40 = (sqw + sqx);		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(425)
				Float tmp41 = sqy;		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(425)
				Float tmp42 = (tmp40 - tmp41);		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(425)
				Float tmp43 = sqz;		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(425)
				Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(425)
				Float tmp45 = ::Math_obj::atan2(tmp39,tmp44);		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(425)
				_z = tmp45;
			}
			else{
				HX_STACK_LINE(425)
				bool tmp16 = (order == (int)1);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(425)
				if ((tmp16)){
					HX_STACK_LINE(425)
					Float tmp17;		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(425)
					{
						HX_STACK_LINE(425)
						Float tmp18 = this->x;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(425)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(425)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(425)
						Float tmp21 = this->y;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(425)
						Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(425)
						Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(425)
						Float tmp24 = (tmp20 - tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(425)
						Float tmp25 = ((int)2 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(425)
						Float value = tmp25;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(425)
						bool tmp26 = (value < (int)-1);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(425)
						if ((tmp26)){
							HX_STACK_LINE(425)
							tmp17 = (int)-1;
						}
						else{
							HX_STACK_LINE(425)
							bool tmp27 = (value > (int)1);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(425)
							if ((tmp27)){
								HX_STACK_LINE(425)
								tmp17 = (int)1;
							}
							else{
								HX_STACK_LINE(425)
								tmp17 = value;
							}
						}
					}
					HX_STACK_LINE(425)
					Float tmp18 = ::Math_obj::asin(tmp17);		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(425)
					_x = tmp18;
					HX_STACK_LINE(425)
					Float tmp19 = this->x;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(425)
					Float tmp20 = this->z;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(425)
					Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(425)
					Float tmp22 = this->y;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(425)
					Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(425)
					Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(425)
					Float tmp25 = (tmp21 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(425)
					Float tmp26 = ((int)2 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(425)
					Float tmp27 = (sqw - sqx);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(425)
					Float tmp28 = sqy;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(425)
					Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(425)
					Float tmp30 = sqz;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(425)
					Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(425)
					Float tmp32 = ::Math_obj::atan2(tmp26,tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(425)
					_y = tmp32;
					HX_STACK_LINE(425)
					Float tmp33 = this->x;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(425)
					Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(425)
					Float tmp35 = (tmp33 * tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(425)
					Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(425)
					Float tmp37 = this->w;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(425)
					Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(425)
					Float tmp39 = (tmp35 + tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(425)
					Float tmp40 = ((int)2 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(425)
					Float tmp41 = (sqw - sqx);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(425)
					Float tmp42 = sqy;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(425)
					Float tmp43 = (tmp41 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(425)
					Float tmp44 = sqz;		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(425)
					Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(425)
					Float tmp46 = ::Math_obj::atan2(tmp40,tmp45);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(425)
					_z = tmp46;
				}
				else{
					HX_STACK_LINE(425)
					bool tmp17 = (order == (int)2);		HX_STACK_VAR(tmp17,"tmp17");
					HX_STACK_LINE(425)
					if ((tmp17)){
						HX_STACK_LINE(425)
						Float tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(425)
						{
							HX_STACK_LINE(425)
							Float tmp19 = this->x;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(425)
							Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(425)
							Float tmp22 = this->y;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(425)
							Float tmp23 = this->z;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(425)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(425)
							Float tmp25 = (tmp21 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(425)
							Float tmp26 = ((int)2 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(425)
							Float value = tmp26;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(425)
							bool tmp27 = (value < (int)-1);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(425)
							if ((tmp27)){
								HX_STACK_LINE(425)
								tmp18 = (int)-1;
							}
							else{
								HX_STACK_LINE(425)
								bool tmp28 = (value > (int)1);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(425)
								if ((tmp28)){
									HX_STACK_LINE(425)
									tmp18 = (int)1;
								}
								else{
									HX_STACK_LINE(425)
									tmp18 = value;
								}
							}
						}
						HX_STACK_LINE(425)
						Float tmp19 = ::Math_obj::asin(tmp18);		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(425)
						_x = tmp19;
						HX_STACK_LINE(425)
						Float tmp20 = this->y;		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(425)
						Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(425)
						Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(425)
						Float tmp23 = this->z;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(425)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(425)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(425)
						Float tmp26 = (tmp22 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(425)
						Float tmp27 = ((int)2 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(425)
						Float tmp28 = (sqw - sqx);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(425)
						Float tmp29 = sqy;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(425)
						Float tmp30 = (tmp28 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(425)
						Float tmp31 = sqz;		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(425)
						Float tmp32 = (tmp30 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(425)
						Float tmp33 = ::Math_obj::atan2(tmp27,tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(425)
						_y = tmp33;
						HX_STACK_LINE(425)
						Float tmp34 = this->z;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(425)
						Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(425)
						Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(425)
						Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(425)
						Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(425)
						Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(425)
						Float tmp40 = (tmp36 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(425)
						Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(425)
						Float tmp42 = (sqw - sqx);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(425)
						Float tmp43 = sqy;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(425)
						Float tmp44 = (tmp42 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(425)
						Float tmp45 = sqz;		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(425)
						Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(425)
						Float tmp47 = ::Math_obj::atan2(tmp41,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(425)
						_z = tmp47;
					}
					else{
						HX_STACK_LINE(425)
						bool tmp18 = (order == (int)3);		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(425)
						if ((tmp18)){
							HX_STACK_LINE(425)
							Float tmp19 = this->x;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							Float tmp20 = this->w;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(425)
							Float tmp21 = (tmp19 * tmp20);		HX_STACK_VAR(tmp21,"tmp21");
							HX_STACK_LINE(425)
							Float tmp22 = this->z;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(425)
							Float tmp23 = this->y;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(425)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(425)
							Float tmp25 = (tmp21 + tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(425)
							Float tmp26 = ((int)2 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(425)
							Float tmp27 = (sqw - sqx);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(425)
							Float tmp28 = sqy;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(425)
							Float tmp29 = (tmp27 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(425)
							Float tmp30 = sqz;		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(425)
							Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(425)
							Float tmp32 = ::Math_obj::atan2(tmp26,tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(425)
							_x = tmp32;
							HX_STACK_LINE(425)
							Float tmp33;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(425)
							{
								HX_STACK_LINE(425)
								Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(425)
								Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(425)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(425)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(425)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(425)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(425)
								Float tmp40 = (tmp36 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(425)
								Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(425)
								Float value = tmp41;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(425)
								bool tmp42 = (value < (int)-1);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(425)
								if ((tmp42)){
									HX_STACK_LINE(425)
									tmp33 = (int)-1;
								}
								else{
									HX_STACK_LINE(425)
									bool tmp43 = (value > (int)1);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(425)
									if ((tmp43)){
										HX_STACK_LINE(425)
										tmp33 = (int)1;
									}
									else{
										HX_STACK_LINE(425)
										tmp33 = value;
									}
								}
							}
							HX_STACK_LINE(425)
							Float tmp34 = ::Math_obj::asin(tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(425)
							_y = tmp34;
							HX_STACK_LINE(425)
							Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(425)
							Float tmp36 = this->y;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(425)
							Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(425)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(425)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(425)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(425)
							Float tmp41 = (tmp37 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(425)
							Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(425)
							Float tmp43 = (sqw + sqx);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(425)
							Float tmp44 = sqy;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(425)
							Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(425)
							Float tmp46 = sqz;		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(425)
							Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(425)
							Float tmp48 = ::Math_obj::atan2(tmp42,tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(425)
							_z = tmp48;
						}
						else{
							HX_STACK_LINE(425)
							bool tmp19 = (order == (int)4);		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							if ((tmp19)){
								HX_STACK_LINE(425)
								Float tmp20 = this->x;		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(425)
								Float tmp21 = this->w;		HX_STACK_VAR(tmp21,"tmp21");
								HX_STACK_LINE(425)
								Float tmp22 = (tmp20 * tmp21);		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(425)
								Float tmp23 = this->z;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(425)
								Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(425)
								Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(425)
								Float tmp26 = (tmp22 - tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(425)
								Float tmp27 = ((int)2 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(425)
								Float tmp28 = (sqw - sqx);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(425)
								Float tmp29 = sqy;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(425)
								Float tmp30 = (tmp28 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(425)
								Float tmp31 = sqz;		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(425)
								Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(425)
								Float tmp33 = ::Math_obj::atan2(tmp27,tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(425)
								_x = tmp33;
								HX_STACK_LINE(425)
								Float tmp34 = this->y;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(425)
								Float tmp35 = this->w;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(425)
								Float tmp36 = (tmp34 * tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(425)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(425)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(425)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(425)
								Float tmp40 = (tmp36 - tmp39);		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(425)
								Float tmp41 = ((int)2 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(425)
								Float tmp42 = (sqw + sqx);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(425)
								Float tmp43 = sqy;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(425)
								Float tmp44 = (tmp42 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(425)
								Float tmp45 = sqz;		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(425)
								Float tmp46 = (tmp44 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(425)
								Float tmp47 = ::Math_obj::atan2(tmp41,tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(425)
								_y = tmp47;
								HX_STACK_LINE(425)
								Float tmp48;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(425)
								{
									HX_STACK_LINE(425)
									Float tmp49 = this->x;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(425)
									Float tmp50 = this->y;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(425)
									Float tmp51 = (tmp49 * tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(425)
									Float tmp52 = this->z;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(425)
									Float tmp53 = this->w;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(425)
									Float tmp54 = (tmp52 * tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(425)
									Float tmp55 = (tmp51 + tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(425)
									Float tmp56 = ((int)2 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(425)
									Float value = tmp56;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(425)
									bool tmp57 = (value < (int)-1);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(425)
									if ((tmp57)){
										HX_STACK_LINE(425)
										tmp48 = (int)-1;
									}
									else{
										HX_STACK_LINE(425)
										bool tmp58 = (value > (int)1);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(425)
										if ((tmp58)){
											HX_STACK_LINE(425)
											tmp48 = (int)1;
										}
										else{
											HX_STACK_LINE(425)
											tmp48 = value;
										}
									}
								}
								HX_STACK_LINE(425)
								Float tmp49 = ::Math_obj::asin(tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(425)
								_z = tmp49;
							}
							else{
								HX_STACK_LINE(425)
								bool tmp20 = (order == (int)5);		HX_STACK_VAR(tmp20,"tmp20");
								HX_STACK_LINE(425)
								if ((tmp20)){
									HX_STACK_LINE(425)
									Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
									HX_STACK_LINE(425)
									Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
									HX_STACK_LINE(425)
									Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(425)
									Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(425)
									Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(425)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(425)
									Float tmp27 = (tmp23 + tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(425)
									Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(425)
									Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(425)
									Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(425)
									Float tmp31 = (tmp29 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(425)
									Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(425)
									Float tmp33 = (tmp31 - tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(425)
									Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(425)
									_x = tmp34;
									HX_STACK_LINE(425)
									Float tmp35 = this->x;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(425)
									Float tmp36 = this->z;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(425)
									Float tmp37 = (tmp35 * tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(425)
									Float tmp38 = this->y;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(425)
									Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(425)
									Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(425)
									Float tmp41 = (tmp37 + tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(425)
									Float tmp42 = ((int)2 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(425)
									Float tmp43 = (sqw + sqx);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(425)
									Float tmp44 = sqy;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(425)
									Float tmp45 = (tmp43 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(425)
									Float tmp46 = sqz;		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(425)
									Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(425)
									Float tmp48 = ::Math_obj::atan2(tmp42,tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(425)
									_y = tmp48;
									HX_STACK_LINE(425)
									Float tmp49;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(425)
									{
										HX_STACK_LINE(425)
										Float tmp50 = this->z;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(425)
										Float tmp51 = this->w;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(425)
										Float tmp52 = (tmp50 * tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(425)
										Float tmp53 = this->x;		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(425)
										Float tmp54 = this->y;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(425)
										Float tmp55 = (tmp53 * tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(425)
										Float tmp56 = (tmp52 - tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(425)
										Float tmp57 = ((int)2 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(425)
										Float value = tmp57;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(425)
										bool tmp58 = (value < (int)-1);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(425)
										if ((tmp58)){
											HX_STACK_LINE(425)
											tmp49 = (int)-1;
										}
										else{
											HX_STACK_LINE(425)
											bool tmp59 = (value > (int)1);		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(425)
											if ((tmp59)){
												HX_STACK_LINE(425)
												tmp49 = (int)1;
											}
											else{
												HX_STACK_LINE(425)
												tmp49 = value;
											}
										}
									}
									HX_STACK_LINE(425)
									Float tmp50 = ::Math_obj::asin(tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(425)
									_z = tmp50;
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(425)
			{
				HX_STACK_LINE(425)
				bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
				HX_STACK_LINE(425)
				_this->ignore_listeners = true;
				HX_STACK_LINE(425)
				{
					HX_STACK_LINE(425)
					_this->x = _x;
					HX_STACK_LINE(425)
					bool tmp16 = _this->_construct;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(425)
					if ((tmp16)){
						HX_STACK_LINE(425)
						_this->x;
					}
					else{
						HX_STACK_LINE(425)
						bool tmp17 = (_this->listen_x != null());		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(425)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(425)
						if ((tmp17)){
							HX_STACK_LINE(425)
							bool tmp19 = _this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(425)
							tmp18 = !(tmp20);
						}
						else{
							HX_STACK_LINE(425)
							tmp18 = false;
						}
						HX_STACK_LINE(425)
						if ((tmp18)){
							HX_STACK_LINE(425)
							Float tmp19 = _x;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							_this->listen_x(tmp19);
						}
						HX_STACK_LINE(425)
						_this->x;
					}
				}
				HX_STACK_LINE(425)
				{
					HX_STACK_LINE(425)
					_this->y = _y;
					HX_STACK_LINE(425)
					bool tmp16 = _this->_construct;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(425)
					if ((tmp16)){
						HX_STACK_LINE(425)
						_this->y;
					}
					else{
						HX_STACK_LINE(425)
						bool tmp17 = (_this->listen_y != null());		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(425)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(425)
						if ((tmp17)){
							HX_STACK_LINE(425)
							bool tmp19 = _this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(425)
							tmp18 = !(tmp20);
						}
						else{
							HX_STACK_LINE(425)
							tmp18 = false;
						}
						HX_STACK_LINE(425)
						if ((tmp18)){
							HX_STACK_LINE(425)
							Float tmp19 = _y;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							_this->listen_y(tmp19);
						}
						HX_STACK_LINE(425)
						_this->y;
					}
				}
				HX_STACK_LINE(425)
				{
					HX_STACK_LINE(425)
					_this->z = _z;
					HX_STACK_LINE(425)
					bool tmp16 = _this->_construct;		HX_STACK_VAR(tmp16,"tmp16");
					HX_STACK_LINE(425)
					if ((tmp16)){
						HX_STACK_LINE(425)
						_this->z;
					}
					else{
						HX_STACK_LINE(425)
						bool tmp17 = (_this->listen_z != null());		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(425)
						bool tmp18;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(425)
						if ((tmp17)){
							HX_STACK_LINE(425)
							bool tmp19 = _this->ignore_listeners;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							bool tmp20 = tmp19;		HX_STACK_VAR(tmp20,"tmp20");
							HX_STACK_LINE(425)
							tmp18 = !(tmp20);
						}
						else{
							HX_STACK_LINE(425)
							tmp18 = false;
						}
						HX_STACK_LINE(425)
						if ((tmp18)){
							HX_STACK_LINE(425)
							Float tmp19 = _z;		HX_STACK_VAR(tmp19,"tmp19");
							HX_STACK_LINE(425)
							_this->listen_z(tmp19);
						}
						HX_STACK_LINE(425)
						_this->z;
					}
				}
				HX_STACK_LINE(425)
				_this->ignore_listeners = prev;
				HX_STACK_LINE(425)
				bool tmp16 = (_this->listen_x != null());		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(425)
				bool tmp17;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(425)
				if ((tmp16)){
					HX_STACK_LINE(425)
					bool tmp18 = _this->ignore_listeners;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(425)
					bool tmp19 = tmp18;		HX_STACK_VAR(tmp19,"tmp19");
					HX_STACK_LINE(425)
					tmp17 = !(tmp19);
				}
				else{
					HX_STACK_LINE(425)
					tmp17 = false;
				}
				HX_STACK_LINE(425)
				if ((tmp17)){
					HX_STACK_LINE(425)
					Float tmp18 = _this->x;		HX_STACK_VAR(tmp18,"tmp18");
					HX_STACK_LINE(425)
					_this->listen_x(tmp18);
				}
				HX_STACK_LINE(425)
				bool tmp18 = (_this->listen_y != null());		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(425)
				bool tmp19;		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(425)
				if ((tmp18)){
					HX_STACK_LINE(425)
					bool tmp20 = _this->ignore_listeners;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(425)
					bool tmp21 = tmp20;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(425)
					tmp19 = !(tmp21);
				}
				else{
					HX_STACK_LINE(425)
					tmp19 = false;
				}
				HX_STACK_LINE(425)
				if ((tmp19)){
					HX_STACK_LINE(425)
					Float tmp20 = _this->y;		HX_STACK_VAR(tmp20,"tmp20");
					HX_STACK_LINE(425)
					_this->listen_y(tmp20);
				}
				HX_STACK_LINE(425)
				bool tmp20 = (_this->listen_z != null());		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(425)
				bool tmp21;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(425)
				if ((tmp20)){
					HX_STACK_LINE(425)
					bool tmp22 = _this->ignore_listeners;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(425)
					bool tmp23 = tmp22;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(425)
					tmp21 = !(tmp23);
				}
				else{
					HX_STACK_LINE(425)
					tmp21 = false;
				}
				HX_STACK_LINE(425)
				if ((tmp21)){
					HX_STACK_LINE(425)
					Float tmp22 = _this->z;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(425)
					_this->listen_z(tmp22);
				}
				HX_STACK_LINE(425)
				_this;
			}
			HX_STACK_LINE(425)
			tmp1 = _this;
		}
		HX_STACK_LINE(425)
		::phoenix::Vector _this = tmp1;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(425)
		{
			HX_STACK_LINE(425)
			Float tmp2 = (_this->x * ((Float)57.2957795130823797));		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(425)
			Float _x = tmp2;		HX_STACK_VAR(_x,"_x");
			HX_STACK_LINE(425)
			Float tmp3 = (_this->y * ((Float)57.2957795130823797));		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(425)
			Float _y = tmp3;		HX_STACK_VAR(_y,"_y");
			HX_STACK_LINE(425)
			Float tmp4 = (_this->z * ((Float)57.2957795130823797));		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(425)
			Float _z = tmp4;		HX_STACK_VAR(_z,"_z");
			HX_STACK_LINE(425)
			bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
			HX_STACK_LINE(425)
			_this->ignore_listeners = true;
			HX_STACK_LINE(425)
			{
				HX_STACK_LINE(425)
				_this->x = _x;
				HX_STACK_LINE(425)
				bool tmp5 = _this->_construct;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(425)
				if ((tmp5)){
					HX_STACK_LINE(425)
					_this->x;
				}
				else{
					HX_STACK_LINE(425)
					bool tmp6 = (_this->listen_x != null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(425)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(425)
					if ((tmp6)){
						HX_STACK_LINE(425)
						bool tmp8 = _this->ignore_listeners;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(425)
						bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(425)
						tmp7 = !(tmp9);
					}
					else{
						HX_STACK_LINE(425)
						tmp7 = false;
					}
					HX_STACK_LINE(425)
					if ((tmp7)){
						HX_STACK_LINE(425)
						Float tmp8 = _x;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(425)
						_this->listen_x(tmp8);
					}
					HX_STACK_LINE(425)
					_this->x;
				}
			}
			HX_STACK_LINE(425)
			{
				HX_STACK_LINE(425)
				_this->y = _y;
				HX_STACK_LINE(425)
				bool tmp5 = _this->_construct;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(425)
				if ((tmp5)){
					HX_STACK_LINE(425)
					_this->y;
				}
				else{
					HX_STACK_LINE(425)
					bool tmp6 = (_this->listen_y != null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(425)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(425)
					if ((tmp6)){
						HX_STACK_LINE(425)
						bool tmp8 = _this->ignore_listeners;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(425)
						bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(425)
						tmp7 = !(tmp9);
					}
					else{
						HX_STACK_LINE(425)
						tmp7 = false;
					}
					HX_STACK_LINE(425)
					if ((tmp7)){
						HX_STACK_LINE(425)
						Float tmp8 = _y;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(425)
						_this->listen_y(tmp8);
					}
					HX_STACK_LINE(425)
					_this->y;
				}
			}
			HX_STACK_LINE(425)
			{
				HX_STACK_LINE(425)
				_this->z = _z;
				HX_STACK_LINE(425)
				bool tmp5 = _this->_construct;		HX_STACK_VAR(tmp5,"tmp5");
				HX_STACK_LINE(425)
				if ((tmp5)){
					HX_STACK_LINE(425)
					_this->z;
				}
				else{
					HX_STACK_LINE(425)
					bool tmp6 = (_this->listen_z != null());		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(425)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(425)
					if ((tmp6)){
						HX_STACK_LINE(425)
						bool tmp8 = _this->ignore_listeners;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(425)
						bool tmp9 = tmp8;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(425)
						tmp7 = !(tmp9);
					}
					else{
						HX_STACK_LINE(425)
						tmp7 = false;
					}
					HX_STACK_LINE(425)
					if ((tmp7)){
						HX_STACK_LINE(425)
						Float tmp8 = _z;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(425)
						_this->listen_z(tmp8);
					}
					HX_STACK_LINE(425)
					_this->z;
				}
			}
			HX_STACK_LINE(425)
			_this->ignore_listeners = prev;
			HX_STACK_LINE(425)
			bool tmp5 = (_this->listen_x != null());		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(425)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(425)
			if ((tmp5)){
				HX_STACK_LINE(425)
				bool tmp7 = _this->ignore_listeners;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(425)
				bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(425)
				tmp6 = !(tmp8);
			}
			else{
				HX_STACK_LINE(425)
				tmp6 = false;
			}
			HX_STACK_LINE(425)
			if ((tmp6)){
				HX_STACK_LINE(425)
				Float tmp7 = _this->x;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(425)
				_this->listen_x(tmp7);
			}
			HX_STACK_LINE(425)
			bool tmp7 = (_this->listen_y != null());		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(425)
			bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(425)
			if ((tmp7)){
				HX_STACK_LINE(425)
				bool tmp9 = _this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(425)
				bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(425)
				tmp8 = !(tmp10);
			}
			else{
				HX_STACK_LINE(425)
				tmp8 = false;
			}
			HX_STACK_LINE(425)
			if ((tmp8)){
				HX_STACK_LINE(425)
				Float tmp9 = _this->y;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(425)
				_this->listen_y(tmp9);
			}
			HX_STACK_LINE(425)
			bool tmp9 = (_this->listen_z != null());		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(425)
			bool tmp10;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(425)
			if ((tmp9)){
				HX_STACK_LINE(425)
				bool tmp11 = _this->ignore_listeners;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(425)
				bool tmp12 = tmp11;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(425)
				tmp10 = !(tmp12);
			}
			else{
				HX_STACK_LINE(425)
				tmp10 = false;
			}
			HX_STACK_LINE(425)
			if ((tmp10)){
				HX_STACK_LINE(425)
				Float tmp11 = _this->z;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(425)
				_this->listen_z(tmp11);
			}
			HX_STACK_LINE(425)
			_this;
		}
		HX_STACK_LINE(425)
		tmp = _this;
	}
	HX_STACK_LINE(425)
	return tmp;
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,toeuler,return )

Void Quaternion_obj::update_euler( ){
{
		HX_STACK_FRAME("phoenix.Quaternion","update_euler",0x0887dac4,"phoenix.Quaternion.update_euler","phoenix/Quaternion.hx",438,0x23671680)
		HX_STACK_THIS(this)
		HX_STACK_LINE(440)
		::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(440)
		bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(440)
		bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(440)
		bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(440)
		bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(440)
		if ((tmp3)){
			HX_STACK_LINE(440)
			tmp4 = this->ignore_euler;
		}
		else{
			HX_STACK_LINE(440)
			tmp4 = true;
		}
		HX_STACK_LINE(440)
		bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(440)
		bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(440)
		if ((tmp5)){
			HX_STACK_LINE(440)
			tmp6 = this->_construct;
		}
		else{
			HX_STACK_LINE(440)
			tmp6 = true;
		}
		HX_STACK_LINE(440)
		if ((tmp6)){
			HX_STACK_LINE(441)
			return null();
		}
		HX_STACK_LINE(444)
		{
			HX_STACK_LINE(444)
			::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(444)
			::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(444)
			int order = (int)0;		HX_STACK_VAR(order,"order");
			HX_STACK_LINE(444)
			Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(444)
			Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(444)
			Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(444)
			Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
			HX_STACK_LINE(444)
			Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(444)
			Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(444)
			Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(444)
			Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
			HX_STACK_LINE(444)
			Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(444)
			Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(444)
			Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(444)
			Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
			HX_STACK_LINE(444)
			Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(444)
			Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(444)
			Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(444)
			Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
			HX_STACK_LINE(444)
			Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
			HX_STACK_LINE(444)
			Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
			HX_STACK_LINE(444)
			Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
			HX_STACK_LINE(444)
			bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(444)
			if ((tmp20)){
				HX_STACK_LINE(444)
				Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(444)
				Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(444)
				Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(444)
				Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(444)
				Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(444)
				Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(444)
				Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(444)
				Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(444)
				Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(444)
				Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(444)
				Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(444)
				Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(444)
				Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(444)
				Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(444)
				_x = tmp34;
				HX_STACK_LINE(444)
				Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(444)
				{
					HX_STACK_LINE(444)
					Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(444)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(444)
					Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(444)
					Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(444)
					Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(444)
					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(444)
					Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(444)
					Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(444)
					Float value = tmp43;		HX_STACK_VAR(value,"value");
					HX_STACK_LINE(444)
					bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(444)
					if ((tmp44)){
						HX_STACK_LINE(444)
						tmp35 = (int)-1;
					}
					else{
						HX_STACK_LINE(444)
						bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(444)
						if ((tmp45)){
							HX_STACK_LINE(444)
							tmp35 = (int)1;
						}
						else{
							HX_STACK_LINE(444)
							tmp35 = value;
						}
					}
				}
				HX_STACK_LINE(444)
				Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(444)
				_y = tmp36;
				HX_STACK_LINE(444)
				Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(444)
				Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(444)
				Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(444)
				Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(444)
				Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(444)
				Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(444)
				Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(444)
				Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(444)
				Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(444)
				Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
				HX_STACK_LINE(444)
				Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
				HX_STACK_LINE(444)
				Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
				HX_STACK_LINE(444)
				Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
				HX_STACK_LINE(444)
				Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(444)
				_z = tmp50;
			}
			else{
				HX_STACK_LINE(444)
				bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(444)
				if ((tmp21)){
					HX_STACK_LINE(444)
					Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(444)
					{
						HX_STACK_LINE(444)
						Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(444)
						Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(444)
						Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(444)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(444)
						Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(444)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(444)
						Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(444)
						Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(444)
						Float value = tmp30;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(444)
						bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(444)
						if ((tmp31)){
							HX_STACK_LINE(444)
							tmp22 = (int)-1;
						}
						else{
							HX_STACK_LINE(444)
							bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(444)
							if ((tmp32)){
								HX_STACK_LINE(444)
								tmp22 = (int)1;
							}
							else{
								HX_STACK_LINE(444)
								tmp22 = value;
							}
						}
					}
					HX_STACK_LINE(444)
					Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(444)
					_x = tmp23;
					HX_STACK_LINE(444)
					Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(444)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(444)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(444)
					Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(444)
					Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(444)
					Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(444)
					Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(444)
					Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(444)
					Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(444)
					Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(444)
					Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(444)
					Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(444)
					Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(444)
					Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(444)
					_y = tmp37;
					HX_STACK_LINE(444)
					Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(444)
					Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(444)
					Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(444)
					Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(444)
					Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(444)
					Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(444)
					Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(444)
					Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(444)
					Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(444)
					Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(444)
					Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(444)
					Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(444)
					Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(444)
					Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(444)
					_z = tmp51;
				}
				else{
					HX_STACK_LINE(444)
					bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(444)
					if ((tmp22)){
						HX_STACK_LINE(444)
						Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(444)
						{
							HX_STACK_LINE(444)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(444)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(444)
							Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(444)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(444)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(444)
							Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(444)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(444)
							Float value = tmp31;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(444)
							bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(444)
							if ((tmp32)){
								HX_STACK_LINE(444)
								tmp23 = (int)-1;
							}
							else{
								HX_STACK_LINE(444)
								bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(444)
								if ((tmp33)){
									HX_STACK_LINE(444)
									tmp23 = (int)1;
								}
								else{
									HX_STACK_LINE(444)
									tmp23 = value;
								}
							}
						}
						HX_STACK_LINE(444)
						Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(444)
						_x = tmp24;
						HX_STACK_LINE(444)
						Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(444)
						Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(444)
						Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(444)
						Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(444)
						Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(444)
						Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(444)
						Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(444)
						Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(444)
						Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(444)
						Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(444)
						Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(444)
						Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(444)
						Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(444)
						Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(444)
						_y = tmp38;
						HX_STACK_LINE(444)
						Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(444)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(444)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(444)
						Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(444)
						Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(444)
						Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(444)
						Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(444)
						Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(444)
						Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(444)
						Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(444)
						Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(444)
						Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(444)
						Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(444)
						Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(444)
						_z = tmp52;
					}
					else{
						HX_STACK_LINE(444)
						bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(444)
						if ((tmp23)){
							HX_STACK_LINE(444)
							Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(444)
							Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(444)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(444)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(444)
							Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(444)
							Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(444)
							Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(444)
							Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(444)
							Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(444)
							Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(444)
							Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(444)
							Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(444)
							Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(444)
							_x = tmp37;
							HX_STACK_LINE(444)
							Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(444)
							{
								HX_STACK_LINE(444)
								Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(444)
								Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(444)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(444)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(444)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(444)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(444)
								Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(444)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(444)
								Float value = tmp46;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(444)
								bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(444)
								if ((tmp47)){
									HX_STACK_LINE(444)
									tmp38 = (int)-1;
								}
								else{
									HX_STACK_LINE(444)
									bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(444)
									if ((tmp48)){
										HX_STACK_LINE(444)
										tmp38 = (int)1;
									}
									else{
										HX_STACK_LINE(444)
										tmp38 = value;
									}
								}
							}
							HX_STACK_LINE(444)
							Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(444)
							_y = tmp39;
							HX_STACK_LINE(444)
							Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(444)
							Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(444)
							Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(444)
							Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(444)
							Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(444)
							Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(444)
							Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(444)
							Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(444)
							Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(444)
							Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(444)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(444)
							Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(444)
							Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(444)
							Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(444)
							_z = tmp53;
						}
						else{
							HX_STACK_LINE(444)
							bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							if ((tmp24)){
								HX_STACK_LINE(444)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(444)
								Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(444)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(444)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(444)
								Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(444)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(444)
								Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(444)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(444)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(444)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(444)
								Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(444)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(444)
								Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(444)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(444)
								_x = tmp38;
								HX_STACK_LINE(444)
								Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(444)
								Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(444)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(444)
								Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(444)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(444)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(444)
								Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(444)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(444)
								Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(444)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(444)
								Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(444)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(444)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(444)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(444)
								_y = tmp52;
								HX_STACK_LINE(444)
								Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(444)
								{
									HX_STACK_LINE(444)
									Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(444)
									Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(444)
									Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(444)
									Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(444)
									Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(444)
									Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(444)
									Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(444)
									Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(444)
									Float value = tmp61;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(444)
									bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(444)
									if ((tmp62)){
										HX_STACK_LINE(444)
										tmp53 = (int)-1;
									}
									else{
										HX_STACK_LINE(444)
										bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(444)
										if ((tmp63)){
											HX_STACK_LINE(444)
											tmp53 = (int)1;
										}
										else{
											HX_STACK_LINE(444)
											tmp53 = value;
										}
									}
								}
								HX_STACK_LINE(444)
								Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(444)
								_z = tmp54;
							}
							else{
								HX_STACK_LINE(444)
								bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(444)
								if ((tmp25)){
									HX_STACK_LINE(444)
									Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(444)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(444)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(444)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(444)
									Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(444)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(444)
									Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(444)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(444)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(444)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(444)
									Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(444)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(444)
									Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(444)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(444)
									_x = tmp39;
									HX_STACK_LINE(444)
									Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(444)
									Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(444)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(444)
									Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(444)
									Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(444)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(444)
									Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(444)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(444)
									Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(444)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(444)
									Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(444)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(444)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(444)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(444)
									_y = tmp53;
									HX_STACK_LINE(444)
									Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(444)
									{
										HX_STACK_LINE(444)
										Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(444)
										Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(444)
										Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(444)
										Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(444)
										Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(444)
										Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(444)
										Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(444)
										Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(444)
										Float value = tmp62;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(444)
										bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(444)
										if ((tmp63)){
											HX_STACK_LINE(444)
											tmp54 = (int)-1;
										}
										else{
											HX_STACK_LINE(444)
											bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
											HX_STACK_LINE(444)
											if ((tmp64)){
												HX_STACK_LINE(444)
												tmp54 = (int)1;
											}
											else{
												HX_STACK_LINE(444)
												tmp54 = value;
											}
										}
									}
									HX_STACK_LINE(444)
									Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(444)
									_z = tmp55;
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(444)
			{
				HX_STACK_LINE(444)
				bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
				HX_STACK_LINE(444)
				_this->ignore_listeners = true;
				HX_STACK_LINE(444)
				{
					HX_STACK_LINE(444)
					_this->x = _x;
					HX_STACK_LINE(444)
					bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(444)
					if ((tmp21)){
						HX_STACK_LINE(444)
						_this->x;
					}
					else{
						HX_STACK_LINE(444)
						bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(444)
						bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(444)
						if ((tmp22)){
							HX_STACK_LINE(444)
							bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(444)
							tmp23 = !(tmp25);
						}
						else{
							HX_STACK_LINE(444)
							tmp23 = false;
						}
						HX_STACK_LINE(444)
						if ((tmp23)){
							HX_STACK_LINE(444)
							Float tmp24 = _x;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							_this->listen_x(tmp24);
						}
						HX_STACK_LINE(444)
						_this->x;
					}
				}
				HX_STACK_LINE(444)
				{
					HX_STACK_LINE(444)
					_this->y = _y;
					HX_STACK_LINE(444)
					bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(444)
					if ((tmp21)){
						HX_STACK_LINE(444)
						_this->y;
					}
					else{
						HX_STACK_LINE(444)
						bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(444)
						bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(444)
						if ((tmp22)){
							HX_STACK_LINE(444)
							bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(444)
							tmp23 = !(tmp25);
						}
						else{
							HX_STACK_LINE(444)
							tmp23 = false;
						}
						HX_STACK_LINE(444)
						if ((tmp23)){
							HX_STACK_LINE(444)
							Float tmp24 = _y;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							_this->listen_y(tmp24);
						}
						HX_STACK_LINE(444)
						_this->y;
					}
				}
				HX_STACK_LINE(444)
				{
					HX_STACK_LINE(444)
					_this->z = _z;
					HX_STACK_LINE(444)
					bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(444)
					if ((tmp21)){
						HX_STACK_LINE(444)
						_this->z;
					}
					else{
						HX_STACK_LINE(444)
						bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(444)
						bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(444)
						if ((tmp22)){
							HX_STACK_LINE(444)
							bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(444)
							tmp23 = !(tmp25);
						}
						else{
							HX_STACK_LINE(444)
							tmp23 = false;
						}
						HX_STACK_LINE(444)
						if ((tmp23)){
							HX_STACK_LINE(444)
							Float tmp24 = _z;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(444)
							_this->listen_z(tmp24);
						}
						HX_STACK_LINE(444)
						_this->z;
					}
				}
				HX_STACK_LINE(444)
				_this->ignore_listeners = prev;
				HX_STACK_LINE(444)
				bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
				HX_STACK_LINE(444)
				bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(444)
				if ((tmp21)){
					HX_STACK_LINE(444)
					bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(444)
					bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(444)
					tmp22 = !(tmp24);
				}
				else{
					HX_STACK_LINE(444)
					tmp22 = false;
				}
				HX_STACK_LINE(444)
				if ((tmp22)){
					HX_STACK_LINE(444)
					Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(444)
					_this->listen_x(tmp23);
				}
				HX_STACK_LINE(444)
				bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(444)
				bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(444)
				if ((tmp23)){
					HX_STACK_LINE(444)
					bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(444)
					bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(444)
					tmp24 = !(tmp26);
				}
				else{
					HX_STACK_LINE(444)
					tmp24 = false;
				}
				HX_STACK_LINE(444)
				if ((tmp24)){
					HX_STACK_LINE(444)
					Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(444)
					_this->listen_y(tmp25);
				}
				HX_STACK_LINE(444)
				bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(444)
				bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(444)
				if ((tmp25)){
					HX_STACK_LINE(444)
					bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(444)
					bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(444)
					tmp26 = !(tmp28);
				}
				else{
					HX_STACK_LINE(444)
					tmp26 = false;
				}
				HX_STACK_LINE(444)
				if ((tmp26)){
					HX_STACK_LINE(444)
					Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(444)
					_this->listen_z(tmp27);
				}
				HX_STACK_LINE(444)
				_this;
			}
			HX_STACK_LINE(444)
			_this;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(Quaternion_obj,update_euler,(void))

Void Quaternion_obj::set_xyzw( Float _x,Float _y,Float _z,Float _w){
{
		HX_STACK_FRAME("phoenix.Quaternion","set_xyzw",0x2a6a35cc,"phoenix.Quaternion.set_xyzw","phoenix/Quaternion.hx",450,0x23671680)
		HX_STACK_THIS(this)
		HX_STACK_ARG(_x,"_x")
		HX_STACK_ARG(_y,"_y")
		HX_STACK_ARG(_z,"_z")
		HX_STACK_ARG(_w,"_w")
		HX_STACK_LINE(452)
		this->ignore_euler = true;
		HX_STACK_LINE(454)
		{
			HX_STACK_LINE(454)
			this->x = _x;
			HX_STACK_LINE(454)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(454)
			if ((tmp)){
				HX_STACK_LINE(454)
				this->x;
			}
			else{
				HX_STACK_LINE(454)
				{
					HX_STACK_LINE(454)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(454)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(454)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(454)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(454)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(454)
					if ((tmp4)){
						HX_STACK_LINE(454)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(454)
						tmp5 = true;
					}
					HX_STACK_LINE(454)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(454)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(454)
					if ((tmp6)){
						HX_STACK_LINE(454)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(454)
						tmp7 = true;
					}
					HX_STACK_LINE(454)
					if ((tmp7)){
						HX_STACK_LINE(454)
						Dynamic();
					}
					else{
						HX_STACK_LINE(454)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(454)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(454)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(454)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(454)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(454)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(454)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(454)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(454)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(454)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(454)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(454)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(454)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(454)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(454)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(454)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(454)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(454)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(454)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(454)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(454)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(454)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(454)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(454)
						if ((tmp21)){
							HX_STACK_LINE(454)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(454)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(454)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(454)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(454)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(454)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(454)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(454)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(454)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(454)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(454)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(454)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(454)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(454)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(454)
							_x1 = tmp35;
							HX_STACK_LINE(454)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(454)
							{
								HX_STACK_LINE(454)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(454)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(454)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(454)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(454)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(454)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(454)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(454)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(454)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(454)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(454)
								if ((tmp45)){
									HX_STACK_LINE(454)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(454)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(454)
									if ((tmp46)){
										HX_STACK_LINE(454)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(454)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(454)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(454)
							_y1 = tmp37;
							HX_STACK_LINE(454)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(454)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(454)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(454)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(454)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(454)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(454)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(454)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(454)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(454)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(454)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(454)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(454)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(454)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(454)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(454)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(454)
							if ((tmp22)){
								HX_STACK_LINE(454)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(454)
								{
									HX_STACK_LINE(454)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(454)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(454)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(454)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(454)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(454)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(454)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(454)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(454)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(454)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(454)
									if ((tmp32)){
										HX_STACK_LINE(454)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(454)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(454)
										if ((tmp33)){
											HX_STACK_LINE(454)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(454)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(454)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(454)
								_x1 = tmp24;
								HX_STACK_LINE(454)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(454)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(454)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(454)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(454)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(454)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(454)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(454)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(454)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(454)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(454)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(454)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(454)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(454)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(454)
								_y1 = tmp38;
								HX_STACK_LINE(454)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(454)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(454)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(454)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(454)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(454)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(454)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(454)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(454)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(454)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(454)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(454)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(454)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(454)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(454)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(454)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(454)
								if ((tmp23)){
									HX_STACK_LINE(454)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(454)
									{
										HX_STACK_LINE(454)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(454)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(454)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(454)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(454)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(454)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(454)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(454)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(454)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(454)
										if ((tmp33)){
											HX_STACK_LINE(454)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(454)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(454)
											if ((tmp34)){
												HX_STACK_LINE(454)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(454)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(454)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(454)
									_x1 = tmp25;
									HX_STACK_LINE(454)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(454)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(454)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(454)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(454)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(454)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(454)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(454)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(454)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(454)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(454)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(454)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(454)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(454)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(454)
									_y1 = tmp39;
									HX_STACK_LINE(454)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(454)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(454)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(454)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(454)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(454)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(454)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(454)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(454)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(454)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(454)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(454)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(454)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(454)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(454)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(454)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(454)
									if ((tmp24)){
										HX_STACK_LINE(454)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(454)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(454)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(454)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(454)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(454)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(454)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(454)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(454)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(454)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(454)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(454)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(454)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(454)
										_x1 = tmp38;
										HX_STACK_LINE(454)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(454)
										{
											HX_STACK_LINE(454)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(454)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(454)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(454)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(454)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(454)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(454)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(454)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(454)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(454)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(454)
											if ((tmp48)){
												HX_STACK_LINE(454)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(454)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(454)
												if ((tmp49)){
													HX_STACK_LINE(454)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(454)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(454)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(454)
										_y1 = tmp40;
										HX_STACK_LINE(454)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(454)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(454)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(454)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(454)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(454)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(454)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(454)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(454)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(454)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(454)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(454)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(454)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(454)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(454)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(454)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										if ((tmp25)){
											HX_STACK_LINE(454)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(454)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(454)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(454)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(454)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(454)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(454)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(454)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(454)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(454)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(454)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(454)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(454)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(454)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(454)
											_x1 = tmp39;
											HX_STACK_LINE(454)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(454)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(454)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(454)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(454)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(454)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(454)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(454)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(454)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(454)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(454)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(454)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(454)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(454)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(454)
											_y1 = tmp53;
											HX_STACK_LINE(454)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(454)
											{
												HX_STACK_LINE(454)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(454)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(454)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(454)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(454)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(454)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(454)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(454)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(454)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(454)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(454)
												if ((tmp63)){
													HX_STACK_LINE(454)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(454)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(454)
													if ((tmp64)){
														HX_STACK_LINE(454)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(454)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(454)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(454)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(454)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(454)
											if ((tmp26)){
												HX_STACK_LINE(454)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(454)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(454)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(454)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(454)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(454)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(454)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(454)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(454)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(454)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(454)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(454)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(454)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(454)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(454)
												_x1 = tmp40;
												HX_STACK_LINE(454)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(454)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(454)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(454)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(454)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(454)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(454)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(454)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(454)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(454)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(454)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(454)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(454)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(454)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(454)
												_y1 = tmp54;
												HX_STACK_LINE(454)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(454)
												{
													HX_STACK_LINE(454)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(454)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(454)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(454)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(454)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(454)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(454)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(454)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(454)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(454)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(454)
													if ((tmp64)){
														HX_STACK_LINE(454)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(454)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(454)
														if ((tmp65)){
															HX_STACK_LINE(454)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(454)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(454)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(454)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(454)
						{
							HX_STACK_LINE(454)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(454)
							_this->ignore_listeners = true;
							HX_STACK_LINE(454)
							{
								HX_STACK_LINE(454)
								_this->x = _x1;
								HX_STACK_LINE(454)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(454)
								if ((tmp22)){
									HX_STACK_LINE(454)
									_this->x;
								}
								else{
									HX_STACK_LINE(454)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(454)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(454)
									if ((tmp23)){
										HX_STACK_LINE(454)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(454)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(454)
										tmp24 = false;
									}
									HX_STACK_LINE(454)
									if ((tmp24)){
										HX_STACK_LINE(454)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(454)
									_this->x;
								}
							}
							HX_STACK_LINE(454)
							{
								HX_STACK_LINE(454)
								_this->y = _y1;
								HX_STACK_LINE(454)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(454)
								if ((tmp22)){
									HX_STACK_LINE(454)
									_this->y;
								}
								else{
									HX_STACK_LINE(454)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(454)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(454)
									if ((tmp23)){
										HX_STACK_LINE(454)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(454)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(454)
										tmp24 = false;
									}
									HX_STACK_LINE(454)
									if ((tmp24)){
										HX_STACK_LINE(454)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(454)
									_this->y;
								}
							}
							HX_STACK_LINE(454)
							{
								HX_STACK_LINE(454)
								_this->z = _z1;
								HX_STACK_LINE(454)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(454)
								if ((tmp22)){
									HX_STACK_LINE(454)
									_this->z;
								}
								else{
									HX_STACK_LINE(454)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(454)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(454)
									if ((tmp23)){
										HX_STACK_LINE(454)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(454)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(454)
										tmp24 = false;
									}
									HX_STACK_LINE(454)
									if ((tmp24)){
										HX_STACK_LINE(454)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(454)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(454)
									_this->z;
								}
							}
							HX_STACK_LINE(454)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(454)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(454)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(454)
							if ((tmp22)){
								HX_STACK_LINE(454)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(454)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(454)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(454)
								tmp23 = false;
							}
							HX_STACK_LINE(454)
							if ((tmp23)){
								HX_STACK_LINE(454)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(454)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(454)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(454)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(454)
							if ((tmp24)){
								HX_STACK_LINE(454)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(454)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(454)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(454)
								tmp25 = false;
							}
							HX_STACK_LINE(454)
							if ((tmp25)){
								HX_STACK_LINE(454)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(454)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(454)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(454)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(454)
							if ((tmp26)){
								HX_STACK_LINE(454)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(454)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(454)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(454)
								tmp27 = false;
							}
							HX_STACK_LINE(454)
							if ((tmp27)){
								HX_STACK_LINE(454)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(454)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(454)
							_this;
						}
						HX_STACK_LINE(454)
						_this;
					}
				}
				HX_STACK_LINE(454)
				Dynamic tmp1 = this->listen_x_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(454)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(454)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(454)
				if ((tmp2)){
					HX_STACK_LINE(454)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(454)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(454)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(454)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(454)
					tmp3 = false;
				}
				HX_STACK_LINE(454)
				if ((tmp3)){
					HX_STACK_LINE(454)
					Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(454)
					this->listen_x(tmp4);
				}
				HX_STACK_LINE(454)
				this->x;
			}
		}
		HX_STACK_LINE(455)
		{
			HX_STACK_LINE(455)
			this->y = _y;
			HX_STACK_LINE(455)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(455)
			if ((tmp)){
				HX_STACK_LINE(455)
				this->y;
			}
			else{
				HX_STACK_LINE(455)
				{
					HX_STACK_LINE(455)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(455)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(455)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(455)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(455)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(455)
					if ((tmp4)){
						HX_STACK_LINE(455)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(455)
						tmp5 = true;
					}
					HX_STACK_LINE(455)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(455)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(455)
					if ((tmp6)){
						HX_STACK_LINE(455)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(455)
						tmp7 = true;
					}
					HX_STACK_LINE(455)
					if ((tmp7)){
						HX_STACK_LINE(455)
						Dynamic();
					}
					else{
						HX_STACK_LINE(455)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(455)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(455)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(455)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(455)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(455)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(455)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(455)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(455)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(455)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(455)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(455)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(455)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(455)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(455)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(455)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(455)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(455)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(455)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(455)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(455)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(455)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(455)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(455)
						if ((tmp21)){
							HX_STACK_LINE(455)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(455)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(455)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(455)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(455)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(455)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(455)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(455)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(455)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(455)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(455)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(455)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(455)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(455)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(455)
							_x1 = tmp35;
							HX_STACK_LINE(455)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(455)
							{
								HX_STACK_LINE(455)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(455)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(455)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(455)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(455)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(455)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(455)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(455)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(455)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(455)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(455)
								if ((tmp45)){
									HX_STACK_LINE(455)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(455)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(455)
									if ((tmp46)){
										HX_STACK_LINE(455)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(455)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(455)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(455)
							_y1 = tmp37;
							HX_STACK_LINE(455)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(455)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(455)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(455)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(455)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(455)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(455)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(455)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(455)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(455)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(455)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(455)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(455)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(455)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(455)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(455)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(455)
							if ((tmp22)){
								HX_STACK_LINE(455)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(455)
								{
									HX_STACK_LINE(455)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(455)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(455)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(455)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(455)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(455)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(455)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(455)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(455)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(455)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(455)
									if ((tmp32)){
										HX_STACK_LINE(455)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(455)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(455)
										if ((tmp33)){
											HX_STACK_LINE(455)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(455)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(455)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(455)
								_x1 = tmp24;
								HX_STACK_LINE(455)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(455)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(455)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(455)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(455)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(455)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(455)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(455)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(455)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(455)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(455)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(455)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(455)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(455)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(455)
								_y1 = tmp38;
								HX_STACK_LINE(455)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(455)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(455)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(455)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(455)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(455)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(455)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(455)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(455)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(455)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(455)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(455)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(455)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(455)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(455)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(455)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(455)
								if ((tmp23)){
									HX_STACK_LINE(455)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(455)
									{
										HX_STACK_LINE(455)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(455)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(455)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(455)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(455)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(455)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(455)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(455)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(455)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(455)
										if ((tmp33)){
											HX_STACK_LINE(455)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(455)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(455)
											if ((tmp34)){
												HX_STACK_LINE(455)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(455)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(455)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(455)
									_x1 = tmp25;
									HX_STACK_LINE(455)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(455)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(455)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(455)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(455)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(455)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(455)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(455)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(455)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(455)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(455)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(455)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(455)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(455)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(455)
									_y1 = tmp39;
									HX_STACK_LINE(455)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(455)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(455)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(455)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(455)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(455)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(455)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(455)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(455)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(455)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(455)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(455)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(455)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(455)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(455)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(455)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(455)
									if ((tmp24)){
										HX_STACK_LINE(455)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(455)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(455)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(455)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(455)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(455)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(455)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(455)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(455)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(455)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(455)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(455)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(455)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(455)
										_x1 = tmp38;
										HX_STACK_LINE(455)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(455)
										{
											HX_STACK_LINE(455)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(455)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(455)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(455)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(455)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(455)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(455)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(455)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(455)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(455)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(455)
											if ((tmp48)){
												HX_STACK_LINE(455)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(455)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(455)
												if ((tmp49)){
													HX_STACK_LINE(455)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(455)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(455)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(455)
										_y1 = tmp40;
										HX_STACK_LINE(455)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(455)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(455)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(455)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(455)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(455)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(455)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(455)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(455)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(455)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(455)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(455)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(455)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(455)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(455)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(455)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										if ((tmp25)){
											HX_STACK_LINE(455)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(455)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(455)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(455)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(455)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(455)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(455)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(455)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(455)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(455)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(455)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(455)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(455)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(455)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(455)
											_x1 = tmp39;
											HX_STACK_LINE(455)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(455)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(455)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(455)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(455)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(455)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(455)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(455)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(455)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(455)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(455)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(455)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(455)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(455)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(455)
											_y1 = tmp53;
											HX_STACK_LINE(455)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(455)
											{
												HX_STACK_LINE(455)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(455)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(455)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(455)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(455)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(455)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(455)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(455)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(455)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(455)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(455)
												if ((tmp63)){
													HX_STACK_LINE(455)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(455)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(455)
													if ((tmp64)){
														HX_STACK_LINE(455)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(455)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(455)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(455)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(455)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(455)
											if ((tmp26)){
												HX_STACK_LINE(455)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(455)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(455)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(455)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(455)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(455)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(455)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(455)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(455)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(455)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(455)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(455)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(455)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(455)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(455)
												_x1 = tmp40;
												HX_STACK_LINE(455)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(455)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(455)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(455)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(455)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(455)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(455)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(455)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(455)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(455)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(455)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(455)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(455)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(455)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(455)
												_y1 = tmp54;
												HX_STACK_LINE(455)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(455)
												{
													HX_STACK_LINE(455)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(455)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(455)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(455)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(455)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(455)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(455)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(455)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(455)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(455)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(455)
													if ((tmp64)){
														HX_STACK_LINE(455)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(455)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(455)
														if ((tmp65)){
															HX_STACK_LINE(455)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(455)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(455)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(455)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(455)
						{
							HX_STACK_LINE(455)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(455)
							_this->ignore_listeners = true;
							HX_STACK_LINE(455)
							{
								HX_STACK_LINE(455)
								_this->x = _x1;
								HX_STACK_LINE(455)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(455)
								if ((tmp22)){
									HX_STACK_LINE(455)
									_this->x;
								}
								else{
									HX_STACK_LINE(455)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(455)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(455)
									if ((tmp23)){
										HX_STACK_LINE(455)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(455)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(455)
										tmp24 = false;
									}
									HX_STACK_LINE(455)
									if ((tmp24)){
										HX_STACK_LINE(455)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(455)
									_this->x;
								}
							}
							HX_STACK_LINE(455)
							{
								HX_STACK_LINE(455)
								_this->y = _y1;
								HX_STACK_LINE(455)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(455)
								if ((tmp22)){
									HX_STACK_LINE(455)
									_this->y;
								}
								else{
									HX_STACK_LINE(455)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(455)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(455)
									if ((tmp23)){
										HX_STACK_LINE(455)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(455)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(455)
										tmp24 = false;
									}
									HX_STACK_LINE(455)
									if ((tmp24)){
										HX_STACK_LINE(455)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(455)
									_this->y;
								}
							}
							HX_STACK_LINE(455)
							{
								HX_STACK_LINE(455)
								_this->z = _z1;
								HX_STACK_LINE(455)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(455)
								if ((tmp22)){
									HX_STACK_LINE(455)
									_this->z;
								}
								else{
									HX_STACK_LINE(455)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(455)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(455)
									if ((tmp23)){
										HX_STACK_LINE(455)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(455)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(455)
										tmp24 = false;
									}
									HX_STACK_LINE(455)
									if ((tmp24)){
										HX_STACK_LINE(455)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(455)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(455)
									_this->z;
								}
							}
							HX_STACK_LINE(455)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(455)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(455)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(455)
							if ((tmp22)){
								HX_STACK_LINE(455)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(455)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(455)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(455)
								tmp23 = false;
							}
							HX_STACK_LINE(455)
							if ((tmp23)){
								HX_STACK_LINE(455)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(455)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(455)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(455)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(455)
							if ((tmp24)){
								HX_STACK_LINE(455)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(455)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(455)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(455)
								tmp25 = false;
							}
							HX_STACK_LINE(455)
							if ((tmp25)){
								HX_STACK_LINE(455)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(455)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(455)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(455)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(455)
							if ((tmp26)){
								HX_STACK_LINE(455)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(455)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(455)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(455)
								tmp27 = false;
							}
							HX_STACK_LINE(455)
							if ((tmp27)){
								HX_STACK_LINE(455)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(455)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(455)
							_this;
						}
						HX_STACK_LINE(455)
						_this;
					}
				}
				HX_STACK_LINE(455)
				Dynamic tmp1 = this->listen_y_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(455)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(455)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(455)
				if ((tmp2)){
					HX_STACK_LINE(455)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(455)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(455)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(455)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(455)
					tmp3 = false;
				}
				HX_STACK_LINE(455)
				if ((tmp3)){
					HX_STACK_LINE(455)
					Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(455)
					this->listen_y(tmp4);
				}
				HX_STACK_LINE(455)
				this->y;
			}
		}
		HX_STACK_LINE(456)
		{
			HX_STACK_LINE(456)
			this->z = _z;
			HX_STACK_LINE(456)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(456)
			if ((tmp)){
				HX_STACK_LINE(456)
				this->z;
			}
			else{
				HX_STACK_LINE(456)
				{
					HX_STACK_LINE(456)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(456)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(456)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(456)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(456)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(456)
					if ((tmp4)){
						HX_STACK_LINE(456)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(456)
						tmp5 = true;
					}
					HX_STACK_LINE(456)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(456)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(456)
					if ((tmp6)){
						HX_STACK_LINE(456)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(456)
						tmp7 = true;
					}
					HX_STACK_LINE(456)
					if ((tmp7)){
						HX_STACK_LINE(456)
						Dynamic();
					}
					else{
						HX_STACK_LINE(456)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(456)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(456)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(456)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(456)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(456)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(456)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(456)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(456)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(456)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(456)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(456)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(456)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(456)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(456)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(456)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(456)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(456)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(456)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(456)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(456)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(456)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(456)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(456)
						if ((tmp21)){
							HX_STACK_LINE(456)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(456)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(456)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(456)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(456)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(456)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(456)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(456)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(456)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(456)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(456)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(456)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(456)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(456)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(456)
							_x1 = tmp35;
							HX_STACK_LINE(456)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(456)
							{
								HX_STACK_LINE(456)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(456)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(456)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(456)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(456)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(456)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(456)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(456)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(456)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(456)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(456)
								if ((tmp45)){
									HX_STACK_LINE(456)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(456)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(456)
									if ((tmp46)){
										HX_STACK_LINE(456)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(456)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(456)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(456)
							_y1 = tmp37;
							HX_STACK_LINE(456)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(456)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(456)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(456)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(456)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(456)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(456)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(456)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(456)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(456)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(456)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(456)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(456)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(456)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(456)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(456)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(456)
							if ((tmp22)){
								HX_STACK_LINE(456)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(456)
								{
									HX_STACK_LINE(456)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(456)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(456)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(456)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(456)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(456)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(456)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(456)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(456)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(456)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(456)
									if ((tmp32)){
										HX_STACK_LINE(456)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(456)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(456)
										if ((tmp33)){
											HX_STACK_LINE(456)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(456)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(456)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(456)
								_x1 = tmp24;
								HX_STACK_LINE(456)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(456)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(456)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(456)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(456)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(456)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(456)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(456)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(456)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(456)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(456)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(456)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(456)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(456)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(456)
								_y1 = tmp38;
								HX_STACK_LINE(456)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(456)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(456)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(456)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(456)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(456)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(456)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(456)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(456)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(456)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(456)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(456)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(456)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(456)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(456)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(456)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(456)
								if ((tmp23)){
									HX_STACK_LINE(456)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(456)
									{
										HX_STACK_LINE(456)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(456)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(456)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(456)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(456)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(456)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(456)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(456)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(456)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(456)
										if ((tmp33)){
											HX_STACK_LINE(456)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(456)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(456)
											if ((tmp34)){
												HX_STACK_LINE(456)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(456)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(456)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(456)
									_x1 = tmp25;
									HX_STACK_LINE(456)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(456)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(456)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(456)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(456)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(456)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(456)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(456)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(456)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(456)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(456)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(456)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(456)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(456)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(456)
									_y1 = tmp39;
									HX_STACK_LINE(456)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(456)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(456)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(456)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(456)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(456)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(456)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(456)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(456)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(456)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(456)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(456)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(456)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(456)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(456)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(456)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(456)
									if ((tmp24)){
										HX_STACK_LINE(456)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(456)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(456)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(456)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(456)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(456)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(456)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(456)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(456)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(456)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(456)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(456)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(456)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(456)
										_x1 = tmp38;
										HX_STACK_LINE(456)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(456)
										{
											HX_STACK_LINE(456)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(456)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(456)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(456)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(456)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(456)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(456)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(456)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(456)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(456)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(456)
											if ((tmp48)){
												HX_STACK_LINE(456)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(456)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(456)
												if ((tmp49)){
													HX_STACK_LINE(456)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(456)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(456)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(456)
										_y1 = tmp40;
										HX_STACK_LINE(456)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(456)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(456)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(456)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(456)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(456)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(456)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(456)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(456)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(456)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(456)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(456)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(456)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(456)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(456)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(456)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										if ((tmp25)){
											HX_STACK_LINE(456)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(456)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(456)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(456)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(456)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(456)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(456)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(456)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(456)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(456)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(456)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(456)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(456)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(456)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(456)
											_x1 = tmp39;
											HX_STACK_LINE(456)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(456)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(456)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(456)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(456)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(456)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(456)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(456)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(456)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(456)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(456)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(456)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(456)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(456)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(456)
											_y1 = tmp53;
											HX_STACK_LINE(456)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(456)
											{
												HX_STACK_LINE(456)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(456)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(456)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(456)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(456)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(456)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(456)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(456)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(456)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(456)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(456)
												if ((tmp63)){
													HX_STACK_LINE(456)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(456)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(456)
													if ((tmp64)){
														HX_STACK_LINE(456)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(456)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(456)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(456)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(456)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(456)
											if ((tmp26)){
												HX_STACK_LINE(456)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(456)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(456)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(456)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(456)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(456)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(456)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(456)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(456)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(456)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(456)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(456)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(456)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(456)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(456)
												_x1 = tmp40;
												HX_STACK_LINE(456)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(456)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(456)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(456)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(456)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(456)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(456)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(456)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(456)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(456)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(456)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(456)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(456)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(456)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(456)
												_y1 = tmp54;
												HX_STACK_LINE(456)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(456)
												{
													HX_STACK_LINE(456)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(456)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(456)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(456)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(456)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(456)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(456)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(456)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(456)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(456)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(456)
													if ((tmp64)){
														HX_STACK_LINE(456)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(456)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(456)
														if ((tmp65)){
															HX_STACK_LINE(456)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(456)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(456)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(456)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(456)
						{
							HX_STACK_LINE(456)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(456)
							_this->ignore_listeners = true;
							HX_STACK_LINE(456)
							{
								HX_STACK_LINE(456)
								_this->x = _x1;
								HX_STACK_LINE(456)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(456)
								if ((tmp22)){
									HX_STACK_LINE(456)
									_this->x;
								}
								else{
									HX_STACK_LINE(456)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(456)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(456)
									if ((tmp23)){
										HX_STACK_LINE(456)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(456)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(456)
										tmp24 = false;
									}
									HX_STACK_LINE(456)
									if ((tmp24)){
										HX_STACK_LINE(456)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(456)
									_this->x;
								}
							}
							HX_STACK_LINE(456)
							{
								HX_STACK_LINE(456)
								_this->y = _y1;
								HX_STACK_LINE(456)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(456)
								if ((tmp22)){
									HX_STACK_LINE(456)
									_this->y;
								}
								else{
									HX_STACK_LINE(456)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(456)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(456)
									if ((tmp23)){
										HX_STACK_LINE(456)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(456)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(456)
										tmp24 = false;
									}
									HX_STACK_LINE(456)
									if ((tmp24)){
										HX_STACK_LINE(456)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(456)
									_this->y;
								}
							}
							HX_STACK_LINE(456)
							{
								HX_STACK_LINE(456)
								_this->z = _z1;
								HX_STACK_LINE(456)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(456)
								if ((tmp22)){
									HX_STACK_LINE(456)
									_this->z;
								}
								else{
									HX_STACK_LINE(456)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(456)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(456)
									if ((tmp23)){
										HX_STACK_LINE(456)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(456)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(456)
										tmp24 = false;
									}
									HX_STACK_LINE(456)
									if ((tmp24)){
										HX_STACK_LINE(456)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(456)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(456)
									_this->z;
								}
							}
							HX_STACK_LINE(456)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(456)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(456)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(456)
							if ((tmp22)){
								HX_STACK_LINE(456)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(456)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(456)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(456)
								tmp23 = false;
							}
							HX_STACK_LINE(456)
							if ((tmp23)){
								HX_STACK_LINE(456)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(456)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(456)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(456)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(456)
							if ((tmp24)){
								HX_STACK_LINE(456)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(456)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(456)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(456)
								tmp25 = false;
							}
							HX_STACK_LINE(456)
							if ((tmp25)){
								HX_STACK_LINE(456)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(456)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(456)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(456)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(456)
							if ((tmp26)){
								HX_STACK_LINE(456)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(456)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(456)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(456)
								tmp27 = false;
							}
							HX_STACK_LINE(456)
							if ((tmp27)){
								HX_STACK_LINE(456)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(456)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(456)
							_this;
						}
						HX_STACK_LINE(456)
						_this;
					}
				}
				HX_STACK_LINE(456)
				Dynamic tmp1 = this->listen_z_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(456)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(456)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(456)
				if ((tmp2)){
					HX_STACK_LINE(456)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(456)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(456)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(456)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(456)
					tmp3 = false;
				}
				HX_STACK_LINE(456)
				if ((tmp3)){
					HX_STACK_LINE(456)
					Float tmp4 = this->z;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(456)
					this->listen_z(tmp4);
				}
				HX_STACK_LINE(456)
				this->z;
			}
		}
		HX_STACK_LINE(457)
		{
			HX_STACK_LINE(457)
			this->w = _w;
			HX_STACK_LINE(457)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(457)
			if ((tmp)){
				HX_STACK_LINE(457)
				this->w;
			}
			else{
				HX_STACK_LINE(457)
				{
					HX_STACK_LINE(457)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(457)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(457)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(457)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(457)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(457)
					if ((tmp4)){
						HX_STACK_LINE(457)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(457)
						tmp5 = true;
					}
					HX_STACK_LINE(457)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(457)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(457)
					if ((tmp6)){
						HX_STACK_LINE(457)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(457)
						tmp7 = true;
					}
					HX_STACK_LINE(457)
					if ((tmp7)){
						HX_STACK_LINE(457)
						Dynamic();
					}
					else{
						HX_STACK_LINE(457)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(457)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(457)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(457)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(457)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(457)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(457)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(457)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(457)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(457)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(457)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(457)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(457)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(457)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(457)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(457)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(457)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(457)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(457)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(457)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(457)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(457)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(457)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(457)
						if ((tmp21)){
							HX_STACK_LINE(457)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(457)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(457)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(457)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(457)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(457)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(457)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(457)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(457)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(457)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(457)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(457)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(457)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(457)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(457)
							_x1 = tmp35;
							HX_STACK_LINE(457)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(457)
							{
								HX_STACK_LINE(457)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(457)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(457)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(457)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(457)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(457)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(457)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(457)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(457)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(457)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(457)
								if ((tmp45)){
									HX_STACK_LINE(457)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(457)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(457)
									if ((tmp46)){
										HX_STACK_LINE(457)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(457)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(457)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(457)
							_y1 = tmp37;
							HX_STACK_LINE(457)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(457)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(457)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(457)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(457)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(457)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(457)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(457)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(457)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(457)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(457)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(457)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(457)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(457)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(457)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(457)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(457)
							if ((tmp22)){
								HX_STACK_LINE(457)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(457)
								{
									HX_STACK_LINE(457)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(457)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(457)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(457)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(457)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(457)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(457)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(457)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(457)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(457)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(457)
									if ((tmp32)){
										HX_STACK_LINE(457)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(457)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(457)
										if ((tmp33)){
											HX_STACK_LINE(457)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(457)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(457)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(457)
								_x1 = tmp24;
								HX_STACK_LINE(457)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(457)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(457)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(457)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(457)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(457)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(457)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(457)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(457)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(457)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(457)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(457)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(457)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(457)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(457)
								_y1 = tmp38;
								HX_STACK_LINE(457)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(457)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(457)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(457)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(457)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(457)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(457)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(457)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(457)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(457)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(457)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(457)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(457)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(457)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(457)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(457)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(457)
								if ((tmp23)){
									HX_STACK_LINE(457)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(457)
									{
										HX_STACK_LINE(457)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(457)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(457)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(457)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(457)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(457)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(457)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(457)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(457)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(457)
										if ((tmp33)){
											HX_STACK_LINE(457)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(457)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(457)
											if ((tmp34)){
												HX_STACK_LINE(457)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(457)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(457)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(457)
									_x1 = tmp25;
									HX_STACK_LINE(457)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(457)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(457)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(457)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(457)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(457)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(457)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(457)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(457)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(457)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(457)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(457)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(457)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(457)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(457)
									_y1 = tmp39;
									HX_STACK_LINE(457)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(457)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(457)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(457)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(457)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(457)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(457)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(457)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(457)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(457)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(457)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(457)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(457)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(457)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(457)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(457)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(457)
									if ((tmp24)){
										HX_STACK_LINE(457)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(457)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(457)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(457)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(457)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(457)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(457)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(457)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(457)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(457)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(457)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(457)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(457)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(457)
										_x1 = tmp38;
										HX_STACK_LINE(457)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(457)
										{
											HX_STACK_LINE(457)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(457)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(457)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(457)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(457)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(457)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(457)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(457)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(457)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(457)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(457)
											if ((tmp48)){
												HX_STACK_LINE(457)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(457)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(457)
												if ((tmp49)){
													HX_STACK_LINE(457)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(457)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(457)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(457)
										_y1 = tmp40;
										HX_STACK_LINE(457)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(457)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(457)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(457)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(457)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(457)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(457)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(457)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(457)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(457)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(457)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(457)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(457)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(457)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(457)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(457)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										if ((tmp25)){
											HX_STACK_LINE(457)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(457)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(457)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(457)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(457)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(457)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(457)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(457)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(457)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(457)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(457)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(457)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(457)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(457)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(457)
											_x1 = tmp39;
											HX_STACK_LINE(457)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(457)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(457)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(457)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(457)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(457)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(457)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(457)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(457)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(457)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(457)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(457)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(457)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(457)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(457)
											_y1 = tmp53;
											HX_STACK_LINE(457)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(457)
											{
												HX_STACK_LINE(457)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(457)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(457)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(457)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(457)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(457)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(457)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(457)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(457)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(457)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(457)
												if ((tmp63)){
													HX_STACK_LINE(457)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(457)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(457)
													if ((tmp64)){
														HX_STACK_LINE(457)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(457)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(457)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(457)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(457)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(457)
											if ((tmp26)){
												HX_STACK_LINE(457)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(457)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(457)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(457)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(457)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(457)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(457)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(457)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(457)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(457)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(457)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(457)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(457)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(457)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(457)
												_x1 = tmp40;
												HX_STACK_LINE(457)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(457)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(457)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(457)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(457)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(457)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(457)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(457)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(457)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(457)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(457)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(457)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(457)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(457)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(457)
												_y1 = tmp54;
												HX_STACK_LINE(457)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(457)
												{
													HX_STACK_LINE(457)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(457)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(457)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(457)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(457)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(457)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(457)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(457)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(457)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(457)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(457)
													if ((tmp64)){
														HX_STACK_LINE(457)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(457)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(457)
														if ((tmp65)){
															HX_STACK_LINE(457)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(457)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(457)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(457)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(457)
						{
							HX_STACK_LINE(457)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(457)
							_this->ignore_listeners = true;
							HX_STACK_LINE(457)
							{
								HX_STACK_LINE(457)
								_this->x = _x1;
								HX_STACK_LINE(457)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(457)
								if ((tmp22)){
									HX_STACK_LINE(457)
									_this->x;
								}
								else{
									HX_STACK_LINE(457)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(457)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(457)
									if ((tmp23)){
										HX_STACK_LINE(457)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(457)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(457)
										tmp24 = false;
									}
									HX_STACK_LINE(457)
									if ((tmp24)){
										HX_STACK_LINE(457)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(457)
									_this->x;
								}
							}
							HX_STACK_LINE(457)
							{
								HX_STACK_LINE(457)
								_this->y = _y1;
								HX_STACK_LINE(457)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(457)
								if ((tmp22)){
									HX_STACK_LINE(457)
									_this->y;
								}
								else{
									HX_STACK_LINE(457)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(457)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(457)
									if ((tmp23)){
										HX_STACK_LINE(457)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(457)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(457)
										tmp24 = false;
									}
									HX_STACK_LINE(457)
									if ((tmp24)){
										HX_STACK_LINE(457)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(457)
									_this->y;
								}
							}
							HX_STACK_LINE(457)
							{
								HX_STACK_LINE(457)
								_this->z = _z1;
								HX_STACK_LINE(457)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(457)
								if ((tmp22)){
									HX_STACK_LINE(457)
									_this->z;
								}
								else{
									HX_STACK_LINE(457)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(457)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(457)
									if ((tmp23)){
										HX_STACK_LINE(457)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(457)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(457)
										tmp24 = false;
									}
									HX_STACK_LINE(457)
									if ((tmp24)){
										HX_STACK_LINE(457)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(457)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(457)
									_this->z;
								}
							}
							HX_STACK_LINE(457)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(457)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(457)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(457)
							if ((tmp22)){
								HX_STACK_LINE(457)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(457)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(457)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(457)
								tmp23 = false;
							}
							HX_STACK_LINE(457)
							if ((tmp23)){
								HX_STACK_LINE(457)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(457)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(457)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(457)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(457)
							if ((tmp24)){
								HX_STACK_LINE(457)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(457)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(457)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(457)
								tmp25 = false;
							}
							HX_STACK_LINE(457)
							if ((tmp25)){
								HX_STACK_LINE(457)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(457)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(457)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(457)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(457)
							if ((tmp26)){
								HX_STACK_LINE(457)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(457)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(457)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(457)
								tmp27 = false;
							}
							HX_STACK_LINE(457)
							if ((tmp27)){
								HX_STACK_LINE(457)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(457)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(457)
							_this;
						}
						HX_STACK_LINE(457)
						_this;
					}
				}
				HX_STACK_LINE(457)
				Dynamic tmp1 = this->listen_w_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(457)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(457)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(457)
				if ((tmp2)){
					HX_STACK_LINE(457)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(457)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(457)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(457)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(457)
					tmp3 = false;
				}
				HX_STACK_LINE(457)
				if ((tmp3)){
					HX_STACK_LINE(457)
					Float tmp4 = this->w;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(457)
					this->listen_w(tmp4);
				}
				HX_STACK_LINE(457)
				this->w;
			}
		}
		HX_STACK_LINE(459)
		this->ignore_euler = false;
		HX_STACK_LINE(461)
		{
			HX_STACK_LINE(461)
			::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(461)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(461)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(461)
			bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(461)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(461)
			if ((tmp3)){
				HX_STACK_LINE(461)
				tmp4 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(461)
				tmp4 = true;
			}
			HX_STACK_LINE(461)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(461)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(461)
			if ((tmp5)){
				HX_STACK_LINE(461)
				tmp6 = this->_construct;
			}
			else{
				HX_STACK_LINE(461)
				tmp6 = true;
			}
			HX_STACK_LINE(461)
			if ((tmp6)){
				HX_STACK_LINE(461)
				Dynamic();
			}
			else{
				HX_STACK_LINE(461)
				::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(461)
				::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(461)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(461)
				Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(461)
				Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(461)
				Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(461)
				Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(461)
				Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(461)
				Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(461)
				Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(461)
				Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(461)
				Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(461)
				Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(461)
				Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(461)
				Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(461)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(461)
				Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(461)
				Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(461)
				Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(461)
				Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
				HX_STACK_LINE(461)
				Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
				HX_STACK_LINE(461)
				Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
				HX_STACK_LINE(461)
				bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(461)
				if ((tmp20)){
					HX_STACK_LINE(461)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(461)
					Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(461)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(461)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(461)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(461)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(461)
					Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(461)
					Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(461)
					Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(461)
					Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(461)
					Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(461)
					Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(461)
					Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(461)
					Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(461)
					_x1 = tmp34;
					HX_STACK_LINE(461)
					Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(461)
					{
						HX_STACK_LINE(461)
						Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(461)
						Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(461)
						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(461)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(461)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(461)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(461)
						Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(461)
						Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(461)
						Float value = tmp43;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(461)
						bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(461)
						if ((tmp44)){
							HX_STACK_LINE(461)
							tmp35 = (int)-1;
						}
						else{
							HX_STACK_LINE(461)
							bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(461)
							if ((tmp45)){
								HX_STACK_LINE(461)
								tmp35 = (int)1;
							}
							else{
								HX_STACK_LINE(461)
								tmp35 = value;
							}
						}
					}
					HX_STACK_LINE(461)
					Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(461)
					_y1 = tmp36;
					HX_STACK_LINE(461)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(461)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(461)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(461)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(461)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(461)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(461)
					Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(461)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(461)
					Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(461)
					Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(461)
					Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(461)
					Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(461)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(461)
					Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(461)
					_z1 = tmp50;
				}
				else{
					HX_STACK_LINE(461)
					bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(461)
					if ((tmp21)){
						HX_STACK_LINE(461)
						Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(461)
						{
							HX_STACK_LINE(461)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(461)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(461)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(461)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(461)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(461)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(461)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(461)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(461)
							Float value = tmp30;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(461)
							bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(461)
							if ((tmp31)){
								HX_STACK_LINE(461)
								tmp22 = (int)-1;
							}
							else{
								HX_STACK_LINE(461)
								bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(461)
								if ((tmp32)){
									HX_STACK_LINE(461)
									tmp22 = (int)1;
								}
								else{
									HX_STACK_LINE(461)
									tmp22 = value;
								}
							}
						}
						HX_STACK_LINE(461)
						Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(461)
						_x1 = tmp23;
						HX_STACK_LINE(461)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(461)
						Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(461)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(461)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(461)
						Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(461)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(461)
						Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(461)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(461)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(461)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(461)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(461)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(461)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(461)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(461)
						_y1 = tmp37;
						HX_STACK_LINE(461)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(461)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(461)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(461)
						Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(461)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(461)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(461)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(461)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(461)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(461)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(461)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(461)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(461)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(461)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(461)
						_z1 = tmp51;
					}
					else{
						HX_STACK_LINE(461)
						bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(461)
						if ((tmp22)){
							HX_STACK_LINE(461)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(461)
							{
								HX_STACK_LINE(461)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(461)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(461)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(461)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(461)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(461)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(461)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(461)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(461)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(461)
								if ((tmp32)){
									HX_STACK_LINE(461)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(461)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(461)
									if ((tmp33)){
										HX_STACK_LINE(461)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(461)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(461)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(461)
							_x1 = tmp24;
							HX_STACK_LINE(461)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(461)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(461)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(461)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(461)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(461)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(461)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(461)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(461)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(461)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(461)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(461)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(461)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(461)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(461)
							_y1 = tmp38;
							HX_STACK_LINE(461)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(461)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(461)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(461)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(461)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(461)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(461)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(461)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(461)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(461)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(461)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(461)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(461)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(461)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(461)
							_z1 = tmp52;
						}
						else{
							HX_STACK_LINE(461)
							bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(461)
							if ((tmp23)){
								HX_STACK_LINE(461)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(461)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(461)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(461)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(461)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(461)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(461)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(461)
								Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(461)
								Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(461)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(461)
								Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(461)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(461)
								Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(461)
								_x1 = tmp37;
								HX_STACK_LINE(461)
								Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(461)
								{
									HX_STACK_LINE(461)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(461)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(461)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(461)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(461)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(461)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(461)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(461)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(461)
									Float value = tmp46;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(461)
									bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(461)
									if ((tmp47)){
										HX_STACK_LINE(461)
										tmp38 = (int)-1;
									}
									else{
										HX_STACK_LINE(461)
										bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(461)
										if ((tmp48)){
											HX_STACK_LINE(461)
											tmp38 = (int)1;
										}
										else{
											HX_STACK_LINE(461)
											tmp38 = value;
										}
									}
								}
								HX_STACK_LINE(461)
								Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(461)
								_y1 = tmp39;
								HX_STACK_LINE(461)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(461)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(461)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(461)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(461)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(461)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(461)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(461)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(461)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(461)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(461)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(461)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(461)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(461)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(461)
								_z1 = tmp53;
							}
							else{
								HX_STACK_LINE(461)
								bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								if ((tmp24)){
									HX_STACK_LINE(461)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(461)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(461)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(461)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(461)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(461)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(461)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(461)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(461)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(461)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(461)
									Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(461)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(461)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(461)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(461)
									_x1 = tmp38;
									HX_STACK_LINE(461)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(461)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(461)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(461)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(461)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(461)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(461)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(461)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(461)
									Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(461)
									Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(461)
									Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(461)
									Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(461)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(461)
									Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(461)
									_y1 = tmp52;
									HX_STACK_LINE(461)
									Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(461)
									{
										HX_STACK_LINE(461)
										Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(461)
										Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(461)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(461)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(461)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(461)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(461)
										Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(461)
										Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(461)
										Float value = tmp61;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(461)
										bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(461)
										if ((tmp62)){
											HX_STACK_LINE(461)
											tmp53 = (int)-1;
										}
										else{
											HX_STACK_LINE(461)
											bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(461)
											if ((tmp63)){
												HX_STACK_LINE(461)
												tmp53 = (int)1;
											}
											else{
												HX_STACK_LINE(461)
												tmp53 = value;
											}
										}
									}
									HX_STACK_LINE(461)
									Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(461)
									_z1 = tmp54;
								}
								else{
									HX_STACK_LINE(461)
									bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(461)
									if ((tmp25)){
										HX_STACK_LINE(461)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(461)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(461)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(461)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(461)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(461)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(461)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(461)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(461)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(461)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(461)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(461)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(461)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(461)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(461)
										_x1 = tmp39;
										HX_STACK_LINE(461)
										Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(461)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(461)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(461)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(461)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(461)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(461)
										Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(461)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(461)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(461)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(461)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(461)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(461)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(461)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(461)
										_y1 = tmp53;
										HX_STACK_LINE(461)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(461)
										{
											HX_STACK_LINE(461)
											Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(461)
											Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(461)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(461)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(461)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(461)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(461)
											Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(461)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(461)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(461)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(461)
											if ((tmp63)){
												HX_STACK_LINE(461)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(461)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(461)
												if ((tmp64)){
													HX_STACK_LINE(461)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(461)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(461)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(461)
										_z1 = tmp55;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(461)
				{
					HX_STACK_LINE(461)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(461)
					_this->ignore_listeners = true;
					HX_STACK_LINE(461)
					{
						HX_STACK_LINE(461)
						_this->x = _x1;
						HX_STACK_LINE(461)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(461)
						if ((tmp21)){
							HX_STACK_LINE(461)
							_this->x;
						}
						else{
							HX_STACK_LINE(461)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(461)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(461)
							if ((tmp22)){
								HX_STACK_LINE(461)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(461)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(461)
								tmp23 = false;
							}
							HX_STACK_LINE(461)
							if ((tmp23)){
								HX_STACK_LINE(461)
								Float tmp24 = _x1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(461)
							_this->x;
						}
					}
					HX_STACK_LINE(461)
					{
						HX_STACK_LINE(461)
						_this->y = _y1;
						HX_STACK_LINE(461)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(461)
						if ((tmp21)){
							HX_STACK_LINE(461)
							_this->y;
						}
						else{
							HX_STACK_LINE(461)
							bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(461)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(461)
							if ((tmp22)){
								HX_STACK_LINE(461)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(461)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(461)
								tmp23 = false;
							}
							HX_STACK_LINE(461)
							if ((tmp23)){
								HX_STACK_LINE(461)
								Float tmp24 = _y1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								_this->listen_y(tmp24);
							}
							HX_STACK_LINE(461)
							_this->y;
						}
					}
					HX_STACK_LINE(461)
					{
						HX_STACK_LINE(461)
						_this->z = _z1;
						HX_STACK_LINE(461)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(461)
						if ((tmp21)){
							HX_STACK_LINE(461)
							_this->z;
						}
						else{
							HX_STACK_LINE(461)
							bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(461)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(461)
							if ((tmp22)){
								HX_STACK_LINE(461)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(461)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(461)
								tmp23 = false;
							}
							HX_STACK_LINE(461)
							if ((tmp23)){
								HX_STACK_LINE(461)
								Float tmp24 = _z1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(461)
								_this->listen_z(tmp24);
							}
							HX_STACK_LINE(461)
							_this->z;
						}
					}
					HX_STACK_LINE(461)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(461)
					bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(461)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(461)
					if ((tmp21)){
						HX_STACK_LINE(461)
						bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(461)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(461)
						tmp22 = !(tmp24);
					}
					else{
						HX_STACK_LINE(461)
						tmp22 = false;
					}
					HX_STACK_LINE(461)
					if ((tmp22)){
						HX_STACK_LINE(461)
						Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(461)
						_this->listen_x(tmp23);
					}
					HX_STACK_LINE(461)
					bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(461)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(461)
					if ((tmp23)){
						HX_STACK_LINE(461)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(461)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(461)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(461)
						tmp24 = false;
					}
					HX_STACK_LINE(461)
					if ((tmp24)){
						HX_STACK_LINE(461)
						Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(461)
						_this->listen_y(tmp25);
					}
					HX_STACK_LINE(461)
					bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(461)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(461)
					if ((tmp25)){
						HX_STACK_LINE(461)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(461)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(461)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(461)
						tmp26 = false;
					}
					HX_STACK_LINE(461)
					if ((tmp26)){
						HX_STACK_LINE(461)
						Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(461)
						_this->listen_z(tmp27);
					}
					HX_STACK_LINE(461)
					_this;
				}
				HX_STACK_LINE(461)
				_this;
			}
		}
		HX_STACK_LINE(463)
		Dynamic tmp = this->listen_x_dyn();		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(463)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(463)
		bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(463)
		if ((tmp1)){
			HX_STACK_LINE(463)
			bool tmp3 = this->ignore_listeners;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(463)
			bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(463)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(463)
			tmp2 = !(tmp5);
		}
		else{
			HX_STACK_LINE(463)
			tmp2 = false;
		}
		HX_STACK_LINE(463)
		if ((tmp2)){
			HX_STACK_LINE(463)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(463)
			this->listen_x(tmp3);
		}
		HX_STACK_LINE(464)
		Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(464)
		bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(464)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(464)
		if ((tmp4)){
			HX_STACK_LINE(464)
			bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(464)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(464)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(464)
			tmp5 = !(tmp8);
		}
		else{
			HX_STACK_LINE(464)
			tmp5 = false;
		}
		HX_STACK_LINE(464)
		if ((tmp5)){
			HX_STACK_LINE(464)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(464)
			this->listen_y(tmp6);
		}
		HX_STACK_LINE(465)
		Dynamic tmp6 = this->listen_z_dyn();		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(465)
		bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(465)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(465)
		if ((tmp7)){
			HX_STACK_LINE(465)
			bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(465)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(465)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(465)
			tmp8 = !(tmp11);
		}
		else{
			HX_STACK_LINE(465)
			tmp8 = false;
		}
		HX_STACK_LINE(465)
		if ((tmp8)){
			HX_STACK_LINE(465)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(465)
			this->listen_z(tmp9);
		}
		HX_STACK_LINE(466)
		Dynamic tmp9 = this->listen_w_dyn();		HX_STACK_VAR(tmp9,"tmp9");
		HX_STACK_LINE(466)
		bool tmp10 = (tmp9 != null());		HX_STACK_VAR(tmp10,"tmp10");
		HX_STACK_LINE(466)
		bool tmp11;		HX_STACK_VAR(tmp11,"tmp11");
		HX_STACK_LINE(466)
		if ((tmp10)){
			HX_STACK_LINE(466)
			bool tmp12 = this->ignore_listeners;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(466)
			bool tmp13 = tmp12;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(466)
			bool tmp14 = tmp13;		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(466)
			tmp11 = !(tmp14);
		}
		else{
			HX_STACK_LINE(466)
			tmp11 = false;
		}
		HX_STACK_LINE(466)
		if ((tmp11)){
			HX_STACK_LINE(466)
			Float tmp12 = this->w;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(466)
			this->listen_w(tmp12);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC4(Quaternion_obj,set_xyzw,(void))

Void Quaternion_obj::set_xyz( Float _x,Float _y,Float _z){
{
		HX_STACK_FRAME("phoenix.Quaternion","set_xyz",0x64108c4b,"phoenix.Quaternion.set_xyz","phoenix/Quaternion.hx",470,0x23671680)
		HX_STACK_THIS(this)
		HX_STACK_ARG(_x,"_x")
		HX_STACK_ARG(_y,"_y")
		HX_STACK_ARG(_z,"_z")
		HX_STACK_LINE(472)
		this->ignore_euler = true;
		HX_STACK_LINE(474)
		{
			HX_STACK_LINE(474)
			this->x = _x;
			HX_STACK_LINE(474)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(474)
			if ((tmp)){
				HX_STACK_LINE(474)
				this->x;
			}
			else{
				HX_STACK_LINE(474)
				{
					HX_STACK_LINE(474)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(474)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(474)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(474)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(474)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(474)
					if ((tmp4)){
						HX_STACK_LINE(474)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(474)
						tmp5 = true;
					}
					HX_STACK_LINE(474)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(474)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(474)
					if ((tmp6)){
						HX_STACK_LINE(474)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(474)
						tmp7 = true;
					}
					HX_STACK_LINE(474)
					if ((tmp7)){
						HX_STACK_LINE(474)
						Dynamic();
					}
					else{
						HX_STACK_LINE(474)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(474)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(474)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(474)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(474)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(474)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(474)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(474)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(474)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(474)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(474)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(474)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(474)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(474)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(474)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(474)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(474)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(474)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(474)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(474)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(474)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(474)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(474)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(474)
						if ((tmp21)){
							HX_STACK_LINE(474)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(474)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(474)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(474)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(474)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(474)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(474)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(474)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(474)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(474)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(474)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(474)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(474)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(474)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(474)
							_x1 = tmp35;
							HX_STACK_LINE(474)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(474)
							{
								HX_STACK_LINE(474)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(474)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(474)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(474)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(474)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(474)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(474)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(474)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(474)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(474)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(474)
								if ((tmp45)){
									HX_STACK_LINE(474)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(474)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(474)
									if ((tmp46)){
										HX_STACK_LINE(474)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(474)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(474)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(474)
							_y1 = tmp37;
							HX_STACK_LINE(474)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(474)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(474)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(474)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(474)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(474)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(474)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(474)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(474)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(474)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(474)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(474)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(474)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(474)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(474)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(474)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(474)
							if ((tmp22)){
								HX_STACK_LINE(474)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(474)
								{
									HX_STACK_LINE(474)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(474)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(474)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(474)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(474)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(474)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(474)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(474)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(474)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(474)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(474)
									if ((tmp32)){
										HX_STACK_LINE(474)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(474)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(474)
										if ((tmp33)){
											HX_STACK_LINE(474)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(474)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(474)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(474)
								_x1 = tmp24;
								HX_STACK_LINE(474)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(474)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(474)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(474)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(474)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(474)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(474)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(474)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(474)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(474)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(474)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(474)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(474)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(474)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(474)
								_y1 = tmp38;
								HX_STACK_LINE(474)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(474)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(474)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(474)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(474)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(474)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(474)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(474)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(474)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(474)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(474)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(474)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(474)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(474)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(474)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(474)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(474)
								if ((tmp23)){
									HX_STACK_LINE(474)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(474)
									{
										HX_STACK_LINE(474)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(474)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(474)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(474)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(474)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(474)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(474)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(474)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(474)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(474)
										if ((tmp33)){
											HX_STACK_LINE(474)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(474)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(474)
											if ((tmp34)){
												HX_STACK_LINE(474)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(474)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(474)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(474)
									_x1 = tmp25;
									HX_STACK_LINE(474)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(474)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(474)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(474)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(474)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(474)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(474)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(474)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(474)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(474)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(474)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(474)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(474)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(474)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(474)
									_y1 = tmp39;
									HX_STACK_LINE(474)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(474)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(474)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(474)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(474)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(474)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(474)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(474)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(474)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(474)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(474)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(474)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(474)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(474)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(474)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(474)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(474)
									if ((tmp24)){
										HX_STACK_LINE(474)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(474)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(474)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(474)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(474)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(474)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(474)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(474)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(474)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(474)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(474)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(474)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(474)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(474)
										_x1 = tmp38;
										HX_STACK_LINE(474)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(474)
										{
											HX_STACK_LINE(474)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(474)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(474)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(474)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(474)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(474)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(474)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(474)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(474)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(474)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(474)
											if ((tmp48)){
												HX_STACK_LINE(474)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(474)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(474)
												if ((tmp49)){
													HX_STACK_LINE(474)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(474)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(474)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(474)
										_y1 = tmp40;
										HX_STACK_LINE(474)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(474)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(474)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(474)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(474)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(474)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(474)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(474)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(474)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(474)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(474)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(474)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(474)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(474)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(474)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(474)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										if ((tmp25)){
											HX_STACK_LINE(474)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(474)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(474)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(474)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(474)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(474)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(474)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(474)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(474)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(474)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(474)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(474)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(474)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(474)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(474)
											_x1 = tmp39;
											HX_STACK_LINE(474)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(474)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(474)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(474)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(474)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(474)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(474)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(474)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(474)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(474)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(474)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(474)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(474)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(474)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(474)
											_y1 = tmp53;
											HX_STACK_LINE(474)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(474)
											{
												HX_STACK_LINE(474)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(474)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(474)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(474)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(474)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(474)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(474)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(474)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(474)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(474)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(474)
												if ((tmp63)){
													HX_STACK_LINE(474)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(474)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(474)
													if ((tmp64)){
														HX_STACK_LINE(474)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(474)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(474)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(474)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(474)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(474)
											if ((tmp26)){
												HX_STACK_LINE(474)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(474)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(474)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(474)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(474)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(474)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(474)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(474)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(474)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(474)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(474)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(474)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(474)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(474)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(474)
												_x1 = tmp40;
												HX_STACK_LINE(474)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(474)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(474)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(474)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(474)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(474)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(474)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(474)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(474)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(474)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(474)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(474)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(474)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(474)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(474)
												_y1 = tmp54;
												HX_STACK_LINE(474)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(474)
												{
													HX_STACK_LINE(474)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(474)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(474)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(474)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(474)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(474)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(474)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(474)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(474)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(474)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(474)
													if ((tmp64)){
														HX_STACK_LINE(474)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(474)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(474)
														if ((tmp65)){
															HX_STACK_LINE(474)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(474)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(474)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(474)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(474)
						{
							HX_STACK_LINE(474)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(474)
							_this->ignore_listeners = true;
							HX_STACK_LINE(474)
							{
								HX_STACK_LINE(474)
								_this->x = _x1;
								HX_STACK_LINE(474)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(474)
								if ((tmp22)){
									HX_STACK_LINE(474)
									_this->x;
								}
								else{
									HX_STACK_LINE(474)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(474)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(474)
									if ((tmp23)){
										HX_STACK_LINE(474)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(474)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(474)
										tmp24 = false;
									}
									HX_STACK_LINE(474)
									if ((tmp24)){
										HX_STACK_LINE(474)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(474)
									_this->x;
								}
							}
							HX_STACK_LINE(474)
							{
								HX_STACK_LINE(474)
								_this->y = _y1;
								HX_STACK_LINE(474)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(474)
								if ((tmp22)){
									HX_STACK_LINE(474)
									_this->y;
								}
								else{
									HX_STACK_LINE(474)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(474)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(474)
									if ((tmp23)){
										HX_STACK_LINE(474)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(474)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(474)
										tmp24 = false;
									}
									HX_STACK_LINE(474)
									if ((tmp24)){
										HX_STACK_LINE(474)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(474)
									_this->y;
								}
							}
							HX_STACK_LINE(474)
							{
								HX_STACK_LINE(474)
								_this->z = _z1;
								HX_STACK_LINE(474)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(474)
								if ((tmp22)){
									HX_STACK_LINE(474)
									_this->z;
								}
								else{
									HX_STACK_LINE(474)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(474)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(474)
									if ((tmp23)){
										HX_STACK_LINE(474)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(474)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(474)
										tmp24 = false;
									}
									HX_STACK_LINE(474)
									if ((tmp24)){
										HX_STACK_LINE(474)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(474)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(474)
									_this->z;
								}
							}
							HX_STACK_LINE(474)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(474)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(474)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(474)
							if ((tmp22)){
								HX_STACK_LINE(474)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(474)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(474)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(474)
								tmp23 = false;
							}
							HX_STACK_LINE(474)
							if ((tmp23)){
								HX_STACK_LINE(474)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(474)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(474)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(474)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(474)
							if ((tmp24)){
								HX_STACK_LINE(474)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(474)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(474)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(474)
								tmp25 = false;
							}
							HX_STACK_LINE(474)
							if ((tmp25)){
								HX_STACK_LINE(474)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(474)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(474)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(474)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(474)
							if ((tmp26)){
								HX_STACK_LINE(474)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(474)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(474)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(474)
								tmp27 = false;
							}
							HX_STACK_LINE(474)
							if ((tmp27)){
								HX_STACK_LINE(474)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(474)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(474)
							_this;
						}
						HX_STACK_LINE(474)
						_this;
					}
				}
				HX_STACK_LINE(474)
				Dynamic tmp1 = this->listen_x_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(474)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(474)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(474)
				if ((tmp2)){
					HX_STACK_LINE(474)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(474)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(474)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(474)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(474)
					tmp3 = false;
				}
				HX_STACK_LINE(474)
				if ((tmp3)){
					HX_STACK_LINE(474)
					Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(474)
					this->listen_x(tmp4);
				}
				HX_STACK_LINE(474)
				this->x;
			}
		}
		HX_STACK_LINE(475)
		{
			HX_STACK_LINE(475)
			this->y = _y;
			HX_STACK_LINE(475)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(475)
			if ((tmp)){
				HX_STACK_LINE(475)
				this->y;
			}
			else{
				HX_STACK_LINE(475)
				{
					HX_STACK_LINE(475)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(475)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(475)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(475)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(475)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(475)
					if ((tmp4)){
						HX_STACK_LINE(475)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(475)
						tmp5 = true;
					}
					HX_STACK_LINE(475)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(475)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(475)
					if ((tmp6)){
						HX_STACK_LINE(475)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(475)
						tmp7 = true;
					}
					HX_STACK_LINE(475)
					if ((tmp7)){
						HX_STACK_LINE(475)
						Dynamic();
					}
					else{
						HX_STACK_LINE(475)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(475)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(475)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(475)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(475)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(475)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(475)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(475)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(475)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(475)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(475)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(475)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(475)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(475)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(475)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(475)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(475)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(475)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(475)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(475)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(475)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(475)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(475)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(475)
						if ((tmp21)){
							HX_STACK_LINE(475)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(475)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(475)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(475)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(475)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(475)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(475)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(475)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(475)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(475)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(475)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(475)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(475)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(475)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(475)
							_x1 = tmp35;
							HX_STACK_LINE(475)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(475)
							{
								HX_STACK_LINE(475)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(475)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(475)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(475)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(475)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(475)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(475)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(475)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(475)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(475)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(475)
								if ((tmp45)){
									HX_STACK_LINE(475)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(475)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(475)
									if ((tmp46)){
										HX_STACK_LINE(475)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(475)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(475)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(475)
							_y1 = tmp37;
							HX_STACK_LINE(475)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(475)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(475)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(475)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(475)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(475)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(475)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(475)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(475)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(475)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(475)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(475)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(475)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(475)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(475)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(475)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(475)
							if ((tmp22)){
								HX_STACK_LINE(475)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(475)
								{
									HX_STACK_LINE(475)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(475)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(475)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(475)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(475)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(475)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(475)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(475)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(475)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(475)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(475)
									if ((tmp32)){
										HX_STACK_LINE(475)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(475)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(475)
										if ((tmp33)){
											HX_STACK_LINE(475)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(475)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(475)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(475)
								_x1 = tmp24;
								HX_STACK_LINE(475)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(475)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(475)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(475)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(475)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(475)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(475)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(475)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(475)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(475)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(475)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(475)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(475)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(475)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(475)
								_y1 = tmp38;
								HX_STACK_LINE(475)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(475)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(475)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(475)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(475)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(475)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(475)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(475)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(475)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(475)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(475)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(475)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(475)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(475)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(475)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(475)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(475)
								if ((tmp23)){
									HX_STACK_LINE(475)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(475)
									{
										HX_STACK_LINE(475)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(475)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(475)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(475)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(475)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(475)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(475)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(475)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(475)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(475)
										if ((tmp33)){
											HX_STACK_LINE(475)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(475)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(475)
											if ((tmp34)){
												HX_STACK_LINE(475)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(475)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(475)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(475)
									_x1 = tmp25;
									HX_STACK_LINE(475)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(475)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(475)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(475)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(475)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(475)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(475)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(475)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(475)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(475)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(475)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(475)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(475)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(475)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(475)
									_y1 = tmp39;
									HX_STACK_LINE(475)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(475)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(475)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(475)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(475)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(475)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(475)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(475)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(475)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(475)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(475)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(475)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(475)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(475)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(475)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(475)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(475)
									if ((tmp24)){
										HX_STACK_LINE(475)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(475)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(475)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(475)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(475)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(475)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(475)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(475)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(475)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(475)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(475)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(475)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(475)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(475)
										_x1 = tmp38;
										HX_STACK_LINE(475)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(475)
										{
											HX_STACK_LINE(475)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(475)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(475)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(475)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(475)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(475)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(475)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(475)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(475)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(475)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(475)
											if ((tmp48)){
												HX_STACK_LINE(475)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(475)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(475)
												if ((tmp49)){
													HX_STACK_LINE(475)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(475)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(475)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(475)
										_y1 = tmp40;
										HX_STACK_LINE(475)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(475)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(475)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(475)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(475)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(475)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(475)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(475)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(475)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(475)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(475)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(475)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(475)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(475)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(475)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(475)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										if ((tmp25)){
											HX_STACK_LINE(475)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(475)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(475)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(475)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(475)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(475)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(475)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(475)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(475)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(475)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(475)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(475)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(475)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(475)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(475)
											_x1 = tmp39;
											HX_STACK_LINE(475)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(475)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(475)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(475)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(475)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(475)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(475)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(475)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(475)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(475)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(475)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(475)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(475)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(475)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(475)
											_y1 = tmp53;
											HX_STACK_LINE(475)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(475)
											{
												HX_STACK_LINE(475)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(475)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(475)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(475)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(475)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(475)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(475)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(475)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(475)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(475)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(475)
												if ((tmp63)){
													HX_STACK_LINE(475)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(475)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(475)
													if ((tmp64)){
														HX_STACK_LINE(475)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(475)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(475)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(475)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(475)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(475)
											if ((tmp26)){
												HX_STACK_LINE(475)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(475)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(475)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(475)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(475)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(475)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(475)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(475)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(475)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(475)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(475)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(475)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(475)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(475)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(475)
												_x1 = tmp40;
												HX_STACK_LINE(475)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(475)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(475)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(475)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(475)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(475)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(475)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(475)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(475)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(475)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(475)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(475)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(475)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(475)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(475)
												_y1 = tmp54;
												HX_STACK_LINE(475)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(475)
												{
													HX_STACK_LINE(475)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(475)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(475)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(475)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(475)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(475)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(475)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(475)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(475)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(475)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(475)
													if ((tmp64)){
														HX_STACK_LINE(475)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(475)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(475)
														if ((tmp65)){
															HX_STACK_LINE(475)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(475)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(475)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(475)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(475)
						{
							HX_STACK_LINE(475)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(475)
							_this->ignore_listeners = true;
							HX_STACK_LINE(475)
							{
								HX_STACK_LINE(475)
								_this->x = _x1;
								HX_STACK_LINE(475)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(475)
								if ((tmp22)){
									HX_STACK_LINE(475)
									_this->x;
								}
								else{
									HX_STACK_LINE(475)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(475)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(475)
									if ((tmp23)){
										HX_STACK_LINE(475)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(475)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(475)
										tmp24 = false;
									}
									HX_STACK_LINE(475)
									if ((tmp24)){
										HX_STACK_LINE(475)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(475)
									_this->x;
								}
							}
							HX_STACK_LINE(475)
							{
								HX_STACK_LINE(475)
								_this->y = _y1;
								HX_STACK_LINE(475)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(475)
								if ((tmp22)){
									HX_STACK_LINE(475)
									_this->y;
								}
								else{
									HX_STACK_LINE(475)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(475)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(475)
									if ((tmp23)){
										HX_STACK_LINE(475)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(475)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(475)
										tmp24 = false;
									}
									HX_STACK_LINE(475)
									if ((tmp24)){
										HX_STACK_LINE(475)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(475)
									_this->y;
								}
							}
							HX_STACK_LINE(475)
							{
								HX_STACK_LINE(475)
								_this->z = _z1;
								HX_STACK_LINE(475)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(475)
								if ((tmp22)){
									HX_STACK_LINE(475)
									_this->z;
								}
								else{
									HX_STACK_LINE(475)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(475)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(475)
									if ((tmp23)){
										HX_STACK_LINE(475)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(475)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(475)
										tmp24 = false;
									}
									HX_STACK_LINE(475)
									if ((tmp24)){
										HX_STACK_LINE(475)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(475)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(475)
									_this->z;
								}
							}
							HX_STACK_LINE(475)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(475)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(475)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(475)
							if ((tmp22)){
								HX_STACK_LINE(475)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(475)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(475)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(475)
								tmp23 = false;
							}
							HX_STACK_LINE(475)
							if ((tmp23)){
								HX_STACK_LINE(475)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(475)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(475)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(475)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(475)
							if ((tmp24)){
								HX_STACK_LINE(475)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(475)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(475)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(475)
								tmp25 = false;
							}
							HX_STACK_LINE(475)
							if ((tmp25)){
								HX_STACK_LINE(475)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(475)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(475)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(475)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(475)
							if ((tmp26)){
								HX_STACK_LINE(475)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(475)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(475)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(475)
								tmp27 = false;
							}
							HX_STACK_LINE(475)
							if ((tmp27)){
								HX_STACK_LINE(475)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(475)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(475)
							_this;
						}
						HX_STACK_LINE(475)
						_this;
					}
				}
				HX_STACK_LINE(475)
				Dynamic tmp1 = this->listen_y_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(475)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(475)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(475)
				if ((tmp2)){
					HX_STACK_LINE(475)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(475)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(475)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(475)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(475)
					tmp3 = false;
				}
				HX_STACK_LINE(475)
				if ((tmp3)){
					HX_STACK_LINE(475)
					Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(475)
					this->listen_y(tmp4);
				}
				HX_STACK_LINE(475)
				this->y;
			}
		}
		HX_STACK_LINE(476)
		{
			HX_STACK_LINE(476)
			this->z = _z;
			HX_STACK_LINE(476)
			bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(476)
			if ((tmp)){
				HX_STACK_LINE(476)
				this->z;
			}
			else{
				HX_STACK_LINE(476)
				{
					HX_STACK_LINE(476)
					::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
					HX_STACK_LINE(476)
					bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
					HX_STACK_LINE(476)
					bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
					HX_STACK_LINE(476)
					bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(476)
					bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(476)
					if ((tmp4)){
						HX_STACK_LINE(476)
						tmp5 = this->ignore_euler;
					}
					else{
						HX_STACK_LINE(476)
						tmp5 = true;
					}
					HX_STACK_LINE(476)
					bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(476)
					bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
					HX_STACK_LINE(476)
					if ((tmp6)){
						HX_STACK_LINE(476)
						tmp7 = this->_construct;
					}
					else{
						HX_STACK_LINE(476)
						tmp7 = true;
					}
					HX_STACK_LINE(476)
					if ((tmp7)){
						HX_STACK_LINE(476)
						Dynamic();
					}
					else{
						HX_STACK_LINE(476)
						::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
						HX_STACK_LINE(476)
						::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(476)
						int order = (int)0;		HX_STACK_VAR(order,"order");
						HX_STACK_LINE(476)
						Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
						HX_STACK_LINE(476)
						Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
						HX_STACK_LINE(476)
						Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
						HX_STACK_LINE(476)
						Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
						HX_STACK_LINE(476)
						Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
						HX_STACK_LINE(476)
						Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
						HX_STACK_LINE(476)
						Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
						HX_STACK_LINE(476)
						Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
						HX_STACK_LINE(476)
						Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
						HX_STACK_LINE(476)
						Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
						HX_STACK_LINE(476)
						Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
						HX_STACK_LINE(476)
						Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
						HX_STACK_LINE(476)
						Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
						HX_STACK_LINE(476)
						Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
						HX_STACK_LINE(476)
						Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
						HX_STACK_LINE(476)
						Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
						HX_STACK_LINE(476)
						Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
						HX_STACK_LINE(476)
						Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
						HX_STACK_LINE(476)
						Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
						HX_STACK_LINE(476)
						bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(476)
						if ((tmp21)){
							HX_STACK_LINE(476)
							Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(476)
							Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(476)
							Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(476)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(476)
							Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(476)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(476)
							Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(476)
							Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(476)
							Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(476)
							Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(476)
							Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(476)
							Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(476)
							Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(476)
							Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(476)
							_x1 = tmp35;
							HX_STACK_LINE(476)
							Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(476)
							{
								HX_STACK_LINE(476)
								Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(476)
								Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(476)
								Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(476)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(476)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(476)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(476)
								Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(476)
								Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(476)
								Float value = tmp44;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(476)
								bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(476)
								if ((tmp45)){
									HX_STACK_LINE(476)
									tmp36 = (int)-1;
								}
								else{
									HX_STACK_LINE(476)
									bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(476)
									if ((tmp46)){
										HX_STACK_LINE(476)
										tmp36 = (int)1;
									}
									else{
										HX_STACK_LINE(476)
										tmp36 = value;
									}
								}
							}
							HX_STACK_LINE(476)
							Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(476)
							_y1 = tmp37;
							HX_STACK_LINE(476)
							Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(476)
							Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(476)
							Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(476)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(476)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(476)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(476)
							Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(476)
							Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(476)
							Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(476)
							Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(476)
							Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(476)
							Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(476)
							Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(476)
							Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(476)
							_z1 = tmp51;
						}
						else{
							HX_STACK_LINE(476)
							bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(476)
							if ((tmp22)){
								HX_STACK_LINE(476)
								Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(476)
								{
									HX_STACK_LINE(476)
									Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(476)
									Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(476)
									Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(476)
									Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(476)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(476)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(476)
									Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(476)
									Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(476)
									Float value = tmp31;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(476)
									bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(476)
									if ((tmp32)){
										HX_STACK_LINE(476)
										tmp23 = (int)-1;
									}
									else{
										HX_STACK_LINE(476)
										bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(476)
										if ((tmp33)){
											HX_STACK_LINE(476)
											tmp23 = (int)1;
										}
										else{
											HX_STACK_LINE(476)
											tmp23 = value;
										}
									}
								}
								HX_STACK_LINE(476)
								Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(476)
								_x1 = tmp24;
								HX_STACK_LINE(476)
								Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(476)
								Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(476)
								Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(476)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(476)
								Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(476)
								Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(476)
								Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(476)
								Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(476)
								Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(476)
								Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(476)
								Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(476)
								Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(476)
								Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(476)
								Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(476)
								_y1 = tmp38;
								HX_STACK_LINE(476)
								Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(476)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(476)
								Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(476)
								Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(476)
								Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(476)
								Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(476)
								Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(476)
								Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(476)
								Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(476)
								Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(476)
								Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(476)
								Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(476)
								Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(476)
								Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(476)
								_z1 = tmp52;
							}
							else{
								HX_STACK_LINE(476)
								bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
								HX_STACK_LINE(476)
								if ((tmp23)){
									HX_STACK_LINE(476)
									Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(476)
									{
										HX_STACK_LINE(476)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(476)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(476)
										Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(476)
										Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(476)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(476)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(476)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(476)
										Float value = tmp32;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(476)
										bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(476)
										if ((tmp33)){
											HX_STACK_LINE(476)
											tmp24 = (int)-1;
										}
										else{
											HX_STACK_LINE(476)
											bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(476)
											if ((tmp34)){
												HX_STACK_LINE(476)
												tmp24 = (int)1;
											}
											else{
												HX_STACK_LINE(476)
												tmp24 = value;
											}
										}
									}
									HX_STACK_LINE(476)
									Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(476)
									_x1 = tmp25;
									HX_STACK_LINE(476)
									Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(476)
									Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(476)
									Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(476)
									Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(476)
									Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(476)
									Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(476)
									Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(476)
									Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(476)
									Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(476)
									Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(476)
									Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(476)
									Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(476)
									Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(476)
									Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(476)
									_y1 = tmp39;
									HX_STACK_LINE(476)
									Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(476)
									Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(476)
									Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(476)
									Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(476)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(476)
									Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(476)
									Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(476)
									Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(476)
									Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(476)
									Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(476)
									Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(476)
									Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(476)
									Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(476)
									Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(476)
									_z1 = tmp53;
								}
								else{
									HX_STACK_LINE(476)
									bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(476)
									if ((tmp24)){
										HX_STACK_LINE(476)
										Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(476)
										Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(476)
										Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(476)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(476)
										Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(476)
										Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(476)
										Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(476)
										Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(476)
										Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(476)
										Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(476)
										Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(476)
										Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(476)
										Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(476)
										_x1 = tmp38;
										HX_STACK_LINE(476)
										Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(476)
										{
											HX_STACK_LINE(476)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(476)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(476)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(476)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(476)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(476)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(476)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(476)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(476)
											Float value = tmp47;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(476)
											bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(476)
											if ((tmp48)){
												HX_STACK_LINE(476)
												tmp39 = (int)-1;
											}
											else{
												HX_STACK_LINE(476)
												bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(476)
												if ((tmp49)){
													HX_STACK_LINE(476)
													tmp39 = (int)1;
												}
												else{
													HX_STACK_LINE(476)
													tmp39 = value;
												}
											}
										}
										HX_STACK_LINE(476)
										Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(476)
										_y1 = tmp40;
										HX_STACK_LINE(476)
										Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(476)
										Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(476)
										Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(476)
										Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(476)
										Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(476)
										Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(476)
										Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(476)
										Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(476)
										Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(476)
										Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(476)
										Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(476)
										Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(476)
										Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(476)
										Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(476)
										_z1 = tmp54;
									}
									else{
										HX_STACK_LINE(476)
										bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										if ((tmp25)){
											HX_STACK_LINE(476)
											Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(476)
											Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
											HX_STACK_LINE(476)
											Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
											HX_STACK_LINE(476)
											Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
											HX_STACK_LINE(476)
											Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
											HX_STACK_LINE(476)
											Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
											HX_STACK_LINE(476)
											Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
											HX_STACK_LINE(476)
											Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
											HX_STACK_LINE(476)
											Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
											HX_STACK_LINE(476)
											Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
											HX_STACK_LINE(476)
											Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
											HX_STACK_LINE(476)
											Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
											HX_STACK_LINE(476)
											Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
											HX_STACK_LINE(476)
											Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
											HX_STACK_LINE(476)
											_x1 = tmp39;
											HX_STACK_LINE(476)
											Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
											HX_STACK_LINE(476)
											Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
											HX_STACK_LINE(476)
											Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
											HX_STACK_LINE(476)
											Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
											HX_STACK_LINE(476)
											Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
											HX_STACK_LINE(476)
											Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
											HX_STACK_LINE(476)
											Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
											HX_STACK_LINE(476)
											Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
											HX_STACK_LINE(476)
											Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
											HX_STACK_LINE(476)
											Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
											HX_STACK_LINE(476)
											Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
											HX_STACK_LINE(476)
											Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
											HX_STACK_LINE(476)
											Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
											HX_STACK_LINE(476)
											Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
											HX_STACK_LINE(476)
											_y1 = tmp53;
											HX_STACK_LINE(476)
											Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
											HX_STACK_LINE(476)
											{
												HX_STACK_LINE(476)
												Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(476)
												Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(476)
												Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
												HX_STACK_LINE(476)
												Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
												HX_STACK_LINE(476)
												Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
												HX_STACK_LINE(476)
												Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
												HX_STACK_LINE(476)
												Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
												HX_STACK_LINE(476)
												Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
												HX_STACK_LINE(476)
												Float value = tmp62;		HX_STACK_VAR(value,"value");
												HX_STACK_LINE(476)
												bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
												HX_STACK_LINE(476)
												if ((tmp63)){
													HX_STACK_LINE(476)
													tmp54 = (int)-1;
												}
												else{
													HX_STACK_LINE(476)
													bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(476)
													if ((tmp64)){
														HX_STACK_LINE(476)
														tmp54 = (int)1;
													}
													else{
														HX_STACK_LINE(476)
														tmp54 = value;
													}
												}
											}
											HX_STACK_LINE(476)
											Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(476)
											_z1 = tmp55;
										}
										else{
											HX_STACK_LINE(476)
											bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
											HX_STACK_LINE(476)
											if ((tmp26)){
												HX_STACK_LINE(476)
												Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
												HX_STACK_LINE(476)
												Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
												HX_STACK_LINE(476)
												Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
												HX_STACK_LINE(476)
												Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
												HX_STACK_LINE(476)
												Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
												HX_STACK_LINE(476)
												Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
												HX_STACK_LINE(476)
												Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
												HX_STACK_LINE(476)
												Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
												HX_STACK_LINE(476)
												Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
												HX_STACK_LINE(476)
												Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
												HX_STACK_LINE(476)
												Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
												HX_STACK_LINE(476)
												Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
												HX_STACK_LINE(476)
												Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
												HX_STACK_LINE(476)
												Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
												HX_STACK_LINE(476)
												_x1 = tmp40;
												HX_STACK_LINE(476)
												Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
												HX_STACK_LINE(476)
												Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
												HX_STACK_LINE(476)
												Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
												HX_STACK_LINE(476)
												Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
												HX_STACK_LINE(476)
												Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
												HX_STACK_LINE(476)
												Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
												HX_STACK_LINE(476)
												Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
												HX_STACK_LINE(476)
												Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
												HX_STACK_LINE(476)
												Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
												HX_STACK_LINE(476)
												Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
												HX_STACK_LINE(476)
												Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
												HX_STACK_LINE(476)
												Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
												HX_STACK_LINE(476)
												Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
												HX_STACK_LINE(476)
												Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
												HX_STACK_LINE(476)
												_y1 = tmp54;
												HX_STACK_LINE(476)
												Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
												HX_STACK_LINE(476)
												{
													HX_STACK_LINE(476)
													Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
													HX_STACK_LINE(476)
													Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
													HX_STACK_LINE(476)
													Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
													HX_STACK_LINE(476)
													Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
													HX_STACK_LINE(476)
													Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
													HX_STACK_LINE(476)
													Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
													HX_STACK_LINE(476)
													Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
													HX_STACK_LINE(476)
													Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
													HX_STACK_LINE(476)
													Float value = tmp63;		HX_STACK_VAR(value,"value");
													HX_STACK_LINE(476)
													bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
													HX_STACK_LINE(476)
													if ((tmp64)){
														HX_STACK_LINE(476)
														tmp55 = (int)-1;
													}
													else{
														HX_STACK_LINE(476)
														bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
														HX_STACK_LINE(476)
														if ((tmp65)){
															HX_STACK_LINE(476)
															tmp55 = (int)1;
														}
														else{
															HX_STACK_LINE(476)
															tmp55 = value;
														}
													}
												}
												HX_STACK_LINE(476)
												Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
												HX_STACK_LINE(476)
												_z1 = tmp56;
											}
										}
									}
								}
							}
						}
						HX_STACK_LINE(476)
						{
							HX_STACK_LINE(476)
							bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
							HX_STACK_LINE(476)
							_this->ignore_listeners = true;
							HX_STACK_LINE(476)
							{
								HX_STACK_LINE(476)
								_this->x = _x1;
								HX_STACK_LINE(476)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(476)
								if ((tmp22)){
									HX_STACK_LINE(476)
									_this->x;
								}
								else{
									HX_STACK_LINE(476)
									bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(476)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(476)
									if ((tmp23)){
										HX_STACK_LINE(476)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(476)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(476)
										tmp24 = false;
									}
									HX_STACK_LINE(476)
									if ((tmp24)){
										HX_STACK_LINE(476)
										Float tmp25 = _x1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										_this->listen_x(tmp25);
									}
									HX_STACK_LINE(476)
									_this->x;
								}
							}
							HX_STACK_LINE(476)
							{
								HX_STACK_LINE(476)
								_this->y = _y1;
								HX_STACK_LINE(476)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(476)
								if ((tmp22)){
									HX_STACK_LINE(476)
									_this->y;
								}
								else{
									HX_STACK_LINE(476)
									bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(476)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(476)
									if ((tmp23)){
										HX_STACK_LINE(476)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(476)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(476)
										tmp24 = false;
									}
									HX_STACK_LINE(476)
									if ((tmp24)){
										HX_STACK_LINE(476)
										Float tmp25 = _y1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										_this->listen_y(tmp25);
									}
									HX_STACK_LINE(476)
									_this->y;
								}
							}
							HX_STACK_LINE(476)
							{
								HX_STACK_LINE(476)
								_this->z = _z1;
								HX_STACK_LINE(476)
								bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
								HX_STACK_LINE(476)
								if ((tmp22)){
									HX_STACK_LINE(476)
									_this->z;
								}
								else{
									HX_STACK_LINE(476)
									bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
									HX_STACK_LINE(476)
									bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
									HX_STACK_LINE(476)
									if ((tmp23)){
										HX_STACK_LINE(476)
										bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(476)
										tmp24 = !(tmp26);
									}
									else{
										HX_STACK_LINE(476)
										tmp24 = false;
									}
									HX_STACK_LINE(476)
									if ((tmp24)){
										HX_STACK_LINE(476)
										Float tmp25 = _z1;		HX_STACK_VAR(tmp25,"tmp25");
										HX_STACK_LINE(476)
										_this->listen_z(tmp25);
									}
									HX_STACK_LINE(476)
									_this->z;
								}
							}
							HX_STACK_LINE(476)
							_this->ignore_listeners = prev;
							HX_STACK_LINE(476)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(476)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(476)
							if ((tmp22)){
								HX_STACK_LINE(476)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(476)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(476)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(476)
								tmp23 = false;
							}
							HX_STACK_LINE(476)
							if ((tmp23)){
								HX_STACK_LINE(476)
								Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(476)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(476)
							bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(476)
							bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(476)
							if ((tmp24)){
								HX_STACK_LINE(476)
								bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(476)
								bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(476)
								tmp25 = !(tmp27);
							}
							else{
								HX_STACK_LINE(476)
								tmp25 = false;
							}
							HX_STACK_LINE(476)
							if ((tmp25)){
								HX_STACK_LINE(476)
								Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(476)
								_this->listen_y(tmp26);
							}
							HX_STACK_LINE(476)
							bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(476)
							bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(476)
							if ((tmp26)){
								HX_STACK_LINE(476)
								bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(476)
								bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(476)
								tmp27 = !(tmp29);
							}
							else{
								HX_STACK_LINE(476)
								tmp27 = false;
							}
							HX_STACK_LINE(476)
							if ((tmp27)){
								HX_STACK_LINE(476)
								Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(476)
								_this->listen_z(tmp28);
							}
							HX_STACK_LINE(476)
							_this;
						}
						HX_STACK_LINE(476)
						_this;
					}
				}
				HX_STACK_LINE(476)
				Dynamic tmp1 = this->listen_z_dyn();		HX_STACK_VAR(tmp1,"tmp1");
				HX_STACK_LINE(476)
				bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
				HX_STACK_LINE(476)
				bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
				HX_STACK_LINE(476)
				if ((tmp2)){
					HX_STACK_LINE(476)
					bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(476)
					bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
					HX_STACK_LINE(476)
					bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
					HX_STACK_LINE(476)
					tmp3 = !(tmp6);
				}
				else{
					HX_STACK_LINE(476)
					tmp3 = false;
				}
				HX_STACK_LINE(476)
				if ((tmp3)){
					HX_STACK_LINE(476)
					Float tmp4 = this->z;		HX_STACK_VAR(tmp4,"tmp4");
					HX_STACK_LINE(476)
					this->listen_z(tmp4);
				}
				HX_STACK_LINE(476)
				this->z;
			}
		}
		HX_STACK_LINE(478)
		this->ignore_euler = false;
		HX_STACK_LINE(480)
		{
			HX_STACK_LINE(480)
			::phoenix::Vector tmp = this->euler;		HX_STACK_VAR(tmp,"tmp");
			HX_STACK_LINE(480)
			bool tmp1 = (tmp == null());		HX_STACK_VAR(tmp1,"tmp1");
			HX_STACK_LINE(480)
			bool tmp2 = !(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
			HX_STACK_LINE(480)
			bool tmp3 = tmp2;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(480)
			bool tmp4;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(480)
			if ((tmp3)){
				HX_STACK_LINE(480)
				tmp4 = this->ignore_euler;
			}
			else{
				HX_STACK_LINE(480)
				tmp4 = true;
			}
			HX_STACK_LINE(480)
			bool tmp5 = !(tmp4);		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(480)
			bool tmp6;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(480)
			if ((tmp5)){
				HX_STACK_LINE(480)
				tmp6 = this->_construct;
			}
			else{
				HX_STACK_LINE(480)
				tmp6 = true;
			}
			HX_STACK_LINE(480)
			if ((tmp6)){
				HX_STACK_LINE(480)
				Dynamic();
			}
			else{
				HX_STACK_LINE(480)
				::phoenix::Vector tmp7 = this->euler;		HX_STACK_VAR(tmp7,"tmp7");
				HX_STACK_LINE(480)
				::phoenix::Vector _this = tmp7;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(480)
				int order = (int)0;		HX_STACK_VAR(order,"order");
				HX_STACK_LINE(480)
				Float tmp8 = this->x;		HX_STACK_VAR(tmp8,"tmp8");
				HX_STACK_LINE(480)
				Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
				HX_STACK_LINE(480)
				Float tmp10 = (tmp8 * tmp9);		HX_STACK_VAR(tmp10,"tmp10");
				HX_STACK_LINE(480)
				Float sqx = tmp10;		HX_STACK_VAR(sqx,"sqx");
				HX_STACK_LINE(480)
				Float tmp11 = this->y;		HX_STACK_VAR(tmp11,"tmp11");
				HX_STACK_LINE(480)
				Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
				HX_STACK_LINE(480)
				Float tmp13 = (tmp11 * tmp12);		HX_STACK_VAR(tmp13,"tmp13");
				HX_STACK_LINE(480)
				Float sqy = tmp13;		HX_STACK_VAR(sqy,"sqy");
				HX_STACK_LINE(480)
				Float tmp14 = this->z;		HX_STACK_VAR(tmp14,"tmp14");
				HX_STACK_LINE(480)
				Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
				HX_STACK_LINE(480)
				Float tmp16 = (tmp14 * tmp15);		HX_STACK_VAR(tmp16,"tmp16");
				HX_STACK_LINE(480)
				Float sqz = tmp16;		HX_STACK_VAR(sqz,"sqz");
				HX_STACK_LINE(480)
				Float tmp17 = this->w;		HX_STACK_VAR(tmp17,"tmp17");
				HX_STACK_LINE(480)
				Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
				HX_STACK_LINE(480)
				Float tmp19 = (tmp17 * tmp18);		HX_STACK_VAR(tmp19,"tmp19");
				HX_STACK_LINE(480)
				Float sqw = tmp19;		HX_STACK_VAR(sqw,"sqw");
				HX_STACK_LINE(480)
				Float _x1 = _this->x;		HX_STACK_VAR(_x1,"_x1");
				HX_STACK_LINE(480)
				Float _y1 = _this->y;		HX_STACK_VAR(_y1,"_y1");
				HX_STACK_LINE(480)
				Float _z1 = _this->z;		HX_STACK_VAR(_z1,"_z1");
				HX_STACK_LINE(480)
				bool tmp20 = (order == (int)0);		HX_STACK_VAR(tmp20,"tmp20");
				HX_STACK_LINE(480)
				if ((tmp20)){
					HX_STACK_LINE(480)
					Float tmp21 = this->x;		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(480)
					Float tmp22 = this->w;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(480)
					Float tmp23 = (tmp21 * tmp22);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(480)
					Float tmp24 = this->y;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(480)
					Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(480)
					Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(480)
					Float tmp27 = (tmp23 - tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(480)
					Float tmp28 = ((int)2 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(480)
					Float tmp29 = (sqw - sqx);		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(480)
					Float tmp30 = sqy;		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(480)
					Float tmp31 = (tmp29 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(480)
					Float tmp32 = sqz;		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(480)
					Float tmp33 = (tmp31 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(480)
					Float tmp34 = ::Math_obj::atan2(tmp28,tmp33);		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(480)
					_x1 = tmp34;
					HX_STACK_LINE(480)
					Float tmp35;		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(480)
					{
						HX_STACK_LINE(480)
						Float tmp36 = this->x;		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(480)
						Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(480)
						Float tmp38 = (tmp36 * tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(480)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(480)
						Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(480)
						Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(480)
						Float tmp42 = (tmp38 + tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(480)
						Float tmp43 = ((int)2 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(480)
						Float value = tmp43;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(480)
						bool tmp44 = (value < (int)-1);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(480)
						if ((tmp44)){
							HX_STACK_LINE(480)
							tmp35 = (int)-1;
						}
						else{
							HX_STACK_LINE(480)
							bool tmp45 = (value > (int)1);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(480)
							if ((tmp45)){
								HX_STACK_LINE(480)
								tmp35 = (int)1;
							}
							else{
								HX_STACK_LINE(480)
								tmp35 = value;
							}
						}
					}
					HX_STACK_LINE(480)
					Float tmp36 = ::Math_obj::asin(tmp35);		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(480)
					_y1 = tmp36;
					HX_STACK_LINE(480)
					Float tmp37 = this->z;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(480)
					Float tmp38 = this->w;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(480)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(480)
					Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(480)
					Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(480)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(480)
					Float tmp43 = (tmp39 - tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(480)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(480)
					Float tmp45 = (sqw + sqx);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(480)
					Float tmp46 = sqy;		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(480)
					Float tmp47 = (tmp45 - tmp46);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(480)
					Float tmp48 = sqz;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(480)
					Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(480)
					Float tmp50 = ::Math_obj::atan2(tmp44,tmp49);		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(480)
					_z1 = tmp50;
				}
				else{
					HX_STACK_LINE(480)
					bool tmp21 = (order == (int)1);		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(480)
					if ((tmp21)){
						HX_STACK_LINE(480)
						Float tmp22;		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							Float tmp23 = this->x;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(480)
							Float tmp24 = this->w;		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(480)
							Float tmp25 = (tmp23 * tmp24);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(480)
							Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(480)
							Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(480)
							Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(480)
							Float tmp29 = (tmp25 - tmp28);		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(480)
							Float tmp30 = ((int)2 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(480)
							Float value = tmp30;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(480)
							bool tmp31 = (value < (int)-1);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(480)
							if ((tmp31)){
								HX_STACK_LINE(480)
								tmp22 = (int)-1;
							}
							else{
								HX_STACK_LINE(480)
								bool tmp32 = (value > (int)1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(480)
								if ((tmp32)){
									HX_STACK_LINE(480)
									tmp22 = (int)1;
								}
								else{
									HX_STACK_LINE(480)
									tmp22 = value;
								}
							}
						}
						HX_STACK_LINE(480)
						Float tmp23 = ::Math_obj::asin(tmp22);		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(480)
						_x1 = tmp23;
						HX_STACK_LINE(480)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(480)
						Float tmp25 = this->z;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(480)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(480)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(480)
						Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(480)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(480)
						Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(480)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(480)
						Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(480)
						Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(480)
						Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(480)
						Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(480)
						Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(480)
						Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(480)
						_y1 = tmp37;
						HX_STACK_LINE(480)
						Float tmp38 = this->x;		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(480)
						Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(480)
						Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(480)
						Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(480)
						Float tmp42 = this->w;		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(480)
						Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(480)
						Float tmp44 = (tmp40 + tmp43);		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(480)
						Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(480)
						Float tmp46 = (sqw - sqx);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(480)
						Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(480)
						Float tmp48 = (tmp46 + tmp47);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(480)
						Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(480)
						Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(480)
						Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(480)
						_z1 = tmp51;
					}
					else{
						HX_STACK_LINE(480)
						bool tmp22 = (order == (int)2);		HX_STACK_VAR(tmp22,"tmp22");
						HX_STACK_LINE(480)
						if ((tmp22)){
							HX_STACK_LINE(480)
							Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(480)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(480)
								Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(480)
								Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(480)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(480)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(480)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(480)
								Float value = tmp31;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(480)
								bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(480)
								if ((tmp32)){
									HX_STACK_LINE(480)
									tmp23 = (int)-1;
								}
								else{
									HX_STACK_LINE(480)
									bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(480)
									if ((tmp33)){
										HX_STACK_LINE(480)
										tmp23 = (int)1;
									}
									else{
										HX_STACK_LINE(480)
										tmp23 = value;
									}
								}
							}
							HX_STACK_LINE(480)
							Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
							HX_STACK_LINE(480)
							_x1 = tmp24;
							HX_STACK_LINE(480)
							Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(480)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(480)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(480)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(480)
							Float tmp29 = this->x;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(480)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(480)
							Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(480)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(480)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(480)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(480)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(480)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(480)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(480)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(480)
							_y1 = tmp38;
							HX_STACK_LINE(480)
							Float tmp39 = this->z;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(480)
							Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(480)
							Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(480)
							Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(480)
							Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(480)
							Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(480)
							Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(480)
							Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(480)
							Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(480)
							Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(480)
							Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(480)
							Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(480)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(480)
							Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(480)
							_z1 = tmp52;
						}
						else{
							HX_STACK_LINE(480)
							bool tmp23 = (order == (int)3);		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(480)
							if ((tmp23)){
								HX_STACK_LINE(480)
								Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(480)
								Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(480)
								Float tmp27 = this->z;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(480)
								Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(480)
								Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(480)
								Float tmp30 = (tmp26 + tmp29);		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(480)
								Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(480)
								Float tmp32 = (sqw - sqx);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(480)
								Float tmp33 = sqy;		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(480)
								Float tmp34 = (tmp32 - tmp33);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(480)
								Float tmp35 = sqz;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(480)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(480)
								Float tmp37 = ::Math_obj::atan2(tmp31,tmp36);		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(480)
								_x1 = tmp37;
								HX_STACK_LINE(480)
								Float tmp38;		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(480)
								{
									HX_STACK_LINE(480)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(480)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(480)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(480)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(480)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(480)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(480)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(480)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(480)
									Float value = tmp46;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(480)
									bool tmp47 = (value < (int)-1);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(480)
									if ((tmp47)){
										HX_STACK_LINE(480)
										tmp38 = (int)-1;
									}
									else{
										HX_STACK_LINE(480)
										bool tmp48 = (value > (int)1);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(480)
										if ((tmp48)){
											HX_STACK_LINE(480)
											tmp38 = (int)1;
										}
										else{
											HX_STACK_LINE(480)
											tmp38 = value;
										}
									}
								}
								HX_STACK_LINE(480)
								Float tmp39 = ::Math_obj::asin(tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(480)
								_y1 = tmp39;
								HX_STACK_LINE(480)
								Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(480)
								Float tmp41 = this->y;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(480)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(480)
								Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(480)
								Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(480)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(480)
								Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(480)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(480)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(480)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(480)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(480)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(480)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(480)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(480)
								_z1 = tmp53;
							}
							else{
								HX_STACK_LINE(480)
								bool tmp24 = (order == (int)4);		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								if ((tmp24)){
									HX_STACK_LINE(480)
									Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(480)
									Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
									HX_STACK_LINE(480)
									Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(480)
									Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(480)
									Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(480)
									Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(480)
									Float tmp31 = (tmp27 - tmp30);		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(480)
									Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(480)
									Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(480)
									Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(480)
									Float tmp35 = (tmp33 + tmp34);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(480)
									Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(480)
									Float tmp37 = (tmp35 - tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(480)
									Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(480)
									_x1 = tmp38;
									HX_STACK_LINE(480)
									Float tmp39 = this->y;		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(480)
									Float tmp40 = this->w;		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(480)
									Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(480)
									Float tmp42 = this->x;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(480)
									Float tmp43 = this->z;		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(480)
									Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(480)
									Float tmp45 = (tmp41 - tmp44);		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(480)
									Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(480)
									Float tmp47 = (sqw + sqx);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(480)
									Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(480)
									Float tmp49 = (tmp47 - tmp48);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(480)
									Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(480)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(480)
									Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(480)
									_y1 = tmp52;
									HX_STACK_LINE(480)
									Float tmp53;		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										Float tmp54 = this->x;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(480)
										Float tmp55 = this->y;		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(480)
										Float tmp56 = (tmp54 * tmp55);		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(480)
										Float tmp57 = this->z;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(480)
										Float tmp58 = this->w;		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(480)
										Float tmp59 = (tmp57 * tmp58);		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(480)
										Float tmp60 = (tmp56 + tmp59);		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(480)
										Float tmp61 = ((int)2 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(480)
										Float value = tmp61;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(480)
										bool tmp62 = (value < (int)-1);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(480)
										if ((tmp62)){
											HX_STACK_LINE(480)
											tmp53 = (int)-1;
										}
										else{
											HX_STACK_LINE(480)
											bool tmp63 = (value > (int)1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(480)
											if ((tmp63)){
												HX_STACK_LINE(480)
												tmp53 = (int)1;
											}
											else{
												HX_STACK_LINE(480)
												tmp53 = value;
											}
										}
									}
									HX_STACK_LINE(480)
									Float tmp54 = ::Math_obj::asin(tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(480)
									_z1 = tmp54;
								}
								else{
									HX_STACK_LINE(480)
									bool tmp25 = (order == (int)5);		HX_STACK_VAR(tmp25,"tmp25");
									HX_STACK_LINE(480)
									if ((tmp25)){
										HX_STACK_LINE(480)
										Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
										HX_STACK_LINE(480)
										Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
										HX_STACK_LINE(480)
										Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
										HX_STACK_LINE(480)
										Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
										HX_STACK_LINE(480)
										Float tmp30 = this->z;		HX_STACK_VAR(tmp30,"tmp30");
										HX_STACK_LINE(480)
										Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
										HX_STACK_LINE(480)
										Float tmp32 = (tmp28 + tmp31);		HX_STACK_VAR(tmp32,"tmp32");
										HX_STACK_LINE(480)
										Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
										HX_STACK_LINE(480)
										Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
										HX_STACK_LINE(480)
										Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
										HX_STACK_LINE(480)
										Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
										HX_STACK_LINE(480)
										Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
										HX_STACK_LINE(480)
										Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
										HX_STACK_LINE(480)
										Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
										HX_STACK_LINE(480)
										_x1 = tmp39;
										HX_STACK_LINE(480)
										Float tmp40 = this->x;		HX_STACK_VAR(tmp40,"tmp40");
										HX_STACK_LINE(480)
										Float tmp41 = this->z;		HX_STACK_VAR(tmp41,"tmp41");
										HX_STACK_LINE(480)
										Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
										HX_STACK_LINE(480)
										Float tmp43 = this->y;		HX_STACK_VAR(tmp43,"tmp43");
										HX_STACK_LINE(480)
										Float tmp44 = this->w;		HX_STACK_VAR(tmp44,"tmp44");
										HX_STACK_LINE(480)
										Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
										HX_STACK_LINE(480)
										Float tmp46 = (tmp42 + tmp45);		HX_STACK_VAR(tmp46,"tmp46");
										HX_STACK_LINE(480)
										Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
										HX_STACK_LINE(480)
										Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
										HX_STACK_LINE(480)
										Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
										HX_STACK_LINE(480)
										Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
										HX_STACK_LINE(480)
										Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
										HX_STACK_LINE(480)
										Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
										HX_STACK_LINE(480)
										Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
										HX_STACK_LINE(480)
										_y1 = tmp53;
										HX_STACK_LINE(480)
										Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
										HX_STACK_LINE(480)
										{
											HX_STACK_LINE(480)
											Float tmp55 = this->z;		HX_STACK_VAR(tmp55,"tmp55");
											HX_STACK_LINE(480)
											Float tmp56 = this->w;		HX_STACK_VAR(tmp56,"tmp56");
											HX_STACK_LINE(480)
											Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
											HX_STACK_LINE(480)
											Float tmp58 = this->x;		HX_STACK_VAR(tmp58,"tmp58");
											HX_STACK_LINE(480)
											Float tmp59 = this->y;		HX_STACK_VAR(tmp59,"tmp59");
											HX_STACK_LINE(480)
											Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
											HX_STACK_LINE(480)
											Float tmp61 = (tmp57 - tmp60);		HX_STACK_VAR(tmp61,"tmp61");
											HX_STACK_LINE(480)
											Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
											HX_STACK_LINE(480)
											Float value = tmp62;		HX_STACK_VAR(value,"value");
											HX_STACK_LINE(480)
											bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
											HX_STACK_LINE(480)
											if ((tmp63)){
												HX_STACK_LINE(480)
												tmp54 = (int)-1;
											}
											else{
												HX_STACK_LINE(480)
												bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
												HX_STACK_LINE(480)
												if ((tmp64)){
													HX_STACK_LINE(480)
													tmp54 = (int)1;
												}
												else{
													HX_STACK_LINE(480)
													tmp54 = value;
												}
											}
										}
										HX_STACK_LINE(480)
										Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
										HX_STACK_LINE(480)
										_z1 = tmp55;
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(480)
				{
					HX_STACK_LINE(480)
					bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
					HX_STACK_LINE(480)
					_this->ignore_listeners = true;
					HX_STACK_LINE(480)
					{
						HX_STACK_LINE(480)
						_this->x = _x1;
						HX_STACK_LINE(480)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(480)
						if ((tmp21)){
							HX_STACK_LINE(480)
							_this->x;
						}
						else{
							HX_STACK_LINE(480)
							bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(480)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(480)
							if ((tmp22)){
								HX_STACK_LINE(480)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(480)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(480)
								tmp23 = false;
							}
							HX_STACK_LINE(480)
							if ((tmp23)){
								HX_STACK_LINE(480)
								Float tmp24 = _x1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								_this->listen_x(tmp24);
							}
							HX_STACK_LINE(480)
							_this->x;
						}
					}
					HX_STACK_LINE(480)
					{
						HX_STACK_LINE(480)
						_this->y = _y1;
						HX_STACK_LINE(480)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(480)
						if ((tmp21)){
							HX_STACK_LINE(480)
							_this->y;
						}
						else{
							HX_STACK_LINE(480)
							bool tmp22 = (_this->listen_y != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(480)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(480)
							if ((tmp22)){
								HX_STACK_LINE(480)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(480)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(480)
								tmp23 = false;
							}
							HX_STACK_LINE(480)
							if ((tmp23)){
								HX_STACK_LINE(480)
								Float tmp24 = _y1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								_this->listen_y(tmp24);
							}
							HX_STACK_LINE(480)
							_this->y;
						}
					}
					HX_STACK_LINE(480)
					{
						HX_STACK_LINE(480)
						_this->z = _z1;
						HX_STACK_LINE(480)
						bool tmp21 = _this->_construct;		HX_STACK_VAR(tmp21,"tmp21");
						HX_STACK_LINE(480)
						if ((tmp21)){
							HX_STACK_LINE(480)
							_this->z;
						}
						else{
							HX_STACK_LINE(480)
							bool tmp22 = (_this->listen_z != null());		HX_STACK_VAR(tmp22,"tmp22");
							HX_STACK_LINE(480)
							bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
							HX_STACK_LINE(480)
							if ((tmp22)){
								HX_STACK_LINE(480)
								bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
								HX_STACK_LINE(480)
								tmp23 = !(tmp25);
							}
							else{
								HX_STACK_LINE(480)
								tmp23 = false;
							}
							HX_STACK_LINE(480)
							if ((tmp23)){
								HX_STACK_LINE(480)
								Float tmp24 = _z1;		HX_STACK_VAR(tmp24,"tmp24");
								HX_STACK_LINE(480)
								_this->listen_z(tmp24);
							}
							HX_STACK_LINE(480)
							_this->z;
						}
					}
					HX_STACK_LINE(480)
					_this->ignore_listeners = prev;
					HX_STACK_LINE(480)
					bool tmp21 = (_this->listen_x != null());		HX_STACK_VAR(tmp21,"tmp21");
					HX_STACK_LINE(480)
					bool tmp22;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(480)
					if ((tmp21)){
						HX_STACK_LINE(480)
						bool tmp23 = _this->ignore_listeners;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(480)
						bool tmp24 = tmp23;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(480)
						tmp22 = !(tmp24);
					}
					else{
						HX_STACK_LINE(480)
						tmp22 = false;
					}
					HX_STACK_LINE(480)
					if ((tmp22)){
						HX_STACK_LINE(480)
						Float tmp23 = _this->x;		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(480)
						_this->listen_x(tmp23);
					}
					HX_STACK_LINE(480)
					bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(480)
					bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(480)
					if ((tmp23)){
						HX_STACK_LINE(480)
						bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(480)
						bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(480)
						tmp24 = !(tmp26);
					}
					else{
						HX_STACK_LINE(480)
						tmp24 = false;
					}
					HX_STACK_LINE(480)
					if ((tmp24)){
						HX_STACK_LINE(480)
						Float tmp25 = _this->y;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(480)
						_this->listen_y(tmp25);
					}
					HX_STACK_LINE(480)
					bool tmp25 = (_this->listen_z != null());		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(480)
					bool tmp26;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(480)
					if ((tmp25)){
						HX_STACK_LINE(480)
						bool tmp27 = _this->ignore_listeners;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(480)
						bool tmp28 = tmp27;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(480)
						tmp26 = !(tmp28);
					}
					else{
						HX_STACK_LINE(480)
						tmp26 = false;
					}
					HX_STACK_LINE(480)
					if ((tmp26)){
						HX_STACK_LINE(480)
						Float tmp27 = _this->z;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(480)
						_this->listen_z(tmp27);
					}
					HX_STACK_LINE(480)
					_this;
				}
				HX_STACK_LINE(480)
				_this;
			}
		}
		HX_STACK_LINE(482)
		Dynamic tmp = this->listen_x_dyn();		HX_STACK_VAR(tmp,"tmp");
		HX_STACK_LINE(482)
		bool tmp1 = (tmp != null());		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(482)
		bool tmp2;		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(482)
		if ((tmp1)){
			HX_STACK_LINE(482)
			bool tmp3 = this->ignore_listeners;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(482)
			bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
			HX_STACK_LINE(482)
			bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
			HX_STACK_LINE(482)
			tmp2 = !(tmp5);
		}
		else{
			HX_STACK_LINE(482)
			tmp2 = false;
		}
		HX_STACK_LINE(482)
		if ((tmp2)){
			HX_STACK_LINE(482)
			Float tmp3 = this->x;		HX_STACK_VAR(tmp3,"tmp3");
			HX_STACK_LINE(482)
			this->listen_x(tmp3);
		}
		HX_STACK_LINE(483)
		Dynamic tmp3 = this->listen_y_dyn();		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(483)
		bool tmp4 = (tmp3 != null());		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(483)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(483)
		if ((tmp4)){
			HX_STACK_LINE(483)
			bool tmp6 = this->ignore_listeners;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(483)
			bool tmp7 = tmp6;		HX_STACK_VAR(tmp7,"tmp7");
			HX_STACK_LINE(483)
			bool tmp8 = tmp7;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(483)
			tmp5 = !(tmp8);
		}
		else{
			HX_STACK_LINE(483)
			tmp5 = false;
		}
		HX_STACK_LINE(483)
		if ((tmp5)){
			HX_STACK_LINE(483)
			Float tmp6 = this->y;		HX_STACK_VAR(tmp6,"tmp6");
			HX_STACK_LINE(483)
			this->listen_y(tmp6);
		}
		HX_STACK_LINE(484)
		Dynamic tmp6 = this->listen_z_dyn();		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(484)
		bool tmp7 = (tmp6 != null());		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(484)
		bool tmp8;		HX_STACK_VAR(tmp8,"tmp8");
		HX_STACK_LINE(484)
		if ((tmp7)){
			HX_STACK_LINE(484)
			bool tmp9 = this->ignore_listeners;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(484)
			bool tmp10 = tmp9;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(484)
			bool tmp11 = tmp10;		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(484)
			tmp8 = !(tmp11);
		}
		else{
			HX_STACK_LINE(484)
			tmp8 = false;
		}
		HX_STACK_LINE(484)
		if ((tmp8)){
			HX_STACK_LINE(484)
			Float tmp9 = this->z;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(484)
			this->listen_z(tmp9);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC3(Quaternion_obj,set_xyz,(void))

Float Quaternion_obj::set_x( Float _v){
	HX_STACK_FRAME("phoenix.Quaternion","set_x",0x5c83d3ea,"phoenix.Quaternion.set_x","phoenix/Quaternion.hx",488,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_v,"_v")
	HX_STACK_LINE(490)
	this->x = _v;
	HX_STACK_LINE(492)
	bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(492)
	if ((tmp)){
		HX_STACK_LINE(492)
		Float tmp1 = this->x;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(492)
		return tmp1;
	}
	HX_STACK_LINE(494)
	{
		HX_STACK_LINE(494)
		::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(494)
		bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(494)
		bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(494)
		bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(494)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(494)
		if ((tmp4)){
			HX_STACK_LINE(494)
			tmp5 = this->ignore_euler;
		}
		else{
			HX_STACK_LINE(494)
			tmp5 = true;
		}
		HX_STACK_LINE(494)
		bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(494)
		bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(494)
		if ((tmp6)){
			HX_STACK_LINE(494)
			tmp7 = this->_construct;
		}
		else{
			HX_STACK_LINE(494)
			tmp7 = true;
		}
		HX_STACK_LINE(494)
		if ((tmp7)){
			HX_STACK_LINE(494)
			Dynamic();
		}
		else{
			HX_STACK_LINE(494)
			::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(494)
			::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(494)
			int order = (int)0;		HX_STACK_VAR(order,"order");
			HX_STACK_LINE(494)
			Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(494)
			Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(494)
			Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(494)
			Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
			HX_STACK_LINE(494)
			Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(494)
			Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(494)
			Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(494)
			Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
			HX_STACK_LINE(494)
			Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(494)
			Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(494)
			Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(494)
			Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
			HX_STACK_LINE(494)
			Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(494)
			Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(494)
			Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(494)
			Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
			HX_STACK_LINE(494)
			Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
			HX_STACK_LINE(494)
			Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
			HX_STACK_LINE(494)
			Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
			HX_STACK_LINE(494)
			bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(494)
			if ((tmp21)){
				HX_STACK_LINE(494)
				Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(494)
				Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(494)
				Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(494)
				Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(494)
				Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(494)
				Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(494)
				Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(494)
				Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(494)
				Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(494)
				Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(494)
				Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(494)
				Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(494)
				Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(494)
				Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(494)
				_x = tmp35;
				HX_STACK_LINE(494)
				Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(494)
				{
					HX_STACK_LINE(494)
					Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(494)
					Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(494)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(494)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(494)
					Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(494)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(494)
					Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(494)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(494)
					Float value = tmp44;		HX_STACK_VAR(value,"value");
					HX_STACK_LINE(494)
					bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(494)
					if ((tmp45)){
						HX_STACK_LINE(494)
						tmp36 = (int)-1;
					}
					else{
						HX_STACK_LINE(494)
						bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(494)
						if ((tmp46)){
							HX_STACK_LINE(494)
							tmp36 = (int)1;
						}
						else{
							HX_STACK_LINE(494)
							tmp36 = value;
						}
					}
				}
				HX_STACK_LINE(494)
				Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(494)
				_y = tmp37;
				HX_STACK_LINE(494)
				Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(494)
				Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(494)
				Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(494)
				Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(494)
				Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(494)
				Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(494)
				Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(494)
				Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(494)
				Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
				HX_STACK_LINE(494)
				Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
				HX_STACK_LINE(494)
				Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
				HX_STACK_LINE(494)
				Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
				HX_STACK_LINE(494)
				Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(494)
				Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
				HX_STACK_LINE(494)
				_z = tmp51;
			}
			else{
				HX_STACK_LINE(494)
				bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(494)
				if ((tmp22)){
					HX_STACK_LINE(494)
					Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(494)
					{
						HX_STACK_LINE(494)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(494)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(494)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(494)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(494)
						Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(494)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(494)
						Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(494)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(494)
						Float value = tmp31;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(494)
						bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(494)
						if ((tmp32)){
							HX_STACK_LINE(494)
							tmp23 = (int)-1;
						}
						else{
							HX_STACK_LINE(494)
							bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(494)
							if ((tmp33)){
								HX_STACK_LINE(494)
								tmp23 = (int)1;
							}
							else{
								HX_STACK_LINE(494)
								tmp23 = value;
							}
						}
					}
					HX_STACK_LINE(494)
					Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(494)
					_x = tmp24;
					HX_STACK_LINE(494)
					Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(494)
					Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(494)
					Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(494)
					Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(494)
					Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(494)
					Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(494)
					Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(494)
					Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(494)
					Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(494)
					Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(494)
					Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(494)
					Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(494)
					Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(494)
					Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(494)
					_y = tmp38;
					HX_STACK_LINE(494)
					Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(494)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(494)
					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(494)
					Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(494)
					Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(494)
					Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(494)
					Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(494)
					Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(494)
					Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(494)
					Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(494)
					Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(494)
					Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(494)
					Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(494)
					Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(494)
					_z = tmp52;
				}
				else{
					HX_STACK_LINE(494)
					bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(494)
					if ((tmp23)){
						HX_STACK_LINE(494)
						Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(494)
						{
							HX_STACK_LINE(494)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(494)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(494)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(494)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(494)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(494)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(494)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(494)
							Float value = tmp32;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(494)
							bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(494)
							if ((tmp33)){
								HX_STACK_LINE(494)
								tmp24 = (int)-1;
							}
							else{
								HX_STACK_LINE(494)
								bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(494)
								if ((tmp34)){
									HX_STACK_LINE(494)
									tmp24 = (int)1;
								}
								else{
									HX_STACK_LINE(494)
									tmp24 = value;
								}
							}
						}
						HX_STACK_LINE(494)
						Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(494)
						_x = tmp25;
						HX_STACK_LINE(494)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(494)
						Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(494)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(494)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(494)
						Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(494)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(494)
						Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(494)
						Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(494)
						Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(494)
						Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(494)
						Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(494)
						Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(494)
						Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(494)
						Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(494)
						_y = tmp39;
						HX_STACK_LINE(494)
						Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(494)
						Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(494)
						Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(494)
						Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(494)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(494)
						Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(494)
						Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(494)
						Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(494)
						Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(494)
						Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(494)
						Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(494)
						Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(494)
						Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(494)
						Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(494)
						_z = tmp53;
					}
					else{
						HX_STACK_LINE(494)
						bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(494)
						if ((tmp24)){
							HX_STACK_LINE(494)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(494)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(494)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(494)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(494)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(494)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(494)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(494)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(494)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(494)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(494)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(494)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(494)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(494)
							_x = tmp38;
							HX_STACK_LINE(494)
							Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(494)
							{
								HX_STACK_LINE(494)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(494)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(494)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(494)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(494)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(494)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(494)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(494)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(494)
								Float value = tmp47;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(494)
								bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(494)
								if ((tmp48)){
									HX_STACK_LINE(494)
									tmp39 = (int)-1;
								}
								else{
									HX_STACK_LINE(494)
									bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(494)
									if ((tmp49)){
										HX_STACK_LINE(494)
										tmp39 = (int)1;
									}
									else{
										HX_STACK_LINE(494)
										tmp39 = value;
									}
								}
							}
							HX_STACK_LINE(494)
							Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(494)
							_y = tmp40;
							HX_STACK_LINE(494)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(494)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(494)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(494)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(494)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(494)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(494)
							Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(494)
							Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(494)
							Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(494)
							Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(494)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(494)
							Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(494)
							Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(494)
							Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(494)
							_z = tmp54;
						}
						else{
							HX_STACK_LINE(494)
							bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							if ((tmp25)){
								HX_STACK_LINE(494)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(494)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(494)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(494)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(494)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(494)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(494)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(494)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(494)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(494)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(494)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(494)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(494)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(494)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(494)
								_x = tmp39;
								HX_STACK_LINE(494)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(494)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(494)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(494)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(494)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(494)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(494)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(494)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(494)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(494)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(494)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(494)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(494)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(494)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(494)
								_y = tmp53;
								HX_STACK_LINE(494)
								Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(494)
								{
									HX_STACK_LINE(494)
									Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(494)
									Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(494)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(494)
									Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(494)
									Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(494)
									Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(494)
									Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(494)
									Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(494)
									Float value = tmp62;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(494)
									bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(494)
									if ((tmp63)){
										HX_STACK_LINE(494)
										tmp54 = (int)-1;
									}
									else{
										HX_STACK_LINE(494)
										bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(494)
										if ((tmp64)){
											HX_STACK_LINE(494)
											tmp54 = (int)1;
										}
										else{
											HX_STACK_LINE(494)
											tmp54 = value;
										}
									}
								}
								HX_STACK_LINE(494)
								Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(494)
								_z = tmp55;
							}
							else{
								HX_STACK_LINE(494)
								bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(494)
								if ((tmp26)){
									HX_STACK_LINE(494)
									Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(494)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(494)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(494)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(494)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(494)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(494)
									Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(494)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(494)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(494)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(494)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(494)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(494)
									Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(494)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(494)
									_x = tmp40;
									HX_STACK_LINE(494)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(494)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(494)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(494)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(494)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(494)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(494)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(494)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(494)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(494)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(494)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(494)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(494)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(494)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(494)
									_y = tmp54;
									HX_STACK_LINE(494)
									Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(494)
									{
										HX_STACK_LINE(494)
										Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(494)
										Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(494)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(494)
										Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(494)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(494)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(494)
										Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(494)
										Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(494)
										Float value = tmp63;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(494)
										bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(494)
										if ((tmp64)){
											HX_STACK_LINE(494)
											tmp55 = (int)-1;
										}
										else{
											HX_STACK_LINE(494)
											bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(494)
											if ((tmp65)){
												HX_STACK_LINE(494)
												tmp55 = (int)1;
											}
											else{
												HX_STACK_LINE(494)
												tmp55 = value;
											}
										}
									}
									HX_STACK_LINE(494)
									Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(494)
									_z = tmp56;
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(494)
			{
				HX_STACK_LINE(494)
				bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
				HX_STACK_LINE(494)
				_this->ignore_listeners = true;
				HX_STACK_LINE(494)
				{
					HX_STACK_LINE(494)
					_this->x = _x;
					HX_STACK_LINE(494)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(494)
					if ((tmp22)){
						HX_STACK_LINE(494)
						_this->x;
					}
					else{
						HX_STACK_LINE(494)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(494)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(494)
						if ((tmp23)){
							HX_STACK_LINE(494)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(494)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(494)
							tmp24 = false;
						}
						HX_STACK_LINE(494)
						if ((tmp24)){
							HX_STACK_LINE(494)
							Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(494)
						_this->x;
					}
				}
				HX_STACK_LINE(494)
				{
					HX_STACK_LINE(494)
					_this->y = _y;
					HX_STACK_LINE(494)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(494)
					if ((tmp22)){
						HX_STACK_LINE(494)
						_this->y;
					}
					else{
						HX_STACK_LINE(494)
						bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(494)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(494)
						if ((tmp23)){
							HX_STACK_LINE(494)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(494)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(494)
							tmp24 = false;
						}
						HX_STACK_LINE(494)
						if ((tmp24)){
							HX_STACK_LINE(494)
							Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							_this->listen_y(tmp25);
						}
						HX_STACK_LINE(494)
						_this->y;
					}
				}
				HX_STACK_LINE(494)
				{
					HX_STACK_LINE(494)
					_this->z = _z;
					HX_STACK_LINE(494)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(494)
					if ((tmp22)){
						HX_STACK_LINE(494)
						_this->z;
					}
					else{
						HX_STACK_LINE(494)
						bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(494)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(494)
						if ((tmp23)){
							HX_STACK_LINE(494)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(494)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(494)
							tmp24 = false;
						}
						HX_STACK_LINE(494)
						if ((tmp24)){
							HX_STACK_LINE(494)
							Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(494)
							_this->listen_z(tmp25);
						}
						HX_STACK_LINE(494)
						_this->z;
					}
				}
				HX_STACK_LINE(494)
				_this->ignore_listeners = prev;
				HX_STACK_LINE(494)
				bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(494)
				bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(494)
				if ((tmp22)){
					HX_STACK_LINE(494)
					bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(494)
					bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(494)
					tmp23 = !(tmp25);
				}
				else{
					HX_STACK_LINE(494)
					tmp23 = false;
				}
				HX_STACK_LINE(494)
				if ((tmp23)){
					HX_STACK_LINE(494)
					Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(494)
					_this->listen_x(tmp24);
				}
				HX_STACK_LINE(494)
				bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(494)
				bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(494)
				if ((tmp24)){
					HX_STACK_LINE(494)
					bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(494)
					bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(494)
					tmp25 = !(tmp27);
				}
				else{
					HX_STACK_LINE(494)
					tmp25 = false;
				}
				HX_STACK_LINE(494)
				if ((tmp25)){
					HX_STACK_LINE(494)
					Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(494)
					_this->listen_y(tmp26);
				}
				HX_STACK_LINE(494)
				bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(494)
				bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(494)
				if ((tmp26)){
					HX_STACK_LINE(494)
					bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(494)
					bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(494)
					tmp27 = !(tmp29);
				}
				else{
					HX_STACK_LINE(494)
					tmp27 = false;
				}
				HX_STACK_LINE(494)
				if ((tmp27)){
					HX_STACK_LINE(494)
					Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(494)
					_this->listen_z(tmp28);
				}
				HX_STACK_LINE(494)
				_this;
			}
			HX_STACK_LINE(494)
			_this;
		}
	}
	HX_STACK_LINE(496)
	Dynamic tmp1 = this->listen_x_dyn();		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(496)
	bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(496)
	bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(496)
	if ((tmp2)){
		HX_STACK_LINE(496)
		bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(496)
		bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(496)
		bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(496)
		tmp3 = !(tmp6);
	}
	else{
		HX_STACK_LINE(496)
		tmp3 = false;
	}
	HX_STACK_LINE(496)
	if ((tmp3)){
		HX_STACK_LINE(496)
		Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(496)
		this->listen_x(tmp4);
	}
	HX_STACK_LINE(498)
	Float tmp4 = this->x;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(498)
	return tmp4;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_x,return )

Float Quaternion_obj::set_y( Float _v){
	HX_STACK_FRAME("phoenix.Quaternion","set_y",0x5c83d3eb,"phoenix.Quaternion.set_y","phoenix/Quaternion.hx",502,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_v,"_v")
	HX_STACK_LINE(504)
	this->y = _v;
	HX_STACK_LINE(506)
	bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(506)
	if ((tmp)){
		HX_STACK_LINE(506)
		Float tmp1 = this->y;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(506)
		return tmp1;
	}
	HX_STACK_LINE(508)
	{
		HX_STACK_LINE(508)
		::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(508)
		bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(508)
		bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(508)
		bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(508)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(508)
		if ((tmp4)){
			HX_STACK_LINE(508)
			tmp5 = this->ignore_euler;
		}
		else{
			HX_STACK_LINE(508)
			tmp5 = true;
		}
		HX_STACK_LINE(508)
		bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(508)
		bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(508)
		if ((tmp6)){
			HX_STACK_LINE(508)
			tmp7 = this->_construct;
		}
		else{
			HX_STACK_LINE(508)
			tmp7 = true;
		}
		HX_STACK_LINE(508)
		if ((tmp7)){
			HX_STACK_LINE(508)
			Dynamic();
		}
		else{
			HX_STACK_LINE(508)
			::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(508)
			::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(508)
			int order = (int)0;		HX_STACK_VAR(order,"order");
			HX_STACK_LINE(508)
			Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(508)
			Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(508)
			Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(508)
			Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
			HX_STACK_LINE(508)
			Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(508)
			Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(508)
			Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(508)
			Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
			HX_STACK_LINE(508)
			Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(508)
			Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(508)
			Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(508)
			Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
			HX_STACK_LINE(508)
			Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(508)
			Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(508)
			Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(508)
			Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
			HX_STACK_LINE(508)
			Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
			HX_STACK_LINE(508)
			Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
			HX_STACK_LINE(508)
			Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
			HX_STACK_LINE(508)
			bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(508)
			if ((tmp21)){
				HX_STACK_LINE(508)
				Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(508)
				Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(508)
				Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(508)
				Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(508)
				Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(508)
				Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(508)
				Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(508)
				Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(508)
				Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(508)
				Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(508)
				Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(508)
				Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(508)
				Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(508)
				Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(508)
				_x = tmp35;
				HX_STACK_LINE(508)
				Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(508)
				{
					HX_STACK_LINE(508)
					Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(508)
					Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(508)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(508)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(508)
					Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(508)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(508)
					Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(508)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(508)
					Float value = tmp44;		HX_STACK_VAR(value,"value");
					HX_STACK_LINE(508)
					bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(508)
					if ((tmp45)){
						HX_STACK_LINE(508)
						tmp36 = (int)-1;
					}
					else{
						HX_STACK_LINE(508)
						bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(508)
						if ((tmp46)){
							HX_STACK_LINE(508)
							tmp36 = (int)1;
						}
						else{
							HX_STACK_LINE(508)
							tmp36 = value;
						}
					}
				}
				HX_STACK_LINE(508)
				Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(508)
				_y = tmp37;
				HX_STACK_LINE(508)
				Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(508)
				Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(508)
				Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(508)
				Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(508)
				Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(508)
				Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(508)
				Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(508)
				Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(508)
				Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
				HX_STACK_LINE(508)
				Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
				HX_STACK_LINE(508)
				Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
				HX_STACK_LINE(508)
				Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
				HX_STACK_LINE(508)
				Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(508)
				Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
				HX_STACK_LINE(508)
				_z = tmp51;
			}
			else{
				HX_STACK_LINE(508)
				bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(508)
				if ((tmp22)){
					HX_STACK_LINE(508)
					Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(508)
					{
						HX_STACK_LINE(508)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(508)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(508)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(508)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(508)
						Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(508)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(508)
						Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(508)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(508)
						Float value = tmp31;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(508)
						bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(508)
						if ((tmp32)){
							HX_STACK_LINE(508)
							tmp23 = (int)-1;
						}
						else{
							HX_STACK_LINE(508)
							bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(508)
							if ((tmp33)){
								HX_STACK_LINE(508)
								tmp23 = (int)1;
							}
							else{
								HX_STACK_LINE(508)
								tmp23 = value;
							}
						}
					}
					HX_STACK_LINE(508)
					Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(508)
					_x = tmp24;
					HX_STACK_LINE(508)
					Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(508)
					Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(508)
					Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(508)
					Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(508)
					Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(508)
					Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(508)
					Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(508)
					Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(508)
					Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(508)
					Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(508)
					Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(508)
					Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(508)
					Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(508)
					Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(508)
					_y = tmp38;
					HX_STACK_LINE(508)
					Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(508)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(508)
					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(508)
					Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(508)
					Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(508)
					Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(508)
					Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(508)
					Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(508)
					Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(508)
					Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(508)
					Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(508)
					Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(508)
					Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(508)
					Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(508)
					_z = tmp52;
				}
				else{
					HX_STACK_LINE(508)
					bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(508)
					if ((tmp23)){
						HX_STACK_LINE(508)
						Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(508)
						{
							HX_STACK_LINE(508)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(508)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(508)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(508)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(508)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(508)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(508)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(508)
							Float value = tmp32;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(508)
							bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(508)
							if ((tmp33)){
								HX_STACK_LINE(508)
								tmp24 = (int)-1;
							}
							else{
								HX_STACK_LINE(508)
								bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(508)
								if ((tmp34)){
									HX_STACK_LINE(508)
									tmp24 = (int)1;
								}
								else{
									HX_STACK_LINE(508)
									tmp24 = value;
								}
							}
						}
						HX_STACK_LINE(508)
						Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(508)
						_x = tmp25;
						HX_STACK_LINE(508)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(508)
						Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(508)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(508)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(508)
						Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(508)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(508)
						Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(508)
						Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(508)
						Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(508)
						Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(508)
						Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(508)
						Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(508)
						Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(508)
						Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(508)
						_y = tmp39;
						HX_STACK_LINE(508)
						Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(508)
						Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(508)
						Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(508)
						Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(508)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(508)
						Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(508)
						Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(508)
						Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(508)
						Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(508)
						Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(508)
						Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(508)
						Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(508)
						Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(508)
						Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(508)
						_z = tmp53;
					}
					else{
						HX_STACK_LINE(508)
						bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(508)
						if ((tmp24)){
							HX_STACK_LINE(508)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(508)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(508)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(508)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(508)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(508)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(508)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(508)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(508)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(508)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(508)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(508)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(508)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(508)
							_x = tmp38;
							HX_STACK_LINE(508)
							Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(508)
							{
								HX_STACK_LINE(508)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(508)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(508)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(508)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(508)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(508)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(508)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(508)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(508)
								Float value = tmp47;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(508)
								bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(508)
								if ((tmp48)){
									HX_STACK_LINE(508)
									tmp39 = (int)-1;
								}
								else{
									HX_STACK_LINE(508)
									bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(508)
									if ((tmp49)){
										HX_STACK_LINE(508)
										tmp39 = (int)1;
									}
									else{
										HX_STACK_LINE(508)
										tmp39 = value;
									}
								}
							}
							HX_STACK_LINE(508)
							Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(508)
							_y = tmp40;
							HX_STACK_LINE(508)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(508)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(508)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(508)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(508)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(508)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(508)
							Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(508)
							Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(508)
							Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(508)
							Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(508)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(508)
							Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(508)
							Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(508)
							Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(508)
							_z = tmp54;
						}
						else{
							HX_STACK_LINE(508)
							bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							if ((tmp25)){
								HX_STACK_LINE(508)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(508)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(508)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(508)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(508)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(508)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(508)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(508)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(508)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(508)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(508)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(508)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(508)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(508)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(508)
								_x = tmp39;
								HX_STACK_LINE(508)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(508)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(508)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(508)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(508)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(508)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(508)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(508)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(508)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(508)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(508)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(508)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(508)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(508)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(508)
								_y = tmp53;
								HX_STACK_LINE(508)
								Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(508)
								{
									HX_STACK_LINE(508)
									Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(508)
									Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(508)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(508)
									Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(508)
									Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(508)
									Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(508)
									Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(508)
									Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(508)
									Float value = tmp62;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(508)
									bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(508)
									if ((tmp63)){
										HX_STACK_LINE(508)
										tmp54 = (int)-1;
									}
									else{
										HX_STACK_LINE(508)
										bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(508)
										if ((tmp64)){
											HX_STACK_LINE(508)
											tmp54 = (int)1;
										}
										else{
											HX_STACK_LINE(508)
											tmp54 = value;
										}
									}
								}
								HX_STACK_LINE(508)
								Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(508)
								_z = tmp55;
							}
							else{
								HX_STACK_LINE(508)
								bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(508)
								if ((tmp26)){
									HX_STACK_LINE(508)
									Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(508)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(508)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(508)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(508)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(508)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(508)
									Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(508)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(508)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(508)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(508)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(508)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(508)
									Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(508)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(508)
									_x = tmp40;
									HX_STACK_LINE(508)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(508)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(508)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(508)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(508)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(508)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(508)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(508)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(508)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(508)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(508)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(508)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(508)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(508)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(508)
									_y = tmp54;
									HX_STACK_LINE(508)
									Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(508)
									{
										HX_STACK_LINE(508)
										Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(508)
										Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(508)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(508)
										Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(508)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(508)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(508)
										Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(508)
										Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(508)
										Float value = tmp63;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(508)
										bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(508)
										if ((tmp64)){
											HX_STACK_LINE(508)
											tmp55 = (int)-1;
										}
										else{
											HX_STACK_LINE(508)
											bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(508)
											if ((tmp65)){
												HX_STACK_LINE(508)
												tmp55 = (int)1;
											}
											else{
												HX_STACK_LINE(508)
												tmp55 = value;
											}
										}
									}
									HX_STACK_LINE(508)
									Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(508)
									_z = tmp56;
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(508)
			{
				HX_STACK_LINE(508)
				bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
				HX_STACK_LINE(508)
				_this->ignore_listeners = true;
				HX_STACK_LINE(508)
				{
					HX_STACK_LINE(508)
					_this->x = _x;
					HX_STACK_LINE(508)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(508)
					if ((tmp22)){
						HX_STACK_LINE(508)
						_this->x;
					}
					else{
						HX_STACK_LINE(508)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(508)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(508)
						if ((tmp23)){
							HX_STACK_LINE(508)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(508)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(508)
							tmp24 = false;
						}
						HX_STACK_LINE(508)
						if ((tmp24)){
							HX_STACK_LINE(508)
							Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(508)
						_this->x;
					}
				}
				HX_STACK_LINE(508)
				{
					HX_STACK_LINE(508)
					_this->y = _y;
					HX_STACK_LINE(508)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(508)
					if ((tmp22)){
						HX_STACK_LINE(508)
						_this->y;
					}
					else{
						HX_STACK_LINE(508)
						bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(508)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(508)
						if ((tmp23)){
							HX_STACK_LINE(508)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(508)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(508)
							tmp24 = false;
						}
						HX_STACK_LINE(508)
						if ((tmp24)){
							HX_STACK_LINE(508)
							Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							_this->listen_y(tmp25);
						}
						HX_STACK_LINE(508)
						_this->y;
					}
				}
				HX_STACK_LINE(508)
				{
					HX_STACK_LINE(508)
					_this->z = _z;
					HX_STACK_LINE(508)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(508)
					if ((tmp22)){
						HX_STACK_LINE(508)
						_this->z;
					}
					else{
						HX_STACK_LINE(508)
						bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(508)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(508)
						if ((tmp23)){
							HX_STACK_LINE(508)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(508)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(508)
							tmp24 = false;
						}
						HX_STACK_LINE(508)
						if ((tmp24)){
							HX_STACK_LINE(508)
							Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(508)
							_this->listen_z(tmp25);
						}
						HX_STACK_LINE(508)
						_this->z;
					}
				}
				HX_STACK_LINE(508)
				_this->ignore_listeners = prev;
				HX_STACK_LINE(508)
				bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(508)
				bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(508)
				if ((tmp22)){
					HX_STACK_LINE(508)
					bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(508)
					bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(508)
					tmp23 = !(tmp25);
				}
				else{
					HX_STACK_LINE(508)
					tmp23 = false;
				}
				HX_STACK_LINE(508)
				if ((tmp23)){
					HX_STACK_LINE(508)
					Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(508)
					_this->listen_x(tmp24);
				}
				HX_STACK_LINE(508)
				bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(508)
				bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(508)
				if ((tmp24)){
					HX_STACK_LINE(508)
					bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(508)
					bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(508)
					tmp25 = !(tmp27);
				}
				else{
					HX_STACK_LINE(508)
					tmp25 = false;
				}
				HX_STACK_LINE(508)
				if ((tmp25)){
					HX_STACK_LINE(508)
					Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(508)
					_this->listen_y(tmp26);
				}
				HX_STACK_LINE(508)
				bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(508)
				bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(508)
				if ((tmp26)){
					HX_STACK_LINE(508)
					bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(508)
					bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(508)
					tmp27 = !(tmp29);
				}
				else{
					HX_STACK_LINE(508)
					tmp27 = false;
				}
				HX_STACK_LINE(508)
				if ((tmp27)){
					HX_STACK_LINE(508)
					Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(508)
					_this->listen_z(tmp28);
				}
				HX_STACK_LINE(508)
				_this;
			}
			HX_STACK_LINE(508)
			_this;
		}
	}
	HX_STACK_LINE(510)
	Dynamic tmp1 = this->listen_y_dyn();		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(510)
	bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(510)
	bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(510)
	if ((tmp2)){
		HX_STACK_LINE(510)
		bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(510)
		bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(510)
		bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(510)
		tmp3 = !(tmp6);
	}
	else{
		HX_STACK_LINE(510)
		tmp3 = false;
	}
	HX_STACK_LINE(510)
	if ((tmp3)){
		HX_STACK_LINE(510)
		Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(510)
		this->listen_y(tmp4);
	}
	HX_STACK_LINE(512)
	Float tmp4 = this->y;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(512)
	return tmp4;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_y,return )

Float Quaternion_obj::set_z( Float _v){
	HX_STACK_FRAME("phoenix.Quaternion","set_z",0x5c83d3ec,"phoenix.Quaternion.set_z","phoenix/Quaternion.hx",516,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_v,"_v")
	HX_STACK_LINE(518)
	this->z = _v;
	HX_STACK_LINE(520)
	bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(520)
	if ((tmp)){
		HX_STACK_LINE(520)
		Float tmp1 = this->z;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(520)
		return tmp1;
	}
	HX_STACK_LINE(522)
	{
		HX_STACK_LINE(522)
		::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(522)
		bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(522)
		bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(522)
		bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(522)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(522)
		if ((tmp4)){
			HX_STACK_LINE(522)
			tmp5 = this->ignore_euler;
		}
		else{
			HX_STACK_LINE(522)
			tmp5 = true;
		}
		HX_STACK_LINE(522)
		bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(522)
		bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(522)
		if ((tmp6)){
			HX_STACK_LINE(522)
			tmp7 = this->_construct;
		}
		else{
			HX_STACK_LINE(522)
			tmp7 = true;
		}
		HX_STACK_LINE(522)
		if ((tmp7)){
			HX_STACK_LINE(522)
			Dynamic();
		}
		else{
			HX_STACK_LINE(522)
			::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(522)
			::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(522)
			int order = (int)0;		HX_STACK_VAR(order,"order");
			HX_STACK_LINE(522)
			Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(522)
			Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(522)
			Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(522)
			Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
			HX_STACK_LINE(522)
			Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(522)
			Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(522)
			Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(522)
			Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
			HX_STACK_LINE(522)
			Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(522)
			Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(522)
			Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(522)
			Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
			HX_STACK_LINE(522)
			Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(522)
			Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(522)
			Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(522)
			Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
			HX_STACK_LINE(522)
			Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
			HX_STACK_LINE(522)
			Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
			HX_STACK_LINE(522)
			Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
			HX_STACK_LINE(522)
			bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(522)
			if ((tmp21)){
				HX_STACK_LINE(522)
				Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(522)
				Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(522)
				Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(522)
				Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(522)
				Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(522)
				Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(522)
				Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(522)
				Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(522)
				Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(522)
				Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(522)
				Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(522)
				Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(522)
				Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(522)
				Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(522)
				_x = tmp35;
				HX_STACK_LINE(522)
				Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(522)
				{
					HX_STACK_LINE(522)
					Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(522)
					Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(522)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(522)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(522)
					Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(522)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(522)
					Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(522)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(522)
					Float value = tmp44;		HX_STACK_VAR(value,"value");
					HX_STACK_LINE(522)
					bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(522)
					if ((tmp45)){
						HX_STACK_LINE(522)
						tmp36 = (int)-1;
					}
					else{
						HX_STACK_LINE(522)
						bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(522)
						if ((tmp46)){
							HX_STACK_LINE(522)
							tmp36 = (int)1;
						}
						else{
							HX_STACK_LINE(522)
							tmp36 = value;
						}
					}
				}
				HX_STACK_LINE(522)
				Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(522)
				_y = tmp37;
				HX_STACK_LINE(522)
				Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(522)
				Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(522)
				Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(522)
				Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(522)
				Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(522)
				Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(522)
				Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(522)
				Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(522)
				Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
				HX_STACK_LINE(522)
				Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
				HX_STACK_LINE(522)
				Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
				HX_STACK_LINE(522)
				Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
				HX_STACK_LINE(522)
				Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(522)
				Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
				HX_STACK_LINE(522)
				_z = tmp51;
			}
			else{
				HX_STACK_LINE(522)
				bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(522)
				if ((tmp22)){
					HX_STACK_LINE(522)
					Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(522)
					{
						HX_STACK_LINE(522)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(522)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(522)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(522)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(522)
						Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(522)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(522)
						Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(522)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(522)
						Float value = tmp31;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(522)
						bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(522)
						if ((tmp32)){
							HX_STACK_LINE(522)
							tmp23 = (int)-1;
						}
						else{
							HX_STACK_LINE(522)
							bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(522)
							if ((tmp33)){
								HX_STACK_LINE(522)
								tmp23 = (int)1;
							}
							else{
								HX_STACK_LINE(522)
								tmp23 = value;
							}
						}
					}
					HX_STACK_LINE(522)
					Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(522)
					_x = tmp24;
					HX_STACK_LINE(522)
					Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(522)
					Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(522)
					Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(522)
					Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(522)
					Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(522)
					Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(522)
					Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(522)
					Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(522)
					Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(522)
					Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(522)
					Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(522)
					Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(522)
					Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(522)
					Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(522)
					_y = tmp38;
					HX_STACK_LINE(522)
					Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(522)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(522)
					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(522)
					Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(522)
					Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(522)
					Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(522)
					Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(522)
					Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(522)
					Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(522)
					Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(522)
					Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(522)
					Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(522)
					Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(522)
					Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(522)
					_z = tmp52;
				}
				else{
					HX_STACK_LINE(522)
					bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(522)
					if ((tmp23)){
						HX_STACK_LINE(522)
						Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(522)
						{
							HX_STACK_LINE(522)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(522)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(522)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(522)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(522)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(522)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(522)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(522)
							Float value = tmp32;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(522)
							bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(522)
							if ((tmp33)){
								HX_STACK_LINE(522)
								tmp24 = (int)-1;
							}
							else{
								HX_STACK_LINE(522)
								bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(522)
								if ((tmp34)){
									HX_STACK_LINE(522)
									tmp24 = (int)1;
								}
								else{
									HX_STACK_LINE(522)
									tmp24 = value;
								}
							}
						}
						HX_STACK_LINE(522)
						Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(522)
						_x = tmp25;
						HX_STACK_LINE(522)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(522)
						Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(522)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(522)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(522)
						Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(522)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(522)
						Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(522)
						Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(522)
						Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(522)
						Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(522)
						Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(522)
						Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(522)
						Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(522)
						Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(522)
						_y = tmp39;
						HX_STACK_LINE(522)
						Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(522)
						Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(522)
						Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(522)
						Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(522)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(522)
						Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(522)
						Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(522)
						Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(522)
						Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(522)
						Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(522)
						Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(522)
						Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(522)
						Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(522)
						Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(522)
						_z = tmp53;
					}
					else{
						HX_STACK_LINE(522)
						bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(522)
						if ((tmp24)){
							HX_STACK_LINE(522)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(522)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(522)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(522)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(522)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(522)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(522)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(522)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(522)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(522)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(522)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(522)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(522)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(522)
							_x = tmp38;
							HX_STACK_LINE(522)
							Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(522)
							{
								HX_STACK_LINE(522)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(522)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(522)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(522)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(522)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(522)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(522)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(522)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(522)
								Float value = tmp47;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(522)
								bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(522)
								if ((tmp48)){
									HX_STACK_LINE(522)
									tmp39 = (int)-1;
								}
								else{
									HX_STACK_LINE(522)
									bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(522)
									if ((tmp49)){
										HX_STACK_LINE(522)
										tmp39 = (int)1;
									}
									else{
										HX_STACK_LINE(522)
										tmp39 = value;
									}
								}
							}
							HX_STACK_LINE(522)
							Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(522)
							_y = tmp40;
							HX_STACK_LINE(522)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(522)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(522)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(522)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(522)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(522)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(522)
							Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(522)
							Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(522)
							Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(522)
							Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(522)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(522)
							Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(522)
							Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(522)
							Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(522)
							_z = tmp54;
						}
						else{
							HX_STACK_LINE(522)
							bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							if ((tmp25)){
								HX_STACK_LINE(522)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(522)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(522)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(522)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(522)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(522)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(522)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(522)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(522)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(522)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(522)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(522)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(522)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(522)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(522)
								_x = tmp39;
								HX_STACK_LINE(522)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(522)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(522)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(522)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(522)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(522)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(522)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(522)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(522)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(522)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(522)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(522)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(522)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(522)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(522)
								_y = tmp53;
								HX_STACK_LINE(522)
								Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(522)
								{
									HX_STACK_LINE(522)
									Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(522)
									Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(522)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(522)
									Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(522)
									Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(522)
									Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(522)
									Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(522)
									Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(522)
									Float value = tmp62;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(522)
									bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(522)
									if ((tmp63)){
										HX_STACK_LINE(522)
										tmp54 = (int)-1;
									}
									else{
										HX_STACK_LINE(522)
										bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(522)
										if ((tmp64)){
											HX_STACK_LINE(522)
											tmp54 = (int)1;
										}
										else{
											HX_STACK_LINE(522)
											tmp54 = value;
										}
									}
								}
								HX_STACK_LINE(522)
								Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(522)
								_z = tmp55;
							}
							else{
								HX_STACK_LINE(522)
								bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(522)
								if ((tmp26)){
									HX_STACK_LINE(522)
									Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(522)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(522)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(522)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(522)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(522)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(522)
									Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(522)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(522)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(522)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(522)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(522)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(522)
									Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(522)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(522)
									_x = tmp40;
									HX_STACK_LINE(522)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(522)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(522)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(522)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(522)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(522)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(522)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(522)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(522)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(522)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(522)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(522)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(522)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(522)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(522)
									_y = tmp54;
									HX_STACK_LINE(522)
									Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(522)
									{
										HX_STACK_LINE(522)
										Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(522)
										Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(522)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(522)
										Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(522)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(522)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(522)
										Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(522)
										Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(522)
										Float value = tmp63;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(522)
										bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(522)
										if ((tmp64)){
											HX_STACK_LINE(522)
											tmp55 = (int)-1;
										}
										else{
											HX_STACK_LINE(522)
											bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(522)
											if ((tmp65)){
												HX_STACK_LINE(522)
												tmp55 = (int)1;
											}
											else{
												HX_STACK_LINE(522)
												tmp55 = value;
											}
										}
									}
									HX_STACK_LINE(522)
									Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(522)
									_z = tmp56;
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(522)
			{
				HX_STACK_LINE(522)
				bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
				HX_STACK_LINE(522)
				_this->ignore_listeners = true;
				HX_STACK_LINE(522)
				{
					HX_STACK_LINE(522)
					_this->x = _x;
					HX_STACK_LINE(522)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(522)
					if ((tmp22)){
						HX_STACK_LINE(522)
						_this->x;
					}
					else{
						HX_STACK_LINE(522)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(522)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(522)
						if ((tmp23)){
							HX_STACK_LINE(522)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(522)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(522)
							tmp24 = false;
						}
						HX_STACK_LINE(522)
						if ((tmp24)){
							HX_STACK_LINE(522)
							Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(522)
						_this->x;
					}
				}
				HX_STACK_LINE(522)
				{
					HX_STACK_LINE(522)
					_this->y = _y;
					HX_STACK_LINE(522)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(522)
					if ((tmp22)){
						HX_STACK_LINE(522)
						_this->y;
					}
					else{
						HX_STACK_LINE(522)
						bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(522)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(522)
						if ((tmp23)){
							HX_STACK_LINE(522)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(522)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(522)
							tmp24 = false;
						}
						HX_STACK_LINE(522)
						if ((tmp24)){
							HX_STACK_LINE(522)
							Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							_this->listen_y(tmp25);
						}
						HX_STACK_LINE(522)
						_this->y;
					}
				}
				HX_STACK_LINE(522)
				{
					HX_STACK_LINE(522)
					_this->z = _z;
					HX_STACK_LINE(522)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(522)
					if ((tmp22)){
						HX_STACK_LINE(522)
						_this->z;
					}
					else{
						HX_STACK_LINE(522)
						bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(522)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(522)
						if ((tmp23)){
							HX_STACK_LINE(522)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(522)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(522)
							tmp24 = false;
						}
						HX_STACK_LINE(522)
						if ((tmp24)){
							HX_STACK_LINE(522)
							Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(522)
							_this->listen_z(tmp25);
						}
						HX_STACK_LINE(522)
						_this->z;
					}
				}
				HX_STACK_LINE(522)
				_this->ignore_listeners = prev;
				HX_STACK_LINE(522)
				bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(522)
				bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(522)
				if ((tmp22)){
					HX_STACK_LINE(522)
					bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(522)
					bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(522)
					tmp23 = !(tmp25);
				}
				else{
					HX_STACK_LINE(522)
					tmp23 = false;
				}
				HX_STACK_LINE(522)
				if ((tmp23)){
					HX_STACK_LINE(522)
					Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(522)
					_this->listen_x(tmp24);
				}
				HX_STACK_LINE(522)
				bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(522)
				bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(522)
				if ((tmp24)){
					HX_STACK_LINE(522)
					bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(522)
					bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(522)
					tmp25 = !(tmp27);
				}
				else{
					HX_STACK_LINE(522)
					tmp25 = false;
				}
				HX_STACK_LINE(522)
				if ((tmp25)){
					HX_STACK_LINE(522)
					Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(522)
					_this->listen_y(tmp26);
				}
				HX_STACK_LINE(522)
				bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(522)
				bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(522)
				if ((tmp26)){
					HX_STACK_LINE(522)
					bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(522)
					bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(522)
					tmp27 = !(tmp29);
				}
				else{
					HX_STACK_LINE(522)
					tmp27 = false;
				}
				HX_STACK_LINE(522)
				if ((tmp27)){
					HX_STACK_LINE(522)
					Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(522)
					_this->listen_z(tmp28);
				}
				HX_STACK_LINE(522)
				_this;
			}
			HX_STACK_LINE(522)
			_this;
		}
	}
	HX_STACK_LINE(524)
	Dynamic tmp1 = this->listen_z_dyn();		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(524)
	bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(524)
	bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(524)
	if ((tmp2)){
		HX_STACK_LINE(524)
		bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(524)
		bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(524)
		bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(524)
		tmp3 = !(tmp6);
	}
	else{
		HX_STACK_LINE(524)
		tmp3 = false;
	}
	HX_STACK_LINE(524)
	if ((tmp3)){
		HX_STACK_LINE(524)
		Float tmp4 = this->z;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(524)
		this->listen_z(tmp4);
	}
	HX_STACK_LINE(526)
	Float tmp4 = this->z;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(526)
	return tmp4;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_z,return )

Float Quaternion_obj::set_w( Float _v){
	HX_STACK_FRAME("phoenix.Quaternion","set_w",0x5c83d3e9,"phoenix.Quaternion.set_w","phoenix/Quaternion.hx",530,0x23671680)
	HX_STACK_THIS(this)
	HX_STACK_ARG(_v,"_v")
	HX_STACK_LINE(532)
	this->w = _v;
	HX_STACK_LINE(534)
	bool tmp = this->_construct;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(534)
	if ((tmp)){
		HX_STACK_LINE(534)
		Float tmp1 = this->w;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(534)
		return tmp1;
	}
	HX_STACK_LINE(536)
	{
		HX_STACK_LINE(536)
		::phoenix::Vector tmp1 = this->euler;		HX_STACK_VAR(tmp1,"tmp1");
		HX_STACK_LINE(536)
		bool tmp2 = (tmp1 == null());		HX_STACK_VAR(tmp2,"tmp2");
		HX_STACK_LINE(536)
		bool tmp3 = !(tmp2);		HX_STACK_VAR(tmp3,"tmp3");
		HX_STACK_LINE(536)
		bool tmp4 = tmp3;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(536)
		bool tmp5;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(536)
		if ((tmp4)){
			HX_STACK_LINE(536)
			tmp5 = this->ignore_euler;
		}
		else{
			HX_STACK_LINE(536)
			tmp5 = true;
		}
		HX_STACK_LINE(536)
		bool tmp6 = !(tmp5);		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(536)
		bool tmp7;		HX_STACK_VAR(tmp7,"tmp7");
		HX_STACK_LINE(536)
		if ((tmp6)){
			HX_STACK_LINE(536)
			tmp7 = this->_construct;
		}
		else{
			HX_STACK_LINE(536)
			tmp7 = true;
		}
		HX_STACK_LINE(536)
		if ((tmp7)){
			HX_STACK_LINE(536)
			Dynamic();
		}
		else{
			HX_STACK_LINE(536)
			::phoenix::Vector tmp8 = this->euler;		HX_STACK_VAR(tmp8,"tmp8");
			HX_STACK_LINE(536)
			::phoenix::Vector _this = tmp8;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(536)
			int order = (int)0;		HX_STACK_VAR(order,"order");
			HX_STACK_LINE(536)
			Float tmp9 = this->x;		HX_STACK_VAR(tmp9,"tmp9");
			HX_STACK_LINE(536)
			Float tmp10 = this->x;		HX_STACK_VAR(tmp10,"tmp10");
			HX_STACK_LINE(536)
			Float tmp11 = (tmp9 * tmp10);		HX_STACK_VAR(tmp11,"tmp11");
			HX_STACK_LINE(536)
			Float sqx = tmp11;		HX_STACK_VAR(sqx,"sqx");
			HX_STACK_LINE(536)
			Float tmp12 = this->y;		HX_STACK_VAR(tmp12,"tmp12");
			HX_STACK_LINE(536)
			Float tmp13 = this->y;		HX_STACK_VAR(tmp13,"tmp13");
			HX_STACK_LINE(536)
			Float tmp14 = (tmp12 * tmp13);		HX_STACK_VAR(tmp14,"tmp14");
			HX_STACK_LINE(536)
			Float sqy = tmp14;		HX_STACK_VAR(sqy,"sqy");
			HX_STACK_LINE(536)
			Float tmp15 = this->z;		HX_STACK_VAR(tmp15,"tmp15");
			HX_STACK_LINE(536)
			Float tmp16 = this->z;		HX_STACK_VAR(tmp16,"tmp16");
			HX_STACK_LINE(536)
			Float tmp17 = (tmp15 * tmp16);		HX_STACK_VAR(tmp17,"tmp17");
			HX_STACK_LINE(536)
			Float sqz = tmp17;		HX_STACK_VAR(sqz,"sqz");
			HX_STACK_LINE(536)
			Float tmp18 = this->w;		HX_STACK_VAR(tmp18,"tmp18");
			HX_STACK_LINE(536)
			Float tmp19 = this->w;		HX_STACK_VAR(tmp19,"tmp19");
			HX_STACK_LINE(536)
			Float tmp20 = (tmp18 * tmp19);		HX_STACK_VAR(tmp20,"tmp20");
			HX_STACK_LINE(536)
			Float sqw = tmp20;		HX_STACK_VAR(sqw,"sqw");
			HX_STACK_LINE(536)
			Float _x = _this->x;		HX_STACK_VAR(_x,"_x");
			HX_STACK_LINE(536)
			Float _y = _this->y;		HX_STACK_VAR(_y,"_y");
			HX_STACK_LINE(536)
			Float _z = _this->z;		HX_STACK_VAR(_z,"_z");
			HX_STACK_LINE(536)
			bool tmp21 = (order == (int)0);		HX_STACK_VAR(tmp21,"tmp21");
			HX_STACK_LINE(536)
			if ((tmp21)){
				HX_STACK_LINE(536)
				Float tmp22 = this->x;		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(536)
				Float tmp23 = this->w;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(536)
				Float tmp24 = (tmp22 * tmp23);		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(536)
				Float tmp25 = this->y;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(536)
				Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(536)
				Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(536)
				Float tmp28 = (tmp24 - tmp27);		HX_STACK_VAR(tmp28,"tmp28");
				HX_STACK_LINE(536)
				Float tmp29 = ((int)2 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
				HX_STACK_LINE(536)
				Float tmp30 = (sqw - sqx);		HX_STACK_VAR(tmp30,"tmp30");
				HX_STACK_LINE(536)
				Float tmp31 = sqy;		HX_STACK_VAR(tmp31,"tmp31");
				HX_STACK_LINE(536)
				Float tmp32 = (tmp30 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
				HX_STACK_LINE(536)
				Float tmp33 = sqz;		HX_STACK_VAR(tmp33,"tmp33");
				HX_STACK_LINE(536)
				Float tmp34 = (tmp32 + tmp33);		HX_STACK_VAR(tmp34,"tmp34");
				HX_STACK_LINE(536)
				Float tmp35 = ::Math_obj::atan2(tmp29,tmp34);		HX_STACK_VAR(tmp35,"tmp35");
				HX_STACK_LINE(536)
				_x = tmp35;
				HX_STACK_LINE(536)
				Float tmp36;		HX_STACK_VAR(tmp36,"tmp36");
				HX_STACK_LINE(536)
				{
					HX_STACK_LINE(536)
					Float tmp37 = this->x;		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(536)
					Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(536)
					Float tmp39 = (tmp37 * tmp38);		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(536)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(536)
					Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(536)
					Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(536)
					Float tmp43 = (tmp39 + tmp42);		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(536)
					Float tmp44 = ((int)2 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(536)
					Float value = tmp44;		HX_STACK_VAR(value,"value");
					HX_STACK_LINE(536)
					bool tmp45 = (value < (int)-1);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(536)
					if ((tmp45)){
						HX_STACK_LINE(536)
						tmp36 = (int)-1;
					}
					else{
						HX_STACK_LINE(536)
						bool tmp46 = (value > (int)1);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(536)
						if ((tmp46)){
							HX_STACK_LINE(536)
							tmp36 = (int)1;
						}
						else{
							HX_STACK_LINE(536)
							tmp36 = value;
						}
					}
				}
				HX_STACK_LINE(536)
				Float tmp37 = ::Math_obj::asin(tmp36);		HX_STACK_VAR(tmp37,"tmp37");
				HX_STACK_LINE(536)
				_y = tmp37;
				HX_STACK_LINE(536)
				Float tmp38 = this->z;		HX_STACK_VAR(tmp38,"tmp38");
				HX_STACK_LINE(536)
				Float tmp39 = this->w;		HX_STACK_VAR(tmp39,"tmp39");
				HX_STACK_LINE(536)
				Float tmp40 = (tmp38 * tmp39);		HX_STACK_VAR(tmp40,"tmp40");
				HX_STACK_LINE(536)
				Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
				HX_STACK_LINE(536)
				Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
				HX_STACK_LINE(536)
				Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
				HX_STACK_LINE(536)
				Float tmp44 = (tmp40 - tmp43);		HX_STACK_VAR(tmp44,"tmp44");
				HX_STACK_LINE(536)
				Float tmp45 = ((int)2 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
				HX_STACK_LINE(536)
				Float tmp46 = (sqw + sqx);		HX_STACK_VAR(tmp46,"tmp46");
				HX_STACK_LINE(536)
				Float tmp47 = sqy;		HX_STACK_VAR(tmp47,"tmp47");
				HX_STACK_LINE(536)
				Float tmp48 = (tmp46 - tmp47);		HX_STACK_VAR(tmp48,"tmp48");
				HX_STACK_LINE(536)
				Float tmp49 = sqz;		HX_STACK_VAR(tmp49,"tmp49");
				HX_STACK_LINE(536)
				Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
				HX_STACK_LINE(536)
				Float tmp51 = ::Math_obj::atan2(tmp45,tmp50);		HX_STACK_VAR(tmp51,"tmp51");
				HX_STACK_LINE(536)
				_z = tmp51;
			}
			else{
				HX_STACK_LINE(536)
				bool tmp22 = (order == (int)1);		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(536)
				if ((tmp22)){
					HX_STACK_LINE(536)
					Float tmp23;		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(536)
					{
						HX_STACK_LINE(536)
						Float tmp24 = this->x;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(536)
						Float tmp25 = this->w;		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(536)
						Float tmp26 = (tmp24 * tmp25);		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(536)
						Float tmp27 = this->y;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(536)
						Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(536)
						Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(536)
						Float tmp30 = (tmp26 - tmp29);		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(536)
						Float tmp31 = ((int)2 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(536)
						Float value = tmp31;		HX_STACK_VAR(value,"value");
						HX_STACK_LINE(536)
						bool tmp32 = (value < (int)-1);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(536)
						if ((tmp32)){
							HX_STACK_LINE(536)
							tmp23 = (int)-1;
						}
						else{
							HX_STACK_LINE(536)
							bool tmp33 = (value > (int)1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(536)
							if ((tmp33)){
								HX_STACK_LINE(536)
								tmp23 = (int)1;
							}
							else{
								HX_STACK_LINE(536)
								tmp23 = value;
							}
						}
					}
					HX_STACK_LINE(536)
					Float tmp24 = ::Math_obj::asin(tmp23);		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(536)
					_x = tmp24;
					HX_STACK_LINE(536)
					Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(536)
					Float tmp26 = this->z;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(536)
					Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(536)
					Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(536)
					Float tmp29 = this->w;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(536)
					Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
					HX_STACK_LINE(536)
					Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
					HX_STACK_LINE(536)
					Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
					HX_STACK_LINE(536)
					Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
					HX_STACK_LINE(536)
					Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
					HX_STACK_LINE(536)
					Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
					HX_STACK_LINE(536)
					Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
					HX_STACK_LINE(536)
					Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
					HX_STACK_LINE(536)
					Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
					HX_STACK_LINE(536)
					_y = tmp38;
					HX_STACK_LINE(536)
					Float tmp39 = this->x;		HX_STACK_VAR(tmp39,"tmp39");
					HX_STACK_LINE(536)
					Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
					HX_STACK_LINE(536)
					Float tmp41 = (tmp39 * tmp40);		HX_STACK_VAR(tmp41,"tmp41");
					HX_STACK_LINE(536)
					Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
					HX_STACK_LINE(536)
					Float tmp43 = this->w;		HX_STACK_VAR(tmp43,"tmp43");
					HX_STACK_LINE(536)
					Float tmp44 = (tmp42 * tmp43);		HX_STACK_VAR(tmp44,"tmp44");
					HX_STACK_LINE(536)
					Float tmp45 = (tmp41 + tmp44);		HX_STACK_VAR(tmp45,"tmp45");
					HX_STACK_LINE(536)
					Float tmp46 = ((int)2 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
					HX_STACK_LINE(536)
					Float tmp47 = (sqw - sqx);		HX_STACK_VAR(tmp47,"tmp47");
					HX_STACK_LINE(536)
					Float tmp48 = sqy;		HX_STACK_VAR(tmp48,"tmp48");
					HX_STACK_LINE(536)
					Float tmp49 = (tmp47 + tmp48);		HX_STACK_VAR(tmp49,"tmp49");
					HX_STACK_LINE(536)
					Float tmp50 = sqz;		HX_STACK_VAR(tmp50,"tmp50");
					HX_STACK_LINE(536)
					Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
					HX_STACK_LINE(536)
					Float tmp52 = ::Math_obj::atan2(tmp46,tmp51);		HX_STACK_VAR(tmp52,"tmp52");
					HX_STACK_LINE(536)
					_z = tmp52;
				}
				else{
					HX_STACK_LINE(536)
					bool tmp23 = (order == (int)2);		HX_STACK_VAR(tmp23,"tmp23");
					HX_STACK_LINE(536)
					if ((tmp23)){
						HX_STACK_LINE(536)
						Float tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(536)
						{
							HX_STACK_LINE(536)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(536)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(536)
							Float tmp28 = this->y;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(536)
							Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(536)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(536)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(536)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(536)
							Float value = tmp32;		HX_STACK_VAR(value,"value");
							HX_STACK_LINE(536)
							bool tmp33 = (value < (int)-1);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(536)
							if ((tmp33)){
								HX_STACK_LINE(536)
								tmp24 = (int)-1;
							}
							else{
								HX_STACK_LINE(536)
								bool tmp34 = (value > (int)1);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(536)
								if ((tmp34)){
									HX_STACK_LINE(536)
									tmp24 = (int)1;
								}
								else{
									HX_STACK_LINE(536)
									tmp24 = value;
								}
							}
						}
						HX_STACK_LINE(536)
						Float tmp25 = ::Math_obj::asin(tmp24);		HX_STACK_VAR(tmp25,"tmp25");
						HX_STACK_LINE(536)
						_x = tmp25;
						HX_STACK_LINE(536)
						Float tmp26 = this->y;		HX_STACK_VAR(tmp26,"tmp26");
						HX_STACK_LINE(536)
						Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
						HX_STACK_LINE(536)
						Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
						HX_STACK_LINE(536)
						Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
						HX_STACK_LINE(536)
						Float tmp30 = this->x;		HX_STACK_VAR(tmp30,"tmp30");
						HX_STACK_LINE(536)
						Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
						HX_STACK_LINE(536)
						Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
						HX_STACK_LINE(536)
						Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
						HX_STACK_LINE(536)
						Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
						HX_STACK_LINE(536)
						Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
						HX_STACK_LINE(536)
						Float tmp36 = (tmp34 - tmp35);		HX_STACK_VAR(tmp36,"tmp36");
						HX_STACK_LINE(536)
						Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
						HX_STACK_LINE(536)
						Float tmp38 = (tmp36 + tmp37);		HX_STACK_VAR(tmp38,"tmp38");
						HX_STACK_LINE(536)
						Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
						HX_STACK_LINE(536)
						_y = tmp39;
						HX_STACK_LINE(536)
						Float tmp40 = this->z;		HX_STACK_VAR(tmp40,"tmp40");
						HX_STACK_LINE(536)
						Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
						HX_STACK_LINE(536)
						Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
						HX_STACK_LINE(536)
						Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
						HX_STACK_LINE(536)
						Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
						HX_STACK_LINE(536)
						Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
						HX_STACK_LINE(536)
						Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
						HX_STACK_LINE(536)
						Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
						HX_STACK_LINE(536)
						Float tmp48 = (sqw - sqx);		HX_STACK_VAR(tmp48,"tmp48");
						HX_STACK_LINE(536)
						Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
						HX_STACK_LINE(536)
						Float tmp50 = (tmp48 + tmp49);		HX_STACK_VAR(tmp50,"tmp50");
						HX_STACK_LINE(536)
						Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
						HX_STACK_LINE(536)
						Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
						HX_STACK_LINE(536)
						Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
						HX_STACK_LINE(536)
						_z = tmp53;
					}
					else{
						HX_STACK_LINE(536)
						bool tmp24 = (order == (int)3);		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(536)
						if ((tmp24)){
							HX_STACK_LINE(536)
							Float tmp25 = this->x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							Float tmp26 = this->w;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(536)
							Float tmp27 = (tmp25 * tmp26);		HX_STACK_VAR(tmp27,"tmp27");
							HX_STACK_LINE(536)
							Float tmp28 = this->z;		HX_STACK_VAR(tmp28,"tmp28");
							HX_STACK_LINE(536)
							Float tmp29 = this->y;		HX_STACK_VAR(tmp29,"tmp29");
							HX_STACK_LINE(536)
							Float tmp30 = (tmp28 * tmp29);		HX_STACK_VAR(tmp30,"tmp30");
							HX_STACK_LINE(536)
							Float tmp31 = (tmp27 + tmp30);		HX_STACK_VAR(tmp31,"tmp31");
							HX_STACK_LINE(536)
							Float tmp32 = ((int)2 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
							HX_STACK_LINE(536)
							Float tmp33 = (sqw - sqx);		HX_STACK_VAR(tmp33,"tmp33");
							HX_STACK_LINE(536)
							Float tmp34 = sqy;		HX_STACK_VAR(tmp34,"tmp34");
							HX_STACK_LINE(536)
							Float tmp35 = (tmp33 - tmp34);		HX_STACK_VAR(tmp35,"tmp35");
							HX_STACK_LINE(536)
							Float tmp36 = sqz;		HX_STACK_VAR(tmp36,"tmp36");
							HX_STACK_LINE(536)
							Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
							HX_STACK_LINE(536)
							Float tmp38 = ::Math_obj::atan2(tmp32,tmp37);		HX_STACK_VAR(tmp38,"tmp38");
							HX_STACK_LINE(536)
							_x = tmp38;
							HX_STACK_LINE(536)
							Float tmp39;		HX_STACK_VAR(tmp39,"tmp39");
							HX_STACK_LINE(536)
							{
								HX_STACK_LINE(536)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(536)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(536)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(536)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(536)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(536)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(536)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(536)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(536)
								Float value = tmp47;		HX_STACK_VAR(value,"value");
								HX_STACK_LINE(536)
								bool tmp48 = (value < (int)-1);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(536)
								if ((tmp48)){
									HX_STACK_LINE(536)
									tmp39 = (int)-1;
								}
								else{
									HX_STACK_LINE(536)
									bool tmp49 = (value > (int)1);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(536)
									if ((tmp49)){
										HX_STACK_LINE(536)
										tmp39 = (int)1;
									}
									else{
										HX_STACK_LINE(536)
										tmp39 = value;
									}
								}
							}
							HX_STACK_LINE(536)
							Float tmp40 = ::Math_obj::asin(tmp39);		HX_STACK_VAR(tmp40,"tmp40");
							HX_STACK_LINE(536)
							_y = tmp40;
							HX_STACK_LINE(536)
							Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
							HX_STACK_LINE(536)
							Float tmp42 = this->y;		HX_STACK_VAR(tmp42,"tmp42");
							HX_STACK_LINE(536)
							Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
							HX_STACK_LINE(536)
							Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
							HX_STACK_LINE(536)
							Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
							HX_STACK_LINE(536)
							Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
							HX_STACK_LINE(536)
							Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
							HX_STACK_LINE(536)
							Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
							HX_STACK_LINE(536)
							Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
							HX_STACK_LINE(536)
							Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
							HX_STACK_LINE(536)
							Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
							HX_STACK_LINE(536)
							Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
							HX_STACK_LINE(536)
							Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
							HX_STACK_LINE(536)
							Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
							HX_STACK_LINE(536)
							_z = tmp54;
						}
						else{
							HX_STACK_LINE(536)
							bool tmp25 = (order == (int)4);		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							if ((tmp25)){
								HX_STACK_LINE(536)
								Float tmp26 = this->x;		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(536)
								Float tmp27 = this->w;		HX_STACK_VAR(tmp27,"tmp27");
								HX_STACK_LINE(536)
								Float tmp28 = (tmp26 * tmp27);		HX_STACK_VAR(tmp28,"tmp28");
								HX_STACK_LINE(536)
								Float tmp29 = this->z;		HX_STACK_VAR(tmp29,"tmp29");
								HX_STACK_LINE(536)
								Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
								HX_STACK_LINE(536)
								Float tmp31 = (tmp29 * tmp30);		HX_STACK_VAR(tmp31,"tmp31");
								HX_STACK_LINE(536)
								Float tmp32 = (tmp28 - tmp31);		HX_STACK_VAR(tmp32,"tmp32");
								HX_STACK_LINE(536)
								Float tmp33 = ((int)2 * tmp32);		HX_STACK_VAR(tmp33,"tmp33");
								HX_STACK_LINE(536)
								Float tmp34 = (sqw - sqx);		HX_STACK_VAR(tmp34,"tmp34");
								HX_STACK_LINE(536)
								Float tmp35 = sqy;		HX_STACK_VAR(tmp35,"tmp35");
								HX_STACK_LINE(536)
								Float tmp36 = (tmp34 + tmp35);		HX_STACK_VAR(tmp36,"tmp36");
								HX_STACK_LINE(536)
								Float tmp37 = sqz;		HX_STACK_VAR(tmp37,"tmp37");
								HX_STACK_LINE(536)
								Float tmp38 = (tmp36 - tmp37);		HX_STACK_VAR(tmp38,"tmp38");
								HX_STACK_LINE(536)
								Float tmp39 = ::Math_obj::atan2(tmp33,tmp38);		HX_STACK_VAR(tmp39,"tmp39");
								HX_STACK_LINE(536)
								_x = tmp39;
								HX_STACK_LINE(536)
								Float tmp40 = this->y;		HX_STACK_VAR(tmp40,"tmp40");
								HX_STACK_LINE(536)
								Float tmp41 = this->w;		HX_STACK_VAR(tmp41,"tmp41");
								HX_STACK_LINE(536)
								Float tmp42 = (tmp40 * tmp41);		HX_STACK_VAR(tmp42,"tmp42");
								HX_STACK_LINE(536)
								Float tmp43 = this->x;		HX_STACK_VAR(tmp43,"tmp43");
								HX_STACK_LINE(536)
								Float tmp44 = this->z;		HX_STACK_VAR(tmp44,"tmp44");
								HX_STACK_LINE(536)
								Float tmp45 = (tmp43 * tmp44);		HX_STACK_VAR(tmp45,"tmp45");
								HX_STACK_LINE(536)
								Float tmp46 = (tmp42 - tmp45);		HX_STACK_VAR(tmp46,"tmp46");
								HX_STACK_LINE(536)
								Float tmp47 = ((int)2 * tmp46);		HX_STACK_VAR(tmp47,"tmp47");
								HX_STACK_LINE(536)
								Float tmp48 = (sqw + sqx);		HX_STACK_VAR(tmp48,"tmp48");
								HX_STACK_LINE(536)
								Float tmp49 = sqy;		HX_STACK_VAR(tmp49,"tmp49");
								HX_STACK_LINE(536)
								Float tmp50 = (tmp48 - tmp49);		HX_STACK_VAR(tmp50,"tmp50");
								HX_STACK_LINE(536)
								Float tmp51 = sqz;		HX_STACK_VAR(tmp51,"tmp51");
								HX_STACK_LINE(536)
								Float tmp52 = (tmp50 - tmp51);		HX_STACK_VAR(tmp52,"tmp52");
								HX_STACK_LINE(536)
								Float tmp53 = ::Math_obj::atan2(tmp47,tmp52);		HX_STACK_VAR(tmp53,"tmp53");
								HX_STACK_LINE(536)
								_y = tmp53;
								HX_STACK_LINE(536)
								Float tmp54;		HX_STACK_VAR(tmp54,"tmp54");
								HX_STACK_LINE(536)
								{
									HX_STACK_LINE(536)
									Float tmp55 = this->x;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(536)
									Float tmp56 = this->y;		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(536)
									Float tmp57 = (tmp55 * tmp56);		HX_STACK_VAR(tmp57,"tmp57");
									HX_STACK_LINE(536)
									Float tmp58 = this->z;		HX_STACK_VAR(tmp58,"tmp58");
									HX_STACK_LINE(536)
									Float tmp59 = this->w;		HX_STACK_VAR(tmp59,"tmp59");
									HX_STACK_LINE(536)
									Float tmp60 = (tmp58 * tmp59);		HX_STACK_VAR(tmp60,"tmp60");
									HX_STACK_LINE(536)
									Float tmp61 = (tmp57 + tmp60);		HX_STACK_VAR(tmp61,"tmp61");
									HX_STACK_LINE(536)
									Float tmp62 = ((int)2 * tmp61);		HX_STACK_VAR(tmp62,"tmp62");
									HX_STACK_LINE(536)
									Float value = tmp62;		HX_STACK_VAR(value,"value");
									HX_STACK_LINE(536)
									bool tmp63 = (value < (int)-1);		HX_STACK_VAR(tmp63,"tmp63");
									HX_STACK_LINE(536)
									if ((tmp63)){
										HX_STACK_LINE(536)
										tmp54 = (int)-1;
									}
									else{
										HX_STACK_LINE(536)
										bool tmp64 = (value > (int)1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(536)
										if ((tmp64)){
											HX_STACK_LINE(536)
											tmp54 = (int)1;
										}
										else{
											HX_STACK_LINE(536)
											tmp54 = value;
										}
									}
								}
								HX_STACK_LINE(536)
								Float tmp55 = ::Math_obj::asin(tmp54);		HX_STACK_VAR(tmp55,"tmp55");
								HX_STACK_LINE(536)
								_z = tmp55;
							}
							else{
								HX_STACK_LINE(536)
								bool tmp26 = (order == (int)5);		HX_STACK_VAR(tmp26,"tmp26");
								HX_STACK_LINE(536)
								if ((tmp26)){
									HX_STACK_LINE(536)
									Float tmp27 = this->x;		HX_STACK_VAR(tmp27,"tmp27");
									HX_STACK_LINE(536)
									Float tmp28 = this->w;		HX_STACK_VAR(tmp28,"tmp28");
									HX_STACK_LINE(536)
									Float tmp29 = (tmp27 * tmp28);		HX_STACK_VAR(tmp29,"tmp29");
									HX_STACK_LINE(536)
									Float tmp30 = this->y;		HX_STACK_VAR(tmp30,"tmp30");
									HX_STACK_LINE(536)
									Float tmp31 = this->z;		HX_STACK_VAR(tmp31,"tmp31");
									HX_STACK_LINE(536)
									Float tmp32 = (tmp30 * tmp31);		HX_STACK_VAR(tmp32,"tmp32");
									HX_STACK_LINE(536)
									Float tmp33 = (tmp29 + tmp32);		HX_STACK_VAR(tmp33,"tmp33");
									HX_STACK_LINE(536)
									Float tmp34 = ((int)2 * tmp33);		HX_STACK_VAR(tmp34,"tmp34");
									HX_STACK_LINE(536)
									Float tmp35 = (sqw - sqx);		HX_STACK_VAR(tmp35,"tmp35");
									HX_STACK_LINE(536)
									Float tmp36 = sqy;		HX_STACK_VAR(tmp36,"tmp36");
									HX_STACK_LINE(536)
									Float tmp37 = (tmp35 + tmp36);		HX_STACK_VAR(tmp37,"tmp37");
									HX_STACK_LINE(536)
									Float tmp38 = sqz;		HX_STACK_VAR(tmp38,"tmp38");
									HX_STACK_LINE(536)
									Float tmp39 = (tmp37 - tmp38);		HX_STACK_VAR(tmp39,"tmp39");
									HX_STACK_LINE(536)
									Float tmp40 = ::Math_obj::atan2(tmp34,tmp39);		HX_STACK_VAR(tmp40,"tmp40");
									HX_STACK_LINE(536)
									_x = tmp40;
									HX_STACK_LINE(536)
									Float tmp41 = this->x;		HX_STACK_VAR(tmp41,"tmp41");
									HX_STACK_LINE(536)
									Float tmp42 = this->z;		HX_STACK_VAR(tmp42,"tmp42");
									HX_STACK_LINE(536)
									Float tmp43 = (tmp41 * tmp42);		HX_STACK_VAR(tmp43,"tmp43");
									HX_STACK_LINE(536)
									Float tmp44 = this->y;		HX_STACK_VAR(tmp44,"tmp44");
									HX_STACK_LINE(536)
									Float tmp45 = this->w;		HX_STACK_VAR(tmp45,"tmp45");
									HX_STACK_LINE(536)
									Float tmp46 = (tmp44 * tmp45);		HX_STACK_VAR(tmp46,"tmp46");
									HX_STACK_LINE(536)
									Float tmp47 = (tmp43 + tmp46);		HX_STACK_VAR(tmp47,"tmp47");
									HX_STACK_LINE(536)
									Float tmp48 = ((int)2 * tmp47);		HX_STACK_VAR(tmp48,"tmp48");
									HX_STACK_LINE(536)
									Float tmp49 = (sqw + sqx);		HX_STACK_VAR(tmp49,"tmp49");
									HX_STACK_LINE(536)
									Float tmp50 = sqy;		HX_STACK_VAR(tmp50,"tmp50");
									HX_STACK_LINE(536)
									Float tmp51 = (tmp49 - tmp50);		HX_STACK_VAR(tmp51,"tmp51");
									HX_STACK_LINE(536)
									Float tmp52 = sqz;		HX_STACK_VAR(tmp52,"tmp52");
									HX_STACK_LINE(536)
									Float tmp53 = (tmp51 - tmp52);		HX_STACK_VAR(tmp53,"tmp53");
									HX_STACK_LINE(536)
									Float tmp54 = ::Math_obj::atan2(tmp48,tmp53);		HX_STACK_VAR(tmp54,"tmp54");
									HX_STACK_LINE(536)
									_y = tmp54;
									HX_STACK_LINE(536)
									Float tmp55;		HX_STACK_VAR(tmp55,"tmp55");
									HX_STACK_LINE(536)
									{
										HX_STACK_LINE(536)
										Float tmp56 = this->z;		HX_STACK_VAR(tmp56,"tmp56");
										HX_STACK_LINE(536)
										Float tmp57 = this->w;		HX_STACK_VAR(tmp57,"tmp57");
										HX_STACK_LINE(536)
										Float tmp58 = (tmp56 * tmp57);		HX_STACK_VAR(tmp58,"tmp58");
										HX_STACK_LINE(536)
										Float tmp59 = this->x;		HX_STACK_VAR(tmp59,"tmp59");
										HX_STACK_LINE(536)
										Float tmp60 = this->y;		HX_STACK_VAR(tmp60,"tmp60");
										HX_STACK_LINE(536)
										Float tmp61 = (tmp59 * tmp60);		HX_STACK_VAR(tmp61,"tmp61");
										HX_STACK_LINE(536)
										Float tmp62 = (tmp58 - tmp61);		HX_STACK_VAR(tmp62,"tmp62");
										HX_STACK_LINE(536)
										Float tmp63 = ((int)2 * tmp62);		HX_STACK_VAR(tmp63,"tmp63");
										HX_STACK_LINE(536)
										Float value = tmp63;		HX_STACK_VAR(value,"value");
										HX_STACK_LINE(536)
										bool tmp64 = (value < (int)-1);		HX_STACK_VAR(tmp64,"tmp64");
										HX_STACK_LINE(536)
										if ((tmp64)){
											HX_STACK_LINE(536)
											tmp55 = (int)-1;
										}
										else{
											HX_STACK_LINE(536)
											bool tmp65 = (value > (int)1);		HX_STACK_VAR(tmp65,"tmp65");
											HX_STACK_LINE(536)
											if ((tmp65)){
												HX_STACK_LINE(536)
												tmp55 = (int)1;
											}
											else{
												HX_STACK_LINE(536)
												tmp55 = value;
											}
										}
									}
									HX_STACK_LINE(536)
									Float tmp56 = ::Math_obj::asin(tmp55);		HX_STACK_VAR(tmp56,"tmp56");
									HX_STACK_LINE(536)
									_z = tmp56;
								}
							}
						}
					}
				}
			}
			HX_STACK_LINE(536)
			{
				HX_STACK_LINE(536)
				bool prev = _this->ignore_listeners;		HX_STACK_VAR(prev,"prev");
				HX_STACK_LINE(536)
				_this->ignore_listeners = true;
				HX_STACK_LINE(536)
				{
					HX_STACK_LINE(536)
					_this->x = _x;
					HX_STACK_LINE(536)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(536)
					if ((tmp22)){
						HX_STACK_LINE(536)
						_this->x;
					}
					else{
						HX_STACK_LINE(536)
						bool tmp23 = (_this->listen_x != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(536)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(536)
						if ((tmp23)){
							HX_STACK_LINE(536)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(536)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(536)
							tmp24 = false;
						}
						HX_STACK_LINE(536)
						if ((tmp24)){
							HX_STACK_LINE(536)
							Float tmp25 = _x;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							_this->listen_x(tmp25);
						}
						HX_STACK_LINE(536)
						_this->x;
					}
				}
				HX_STACK_LINE(536)
				{
					HX_STACK_LINE(536)
					_this->y = _y;
					HX_STACK_LINE(536)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(536)
					if ((tmp22)){
						HX_STACK_LINE(536)
						_this->y;
					}
					else{
						HX_STACK_LINE(536)
						bool tmp23 = (_this->listen_y != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(536)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(536)
						if ((tmp23)){
							HX_STACK_LINE(536)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(536)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(536)
							tmp24 = false;
						}
						HX_STACK_LINE(536)
						if ((tmp24)){
							HX_STACK_LINE(536)
							Float tmp25 = _y;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							_this->listen_y(tmp25);
						}
						HX_STACK_LINE(536)
						_this->y;
					}
				}
				HX_STACK_LINE(536)
				{
					HX_STACK_LINE(536)
					_this->z = _z;
					HX_STACK_LINE(536)
					bool tmp22 = _this->_construct;		HX_STACK_VAR(tmp22,"tmp22");
					HX_STACK_LINE(536)
					if ((tmp22)){
						HX_STACK_LINE(536)
						_this->z;
					}
					else{
						HX_STACK_LINE(536)
						bool tmp23 = (_this->listen_z != null());		HX_STACK_VAR(tmp23,"tmp23");
						HX_STACK_LINE(536)
						bool tmp24;		HX_STACK_VAR(tmp24,"tmp24");
						HX_STACK_LINE(536)
						if ((tmp23)){
							HX_STACK_LINE(536)
							bool tmp25 = _this->ignore_listeners;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							bool tmp26 = tmp25;		HX_STACK_VAR(tmp26,"tmp26");
							HX_STACK_LINE(536)
							tmp24 = !(tmp26);
						}
						else{
							HX_STACK_LINE(536)
							tmp24 = false;
						}
						HX_STACK_LINE(536)
						if ((tmp24)){
							HX_STACK_LINE(536)
							Float tmp25 = _z;		HX_STACK_VAR(tmp25,"tmp25");
							HX_STACK_LINE(536)
							_this->listen_z(tmp25);
						}
						HX_STACK_LINE(536)
						_this->z;
					}
				}
				HX_STACK_LINE(536)
				_this->ignore_listeners = prev;
				HX_STACK_LINE(536)
				bool tmp22 = (_this->listen_x != null());		HX_STACK_VAR(tmp22,"tmp22");
				HX_STACK_LINE(536)
				bool tmp23;		HX_STACK_VAR(tmp23,"tmp23");
				HX_STACK_LINE(536)
				if ((tmp22)){
					HX_STACK_LINE(536)
					bool tmp24 = _this->ignore_listeners;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(536)
					bool tmp25 = tmp24;		HX_STACK_VAR(tmp25,"tmp25");
					HX_STACK_LINE(536)
					tmp23 = !(tmp25);
				}
				else{
					HX_STACK_LINE(536)
					tmp23 = false;
				}
				HX_STACK_LINE(536)
				if ((tmp23)){
					HX_STACK_LINE(536)
					Float tmp24 = _this->x;		HX_STACK_VAR(tmp24,"tmp24");
					HX_STACK_LINE(536)
					_this->listen_x(tmp24);
				}
				HX_STACK_LINE(536)
				bool tmp24 = (_this->listen_y != null());		HX_STACK_VAR(tmp24,"tmp24");
				HX_STACK_LINE(536)
				bool tmp25;		HX_STACK_VAR(tmp25,"tmp25");
				HX_STACK_LINE(536)
				if ((tmp24)){
					HX_STACK_LINE(536)
					bool tmp26 = _this->ignore_listeners;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(536)
					bool tmp27 = tmp26;		HX_STACK_VAR(tmp27,"tmp27");
					HX_STACK_LINE(536)
					tmp25 = !(tmp27);
				}
				else{
					HX_STACK_LINE(536)
					tmp25 = false;
				}
				HX_STACK_LINE(536)
				if ((tmp25)){
					HX_STACK_LINE(536)
					Float tmp26 = _this->y;		HX_STACK_VAR(tmp26,"tmp26");
					HX_STACK_LINE(536)
					_this->listen_y(tmp26);
				}
				HX_STACK_LINE(536)
				bool tmp26 = (_this->listen_z != null());		HX_STACK_VAR(tmp26,"tmp26");
				HX_STACK_LINE(536)
				bool tmp27;		HX_STACK_VAR(tmp27,"tmp27");
				HX_STACK_LINE(536)
				if ((tmp26)){
					HX_STACK_LINE(536)
					bool tmp28 = _this->ignore_listeners;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(536)
					bool tmp29 = tmp28;		HX_STACK_VAR(tmp29,"tmp29");
					HX_STACK_LINE(536)
					tmp27 = !(tmp29);
				}
				else{
					HX_STACK_LINE(536)
					tmp27 = false;
				}
				HX_STACK_LINE(536)
				if ((tmp27)){
					HX_STACK_LINE(536)
					Float tmp28 = _this->z;		HX_STACK_VAR(tmp28,"tmp28");
					HX_STACK_LINE(536)
					_this->listen_z(tmp28);
				}
				HX_STACK_LINE(536)
				_this;
			}
			HX_STACK_LINE(536)
			_this;
		}
	}
	HX_STACK_LINE(538)
	Dynamic tmp1 = this->listen_w_dyn();		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(538)
	bool tmp2 = (tmp1 != null());		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(538)
	bool tmp3;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(538)
	if ((tmp2)){
		HX_STACK_LINE(538)
		bool tmp4 = this->ignore_listeners;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(538)
		bool tmp5 = tmp4;		HX_STACK_VAR(tmp5,"tmp5");
		HX_STACK_LINE(538)
		bool tmp6 = tmp5;		HX_STACK_VAR(tmp6,"tmp6");
		HX_STACK_LINE(538)
		tmp3 = !(tmp6);
	}
	else{
		HX_STACK_LINE(538)
		tmp3 = false;
	}
	HX_STACK_LINE(538)
	if ((tmp3)){
		HX_STACK_LINE(538)
		Float tmp4 = this->w;		HX_STACK_VAR(tmp4,"tmp4");
		HX_STACK_LINE(538)
		this->listen_w(tmp4);
	}
	HX_STACK_LINE(540)
	Float tmp4 = this->w;		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(540)
	return tmp4;
}


HX_DEFINE_DYNAMIC_FUNC1(Quaternion_obj,set_w,return )

::phoenix::Quaternion Quaternion_obj::Add( ::phoenix::Quaternion _a,::phoenix::Quaternion _b){
	HX_STACK_FRAME("phoenix.Quaternion","Add",0x41b350d0,"phoenix.Quaternion.Add","phoenix/Quaternion.hx",274,0x23671680)
	HX_STACK_ARG(_a,"_a")
	HX_STACK_ARG(_b,"_b")
	HX_STACK_LINE(275)
	::phoenix::Quaternion tmp = _a->clone();		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(275)
	::phoenix::Quaternion tmp1 = _b;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(275)
	::phoenix::Quaternion tmp2 = tmp->add(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(275)
	return tmp2;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,Add,return )

::phoenix::Quaternion Quaternion_obj::Multiply( ::phoenix::Quaternion _a,::phoenix::Quaternion _b){
	HX_STACK_FRAME("phoenix.Quaternion","Multiply",0x20e2e915,"phoenix.Quaternion.Multiply","phoenix/Quaternion.hx",278,0x23671680)
	HX_STACK_ARG(_a,"_a")
	HX_STACK_ARG(_b,"_b")
	HX_STACK_LINE(279)
	::phoenix::Quaternion tmp = _a->clone();		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(279)
	::phoenix::Quaternion tmp1 = _b;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(279)
	::phoenix::Quaternion tmp2 = tmp->multiply(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(279)
	return tmp2;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,Multiply,return )

::phoenix::Quaternion Quaternion_obj::MultiplyScalar( ::phoenix::Quaternion _quaternion,Float _scalar){
	HX_STACK_FRAME("phoenix.Quaternion","MultiplyScalar",0xd974c221,"phoenix.Quaternion.MultiplyScalar","phoenix/Quaternion.hx",282,0x23671680)
	HX_STACK_ARG(_quaternion,"_quaternion")
	HX_STACK_ARG(_scalar,"_scalar")
	HX_STACK_LINE(283)
	::phoenix::Quaternion tmp = _quaternion->clone();		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(283)
	Float tmp1 = _scalar;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(283)
	::phoenix::Quaternion tmp2 = tmp->multiplyScalar(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(283)
	return tmp2;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,MultiplyScalar,return )

::phoenix::Quaternion Quaternion_obj::Slerp( ::phoenix::Quaternion _qa,::phoenix::Quaternion _qb,::phoenix::Quaternion _qm,Float _t){
	HX_STACK_FRAME("phoenix.Quaternion","Slerp",0xf44670d9,"phoenix.Quaternion.Slerp","phoenix/Quaternion.hx",428,0x23671680)
	HX_STACK_ARG(_qa,"_qa")
	HX_STACK_ARG(_qb,"_qb")
	HX_STACK_ARG(_qm,"_qm")
	HX_STACK_ARG(_t,"_t")
	HX_STACK_LINE(430)
	::phoenix::Quaternion tmp = _qa;		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(430)
	::phoenix::Quaternion tmp1 = _qm->copy(tmp);		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(430)
	::phoenix::Quaternion tmp2 = _qb;		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(430)
	Float tmp3 = _t;		HX_STACK_VAR(tmp3,"tmp3");
	HX_STACK_LINE(430)
	::phoenix::Quaternion tmp4 = tmp1->slerp(tmp2,tmp3);		HX_STACK_VAR(tmp4,"tmp4");
	HX_STACK_LINE(430)
	return tmp4;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Quaternion_obj,Slerp,return )

Float Quaternion_obj::Dot( ::phoenix::Quaternion _a,::phoenix::Quaternion _b){
	HX_STACK_FRAME("phoenix.Quaternion","Dot",0x41b5a138,"phoenix.Quaternion.Dot","phoenix/Quaternion.hx",434,0x23671680)
	HX_STACK_ARG(_a,"_a")
	HX_STACK_ARG(_b,"_b")
	HX_STACK_LINE(435)
	::phoenix::Quaternion tmp = ::phoenix::Quaternion_obj::__new(_a->x,_a->y,_a->z,_a->w);		HX_STACK_VAR(tmp,"tmp");
	HX_STACK_LINE(435)
	::phoenix::Quaternion tmp1 = _b;		HX_STACK_VAR(tmp1,"tmp1");
	HX_STACK_LINE(435)
	Float tmp2 = tmp->dot(tmp1);		HX_STACK_VAR(tmp2,"tmp2");
	HX_STACK_LINE(435)
	return tmp2;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,Dot,return )

Void Quaternion_obj::Listen( ::phoenix::Quaternion _q,Dynamic listener){
{
		HX_STACK_FRAME("phoenix.Quaternion","Listen",0x4beb80f8,"phoenix.Quaternion.Listen","phoenix/Quaternion.hx",544,0x23671680)
		HX_STACK_ARG(_q,"_q")
		HX_STACK_ARG(listener,"listener")
		HX_STACK_LINE(546)
		_q->listen_x = listener;
		HX_STACK_LINE(547)
		_q->listen_y = listener;
		HX_STACK_LINE(548)
		_q->listen_z = listener;
		HX_STACK_LINE(549)
		_q->listen_w = listener;
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Quaternion_obj,Listen,(void))


Quaternion_obj::Quaternion_obj()
{
}

void Quaternion_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Quaternion);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(euler,"euler");
	HX_MARK_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_MARK_MEMBER_NAME(listen_x,"listen_x");
	HX_MARK_MEMBER_NAME(listen_y,"listen_y");
	HX_MARK_MEMBER_NAME(listen_z,"listen_z");
	HX_MARK_MEMBER_NAME(listen_w,"listen_w");
	HX_MARK_MEMBER_NAME(_construct,"_construct");
	HX_MARK_MEMBER_NAME(ignore_euler,"ignore_euler");
	HX_MARK_END_CLASS();
}

void Quaternion_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(euler,"euler");
	HX_VISIT_MEMBER_NAME(ignore_listeners,"ignore_listeners");
	HX_VISIT_MEMBER_NAME(listen_x,"listen_x");
	HX_VISIT_MEMBER_NAME(listen_y,"listen_y");
	HX_VISIT_MEMBER_NAME(listen_z,"listen_z");
	HX_VISIT_MEMBER_NAME(listen_w,"listen_w");
	HX_VISIT_MEMBER_NAME(_construct,"_construct");
	HX_VISIT_MEMBER_NAME(ignore_euler,"ignore_euler");
}

Dynamic Quaternion_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return x; }
		if (HX_FIELD_EQ(inName,"y") ) { return y; }
		if (HX_FIELD_EQ(inName,"z") ) { return z; }
		if (HX_FIELD_EQ(inName,"w") ) { return w; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return set_dyn(); }
		if (HX_FIELD_EQ(inName,"dot") ) { return dot_dyn(); }
		if (HX_FIELD_EQ(inName,"add") ) { return add_dyn(); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return copy_dyn(); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"euler") ) { return euler; }
		if (HX_FIELD_EQ(inName,"slerp") ) { return slerp_dyn(); }
		if (HX_FIELD_EQ(inName,"clone") ) { return clone_dyn(); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return set_x_dyn(); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return set_y_dyn(); }
		if (HX_FIELD_EQ(inName,"set_z") ) { return set_z_dyn(); }
		if (HX_FIELD_EQ(inName,"set_w") ) { return set_w_dyn(); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return length_dyn(); }
		if (HX_FIELD_EQ(inName,"equals") ) { return equals_dyn(); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"inverse") ) { return inverse_dyn(); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return toArray_dyn(); }
		if (HX_FIELD_EQ(inName,"toeuler") ) { return toeuler_dyn(); }
		if (HX_FIELD_EQ(inName,"set_xyz") ) { return set_xyz_dyn(); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listen_x") ) { return listen_x; }
		if (HX_FIELD_EQ(inName,"listen_y") ) { return listen_y; }
		if (HX_FIELD_EQ(inName,"listen_z") ) { return listen_z; }
		if (HX_FIELD_EQ(inName,"listen_w") ) { return listen_w; }
		if (HX_FIELD_EQ(inName,"toString") ) { return toString_dyn(); }
		if (HX_FIELD_EQ(inName,"lengthSq") ) { return lengthSq_dyn(); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return multiply_dyn(); }
		if (HX_FIELD_EQ(inName,"set_xyzw") ) { return set_xyzw_dyn(); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"conjugate") ) { return conjugate_dyn(); }
		if (HX_FIELD_EQ(inName,"normalize") ) { return normalize_dyn(); }
		if (HX_FIELD_EQ(inName,"fromArray") ) { return fromArray_dyn(); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_construct") ) { return _construct; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setFromEuler") ) { return setFromEuler_dyn(); }
		if (HX_FIELD_EQ(inName,"update_euler") ) { return update_euler_dyn(); }
		if (HX_FIELD_EQ(inName,"ignore_euler") ) { return ignore_euler; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addQuaternions") ) { return addQuaternions_dyn(); }
		if (HX_FIELD_EQ(inName,"multiplyScalar") ) { return multiplyScalar_dyn(); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { return ignore_listeners; }
		if (HX_FIELD_EQ(inName,"setFromAxisAngle") ) { return setFromAxisAngle_dyn(); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"multiplyQuaternions") ) { return multiplyQuaternions_dyn(); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setFromRotationMatrix") ) { return setFromRotationMatrix_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

bool Quaternion_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"Add") ) { outValue = Add_dyn(); return true;  }
		if (HX_FIELD_EQ(inName,"Dot") ) { outValue = Dot_dyn(); return true;  }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"Slerp") ) { outValue = Slerp_dyn(); return true;  }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Listen") ) { outValue = Listen_dyn(); return true;  }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Multiply") ) { outValue = Multiply_dyn(); return true;  }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"MultiplyScalar") ) { outValue = MultiplyScalar_dyn(); return true;  }
	}
	return false;
}

Dynamic Quaternion_obj::__SetField(const ::String &inName,const Dynamic &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return set_x(inValue);x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return set_y(inValue);y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { if (inCallProp == hx::paccAlways) return set_z(inValue);z=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { if (inCallProp == hx::paccAlways) return set_w(inValue);w=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"euler") ) { euler=inValue.Cast< ::phoenix::Vector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listen_x") ) { listen_x=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_y") ) { listen_y=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_z") ) { listen_z=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listen_w") ) { listen_w=inValue.Cast< Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_construct") ) { _construct=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"ignore_euler") ) { ignore_euler=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignore_listeners") ) { ignore_listeners=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Quaternion_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	return false;
}

void Quaternion_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("euler","\x69","\xd9","\x20","\x75"));
	outFields->push(HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"));
	outFields->push(HX_HCSTRING("_construct","\xd8","\xd3","\x4f","\xab"));
	outFields->push(HX_HCSTRING("ignore_euler","\x3c","\xf3","\x23","\x39"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Quaternion_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Quaternion_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Quaternion_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Quaternion_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsObject /*::phoenix::Vector*/ ,(int)offsetof(Quaternion_obj,euler),HX_HCSTRING("euler","\x69","\xd9","\x20","\x75")},
	{hx::fsBool,(int)offsetof(Quaternion_obj,ignore_listeners),HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Quaternion_obj,listen_x),HX_HCSTRING("listen_x","\x40","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Quaternion_obj,listen_y),HX_HCSTRING("listen_y","\x41","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Quaternion_obj,listen_z),HX_HCSTRING("listen_z","\x42","\xfb","\x31","\x38")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Quaternion_obj,listen_w),HX_HCSTRING("listen_w","\x3f","\xfb","\x31","\x38")},
	{hx::fsBool,(int)offsetof(Quaternion_obj,_construct),HX_HCSTRING("_construct","\xd8","\xd3","\x4f","\xab")},
	{hx::fsBool,(int)offsetof(Quaternion_obj,ignore_euler),HX_HCSTRING("ignore_euler","\x3c","\xf3","\x23","\x39")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *sStaticStorageInfo = 0;
#endif

static ::String sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("euler","\x69","\xd9","\x20","\x75"),
	HX_HCSTRING("ignore_listeners","\xd2","\x64","\x1e","\xf7"),
	HX_HCSTRING("listen_x","\x40","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_y","\x41","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_z","\x42","\xfb","\x31","\x38"),
	HX_HCSTRING("listen_w","\x3f","\xfb","\x31","\x38"),
	HX_HCSTRING("_construct","\xd8","\xd3","\x4f","\xab"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("dot","\x89","\x42","\x4c","\x00"),
	HX_HCSTRING("setFromEuler","\x9d","\x83","\xf9","\x4d"),
	HX_HCSTRING("setFromAxisAngle","\xa6","\x03","\xd2","\xb0"),
	HX_HCSTRING("setFromRotationMatrix","\x6b","\xd9","\xc3","\x9f"),
	HX_HCSTRING("inverse","\xb0","\x4b","\xf1","\x3d"),
	HX_HCSTRING("conjugate","\x18","\x36","\x89","\x42"),
	HX_HCSTRING("lengthSq","\x24","\x63","\xc3","\x1f"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addQuaternions","\xf4","\x74","\xd8","\xca"),
	HX_HCSTRING("multiplyScalar","\x70","\x70","\x21","\x48"),
	HX_HCSTRING("multiplyQuaternions","\xd1","\xcd","\xd9","\xef"),
	HX_HCSTRING("slerp","\x6a","\xc8","\xc4","\x7e"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toeuler","\x0e","\xb6","\x77","\xae"),
	HX_HCSTRING("update_euler","\x73","\x53","\x37","\x3c"),
	HX_HCSTRING("ignore_euler","\x3c","\xf3","\x23","\x39"),
	HX_HCSTRING("set_xyzw","\xfb","\xea","\xc5","\x7d"),
	HX_HCSTRING("set_xyz","\xfc","\xd1","\xd1","\x19"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_z","\x5d","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_w","\x5a","\x9b","\x2f","\x7a"),
	::String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Quaternion_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Quaternion_obj::__mClass,"__mClass");
};

#endif

hx::Class Quaternion_obj::__mClass;

static ::String sStaticFields[] = {
	HX_HCSTRING("Add","\x01","\xaa","\x31","\x00"),
	HX_HCSTRING("Multiply","\x44","\x9e","\x3e","\x74"),
	HX_HCSTRING("MultiplyScalar","\x90","\x04","\x77","\xf2"),
	HX_HCSTRING("Slerp","\x4a","\x38","\xf2","\x11"),
	HX_HCSTRING("Dot","\x69","\xfa","\x33","\x00"),
	HX_HCSTRING("Listen","\x67","\x3c","\x8e","\x24"),
	::String(null()) };

void Quaternion_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("phoenix.Quaternion","\xbd","\xb3","\x88","\xb2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Quaternion_obj::__GetStatic;
	__mClass->mSetStaticField = &Quaternion_obj::__SetStatic;
	__mClass->mMarkFunc = sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Quaternion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = sStaticStorageInfo;
#endif
	hx::RegisterClass(__mClass->mName, __mClass);
}

} // end namespace phoenix
